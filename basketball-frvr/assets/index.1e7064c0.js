(function() {
    'use strict';

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    var check = function(it) {
        return it && it.Math == Math && it;
    };

    // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
    var global$A =
        // eslint-disable-next-line es/no-global-this -- safe
        check(typeof globalThis == 'object' && globalThis) ||
        check(typeof window == 'object' && window) ||
        // eslint-disable-next-line no-restricted-globals -- safe
        check(typeof self == 'object' && self) ||
        check(typeof commonjsGlobal == 'object' && commonjsGlobal) ||
        // eslint-disable-next-line no-new-func -- fallback
        (function() {
            return this;
        })() || Function('return this')();

    var objectGetOwnPropertyDescriptor = {};

    var fails$x = function(exec) {
        try {
            return !!exec();
        } catch (error) {
            return true;
        }
    };

    var fails$w = fails$x;

    // Detect IE8's incomplete defineProperty implementation
    var descriptors = !fails$w(function() {
        // eslint-disable-next-line es/no-object-defineproperty -- required for testing
        return Object.defineProperty({}, 1, {
            get: function() {
                return 7;
            }
        })[1] != 7;
    });

    var objectPropertyIsEnumerable = {};

    var $propertyIsEnumerable$1 = {}.propertyIsEnumerable;
    // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
    var getOwnPropertyDescriptor$4 = Object.getOwnPropertyDescriptor;

    // Nashorn ~ JDK8 bug
    var NASHORN_BUG = getOwnPropertyDescriptor$4 && !$propertyIsEnumerable$1.call({
        1: 2
    }, 1);

    // `Object.prototype.propertyIsEnumerable` method implementation
    // https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable
    objectPropertyIsEnumerable.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
        var descriptor = getOwnPropertyDescriptor$4(this, V);
        return !!descriptor && descriptor.enumerable;
    } : $propertyIsEnumerable$1;

    var createPropertyDescriptor$6 = function(bitmap, value) {
        return {
            enumerable: !(bitmap & 1),
            configurable: !(bitmap & 2),
            writable: !(bitmap & 4),
            value: value
        };
    };

    var toString$i = {}.toString;

    var classofRaw$1 = function(it) {
        return toString$i.call(it).slice(8, -1);
    };

    var fails$v = fails$x;
    var classof$a = classofRaw$1;

    var split = ''.split;

    // fallback for non-array-like ES3 and non-enumerable old V8 strings
    var indexedObject = fails$v(function() {
        // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
        // eslint-disable-next-line no-prototype-builtins -- safe
        return !Object('z').propertyIsEnumerable(0);
    }) ? function(it) {
        return classof$a(it) == 'String' ? split.call(it, '') : Object(it);
    } : Object;

    // `RequireObjectCoercible` abstract operation
    // https://tc39.es/ecma262/#sec-requireobjectcoercible
    var requireObjectCoercible$b = function(it) {
        if (it == undefined) throw TypeError("Can't call method on " + it);
        return it;
    };

    // toObject with fallback for non-array-like ES3 strings
    var IndexedObject$4 = indexedObject;
    var requireObjectCoercible$a = requireObjectCoercible$b;

    var toIndexedObject$a = function(it) {
        return IndexedObject$4(requireObjectCoercible$a(it));
    };

    var isObject$i = function(it) {
        return typeof it === 'object' ? it !== null : typeof it === 'function';
    };

    var global$z = global$A;

    var aFunction$8 = function(variable) {
        return typeof variable == 'function' ? variable : undefined;
    };

    var getBuiltIn$7 = function(namespace, method) {
        return arguments.length < 2 ? aFunction$8(global$z[namespace]) : global$z[namespace] && global$z[namespace][method];
    };

    var getBuiltIn$6 = getBuiltIn$7;

    var engineUserAgent = getBuiltIn$6('navigator', 'userAgent') || '';

    var global$y = global$A;
    var userAgent$5 = engineUserAgent;

    var process$3 = global$y.process;
    var Deno = global$y.Deno;
    var versions = process$3 && process$3.versions || Deno && Deno.version;
    var v8 = versions && versions.v8;
    var match, version;

    if (v8) {
        match = v8.split('.');
        version = match[0] < 4 ? 1 : match[0] + match[1];
    } else if (userAgent$5) {
        match = userAgent$5.match(/Edge\/(\d+)/);
        if (!match || match[1] >= 74) {
            match = userAgent$5.match(/Chrome\/(\d+)/);
            if (match) version = match[1];
        }
    }

    var engineV8Version = version && +version;

    /* eslint-disable es/no-symbol -- required for testing */

    var V8_VERSION$3 = engineV8Version;
    var fails$u = fails$x;

    // eslint-disable-next-line es/no-object-getownpropertysymbols -- required for testing
    var nativeSymbol = !!Object.getOwnPropertySymbols && !fails$u(function() {
        var symbol = Symbol();
        // Chrome 38 Symbol has incorrect toString conversion
        // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances
        return !String(symbol) || !(Object(symbol) instanceof Symbol) ||
            // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
            !Symbol.sham && V8_VERSION$3 && V8_VERSION$3 < 41;
    });

    /* eslint-disable es/no-symbol -- required for testing */

    var NATIVE_SYMBOL$2 = nativeSymbol;

    var useSymbolAsUid = NATIVE_SYMBOL$2 &&
        !Symbol.sham &&
        typeof Symbol.iterator == 'symbol';

    var getBuiltIn$5 = getBuiltIn$7;
    var USE_SYMBOL_AS_UID$1 = useSymbolAsUid;

    var isSymbol$6 = USE_SYMBOL_AS_UID$1 ? function(it) {
        return typeof it == 'symbol';
    } : function(it) {
        var $Symbol = getBuiltIn$5('Symbol');
        return typeof $Symbol == 'function' && Object(it) instanceof $Symbol;
    };

    var isObject$h = isObject$i;

    // `OrdinaryToPrimitive` abstract operation
    // https://tc39.es/ecma262/#sec-ordinarytoprimitive
    var ordinaryToPrimitive$1 = function(input, pref) {
        var fn, val;
        if (pref === 'string' && typeof(fn = input.toString) == 'function' && !isObject$h(val = fn.call(input))) return val;
        if (typeof(fn = input.valueOf) == 'function' && !isObject$h(val = fn.call(input))) return val;
        if (pref !== 'string' && typeof(fn = input.toString) == 'function' && !isObject$h(val = fn.call(input))) return val;
        throw TypeError("Can't convert object to primitive value");
    };

    var shared$5 = {
        exports: {}
    };

    var global$x = global$A;

    var setGlobal$3 = function(key, value) {
        try {
            // eslint-disable-next-line es/no-object-defineproperty -- safe
            Object.defineProperty(global$x, key, {
                value: value,
                configurable: true,
                writable: true
            });
        } catch (error) {
            global$x[key] = value;
        }
        return value;
    };

    var global$w = global$A;
    var setGlobal$2 = setGlobal$3;

    var SHARED = '__core-js_shared__';
    var store$3 = global$w[SHARED] || setGlobal$2(SHARED, {});

    var sharedStore = store$3;

    var store$2 = sharedStore;

    (shared$5.exports = function(key, value) {
        return store$2[key] || (store$2[key] = value !== undefined ? value : {});
    })('versions', []).push({
        version: '3.16.1',
        mode: 'global',
        copyright: 'Â© 2021 Denis Pushkarev (zloirock.ru)'
    });

    var requireObjectCoercible$9 = requireObjectCoercible$b;

    // `ToObject` abstract operation
    // https://tc39.es/ecma262/#sec-toobject
    var toObject$g = function(argument) {
        return Object(requireObjectCoercible$9(argument));
    };

    var toObject$f = toObject$g;

    var hasOwnProperty = {}.hasOwnProperty;

    var has$g = Object.hasOwn || function hasOwn(it, key) {
        return hasOwnProperty.call(toObject$f(it), key);
    };

    var id = 0;
    var postfix = Math.random();

    var uid$4 = function(key) {
        return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + (++id + postfix).toString(36);
    };

    var global$v = global$A;
    var shared$4 = shared$5.exports;
    var has$f = has$g;
    var uid$3 = uid$4;
    var NATIVE_SYMBOL$1 = nativeSymbol;
    var USE_SYMBOL_AS_UID = useSymbolAsUid;

    var WellKnownSymbolsStore$1 = shared$4('wks');
    var Symbol$1 = global$v.Symbol;
    var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol$1 : Symbol$1 && Symbol$1.withoutSetter || uid$3;

    var wellKnownSymbol$r = function(name) {
        if (!has$f(WellKnownSymbolsStore$1, name) || !(NATIVE_SYMBOL$1 || typeof WellKnownSymbolsStore$1[name] == 'string')) {
            if (NATIVE_SYMBOL$1 && has$f(Symbol$1, name)) {
                WellKnownSymbolsStore$1[name] = Symbol$1[name];
            } else {
                WellKnownSymbolsStore$1[name] = createWellKnownSymbol('Symbol.' + name);
            }
        }
        return WellKnownSymbolsStore$1[name];
    };

    var isObject$g = isObject$i;
    var isSymbol$5 = isSymbol$6;
    var ordinaryToPrimitive = ordinaryToPrimitive$1;
    var wellKnownSymbol$q = wellKnownSymbol$r;

    var TO_PRIMITIVE$1 = wellKnownSymbol$q('toPrimitive');

    // `ToPrimitive` abstract operation
    // https://tc39.es/ecma262/#sec-toprimitive
    var toPrimitive$2 = function(input, pref) {
        if (!isObject$g(input) || isSymbol$5(input)) return input;
        var exoticToPrim = input[TO_PRIMITIVE$1];
        var result;
        if (exoticToPrim !== undefined) {
            if (pref === undefined) pref = 'default';
            result = exoticToPrim.call(input, pref);
            if (!isObject$g(result) || isSymbol$5(result)) return result;
            throw TypeError("Can't convert object to primitive value");
        }
        if (pref === undefined) pref = 'number';
        return ordinaryToPrimitive(input, pref);
    };

    var toPrimitive$1 = toPrimitive$2;
    var isSymbol$4 = isSymbol$6;

    // `ToPropertyKey` abstract operation
    // https://tc39.es/ecma262/#sec-topropertykey
    var toPropertyKey$5 = function(argument) {
        var key = toPrimitive$1(argument, 'string');
        return isSymbol$4(key) ? key : String(key);
    };

    var global$u = global$A;
    var isObject$f = isObject$i;

    var document$3 = global$u.document;
    // typeof document.createElement is 'object' in old IE
    var EXISTS = isObject$f(document$3) && isObject$f(document$3.createElement);

    var documentCreateElement$1 = function(it) {
        return EXISTS ? document$3.createElement(it) : {};
    };

    var DESCRIPTORS$f = descriptors;
    var fails$t = fails$x;
    var createElement$1 = documentCreateElement$1;

    // Thank's IE8 for his funny defineProperty
    var ie8DomDefine = !DESCRIPTORS$f && !fails$t(function() {
        // eslint-disable-next-line es/no-object-defineproperty -- requied for testing
        return Object.defineProperty(createElement$1('div'), 'a', {
            get: function() {
                return 7;
            }
        }).a != 7;
    });

    var DESCRIPTORS$e = descriptors;
    var propertyIsEnumerableModule$2 = objectPropertyIsEnumerable;
    var createPropertyDescriptor$5 = createPropertyDescriptor$6;
    var toIndexedObject$9 = toIndexedObject$a;
    var toPropertyKey$4 = toPropertyKey$5;
    var has$e = has$g;
    var IE8_DOM_DEFINE$1 = ie8DomDefine;

    // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
    var $getOwnPropertyDescriptor$1 = Object.getOwnPropertyDescriptor;

    // `Object.getOwnPropertyDescriptor` method
    // https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
    objectGetOwnPropertyDescriptor.f = DESCRIPTORS$e ? $getOwnPropertyDescriptor$1 : function getOwnPropertyDescriptor(O, P) {
        O = toIndexedObject$9(O);
        P = toPropertyKey$4(P);
        if (IE8_DOM_DEFINE$1) try {
            return $getOwnPropertyDescriptor$1(O, P);
        } catch (error) {
            /* empty */ }
        if (has$e(O, P)) return createPropertyDescriptor$5(!propertyIsEnumerableModule$2.f.call(O, P), O[P]);
    };

    var objectDefineProperty = {};

    var isObject$e = isObject$i;

    var anObject$h = function(it) {
        if (!isObject$e(it)) {
            throw TypeError(String(it) + ' is not an object');
        }
        return it;
    };

    var DESCRIPTORS$d = descriptors;
    var IE8_DOM_DEFINE = ie8DomDefine;
    var anObject$g = anObject$h;
    var toPropertyKey$3 = toPropertyKey$5;

    // eslint-disable-next-line es/no-object-defineproperty -- safe
    var $defineProperty$1 = Object.defineProperty;

    // `Object.defineProperty` method
    // https://tc39.es/ecma262/#sec-object.defineproperty
    objectDefineProperty.f = DESCRIPTORS$d ? $defineProperty$1 : function defineProperty(O, P, Attributes) {
        anObject$g(O);
        P = toPropertyKey$3(P);
        anObject$g(Attributes);
        if (IE8_DOM_DEFINE) try {
            return $defineProperty$1(O, P, Attributes);
        } catch (error) {
            /* empty */ }
        if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');
        if ('value' in Attributes) O[P] = Attributes.value;
        return O;
    };

    var DESCRIPTORS$c = descriptors;
    var definePropertyModule$7 = objectDefineProperty;
    var createPropertyDescriptor$4 = createPropertyDescriptor$6;

    var createNonEnumerableProperty$d = DESCRIPTORS$c ? function(object, key, value) {
        return definePropertyModule$7.f(object, key, createPropertyDescriptor$4(1, value));
    } : function(object, key, value) {
        object[key] = value;
        return object;
    };

    var redefine$b = {
        exports: {}
    };

    var store$1 = sharedStore;

    var functionToString = Function.toString;

    // this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper
    if (typeof store$1.inspectSource != 'function') {
        store$1.inspectSource = function(it) {
            return functionToString.call(it);
        };
    }

    var inspectSource$3 = store$1.inspectSource;

    var global$t = global$A;
    var inspectSource$2 = inspectSource$3;

    var WeakMap$1 = global$t.WeakMap;

    var nativeWeakMap = typeof WeakMap$1 === 'function' && /native code/.test(inspectSource$2(WeakMap$1));

    var shared$3 = shared$5.exports;
    var uid$2 = uid$4;

    var keys$3 = shared$3('keys');

    var sharedKey$4 = function(key) {
        return keys$3[key] || (keys$3[key] = uid$2(key));
    };

    var hiddenKeys$5 = {};

    var NATIVE_WEAK_MAP = nativeWeakMap;
    var global$s = global$A;
    var isObject$d = isObject$i;
    var createNonEnumerableProperty$c = createNonEnumerableProperty$d;
    var objectHas = has$g;
    var shared$2 = sharedStore;
    var sharedKey$3 = sharedKey$4;
    var hiddenKeys$4 = hiddenKeys$5;

    var OBJECT_ALREADY_INITIALIZED = 'Object already initialized';
    var WeakMap = global$s.WeakMap;
    var set$2, get$1, has$d;

    var enforce = function(it) {
        return has$d(it) ? get$1(it) : set$2(it, {});
    };

    var getterFor = function(TYPE) {
        return function(it) {
            var state;
            if (!isObject$d(it) || (state = get$1(it)).type !== TYPE) {
                throw TypeError('Incompatible receiver, ' + TYPE + ' required');
            }
            return state;
        };
    };

    if (NATIVE_WEAK_MAP || shared$2.state) {
        var store = shared$2.state || (shared$2.state = new WeakMap());
        var wmget = store.get;
        var wmhas = store.has;
        var wmset = store.set;
        set$2 = function(it, metadata) {
            if (wmhas.call(store, it)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);
            metadata.facade = it;
            wmset.call(store, it, metadata);
            return metadata;
        };
        get$1 = function(it) {
            return wmget.call(store, it) || {};
        };
        has$d = function(it) {
            return wmhas.call(store, it);
        };
    } else {
        var STATE = sharedKey$3('state');
        hiddenKeys$4[STATE] = true;
        set$2 = function(it, metadata) {
            if (objectHas(it, STATE)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);
            metadata.facade = it;
            createNonEnumerableProperty$c(it, STATE, metadata);
            return metadata;
        };
        get$1 = function(it) {
            return objectHas(it, STATE) ? it[STATE] : {};
        };
        has$d = function(it) {
            return objectHas(it, STATE);
        };
    }

    var internalState = {
        set: set$2,
        get: get$1,
        has: has$d,
        enforce: enforce,
        getterFor: getterFor
    };

    var global$r = global$A;
    var createNonEnumerableProperty$b = createNonEnumerableProperty$d;
    var has$c = has$g;
    var setGlobal$1 = setGlobal$3;
    var inspectSource$1 = inspectSource$3;
    var InternalStateModule$6 = internalState;

    var getInternalState$7 = InternalStateModule$6.get;
    var enforceInternalState$1 = InternalStateModule$6.enforce;
    var TEMPLATE = String(String).split('String');

    (redefine$b.exports = function(O, key, value, options) {
        var unsafe = options ? !!options.unsafe : false;
        var simple = options ? !!options.enumerable : false;
        var noTargetGet = options ? !!options.noTargetGet : false;
        var state;
        if (typeof value == 'function') {
            if (typeof key == 'string' && !has$c(value, 'name')) {
                createNonEnumerableProperty$b(value, 'name', key);
            }
            state = enforceInternalState$1(value);
            if (!state.source) {
                state.source = TEMPLATE.join(typeof key == 'string' ? key : '');
            }
        }
        if (O === global$r) {
            if (simple) O[key] = value;
            else setGlobal$1(key, value);
            return;
        } else if (!unsafe) {
            delete O[key];
        } else if (!noTargetGet && O[key]) {
            simple = true;
        }
        if (simple) O[key] = value;
        else createNonEnumerableProperty$b(O, key, value);
        // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
    })(Function.prototype, 'toString', function toString() {
        return typeof this == 'function' && getInternalState$7(this).source || inspectSource$1(this);
    });

    var objectGetOwnPropertyNames = {};

    var ceil = Math.ceil;
    var floor$5 = Math.floor;

    // `ToInteger` abstract operation
    // https://tc39.es/ecma262/#sec-tointeger
    var toInteger$a = function(argument) {
        return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor$5 : ceil)(argument);
    };

    var toInteger$9 = toInteger$a;

    var min$7 = Math.min;

    // `ToLength` abstract operation
    // https://tc39.es/ecma262/#sec-tolength
    var toLength$n = function(argument) {
        return argument > 0 ? min$7(toInteger$9(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
    };

    var toInteger$8 = toInteger$a;

    var max$3 = Math.max;
    var min$6 = Math.min;

    // Helper for a popular repeating case of the spec:
    // Let integer be ? ToInteger(index).
    // If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
    var toAbsoluteIndex$6 = function(index, length) {
        var integer = toInteger$8(index);
        return integer < 0 ? max$3(integer + length, 0) : min$6(integer, length);
    };

    var toIndexedObject$8 = toIndexedObject$a;
    var toLength$m = toLength$n;
    var toAbsoluteIndex$5 = toAbsoluteIndex$6;

    // `Array.prototype.{ indexOf, includes }` methods implementation
    var createMethod$5 = function(IS_INCLUDES) {
        return function($this, el, fromIndex) {
            var O = toIndexedObject$8($this);
            var length = toLength$m(O.length);
            var index = toAbsoluteIndex$5(fromIndex, length);
            var value;
            // Array#includes uses SameValueZero equality algorithm
            // eslint-disable-next-line no-self-compare -- NaN check
            if (IS_INCLUDES && el != el)
                while (length > index) {
                    value = O[index++];
                    // eslint-disable-next-line no-self-compare -- NaN check
                    if (value != value) return true;
                    // Array#indexOf ignores holes, Array#includes - not
                } else
                    for (; length > index; index++) {
                        if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
                    }
            return !IS_INCLUDES && -1;
        };
    };

    var arrayIncludes = {
        // `Array.prototype.includes` method
        // https://tc39.es/ecma262/#sec-array.prototype.includes
        includes: createMethod$5(true),
        // `Array.prototype.indexOf` method
        // https://tc39.es/ecma262/#sec-array.prototype.indexof
        indexOf: createMethod$5(false)
    };

    var has$b = has$g;
    var toIndexedObject$7 = toIndexedObject$a;
    var indexOf = arrayIncludes.indexOf;
    var hiddenKeys$3 = hiddenKeys$5;

    var objectKeysInternal = function(object, names) {
        var O = toIndexedObject$7(object);
        var i = 0;
        var result = [];
        var key;
        for (key in O) !has$b(hiddenKeys$3, key) && has$b(O, key) && result.push(key);
        // Don't enum bug & hidden keys
        while (names.length > i)
            if (has$b(O, key = names[i++])) {
                ~indexOf(result, key) || result.push(key);
            }
        return result;
    };

    // IE8- don't enum bug keys
    var enumBugKeys$3 = [
        'constructor',
        'hasOwnProperty',
        'isPrototypeOf',
        'propertyIsEnumerable',
        'toLocaleString',
        'toString',
        'valueOf'
    ];

    var internalObjectKeys$1 = objectKeysInternal;
    var enumBugKeys$2 = enumBugKeys$3;

    var hiddenKeys$2 = enumBugKeys$2.concat('length', 'prototype');

    // `Object.getOwnPropertyNames` method
    // https://tc39.es/ecma262/#sec-object.getownpropertynames
    // eslint-disable-next-line es/no-object-getownpropertynames -- safe
    objectGetOwnPropertyNames.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
        return internalObjectKeys$1(O, hiddenKeys$2);
    };

    var objectGetOwnPropertySymbols = {};

    // eslint-disable-next-line es/no-object-getownpropertysymbols -- safe
    objectGetOwnPropertySymbols.f = Object.getOwnPropertySymbols;

    var getBuiltIn$4 = getBuiltIn$7;
    var getOwnPropertyNamesModule$1 = objectGetOwnPropertyNames;
    var getOwnPropertySymbolsModule$2 = objectGetOwnPropertySymbols;
    var anObject$f = anObject$h;

    // all object keys, includes non-enumerable and symbols
    var ownKeys$1 = getBuiltIn$4('Reflect', 'ownKeys') || function ownKeys(it) {
        var keys = getOwnPropertyNamesModule$1.f(anObject$f(it));
        var getOwnPropertySymbols = getOwnPropertySymbolsModule$2.f;
        return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;
    };

    var has$a = has$g;
    var ownKeys = ownKeys$1;
    var getOwnPropertyDescriptorModule$2 = objectGetOwnPropertyDescriptor;
    var definePropertyModule$6 = objectDefineProperty;

    var copyConstructorProperties$2 = function(target, source) {
        var keys = ownKeys(source);
        var defineProperty = definePropertyModule$6.f;
        var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule$2.f;
        for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            if (!has$a(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));
        }
    };

    var fails$s = fails$x;

    var replacement = /#|\.prototype\./;

    var isForced$4 = function(feature, detection) {
        var value = data[normalize(feature)];
        return value == POLYFILL ? true :
            value == NATIVE ? false :
            typeof detection == 'function' ? fails$s(detection) :
            !!detection;
    };

    var normalize = isForced$4.normalize = function(string) {
        return String(string).replace(replacement, '.').toLowerCase();
    };

    var data = isForced$4.data = {};
    var NATIVE = isForced$4.NATIVE = 'N';
    var POLYFILL = isForced$4.POLYFILL = 'P';

    var isForced_1 = isForced$4;

    var global$q = global$A;
    var getOwnPropertyDescriptor$3 = objectGetOwnPropertyDescriptor.f;
    var createNonEnumerableProperty$a = createNonEnumerableProperty$d;
    var redefine$a = redefine$b.exports;
    var setGlobal = setGlobal$3;
    var copyConstructorProperties$1 = copyConstructorProperties$2;
    var isForced$3 = isForced_1;

    /*
      options.target      - name of the target object
      options.global      - target is the global object
      options.stat        - export as static methods of target
      options.proto       - export as prototype methods of target
      options.real        - real prototype method for the `pure` version
      options.forced      - export even if the native feature is available
      options.bind        - bind methods to the target, required for the `pure` version
      options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
      options.unsafe      - use the simple assignment of property instead of delete + defineProperty
      options.sham        - add a flag to not completely full polyfills
      options.enumerable  - export as enumerable property
      options.noTargetGet - prevent calling a getter on target
    */
    var _export = function(options, source) {
        var TARGET = options.target;
        var GLOBAL = options.global;
        var STATIC = options.stat;
        var FORCED, target, key, targetProperty, sourceProperty, descriptor;
        if (GLOBAL) {
            target = global$q;
        } else if (STATIC) {
            target = global$q[TARGET] || setGlobal(TARGET, {});
        } else {
            target = (global$q[TARGET] || {}).prototype;
        }
        if (target)
            for (key in source) {
                sourceProperty = source[key];
                if (options.noTargetGet) {
                    descriptor = getOwnPropertyDescriptor$3(target, key);
                    targetProperty = descriptor && descriptor.value;
                } else targetProperty = target[key];
                FORCED = isForced$3(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
                // contained in target
                if (!FORCED && targetProperty !== undefined) {
                    if (typeof sourceProperty === typeof targetProperty) continue;
                    copyConstructorProperties$1(sourceProperty, targetProperty);
                }
                // add a flag to not completely full polyfills
                if (options.sham || (targetProperty && targetProperty.sham)) {
                    createNonEnumerableProperty$a(sourceProperty, 'sham', true);
                }
                // extend global
                redefine$a(target, key, sourceProperty, options);
            }
    };

    var isSymbol$3 = isSymbol$6;

    var toString$h = function(argument) {
        if (isSymbol$3(argument)) throw TypeError('Cannot convert a Symbol value to a string');
        return String(argument);
    };

    var anObject$e = anObject$h;

    // `RegExp.prototype.flags` getter implementation
    // https://tc39.es/ecma262/#sec-get-regexp.prototype.flags
    var regexpFlags$1 = function() {
        var that = anObject$e(this);
        var result = '';
        if (that.global) result += 'g';
        if (that.ignoreCase) result += 'i';
        if (that.multiline) result += 'm';
        if (that.dotAll) result += 's';
        if (that.unicode) result += 'u';
        if (that.sticky) result += 'y';
        return result;
    };

    var regexpStickyHelpers = {};

    var fails$r = fails$x;

    // babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError,
    var RE = function(s, f) {
        return RegExp(s, f);
    };

    regexpStickyHelpers.UNSUPPORTED_Y = fails$r(function() {
        var re = RE('a', 'y');
        re.lastIndex = 2;
        return re.exec('abcd') != null;
    });

    regexpStickyHelpers.BROKEN_CARET = fails$r(function() {
        // https://bugzilla.mozilla.org/show_bug.cgi?id=773687
        var re = RE('^r', 'gy');
        re.lastIndex = 2;
        return re.exec('str') != null;
    });

    var internalObjectKeys = objectKeysInternal;
    var enumBugKeys$1 = enumBugKeys$3;

    // `Object.keys` method
    // https://tc39.es/ecma262/#sec-object.keys
    // eslint-disable-next-line es/no-object-keys -- safe
    var objectKeys$4 = Object.keys || function keys(O) {
        return internalObjectKeys(O, enumBugKeys$1);
    };

    var DESCRIPTORS$b = descriptors;
    var definePropertyModule$5 = objectDefineProperty;
    var anObject$d = anObject$h;
    var objectKeys$3 = objectKeys$4;

    // `Object.defineProperties` method
    // https://tc39.es/ecma262/#sec-object.defineproperties
    // eslint-disable-next-line es/no-object-defineproperties -- safe
    var objectDefineProperties = DESCRIPTORS$b ? Object.defineProperties : function defineProperties(O, Properties) {
        anObject$d(O);
        var keys = objectKeys$3(Properties);
        var length = keys.length;
        var index = 0;
        var key;
        while (length > index) definePropertyModule$5.f(O, key = keys[index++], Properties[key]);
        return O;
    };

    var getBuiltIn$3 = getBuiltIn$7;

    var html$2 = getBuiltIn$3('document', 'documentElement');

    /* global ActiveXObject -- old IE, WSH */

    var anObject$c = anObject$h;
    var defineProperties = objectDefineProperties;
    var enumBugKeys = enumBugKeys$3;
    var hiddenKeys$1 = hiddenKeys$5;
    var html$1 = html$2;
    var documentCreateElement = documentCreateElement$1;
    var sharedKey$2 = sharedKey$4;

    var GT = '>';
    var LT = '<';
    var PROTOTYPE$2 = 'prototype';
    var SCRIPT = 'script';
    var IE_PROTO$1 = sharedKey$2('IE_PROTO');

    var EmptyConstructor = function() {
        /* empty */ };

    var scriptTag = function(content) {
        return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
    };

    // Create object with fake `null` prototype: use ActiveX Object with cleared prototype
    var NullProtoObjectViaActiveX = function(activeXDocument) {
        activeXDocument.write(scriptTag(''));
        activeXDocument.close();
        var temp = activeXDocument.parentWindow.Object;
        activeXDocument = null; // avoid memory leak
        return temp;
    };

    // Create object with fake `null` prototype: use iframe Object with cleared prototype
    var NullProtoObjectViaIFrame = function() {
        // Thrash, waste and sodomy: IE GC bug
        var iframe = documentCreateElement('iframe');
        var JS = 'java' + SCRIPT + ':';
        var iframeDocument;
        if (iframe.style) {
            iframe.style.display = 'none';
            html$1.appendChild(iframe);
            // https://github.com/zloirock/core-js/issues/475
            iframe.src = String(JS);
            iframeDocument = iframe.contentWindow.document;
            iframeDocument.open();
            iframeDocument.write(scriptTag('document.F=Object'));
            iframeDocument.close();
            return iframeDocument.F;
        }
    };

    // Check for document.domain and active x support
    // No need to use active x approach when document.domain is not set
    // see https://github.com/es-shims/es5-shim/issues/150
    // variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
    // avoid IE GC bug
    var activeXDocument;
    var NullProtoObject = function() {
        try {
            activeXDocument = new ActiveXObject('htmlfile');
        } catch (error) {
            /* ignore */ }
        NullProtoObject = document.domain && activeXDocument ?
            NullProtoObjectViaActiveX(activeXDocument) : // old IE
            NullProtoObjectViaIFrame() ||
            NullProtoObjectViaActiveX(activeXDocument); // WSH
        var length = enumBugKeys.length;
        while (length--) delete NullProtoObject[PROTOTYPE$2][enumBugKeys[length]];
        return NullProtoObject();
    };

    hiddenKeys$1[IE_PROTO$1] = true;

    // `Object.create` method
    // https://tc39.es/ecma262/#sec-object.create
    var objectCreate = Object.create || function create(O, Properties) {
        var result;
        if (O !== null) {
            EmptyConstructor[PROTOTYPE$2] = anObject$c(O);
            result = new EmptyConstructor();
            EmptyConstructor[PROTOTYPE$2] = null;
            // add "__proto__" for Object.getPrototypeOf polyfill
            result[IE_PROTO$1] = O;
        } else result = NullProtoObject();
        return Properties === undefined ? result : defineProperties(result, Properties);
    };

    var fails$q = fails$x;

    var regexpUnsupportedDotAll = fails$q(function() {
        // babel-minify transpiles RegExp('.', 's') -> /./s and it causes SyntaxError
        var re = RegExp('.', (typeof '').charAt(0));
        return !(re.dotAll && re.exec('\n') && re.flags === 's');
    });

    var fails$p = fails$x;

    var regexpUnsupportedNcg = fails$p(function() {
        // babel-minify transpiles RegExp('.', 'g') -> /./g and it causes SyntaxError
        var re = RegExp('(?<a>b)', (typeof '').charAt(5));
        return re.exec('b').groups.a !== 'b' ||
            'b'.replace(re, '$<a>c') !== 'bc';
    });

    /* eslint-disable regexp/no-assertion-capturing-group, regexp/no-empty-group, regexp/no-lazy-ends -- testing */
    /* eslint-disable regexp/no-useless-quantifier -- testing */
    var toString$g = toString$h;
    var regexpFlags = regexpFlags$1;
    var stickyHelpers$2 = regexpStickyHelpers;
    var shared$1 = shared$5.exports;
    var create$4 = objectCreate;
    var getInternalState$6 = internalState.get;
    var UNSUPPORTED_DOT_ALL$1 = regexpUnsupportedDotAll;
    var UNSUPPORTED_NCG$1 = regexpUnsupportedNcg;

    var nativeExec = RegExp.prototype.exec;
    var nativeReplace = shared$1('native-string-replace', String.prototype.replace);

    var patchedExec = nativeExec;

    var UPDATES_LAST_INDEX_WRONG = (function() {
        var re1 = /a/;
        var re2 = /b*/g;
        nativeExec.call(re1, 'a');
        nativeExec.call(re2, 'a');
        return re1.lastIndex !== 0 || re2.lastIndex !== 0;
    })();

    var UNSUPPORTED_Y$2 = stickyHelpers$2.UNSUPPORTED_Y || stickyHelpers$2.BROKEN_CARET;

    // nonparticipating capturing group, copied from es5-shim's String#split patch.
    var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

    var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y$2 || UNSUPPORTED_DOT_ALL$1 || UNSUPPORTED_NCG$1;

    if (PATCH) {
        // eslint-disable-next-line max-statements -- TODO
        patchedExec = function exec(string) {
            var re = this;
            var state = getInternalState$6(re);
            var str = toString$g(string);
            var raw = state.raw;
            var result, reCopy, lastIndex, match, i, object, group;

            if (raw) {
                raw.lastIndex = re.lastIndex;
                result = patchedExec.call(raw, str);
                re.lastIndex = raw.lastIndex;
                return result;
            }

            var groups = state.groups;
            var sticky = UNSUPPORTED_Y$2 && re.sticky;
            var flags = regexpFlags.call(re);
            var source = re.source;
            var charsAdded = 0;
            var strCopy = str;

            if (sticky) {
                flags = flags.replace('y', '');
                if (flags.indexOf('g') === -1) {
                    flags += 'g';
                }

                strCopy = str.slice(re.lastIndex);
                // Support anchored sticky behavior.
                if (re.lastIndex > 0 && (!re.multiline || re.multiline && str.charAt(re.lastIndex - 1) !== '\n')) {
                    source = '(?: ' + source + ')';
                    strCopy = ' ' + strCopy;
                    charsAdded++;
                }
                // ^(? + rx + ) is needed, in combination with some str slicing, to
                // simulate the 'y' flag.
                reCopy = new RegExp('^(?:' + source + ')', flags);
            }

            if (NPCG_INCLUDED) {
                reCopy = new RegExp('^' + source + '$(?!\\s)', flags);
            }
            if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;

            match = nativeExec.call(sticky ? reCopy : re, strCopy);

            if (sticky) {
                if (match) {
                    match.input = match.input.slice(charsAdded);
                    match[0] = match[0].slice(charsAdded);
                    match.index = re.lastIndex;
                    re.lastIndex += match[0].length;
                } else re.lastIndex = 0;
            } else if (UPDATES_LAST_INDEX_WRONG && match) {
                re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
            }
            if (NPCG_INCLUDED && match && match.length > 1) {
                // Fix browsers whose `exec` methods don't consistently return `undefined`
                // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
                nativeReplace.call(match[0], reCopy, function() {
                    for (i = 1; i < arguments.length - 2; i++) {
                        if (arguments[i] === undefined) match[i] = undefined;
                    }
                });
            }

            if (match && groups) {
                match.groups = object = create$4(null);
                for (i = 0; i < groups.length; i++) {
                    group = groups[i];
                    object[group[0]] = match[group[1]];
                }
            }

            return match;
        };
    }

    var regexpExec$3 = patchedExec;

    var $$v = _export;
    var exec = regexpExec$3;

    // `RegExp.prototype.exec` method
    // https://tc39.es/ecma262/#sec-regexp.prototype.exec
    $$v({
        target: 'RegExp',
        proto: true,
        forced: /./.exec !== exec
    }, {
        exec: exec
    });

    // TODO: Remove from `core-js@4` since it's moved to entry points

    var redefine$9 = redefine$b.exports;
    var regexpExec$2 = regexpExec$3;
    var fails$o = fails$x;
    var wellKnownSymbol$p = wellKnownSymbol$r;
    var createNonEnumerableProperty$9 = createNonEnumerableProperty$d;

    var SPECIES$6 = wellKnownSymbol$p('species');
    var RegExpPrototype$2 = RegExp.prototype;

    var fixRegexpWellKnownSymbolLogic = function(KEY, exec, FORCED, SHAM) {
        var SYMBOL = wellKnownSymbol$p(KEY);

        var DELEGATES_TO_SYMBOL = !fails$o(function() {
            // String methods call symbol-named RegEp methods
            var O = {};
            O[SYMBOL] = function() {
                return 7;
            };
            return '' [KEY](O) != 7;
        });

        var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails$o(function() {
            // Symbol-named RegExp methods call .exec
            var execCalled = false;
            var re = /a/;

            if (KEY === 'split') {
                // We can't use real regex here since it causes deoptimization
                // and serious performance degradation in V8
                // https://github.com/zloirock/core-js/issues/306
                re = {};
                // RegExp[@@split] doesn't call the regex's exec method, but first creates
                // a new one. We need to return the patched regex when creating the new one.
                re.constructor = {};
                re.constructor[SPECIES$6] = function() {
                    return re;
                };
                re.flags = '';
                re[SYMBOL] = /./ [SYMBOL];
            }

            re.exec = function() {
                execCalled = true;
                return null;
            };

            re[SYMBOL]('');
            return !execCalled;
        });

        if (
            !DELEGATES_TO_SYMBOL ||
            !DELEGATES_TO_EXEC ||
            FORCED
        ) {
            var nativeRegExpMethod = /./ [SYMBOL];
            var methods = exec(SYMBOL, '' [KEY], function(nativeMethod, regexp, str, arg2, forceStringMethod) {
                var $exec = regexp.exec;
                if ($exec === regexpExec$2 || $exec === RegExpPrototype$2.exec) {
                    if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
                        // The native String method already delegates to @@method (this
                        // polyfilled function), leasing to infinite recursion.
                        // We avoid it by directly calling the native @@method method.
                        return {
                            done: true,
                            value: nativeRegExpMethod.call(regexp, str, arg2)
                        };
                    }
                    return {
                        done: true,
                        value: nativeMethod.call(str, regexp, arg2)
                    };
                }
                return {
                    done: false
                };
            });

            redefine$9(String.prototype, KEY, methods[0]);
            redefine$9(RegExpPrototype$2, SYMBOL, methods[1]);
        }

        if (SHAM) createNonEnumerableProperty$9(RegExpPrototype$2[SYMBOL], 'sham', true);
    };

    // `SameValue` abstract operation
    // https://tc39.es/ecma262/#sec-samevalue
    // eslint-disable-next-line es/no-object-is -- safe
    var sameValue$1 = Object.is || function is(x, y) {
        // eslint-disable-next-line no-self-compare -- NaN check
        return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
    };

    var classof$9 = classofRaw$1;
    var regexpExec$1 = regexpExec$3;

    // `RegExpExec` abstract operation
    // https://tc39.es/ecma262/#sec-regexpexec
    var regexpExecAbstract = function(R, S) {
        var exec = R.exec;
        if (typeof exec === 'function') {
            var result = exec.call(R, S);
            if (typeof result !== 'object') {
                throw TypeError('RegExp exec method returned something other than an Object or null');
            }
            return result;
        }

        if (classof$9(R) !== 'RegExp') {
            throw TypeError('RegExp#exec called on incompatible receiver');
        }

        return regexpExec$1.call(R, S);
    };

    var fixRegExpWellKnownSymbolLogic$3 = fixRegexpWellKnownSymbolLogic;
    var anObject$b = anObject$h;
    var requireObjectCoercible$8 = requireObjectCoercible$b;
    var sameValue = sameValue$1;
    var toString$f = toString$h;
    var regExpExec$2 = regexpExecAbstract;

    // @@search logic
    fixRegExpWellKnownSymbolLogic$3('search', function(SEARCH, nativeSearch, maybeCallNative) {
        return [
            // `String.prototype.search` method
            // https://tc39.es/ecma262/#sec-string.prototype.search
            function search(regexp) {
                var O = requireObjectCoercible$8(this);
                var searcher = regexp == undefined ? undefined : regexp[SEARCH];
                return searcher !== undefined ? searcher.call(regexp, O) : new RegExp(regexp)[SEARCH](toString$f(O));
            },
            // `RegExp.prototype[@@search]` method
            // https://tc39.es/ecma262/#sec-regexp.prototype-@@search
            function(string) {
                var rx = anObject$b(this);
                var S = toString$f(string);
                var res = maybeCallNative(nativeSearch, rx, S);

                if (res.done) return res.value;

                var previousLastIndex = rx.lastIndex;
                if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;
                var result = regExpExec$2(rx, S);
                if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;
                return result === null ? -1 : result.index;
            }
        ];
    });

    var wellKnownSymbol$o = wellKnownSymbol$r;

    var TO_STRING_TAG$4 = wellKnownSymbol$o('toStringTag');
    var test$1 = {};

    test$1[TO_STRING_TAG$4] = 'z';

    var toStringTagSupport = String(test$1) === '[object z]';

    var TO_STRING_TAG_SUPPORT$2 = toStringTagSupport;
    var classofRaw = classofRaw$1;
    var wellKnownSymbol$n = wellKnownSymbol$r;

    var TO_STRING_TAG$3 = wellKnownSymbol$n('toStringTag');
    // ES3 wrong here
    var CORRECT_ARGUMENTS = classofRaw(function() {
        return arguments;
    }()) == 'Arguments';

    // fallback for IE11 Script Access Denied error
    var tryGet = function(it, key) {
        try {
            return it[key];
        } catch (error) {
            /* empty */ }
    };

    // getting tag from ES6+ `Object.prototype.toString`
    var classof$8 = TO_STRING_TAG_SUPPORT$2 ? classofRaw : function(it) {
        var O, tag, result;
        return it === undefined ? 'Undefined' : it === null ? 'Null'
            // @@toStringTag case
            :
            typeof(tag = tryGet(O = Object(it), TO_STRING_TAG$3)) == 'string' ? tag
            // builtinTag case
            :
            CORRECT_ARGUMENTS ? classofRaw(O)
            // ES3 arguments fallback
            :
            (result = classofRaw(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : result;
    };

    var TO_STRING_TAG_SUPPORT$1 = toStringTagSupport;
    var classof$7 = classof$8;

    // `Object.prototype.toString` method implementation
    // https://tc39.es/ecma262/#sec-object.prototype.tostring
    var objectToString = TO_STRING_TAG_SUPPORT$1 ? {}.toString : function toString() {
        return '[object ' + classof$7(this) + ']';
    };

    var TO_STRING_TAG_SUPPORT = toStringTagSupport;
    var redefine$8 = redefine$b.exports;
    var toString$e = objectToString;

    // `Object.prototype.toString` method
    // https://tc39.es/ecma262/#sec-object.prototype.tostring
    if (!TO_STRING_TAG_SUPPORT) {
        redefine$8(Object.prototype, 'toString', toString$e, {
            unsafe: true
        });
    }

    var global$p = global$A;

    var nativePromiseConstructor = global$p.Promise;

    var redefine$7 = redefine$b.exports;

    var redefineAll$2 = function(target, src, options) {
        for (var key in src) redefine$7(target, key, src[key], options);
        return target;
    };

    var isObject$c = isObject$i;

    var aPossiblePrototype$1 = function(it) {
        if (!isObject$c(it) && it !== null) {
            throw TypeError("Can't set " + String(it) + ' as a prototype');
        }
        return it;
    };

    /* eslint-disable no-proto -- safe */

    var anObject$a = anObject$h;
    var aPossiblePrototype = aPossiblePrototype$1;

    // `Object.setPrototypeOf` method
    // https://tc39.es/ecma262/#sec-object.setprototypeof
    // Works with __proto__ only. Old v8 can't work with null proto objects.
    // eslint-disable-next-line es/no-object-setprototypeof -- safe
    var objectSetPrototypeOf = Object.setPrototypeOf || ('__proto__' in {} ? function() {
        var CORRECT_SETTER = false;
        var test = {};
        var setter;
        try {
            // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
            setter = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set;
            setter.call(test, []);
            CORRECT_SETTER = test instanceof Array;
        } catch (error) {
            /* empty */ }
        return function setPrototypeOf(O, proto) {
            anObject$a(O);
            aPossiblePrototype(proto);
            if (CORRECT_SETTER) setter.call(O, proto);
            else O.__proto__ = proto;
            return O;
        };
    }() : undefined);

    var defineProperty$8 = objectDefineProperty.f;
    var has$9 = has$g;
    var wellKnownSymbol$m = wellKnownSymbol$r;

    var TO_STRING_TAG$2 = wellKnownSymbol$m('toStringTag');

    var setToStringTag$5 = function(it, TAG, STATIC) {
        if (it && !has$9(it = STATIC ? it : it.prototype, TO_STRING_TAG$2)) {
            defineProperty$8(it, TO_STRING_TAG$2, {
                configurable: true,
                value: TAG
            });
        }
    };

    var getBuiltIn$2 = getBuiltIn$7;
    var definePropertyModule$4 = objectDefineProperty;
    var wellKnownSymbol$l = wellKnownSymbol$r;
    var DESCRIPTORS$a = descriptors;

    var SPECIES$5 = wellKnownSymbol$l('species');

    var setSpecies$4 = function(CONSTRUCTOR_NAME) {
        var Constructor = getBuiltIn$2(CONSTRUCTOR_NAME);
        var defineProperty = definePropertyModule$4.f;

        if (DESCRIPTORS$a && Constructor && !Constructor[SPECIES$5]) {
            defineProperty(Constructor, SPECIES$5, {
                configurable: true,
                get: function() {
                    return this;
                }
            });
        }
    };

    var aFunction$7 = function(it) {
        if (typeof it != 'function') {
            throw TypeError(String(it) + ' is not a function');
        }
        return it;
    };

    var anInstance$3 = function(it, Constructor, name) {
        if (!(it instanceof Constructor)) {
            throw TypeError('Incorrect ' + (name ? name + ' ' : '') + 'invocation');
        }
        return it;
    };

    var iterators = {};

    var wellKnownSymbol$k = wellKnownSymbol$r;
    var Iterators$4 = iterators;

    var ITERATOR$6 = wellKnownSymbol$k('iterator');
    var ArrayPrototype$1 = Array.prototype;

    // check on default Array iterator
    var isArrayIteratorMethod$3 = function(it) {
        return it !== undefined && (Iterators$4.Array === it || ArrayPrototype$1[ITERATOR$6] === it);
    };

    var aFunction$6 = aFunction$7;

    // optional / simple context binding
    var functionBindContext = function(fn, that, length) {
        aFunction$6(fn);
        if (that === undefined) return fn;
        switch (length) {
            case 0:
                return function() {
                    return fn.call(that);
                };
            case 1:
                return function(a) {
                    return fn.call(that, a);
                };
            case 2:
                return function(a, b) {
                    return fn.call(that, a, b);
                };
            case 3:
                return function(a, b, c) {
                    return fn.call(that, a, b, c);
                };
        }
        return function( /* ...args */ ) {
            return fn.apply(that, arguments);
        };
    };

    var classof$6 = classof$8;
    var Iterators$3 = iterators;
    var wellKnownSymbol$j = wellKnownSymbol$r;

    var ITERATOR$5 = wellKnownSymbol$j('iterator');

    var getIteratorMethod$3 = function(it) {
        if (it != undefined) return it[ITERATOR$5] ||
            it['@@iterator'] ||
            Iterators$3[classof$6(it)];
    };

    var anObject$9 = anObject$h;

    var iteratorClose$2 = function(iterator) {
        var returnMethod = iterator['return'];
        if (returnMethod !== undefined) {
            return anObject$9(returnMethod.call(iterator)).value;
        }
    };

    var anObject$8 = anObject$h;
    var isArrayIteratorMethod$2 = isArrayIteratorMethod$3;
    var toLength$l = toLength$n;
    var bind$5 = functionBindContext;
    var getIteratorMethod$2 = getIteratorMethod$3;
    var iteratorClose$1 = iteratorClose$2;

    var Result = function(stopped, result) {
        this.stopped = stopped;
        this.result = result;
    };

    var iterate$1 = function(iterable, unboundFunction, options) {
        var that = options && options.that;
        var AS_ENTRIES = !!(options && options.AS_ENTRIES);
        var IS_ITERATOR = !!(options && options.IS_ITERATOR);
        var INTERRUPTED = !!(options && options.INTERRUPTED);
        var fn = bind$5(unboundFunction, that, 1 + AS_ENTRIES + INTERRUPTED);
        var iterator, iterFn, index, length, result, next, step;

        var stop = function(condition) {
            if (iterator) iteratorClose$1(iterator);
            return new Result(true, condition);
        };

        var callFn = function(value) {
            if (AS_ENTRIES) {
                anObject$8(value);
                return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);
            }
            return INTERRUPTED ? fn(value, stop) : fn(value);
        };

        if (IS_ITERATOR) {
            iterator = iterable;
        } else {
            iterFn = getIteratorMethod$2(iterable);
            if (typeof iterFn != 'function') throw TypeError('Target is not iterable');
            // optimisation for array iterators
            if (isArrayIteratorMethod$2(iterFn)) {
                for (index = 0, length = toLength$l(iterable.length); length > index; index++) {
                    result = callFn(iterable[index]);
                    if (result && result instanceof Result) return result;
                }
                return new Result(false);
            }
            iterator = iterFn.call(iterable);
        }

        next = iterator.next;
        while (!(step = next.call(iterator)).done) {
            try {
                result = callFn(step.value);
            } catch (error) {
                iteratorClose$1(iterator);
                throw error;
            }
            if (typeof result == 'object' && result && result instanceof Result) return result;
        }
        return new Result(false);
    };

    var wellKnownSymbol$i = wellKnownSymbol$r;

    var ITERATOR$4 = wellKnownSymbol$i('iterator');
    var SAFE_CLOSING = false;

    try {
        var called = 0;
        var iteratorWithReturn = {
            next: function() {
                return {
                    done: !!called++
                };
            },
            'return': function() {
                SAFE_CLOSING = true;
            }
        };
        iteratorWithReturn[ITERATOR$4] = function() {
            return this;
        };
        // eslint-disable-next-line es/no-array-from, no-throw-literal -- required for testing
        Array.from(iteratorWithReturn, function() {
            throw 2;
        });
    } catch (error) {
        /* empty */ }

    var checkCorrectnessOfIteration$3 = function(exec, SKIP_CLOSING) {
        if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
        var ITERATION_SUPPORT = false;
        try {
            var object = {};
            object[ITERATOR$4] = function() {
                return {
                    next: function() {
                        return {
                            done: ITERATION_SUPPORT = true
                        };
                    }
                };
            };
            exec(object);
        } catch (error) {
            /* empty */ }
        return ITERATION_SUPPORT;
    };

    var anObject$7 = anObject$h;
    var aFunction$5 = aFunction$7;
    var wellKnownSymbol$h = wellKnownSymbol$r;

    var SPECIES$4 = wellKnownSymbol$h('species');

    // `SpeciesConstructor` abstract operation
    // https://tc39.es/ecma262/#sec-speciesconstructor
    var speciesConstructor$3 = function(O, defaultConstructor) {
        var C = anObject$7(O).constructor;
        var S;
        return C === undefined || (S = anObject$7(C)[SPECIES$4]) == undefined ? defaultConstructor : aFunction$5(S);
    };

    var userAgent$4 = engineUserAgent;

    var engineIsIos = /(?:iphone|ipod|ipad).*applewebkit/i.test(userAgent$4);

    var classof$5 = classofRaw$1;
    var global$o = global$A;

    var engineIsNode = classof$5(global$o.process) == 'process';

    var global$n = global$A;
    var fails$n = fails$x;
    var bind$4 = functionBindContext;
    var html = html$2;
    var createElement = documentCreateElement$1;
    var IS_IOS$1 = engineIsIos;
    var IS_NODE$3 = engineIsNode;

    var set$1 = global$n.setImmediate;
    var clear = global$n.clearImmediate;
    var process$2 = global$n.process;
    var MessageChannel = global$n.MessageChannel;
    var Dispatch = global$n.Dispatch;
    var counter = 0;
    var queue = {};
    var ONREADYSTATECHANGE = 'onreadystatechange';
    var location, defer, channel, port;

    try {
        // Deno throws a ReferenceError on `location` access without `--location` flag
        location = global$n.location;
    } catch (error) {
        /* empty */ }

    var run = function(id) {
        // eslint-disable-next-line no-prototype-builtins -- safe
        if (queue.hasOwnProperty(id)) {
            var fn = queue[id];
            delete queue[id];
            fn();
        }
    };

    var runner = function(id) {
        return function() {
            run(id);
        };
    };

    var listener = function(event) {
        run(event.data);
    };

    var post = function(id) {
        // old engines have not location.origin
        global$n.postMessage(String(id), location.protocol + '//' + location.host);
    };

    // Node.js 0.9+ & IE10+ has setImmediate, otherwise:
    if (!set$1 || !clear) {
        set$1 = function setImmediate(fn) {
            var args = [];
            var argumentsLength = arguments.length;
            var i = 1;
            while (argumentsLength > i) args.push(arguments[i++]);
            queue[++counter] = function() {
                // eslint-disable-next-line no-new-func -- spec requirement
                (typeof fn == 'function' ? fn : Function(fn)).apply(undefined, args);
            };
            defer(counter);
            return counter;
        };
        clear = function clearImmediate(id) {
            delete queue[id];
        };
        // Node.js 0.8-
        if (IS_NODE$3) {
            defer = function(id) {
                process$2.nextTick(runner(id));
            };
            // Sphere (JS game engine) Dispatch API
        } else if (Dispatch && Dispatch.now) {
            defer = function(id) {
                Dispatch.now(runner(id));
            };
            // Browsers with MessageChannel, includes WebWorkers
            // except iOS - https://github.com/zloirock/core-js/issues/624
        } else if (MessageChannel && !IS_IOS$1) {
            channel = new MessageChannel();
            port = channel.port2;
            channel.port1.onmessage = listener;
            defer = bind$4(port.postMessage, port, 1);
            // Browsers with postMessage, skip WebWorkers
            // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
        } else if (
            global$n.addEventListener &&
            typeof postMessage == 'function' &&
            !global$n.importScripts &&
            location && location.protocol !== 'file:' &&
            !fails$n(post)
        ) {
            defer = post;
            global$n.addEventListener('message', listener, false);
            // IE8-
        } else if (ONREADYSTATECHANGE in createElement('script')) {
            defer = function(id) {
                html.appendChild(createElement('script'))[ONREADYSTATECHANGE] = function() {
                    html.removeChild(this);
                    run(id);
                };
            };
            // Rest old browsers
        } else {
            defer = function(id) {
                setTimeout(runner(id), 0);
            };
        }
    }

    var task$1 = {
        set: set$1,
        clear: clear
    };

    var userAgent$3 = engineUserAgent;
    var global$m = global$A;

    var engineIsIosPebble = /iphone|ipod|ipad/i.test(userAgent$3) && global$m.Pebble !== undefined;

    var userAgent$2 = engineUserAgent;

    var engineIsWebosWebkit = /web0s(?!.*chrome)/i.test(userAgent$2);

    var global$l = global$A;
    var getOwnPropertyDescriptor$2 = objectGetOwnPropertyDescriptor.f;
    var macrotask = task$1.set;
    var IS_IOS = engineIsIos;
    var IS_IOS_PEBBLE = engineIsIosPebble;
    var IS_WEBOS_WEBKIT = engineIsWebosWebkit;
    var IS_NODE$2 = engineIsNode;

    var MutationObserver = global$l.MutationObserver || global$l.WebKitMutationObserver;
    var document$2 = global$l.document;
    var process$1 = global$l.process;
    var Promise$1 = global$l.Promise;
    // Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`
    var queueMicrotaskDescriptor = getOwnPropertyDescriptor$2(global$l, 'queueMicrotask');
    var queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;

    var flush, head, last, notify$1, toggle, node, promise, then;

    // modern engines have queueMicrotask method
    if (!queueMicrotask) {
        flush = function() {
            var parent, fn;
            if (IS_NODE$2 && (parent = process$1.domain)) parent.exit();
            while (head) {
                fn = head.fn;
                head = head.next;
                try {
                    fn();
                } catch (error) {
                    if (head) notify$1();
                    else last = undefined;
                    throw error;
                }
            }
            last = undefined;
            if (parent) parent.enter();
        };

        // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339
        // also except WebOS Webkit https://github.com/zloirock/core-js/issues/898
        if (!IS_IOS && !IS_NODE$2 && !IS_WEBOS_WEBKIT && MutationObserver && document$2) {
            toggle = true;
            node = document$2.createTextNode('');
            new MutationObserver(flush).observe(node, {
                characterData: true
            });
            notify$1 = function() {
                node.data = toggle = !toggle;
            };
            // environments with maybe non-completely correct, but existent Promise
        } else if (!IS_IOS_PEBBLE && Promise$1 && Promise$1.resolve) {
            // Promise.resolve without an argument throws an error in LG WebOS 2
            promise = Promise$1.resolve(undefined);
            // workaround of WebKit ~ iOS Safari 10.1 bug
            promise.constructor = Promise$1;
            then = promise.then;
            notify$1 = function() {
                then.call(promise, flush);
            };
            // Node.js without promises
        } else if (IS_NODE$2) {
            notify$1 = function() {
                process$1.nextTick(flush);
            };
            // for other environments - macrotask based on:
            // - setImmediate
            // - MessageChannel
            // - window.postMessag
            // - onreadystatechange
            // - setTimeout
        } else {
            notify$1 = function() {
                // strange IE + webpack dev server bug - use .call(global)
                macrotask.call(global$l, flush);
            };
        }
    }

    var microtask$1 = queueMicrotask || function(fn) {
        var task = {
            fn: fn,
            next: undefined
        };
        if (last) last.next = task;
        if (!head) {
            head = task;
            notify$1();
        }
        last = task;
    };

    var newPromiseCapability$2 = {};

    var aFunction$4 = aFunction$7;

    var PromiseCapability = function(C) {
        var resolve, reject;
        this.promise = new C(function($$resolve, $$reject) {
            if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
            resolve = $$resolve;
            reject = $$reject;
        });
        this.resolve = aFunction$4(resolve);
        this.reject = aFunction$4(reject);
    };

    // `NewPromiseCapability` abstract operation
    // https://tc39.es/ecma262/#sec-newpromisecapability
    newPromiseCapability$2.f = function(C) {
        return new PromiseCapability(C);
    };

    var anObject$6 = anObject$h;
    var isObject$b = isObject$i;
    var newPromiseCapability$1 = newPromiseCapability$2;

    var promiseResolve$1 = function(C, x) {
        anObject$6(C);
        if (isObject$b(x) && x.constructor === C) return x;
        var promiseCapability = newPromiseCapability$1.f(C);
        var resolve = promiseCapability.resolve;
        resolve(x);
        return promiseCapability.promise;
    };

    var global$k = global$A;

    var hostReportErrors$1 = function(a, b) {
        var console = global$k.console;
        if (console && console.error) {
            arguments.length === 1 ? console.error(a) : console.error(a, b);
        }
    };

    var perform$1 = function(exec) {
        try {
            return {
                error: false,
                value: exec()
            };
        } catch (error) {
            return {
                error: true,
                value: error
            };
        }
    };

    var engineIsBrowser = typeof window == 'object';

    var $$u = _export;
    var global$j = global$A;
    var getBuiltIn$1 = getBuiltIn$7;
    var NativePromise = nativePromiseConstructor;
    var redefine$6 = redefine$b.exports;
    var redefineAll$1 = redefineAll$2;
    var setPrototypeOf$5 = objectSetPrototypeOf;
    var setToStringTag$4 = setToStringTag$5;
    var setSpecies$3 = setSpecies$4;
    var isObject$a = isObject$i;
    var aFunction$3 = aFunction$7;
    var anInstance$2 = anInstance$3;
    var inspectSource = inspectSource$3;
    var iterate = iterate$1;
    var checkCorrectnessOfIteration$2 = checkCorrectnessOfIteration$3;
    var speciesConstructor$2 = speciesConstructor$3;
    var task = task$1.set;
    var microtask = microtask$1;
    var promiseResolve = promiseResolve$1;
    var hostReportErrors = hostReportErrors$1;
    var newPromiseCapabilityModule = newPromiseCapability$2;
    var perform = perform$1;
    var InternalStateModule$5 = internalState;
    var isForced$2 = isForced_1;
    var wellKnownSymbol$g = wellKnownSymbol$r;
    var IS_BROWSER = engineIsBrowser;
    var IS_NODE$1 = engineIsNode;
    var V8_VERSION$2 = engineV8Version;

    var SPECIES$3 = wellKnownSymbol$g('species');
    var PROMISE = 'Promise';
    var getInternalState$5 = InternalStateModule$5.get;
    var setInternalState$5 = InternalStateModule$5.set;
    var getInternalPromiseState = InternalStateModule$5.getterFor(PROMISE);
    var NativePromisePrototype = NativePromise && NativePromise.prototype;
    var PromiseConstructor = NativePromise;
    var PromiseConstructorPrototype = NativePromisePrototype;
    var TypeError$1 = global$j.TypeError;
    var document$1 = global$j.document;
    var process = global$j.process;
    var newPromiseCapability = newPromiseCapabilityModule.f;
    var newGenericPromiseCapability = newPromiseCapability;
    var DISPATCH_EVENT = !!(document$1 && document$1.createEvent && global$j.dispatchEvent);
    var NATIVE_REJECTION_EVENT = typeof PromiseRejectionEvent == 'function';
    var UNHANDLED_REJECTION = 'unhandledrejection';
    var REJECTION_HANDLED = 'rejectionhandled';
    var PENDING = 0;
    var FULFILLED = 1;
    var REJECTED = 2;
    var HANDLED = 1;
    var UNHANDLED = 2;
    var SUBCLASSING = false;
    var Internal, OwnPromiseCapability, PromiseWrapper, nativeThen;

    var FORCED$8 = isForced$2(PROMISE, function() {
        var PROMISE_CONSTRUCTOR_SOURCE = inspectSource(PromiseConstructor);
        var GLOBAL_CORE_JS_PROMISE = PROMISE_CONSTRUCTOR_SOURCE !== String(PromiseConstructor);
        // V8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
        // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
        // We can't detect it synchronously, so just check versions
        if (!GLOBAL_CORE_JS_PROMISE && V8_VERSION$2 === 66) return true;
        // We can't use @@species feature detection in V8 since it causes
        // deoptimization and performance degradation
        // https://github.com/zloirock/core-js/issues/679
        if (V8_VERSION$2 >= 51 && /native code/.test(PROMISE_CONSTRUCTOR_SOURCE)) return false;
        // Detect correctness of subclassing with @@species support
        var promise = new PromiseConstructor(function(resolve) {
            resolve(1);
        });
        var FakePromise = function(exec) {
            exec(function() {
                /* empty */ }, function() {
                /* empty */ });
        };
        var constructor = promise.constructor = {};
        constructor[SPECIES$3] = FakePromise;
        SUBCLASSING = promise.then(function() {
            /* empty */ }) instanceof FakePromise;
        if (!SUBCLASSING) return true;
        // Unhandled rejections tracking support, NodeJS Promise without it fails @@species test
        return !GLOBAL_CORE_JS_PROMISE && IS_BROWSER && !NATIVE_REJECTION_EVENT;
    });

    var INCORRECT_ITERATION$1 = FORCED$8 || !checkCorrectnessOfIteration$2(function(iterable) {
        PromiseConstructor.all(iterable)['catch'](function() {
            /* empty */ });
    });

    // helpers
    var isThenable = function(it) {
        var then;
        return isObject$a(it) && typeof(then = it.then) == 'function' ? then : false;
    };

    var notify = function(state, isReject) {
        if (state.notified) return;
        state.notified = true;
        var chain = state.reactions;
        microtask(function() {
            var value = state.value;
            var ok = state.state == FULFILLED;
            var index = 0;
            // variable length - can't use forEach
            while (chain.length > index) {
                var reaction = chain[index++];
                var handler = ok ? reaction.ok : reaction.fail;
                var resolve = reaction.resolve;
                var reject = reaction.reject;
                var domain = reaction.domain;
                var result, then, exited;
                try {
                    if (handler) {
                        if (!ok) {
                            if (state.rejection === UNHANDLED) onHandleUnhandled(state);
                            state.rejection = HANDLED;
                        }
                        if (handler === true) result = value;
                        else {
                            if (domain) domain.enter();
                            result = handler(value); // can throw
                            if (domain) {
                                domain.exit();
                                exited = true;
                            }
                        }
                        if (result === reaction.promise) {
                            reject(TypeError$1('Promise-chain cycle'));
                        } else if (then = isThenable(result)) {
                            then.call(result, resolve, reject);
                        } else resolve(result);
                    } else reject(value);
                } catch (error) {
                    if (domain && !exited) domain.exit();
                    reject(error);
                }
            }
            state.reactions = [];
            state.notified = false;
            if (isReject && !state.rejection) onUnhandled(state);
        });
    };

    var dispatchEvent = function(name, promise, reason) {
        var event, handler;
        if (DISPATCH_EVENT) {
            event = document$1.createEvent('Event');
            event.promise = promise;
            event.reason = reason;
            event.initEvent(name, false, true);
            global$j.dispatchEvent(event);
        } else event = {
            promise: promise,
            reason: reason
        };
        if (!NATIVE_REJECTION_EVENT && (handler = global$j['on' + name])) handler(event);
        else if (name === UNHANDLED_REJECTION) hostReportErrors('Unhandled promise rejection', reason);
    };

    var onUnhandled = function(state) {
        task.call(global$j, function() {
            var promise = state.facade;
            var value = state.value;
            var IS_UNHANDLED = isUnhandled(state);
            var result;
            if (IS_UNHANDLED) {
                result = perform(function() {
                    if (IS_NODE$1) {
                        process.emit('unhandledRejection', value, promise);
                    } else dispatchEvent(UNHANDLED_REJECTION, promise, value);
                });
                // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
                state.rejection = IS_NODE$1 || isUnhandled(state) ? UNHANDLED : HANDLED;
                if (result.error) throw result.value;
            }
        });
    };

    var isUnhandled = function(state) {
        return state.rejection !== HANDLED && !state.parent;
    };

    var onHandleUnhandled = function(state) {
        task.call(global$j, function() {
            var promise = state.facade;
            if (IS_NODE$1) {
                process.emit('rejectionHandled', promise);
            } else dispatchEvent(REJECTION_HANDLED, promise, state.value);
        });
    };

    var bind$3 = function(fn, state, unwrap) {
        return function(value) {
            fn(state, value, unwrap);
        };
    };

    var internalReject = function(state, value, unwrap) {
        if (state.done) return;
        state.done = true;
        if (unwrap) state = unwrap;
        state.value = value;
        state.state = REJECTED;
        notify(state, true);
    };

    var internalResolve = function(state, value, unwrap) {
        if (state.done) return;
        state.done = true;
        if (unwrap) state = unwrap;
        try {
            if (state.facade === value) throw TypeError$1("Promise can't be resolved itself");
            var then = isThenable(value);
            if (then) {
                microtask(function() {
                    var wrapper = {
                        done: false
                    };
                    try {
                        then.call(value,
                            bind$3(internalResolve, wrapper, state),
                            bind$3(internalReject, wrapper, state)
                        );
                    } catch (error) {
                        internalReject(wrapper, error, state);
                    }
                });
            } else {
                state.value = value;
                state.state = FULFILLED;
                notify(state, false);
            }
        } catch (error) {
            internalReject({
                done: false
            }, error, state);
        }
    };

    // constructor polyfill
    if (FORCED$8) {
        // 25.4.3.1 Promise(executor)
        PromiseConstructor = function Promise(executor) {
            anInstance$2(this, PromiseConstructor, PROMISE);
            aFunction$3(executor);
            Internal.call(this);
            var state = getInternalState$5(this);
            try {
                executor(bind$3(internalResolve, state), bind$3(internalReject, state));
            } catch (error) {
                internalReject(state, error);
            }
        };
        PromiseConstructorPrototype = PromiseConstructor.prototype;
        // eslint-disable-next-line no-unused-vars -- required for `.length`
        Internal = function Promise(executor) {
            setInternalState$5(this, {
                type: PROMISE,
                done: false,
                notified: false,
                parent: false,
                reactions: [],
                rejection: false,
                state: PENDING,
                value: undefined
            });
        };
        Internal.prototype = redefineAll$1(PromiseConstructorPrototype, {
            // `Promise.prototype.then` method
            // https://tc39.es/ecma262/#sec-promise.prototype.then
            then: function then(onFulfilled, onRejected) {
                var state = getInternalPromiseState(this);
                var reaction = newPromiseCapability(speciesConstructor$2(this, PromiseConstructor));
                reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
                reaction.fail = typeof onRejected == 'function' && onRejected;
                reaction.domain = IS_NODE$1 ? process.domain : undefined;
                state.parent = true;
                state.reactions.push(reaction);
                if (state.state != PENDING) notify(state, false);
                return reaction.promise;
            },
            // `Promise.prototype.catch` method
            // https://tc39.es/ecma262/#sec-promise.prototype.catch
            'catch': function(onRejected) {
                return this.then(undefined, onRejected);
            }
        });
        OwnPromiseCapability = function() {
            var promise = new Internal();
            var state = getInternalState$5(promise);
            this.promise = promise;
            this.resolve = bind$3(internalResolve, state);
            this.reject = bind$3(internalReject, state);
        };
        newPromiseCapabilityModule.f = newPromiseCapability = function(C) {
            return C === PromiseConstructor || C === PromiseWrapper ?
                new OwnPromiseCapability(C) :
                newGenericPromiseCapability(C);
        };

        if (typeof NativePromise == 'function' && NativePromisePrototype !== Object.prototype) {
            nativeThen = NativePromisePrototype.then;

            if (!SUBCLASSING) {
                // make `Promise#then` return a polyfilled `Promise` for native promise-based APIs
                redefine$6(NativePromisePrototype, 'then', function then(onFulfilled, onRejected) {
                    var that = this;
                    return new PromiseConstructor(function(resolve, reject) {
                        nativeThen.call(that, resolve, reject);
                    }).then(onFulfilled, onRejected);
                    // https://github.com/zloirock/core-js/issues/640
                }, {
                    unsafe: true
                });

                // makes sure that native promise-based APIs `Promise#catch` properly works with patched `Promise#then`
                redefine$6(NativePromisePrototype, 'catch', PromiseConstructorPrototype['catch'], {
                    unsafe: true
                });
            }

            // make `.constructor === Promise` work for native promise-based APIs
            try {
                delete NativePromisePrototype.constructor;
            } catch (error) {
                /* empty */ }

            // make `instanceof Promise` work for native promise-based APIs
            if (setPrototypeOf$5) {
                setPrototypeOf$5(NativePromisePrototype, PromiseConstructorPrototype);
            }
        }
    }

    $$u({
        global: true,
        wrap: true,
        forced: FORCED$8
    }, {
        Promise: PromiseConstructor
    });

    setToStringTag$4(PromiseConstructor, PROMISE, false);
    setSpecies$3(PROMISE);

    PromiseWrapper = getBuiltIn$1(PROMISE);

    // statics
    $$u({
        target: PROMISE,
        stat: true,
        forced: FORCED$8
    }, {
        // `Promise.reject` method
        // https://tc39.es/ecma262/#sec-promise.reject
        reject: function reject(r) {
            var capability = newPromiseCapability(this);
            capability.reject.call(undefined, r);
            return capability.promise;
        }
    });

    $$u({
        target: PROMISE,
        stat: true,
        forced: FORCED$8
    }, {
        // `Promise.resolve` method
        // https://tc39.es/ecma262/#sec-promise.resolve
        resolve: function resolve(x) {
            return promiseResolve(this, x);
        }
    });

    $$u({
        target: PROMISE,
        stat: true,
        forced: INCORRECT_ITERATION$1
    }, {
        // `Promise.all` method
        // https://tc39.es/ecma262/#sec-promise.all
        all: function all(iterable) {
            var C = this;
            var capability = newPromiseCapability(C);
            var resolve = capability.resolve;
            var reject = capability.reject;
            var result = perform(function() {
                var $promiseResolve = aFunction$3(C.resolve);
                var values = [];
                var counter = 0;
                var remaining = 1;
                iterate(iterable, function(promise) {
                    var index = counter++;
                    var alreadyCalled = false;
                    values.push(undefined);
                    remaining++;
                    $promiseResolve.call(C, promise).then(function(value) {
                        if (alreadyCalled) return;
                        alreadyCalled = true;
                        values[index] = value;
                        --remaining || resolve(values);
                    }, reject);
                });
                --remaining || resolve(values);
            });
            if (result.error) reject(result.value);
            return capability.promise;
        },
        // `Promise.race` method
        // https://tc39.es/ecma262/#sec-promise.race
        race: function race(iterable) {
            var C = this;
            var capability = newPromiseCapability(C);
            var reject = capability.reject;
            var result = perform(function() {
                var $promiseResolve = aFunction$3(C.resolve);
                iterate(iterable, function(promise) {
                    $promiseResolve.call(C, promise).then(capability.resolve, reject);
                });
            });
            if (result.error) reject(result.value);
            return capability.promise;
        }
    });

    var fails$m = fails$x;

    var arrayMethodIsStrict$6 = function(METHOD_NAME, argument) {
        var method = [][METHOD_NAME];
        return !!method && fails$m(function() {
            // eslint-disable-next-line no-useless-call,no-throw-literal -- required for testing
            method.call(null, argument || function() {
                throw 1;
            }, 1);
        });
    };

    /* eslint-disable es/no-array-prototype-indexof -- required for testing */
    var $$t = _export;
    var $indexOf$1 = arrayIncludes.indexOf;
    var arrayMethodIsStrict$5 = arrayMethodIsStrict$6;

    var nativeIndexOf = [].indexOf;

    var NEGATIVE_ZERO$1 = !!nativeIndexOf && 1 / [1].indexOf(1, -0) < 0;
    var STRICT_METHOD$5 = arrayMethodIsStrict$5('indexOf');

    // `Array.prototype.indexOf` method
    // https://tc39.es/ecma262/#sec-array.prototype.indexof
    $$t({
        target: 'Array',
        proto: true,
        forced: NEGATIVE_ZERO$1 || !STRICT_METHOD$5
    }, {
        indexOf: function indexOf(searchElement /* , fromIndex = 0 */ ) {
            return NEGATIVE_ZERO$1
                // convert -0 to +0
                ?
                nativeIndexOf.apply(this, arguments) || 0 :
                $indexOf$1(this, searchElement, arguments.length > 1 ? arguments[1] : undefined);
        }
    });

    var DESCRIPTORS$9 = descriptors;
    var fails$l = fails$x;
    var objectKeys$2 = objectKeys$4;
    var getOwnPropertySymbolsModule$1 = objectGetOwnPropertySymbols;
    var propertyIsEnumerableModule$1 = objectPropertyIsEnumerable;
    var toObject$e = toObject$g;
    var IndexedObject$3 = indexedObject;

    // eslint-disable-next-line es/no-object-assign -- safe
    var $assign = Object.assign;
    // eslint-disable-next-line es/no-object-defineproperty -- required for testing
    var defineProperty$7 = Object.defineProperty;

    // `Object.assign` method
    // https://tc39.es/ecma262/#sec-object.assign
    var objectAssign = !$assign || fails$l(function() {
        // should have correct order of operations (Edge bug)
        if (DESCRIPTORS$9 && $assign({
                b: 1
            }, $assign(defineProperty$7({}, 'a', {
                enumerable: true,
                get: function() {
                    defineProperty$7(this, 'b', {
                        value: 3,
                        enumerable: false
                    });
                }
            }), {
                b: 2
            })).b !== 1) return true;
        // should work with symbols and should have deterministic property order (V8 bug)
        var A = {};
        var B = {};
        // eslint-disable-next-line es/no-symbol -- safe
        var symbol = Symbol();
        var alphabet = 'abcdefghijklmnopqrst';
        A[symbol] = 7;
        alphabet.split('').forEach(function(chr) {
            B[chr] = chr;
        });
        return $assign({}, A)[symbol] != 7 || objectKeys$2($assign({}, B)).join('') != alphabet;
    }) ? function assign(target, source) { // eslint-disable-line no-unused-vars -- required for `.length`
        var T = toObject$e(target);
        var argumentsLength = arguments.length;
        var index = 1;
        var getOwnPropertySymbols = getOwnPropertySymbolsModule$1.f;
        var propertyIsEnumerable = propertyIsEnumerableModule$1.f;
        while (argumentsLength > index) {
            var S = IndexedObject$3(arguments[index++]);
            var keys = getOwnPropertySymbols ? objectKeys$2(S).concat(getOwnPropertySymbols(S)) : objectKeys$2(S);
            var length = keys.length;
            var j = 0;
            var key;
            while (length > j) {
                key = keys[j++];
                if (!DESCRIPTORS$9 || propertyIsEnumerable.call(S, key)) T[key] = S[key];
            }
        }
        return T;
    } : $assign;

    var $$s = _export;
    var assign = objectAssign;

    // `Object.assign` method
    // https://tc39.es/ecma262/#sec-object.assign
    // eslint-disable-next-line es/no-object-assign -- required for testing
    $$s({
        target: 'Object',
        stat: true,
        forced: Object.assign !== assign
    }, {
        assign: assign
    });

    var redefine$5 = redefine$b.exports;
    var anObject$5 = anObject$h;
    var $toString$1 = toString$h;
    var fails$k = fails$x;
    var flags = regexpFlags$1;

    var TO_STRING = 'toString';
    var RegExpPrototype$1 = RegExp.prototype;
    var nativeToString = RegExpPrototype$1[TO_STRING];

    var NOT_GENERIC = fails$k(function() {
        return nativeToString.call({
            source: 'a',
            flags: 'b'
        }) != '/a/b';
    });
    // FF44- RegExp#toString has a wrong name
    var INCORRECT_NAME = nativeToString.name != TO_STRING;

    // `RegExp.prototype.toString` method
    // https://tc39.es/ecma262/#sec-regexp.prototype.tostring
    if (NOT_GENERIC || INCORRECT_NAME) {
        redefine$5(RegExp.prototype, TO_STRING, function toString() {
            var R = anObject$5(this);
            var p = $toString$1(R.source);
            var rf = R.flags;
            var f = $toString$1(rf === undefined && R instanceof RegExp && !('flags' in RegExpPrototype$1) ? flags.call(R) : rf);
            return '/' + p + '/' + f;
        }, {
            unsafe: true
        });
    }

    // a string of all valid unicode whitespaces
    var whitespaces$4 = '\u0009\u000A\u000B\u000C\u000D\u0020\u00A0\u1680\u2000\u2001\u2002' +
        '\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

    var requireObjectCoercible$7 = requireObjectCoercible$b;
    var toString$d = toString$h;
    var whitespaces$3 = whitespaces$4;

    var whitespace = '[' + whitespaces$3 + ']';
    var ltrim = RegExp('^' + whitespace + whitespace + '*');
    var rtrim = RegExp(whitespace + whitespace + '*$');

    // `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation
    var createMethod$4 = function(TYPE) {
        return function($this) {
            var string = toString$d(requireObjectCoercible$7($this));
            if (TYPE & 1) string = string.replace(ltrim, '');
            if (TYPE & 2) string = string.replace(rtrim, '');
            return string;
        };
    };

    var stringTrim = {
        // `String.prototype.{ trimLeft, trimStart }` methods
        // https://tc39.es/ecma262/#sec-string.prototype.trimstart
        start: createMethod$4(1),
        // `String.prototype.{ trimRight, trimEnd }` methods
        // https://tc39.es/ecma262/#sec-string.prototype.trimend
        end: createMethod$4(2),
        // `String.prototype.trim` method
        // https://tc39.es/ecma262/#sec-string.prototype.trim
        trim: createMethod$4(3)
    };

    var global$i = global$A;
    var toString$c = toString$h;
    var trim$2 = stringTrim.trim;
    var whitespaces$2 = whitespaces$4;

    var $parseInt = global$i.parseInt;
    var hex = /^[+-]?0[Xx]/;
    var FORCED$7 = $parseInt(whitespaces$2 + '08') !== 8 || $parseInt(whitespaces$2 + '0x16') !== 22;

    // `parseInt` method
    // https://tc39.es/ecma262/#sec-parseint-string-radix
    var numberParseInt = FORCED$7 ? function parseInt(string, radix) {
        var S = trim$2(toString$c(string));
        return $parseInt(S, (radix >>> 0) || (hex.test(S) ? 16 : 10));
    } : $parseInt;

    var $$r = _export;
    var parseIntImplementation = numberParseInt;

    // `parseInt` method
    // https://tc39.es/ecma262/#sec-parseint-string-radix
    $$r({
        global: true,
        forced: parseInt != parseIntImplementation
    }, {
        parseInt: parseIntImplementation
    });

    var global$h = global$A;
    var toString$b = toString$h;
    var trim$1 = stringTrim.trim;
    var whitespaces$1 = whitespaces$4;

    var $parseFloat = global$h.parseFloat;
    var FORCED$6 = 1 / $parseFloat(whitespaces$1 + '-0') !== -Infinity;

    // `parseFloat` method
    // https://tc39.es/ecma262/#sec-parsefloat-string
    var numberParseFloat = FORCED$6 ? function parseFloat(string) {
        var trimmedString = trim$1(toString$b(string));
        var result = $parseFloat(trimmedString);
        return result === 0 && trimmedString.charAt(0) == '-' ? -0 : result;
    } : $parseFloat;

    var $$q = _export;
    var parseFloatImplementation = numberParseFloat;

    // `parseFloat` method
    // https://tc39.es/ecma262/#sec-parsefloat-string
    $$q({
        global: true,
        forced: parseFloat != parseFloatImplementation
    }, {
        parseFloat: parseFloatImplementation
    });

    /* eslint-disable es/no-array-prototype-lastindexof -- safe */
    var toIndexedObject$6 = toIndexedObject$a;
    var toInteger$7 = toInteger$a;
    var toLength$k = toLength$n;
    var arrayMethodIsStrict$4 = arrayMethodIsStrict$6;

    var min$5 = Math.min;
    var $lastIndexOf$1 = [].lastIndexOf;
    var NEGATIVE_ZERO = !!$lastIndexOf$1 && 1 / [1].lastIndexOf(1, -0) < 0;
    var STRICT_METHOD$4 = arrayMethodIsStrict$4('lastIndexOf');
    var FORCED$5 = NEGATIVE_ZERO || !STRICT_METHOD$4;

    // `Array.prototype.lastIndexOf` method implementation
    // https://tc39.es/ecma262/#sec-array.prototype.lastindexof
    var arrayLastIndexOf = FORCED$5 ? function lastIndexOf(searchElement /* , fromIndex = @[*-1] */ ) {
        // convert -0 to +0
        if (NEGATIVE_ZERO) return $lastIndexOf$1.apply(this, arguments) || 0;
        var O = toIndexedObject$6(this);
        var length = toLength$k(O.length);
        var index = length - 1;
        if (arguments.length > 1) index = min$5(index, toInteger$7(arguments[1]));
        if (index < 0) index = length + index;
        for (; index >= 0; index--)
            if (index in O && O[index] === searchElement) return index || 0;
        return -1;
    } : $lastIndexOf$1;

    var $$p = _export;
    var lastIndexOf = arrayLastIndexOf;

    // `Array.prototype.lastIndexOf` method
    // https://tc39.es/ecma262/#sec-array.prototype.lastindexof
    // eslint-disable-next-line es/no-array-prototype-lastindexof -- required for testing
    $$p({
        target: 'Array',
        proto: true,
        forced: lastIndexOf !== [].lastIndexOf
    }, {
        lastIndexOf: lastIndexOf
    });

    var $$o = _export;
    var IndexedObject$2 = indexedObject;
    var toIndexedObject$5 = toIndexedObject$a;
    var arrayMethodIsStrict$3 = arrayMethodIsStrict$6;

    var nativeJoin = [].join;

    var ES3_STRINGS = IndexedObject$2 != Object;
    var STRICT_METHOD$3 = arrayMethodIsStrict$3('join', ',');

    // `Array.prototype.join` method
    // https://tc39.es/ecma262/#sec-array.prototype.join
    $$o({
        target: 'Array',
        proto: true,
        forced: ES3_STRINGS || !STRICT_METHOD$3
    }, {
        join: function join(separator) {
            return nativeJoin.call(toIndexedObject$5(this), separator === undefined ? ',' : separator);
        }
    });

    var isObject$9 = isObject$i;
    var classof$4 = classofRaw$1;
    var wellKnownSymbol$f = wellKnownSymbol$r;

    var MATCH$2 = wellKnownSymbol$f('match');

    // `IsRegExp` abstract operation
    // https://tc39.es/ecma262/#sec-isregexp
    var isRegexp = function(it) {
        var isRegExp;
        return isObject$9(it) && ((isRegExp = it[MATCH$2]) !== undefined ? !!isRegExp : classof$4(it) == 'RegExp');
    };

    var toInteger$6 = toInteger$a;
    var toString$a = toString$h;
    var requireObjectCoercible$6 = requireObjectCoercible$b;

    // `String.prototype.codePointAt` methods implementation
    var createMethod$3 = function(CONVERT_TO_STRING) {
        return function($this, pos) {
            var S = toString$a(requireObjectCoercible$6($this));
            var position = toInteger$6(pos);
            var size = S.length;
            var first, second;
            if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
            first = S.charCodeAt(position);
            return first < 0xD800 || first > 0xDBFF || position + 1 === size ||
                (second = S.charCodeAt(position + 1)) < 0xDC00 || second > 0xDFFF ?
                CONVERT_TO_STRING ? S.charAt(position) : first :
                CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
        };
    };

    var stringMultibyte = {
        // `String.prototype.codePointAt` method
        // https://tc39.es/ecma262/#sec-string.prototype.codepointat
        codeAt: createMethod$3(false),
        // `String.prototype.at` method
        // https://github.com/mathiasbynens/String.prototype.at
        charAt: createMethod$3(true)
    };

    var charAt$1 = stringMultibyte.charAt;

    // `AdvanceStringIndex` abstract operation
    // https://tc39.es/ecma262/#sec-advancestringindex
    var advanceStringIndex$3 = function(S, index, unicode) {
        return index + (unicode ? charAt$1(S, index).length : 1);
    };

    var fixRegExpWellKnownSymbolLogic$2 = fixRegexpWellKnownSymbolLogic;
    var isRegExp$2 = isRegexp;
    var anObject$4 = anObject$h;
    var requireObjectCoercible$5 = requireObjectCoercible$b;
    var speciesConstructor$1 = speciesConstructor$3;
    var advanceStringIndex$2 = advanceStringIndex$3;
    var toLength$j = toLength$n;
    var toString$9 = toString$h;
    var callRegExpExec = regexpExecAbstract;
    var regexpExec = regexpExec$3;
    var stickyHelpers$1 = regexpStickyHelpers;
    var fails$j = fails$x;

    var UNSUPPORTED_Y$1 = stickyHelpers$1.UNSUPPORTED_Y;
    var arrayPush = [].push;
    var min$4 = Math.min;
    var MAX_UINT32 = 0xFFFFFFFF;

    // Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
    // Weex JS has frozen built-in prototypes, so use try / catch wrapper
    var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails$j(function() {
        // eslint-disable-next-line regexp/no-empty-group -- required for testing
        var re = /(?:)/;
        var originalExec = re.exec;
        re.exec = function() {
            return originalExec.apply(this, arguments);
        };
        var result = 'ab'.split(re);
        return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';
    });

    // @@split logic
    fixRegExpWellKnownSymbolLogic$2('split', function(SPLIT, nativeSplit, maybeCallNative) {
        var internalSplit;
        if (
            'abbc'.split(/(b)*/)[1] == 'c' ||
            // eslint-disable-next-line regexp/no-empty-group -- required for testing
            'test'.split(/(?:)/, -1).length != 4 ||
            'ab'.split(/(?:ab)*/).length != 2 ||
            '.'.split(/(.?)(.?)/).length != 4 ||
            // eslint-disable-next-line regexp/no-assertion-capturing-group, regexp/no-empty-group -- required for testing
            '.'.split(/()()/).length > 1 ||
            ''.split(/.?/).length
        ) {
            // based on es5-shim implementation, need to rework it
            internalSplit = function(separator, limit) {
                var string = toString$9(requireObjectCoercible$5(this));
                var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
                if (lim === 0) return [];
                if (separator === undefined) return [string];
                // If `separator` is not a regex, use native split
                if (!isRegExp$2(separator)) {
                    return nativeSplit.call(string, separator, lim);
                }
                var output = [];
                var flags = (separator.ignoreCase ? 'i' : '') +
                    (separator.multiline ? 'm' : '') +
                    (separator.unicode ? 'u' : '') +
                    (separator.sticky ? 'y' : '');
                var lastLastIndex = 0;
                // Make `global` and avoid `lastIndex` issues by working with a copy
                var separatorCopy = new RegExp(separator.source, flags + 'g');
                var match, lastIndex, lastLength;
                while (match = regexpExec.call(separatorCopy, string)) {
                    lastIndex = separatorCopy.lastIndex;
                    if (lastIndex > lastLastIndex) {
                        output.push(string.slice(lastLastIndex, match.index));
                        if (match.length > 1 && match.index < string.length) arrayPush.apply(output, match.slice(1));
                        lastLength = match[0].length;
                        lastLastIndex = lastIndex;
                        if (output.length >= lim) break;
                    }
                    if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop
                }
                if (lastLastIndex === string.length) {
                    if (lastLength || !separatorCopy.test('')) output.push('');
                } else output.push(string.slice(lastLastIndex));
                return output.length > lim ? output.slice(0, lim) : output;
            };
            // Chakra, V8
        } else if ('0'.split(undefined, 0).length) {
            internalSplit = function(separator, limit) {
                return separator === undefined && limit === 0 ? [] : nativeSplit.call(this, separator, limit);
            };
        } else internalSplit = nativeSplit;

        return [
            // `String.prototype.split` method
            // https://tc39.es/ecma262/#sec-string.prototype.split
            function split(separator, limit) {
                var O = requireObjectCoercible$5(this);
                var splitter = separator == undefined ? undefined : separator[SPLIT];
                return splitter !== undefined ?
                    splitter.call(separator, O, limit) :
                    internalSplit.call(toString$9(O), separator, limit);
            },
            // `RegExp.prototype[@@split]` method
            // https://tc39.es/ecma262/#sec-regexp.prototype-@@split
            //
            // NOTE: This cannot be properly polyfilled in engines that don't support
            // the 'y' flag.
            function(string, limit) {
                var rx = anObject$4(this);
                var S = toString$9(string);
                var res = maybeCallNative(internalSplit, rx, S, limit, internalSplit !== nativeSplit);

                if (res.done) return res.value;

                var C = speciesConstructor$1(rx, RegExp);

                var unicodeMatching = rx.unicode;
                var flags = (rx.ignoreCase ? 'i' : '') +
                    (rx.multiline ? 'm' : '') +
                    (rx.unicode ? 'u' : '') +
                    (UNSUPPORTED_Y$1 ? 'g' : 'y');

                // ^(? + rx + ) is needed, in combination with some S slicing, to
                // simulate the 'y' flag.
                var splitter = new C(UNSUPPORTED_Y$1 ? '^(?:' + rx.source + ')' : rx, flags);
                var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
                if (lim === 0) return [];
                if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];
                var p = 0;
                var q = 0;
                var A = [];
                while (q < S.length) {
                    splitter.lastIndex = UNSUPPORTED_Y$1 ? 0 : q;
                    var z = callRegExpExec(splitter, UNSUPPORTED_Y$1 ? S.slice(q) : S);
                    var e;
                    if (
                        z === null ||
                        (e = min$4(toLength$j(splitter.lastIndex + (UNSUPPORTED_Y$1 ? q : 0)), S.length)) === p
                    ) {
                        q = advanceStringIndex$2(S, q, unicodeMatching);
                    } else {
                        A.push(S.slice(p, q));
                        if (A.length === lim) return A;
                        for (var i = 1; i <= z.length - 1; i++) {
                            A.push(z[i]);
                            if (A.length === lim) return A;
                        }
                        q = p = e;
                    }
                }
                A.push(S.slice(p));
                return A;
            }
        ];
    }, !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC, UNSUPPORTED_Y$1);

    var toObject$d = toObject$g;

    var floor$4 = Math.floor;
    var replace = ''.replace;
    var SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d{1,2}|<[^>]*>)/g;
    var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d{1,2})/g;

    // `GetSubstitution` abstract operation
    // https://tc39.es/ecma262/#sec-getsubstitution
    var getSubstitution$1 = function(matched, str, position, captures, namedCaptures, replacement) {
        var tailPos = position + matched.length;
        var m = captures.length;
        var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
        if (namedCaptures !== undefined) {
            namedCaptures = toObject$d(namedCaptures);
            symbols = SUBSTITUTION_SYMBOLS;
        }
        return replace.call(replacement, symbols, function(match, ch) {
            var capture;
            switch (ch.charAt(0)) {
                case '$':
                    return '$';
                case '&':
                    return matched;
                case '`':
                    return str.slice(0, position);
                case "'":
                    return str.slice(tailPos);
                case '<':
                    capture = namedCaptures[ch.slice(1, -1)];
                    break;
                default: // \d\d?
                    var n = +ch;
                    if (n === 0) return match;
                    if (n > m) {
                        var f = floor$4(n / 10);
                        if (f === 0) return match;
                        if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
                        return match;
                    }
                    capture = captures[n - 1];
            }
            return capture === undefined ? '' : capture;
        });
    };

    var fixRegExpWellKnownSymbolLogic$1 = fixRegexpWellKnownSymbolLogic;
    var fails$i = fails$x;
    var anObject$3 = anObject$h;
    var toInteger$5 = toInteger$a;
    var toLength$i = toLength$n;
    var toString$8 = toString$h;
    var requireObjectCoercible$4 = requireObjectCoercible$b;
    var advanceStringIndex$1 = advanceStringIndex$3;
    var getSubstitution = getSubstitution$1;
    var regExpExec$1 = regexpExecAbstract;
    var wellKnownSymbol$e = wellKnownSymbol$r;

    var REPLACE = wellKnownSymbol$e('replace');
    var max$2 = Math.max;
    var min$3 = Math.min;

    var maybeToString = function(it) {
        return it === undefined ? it : String(it);
    };

    // IE <= 11 replaces $0 with the whole match, as if it was $&
    // https://stackoverflow.com/questions/6024666/getting-ie-to-replace-a-regex-with-the-literal-string-0
    var REPLACE_KEEPS_$0 = (function() {
        // eslint-disable-next-line regexp/prefer-escape-replacement-dollar-char -- required for testing
        return 'a'.replace(/./, '$0') === '$0';
    })();

    // Safari <= 13.0.3(?) substitutes nth capture where n>m with an empty string
    var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = (function() {
        if (/./ [REPLACE]) {
            return /./ [REPLACE]('a', '$0') === '';
        }
        return false;
    })();

    var REPLACE_SUPPORTS_NAMED_GROUPS = !fails$i(function() {
        var re = /./;
        re.exec = function() {
            var result = [];
            result.groups = {
                a: '7'
            };
            return result;
        };
        return ''.replace(re, '$<a>') !== '7';
    });

    // @@replace logic
    fixRegExpWellKnownSymbolLogic$1('replace', function(_, nativeReplace, maybeCallNative) {
        var UNSAFE_SUBSTITUTE = REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE ? '$' : '$0';

        return [
            // `String.prototype.replace` method
            // https://tc39.es/ecma262/#sec-string.prototype.replace
            function replace(searchValue, replaceValue) {
                var O = requireObjectCoercible$4(this);
                var replacer = searchValue == undefined ? undefined : searchValue[REPLACE];
                return replacer !== undefined ?
                    replacer.call(searchValue, O, replaceValue) :
                    nativeReplace.call(toString$8(O), searchValue, replaceValue);
            },
            // `RegExp.prototype[@@replace]` method
            // https://tc39.es/ecma262/#sec-regexp.prototype-@@replace
            function(string, replaceValue) {
                var rx = anObject$3(this);
                var S = toString$8(string);

                if (
                    typeof replaceValue === 'string' &&
                    replaceValue.indexOf(UNSAFE_SUBSTITUTE) === -1 &&
                    replaceValue.indexOf('$<') === -1
                ) {
                    var res = maybeCallNative(nativeReplace, rx, S, replaceValue);
                    if (res.done) return res.value;
                }

                var functionalReplace = typeof replaceValue === 'function';
                if (!functionalReplace) replaceValue = toString$8(replaceValue);

                var global = rx.global;
                if (global) {
                    var fullUnicode = rx.unicode;
                    rx.lastIndex = 0;
                }
                var results = [];
                while (true) {
                    var result = regExpExec$1(rx, S);
                    if (result === null) break;

                    results.push(result);
                    if (!global) break;

                    var matchStr = toString$8(result[0]);
                    if (matchStr === '') rx.lastIndex = advanceStringIndex$1(S, toLength$i(rx.lastIndex), fullUnicode);
                }

                var accumulatedResult = '';
                var nextSourcePosition = 0;
                for (var i = 0; i < results.length; i++) {
                    result = results[i];

                    var matched = toString$8(result[0]);
                    var position = max$2(min$3(toInteger$5(result.index), S.length), 0);
                    var captures = [];
                    // NOTE: This is equivalent to
                    //   captures = result.slice(1).map(maybeToString)
                    // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
                    // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
                    // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
                    for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));
                    var namedCaptures = result.groups;
                    if (functionalReplace) {
                        var replacerArgs = [matched].concat(captures, position, S);
                        if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
                        var replacement = toString$8(replaceValue.apply(undefined, replacerArgs));
                    } else {
                        replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
                    }
                    if (position >= nextSourcePosition) {
                        accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
                        nextSourcePosition = position + matched.length;
                    }
                }
                return accumulatedResult + S.slice(nextSourcePosition);
            }
        ];
    }, !REPLACE_SUPPORTS_NAMED_GROUPS || !REPLACE_KEEPS_$0 || REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE);

    var runtime = {
        exports: {}
    };

    /**
     * Copyright (c) 2014-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    (function(module) {
        var runtime = (function(exports) {

            var Op = Object.prototype;
            var hasOwn = Op.hasOwnProperty;
            var undefined$1; // More compressible than void 0.
            var $Symbol = typeof Symbol === "function" ? Symbol : {};
            var iteratorSymbol = $Symbol.iterator || "@@iterator";
            var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
            var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

            function define(obj, key, value) {
                Object.defineProperty(obj, key, {
                    value: value,
                    enumerable: true,
                    configurable: true,
                    writable: true
                });
                return obj[key];
            }
            try {
                // IE 8 has a broken Object.defineProperty that only works on DOM objects.
                define({}, "");
            } catch (err) {
                define = function(obj, key, value) {
                    return obj[key] = value;
                };
            }

            function wrap(innerFn, outerFn, self, tryLocsList) {
                // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
                var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
                var generator = Object.create(protoGenerator.prototype);
                var context = new Context(tryLocsList || []);

                // The ._invoke method unifies the implementations of the .next,
                // .throw, and .return methods.
                generator._invoke = makeInvokeMethod(innerFn, self, context);

                return generator;
            }
            exports.wrap = wrap;

            // Try/catch helper to minimize deoptimizations. Returns a completion
            // record like context.tryEntries[i].completion. This interface could
            // have been (and was previously) designed to take a closure to be
            // invoked without arguments, but in all the cases we care about we
            // already have an existing method we want to call, so there's no need
            // to create a new function object. We can even get away with assuming
            // the method takes exactly one argument, since that happens to be true
            // in every case, so we don't have to touch the arguments object. The
            // only additional allocation required is the completion record, which
            // has a stable shape and so hopefully should be cheap to allocate.
            function tryCatch(fn, obj, arg) {
                try {
                    return {
                        type: "normal",
                        arg: fn.call(obj, arg)
                    };
                } catch (err) {
                    return {
                        type: "throw",
                        arg: err
                    };
                }
            }

            var GenStateSuspendedStart = "suspendedStart";
            var GenStateSuspendedYield = "suspendedYield";
            var GenStateExecuting = "executing";
            var GenStateCompleted = "completed";

            // Returning this object from the innerFn has the same effect as
            // breaking out of the dispatch switch statement.
            var ContinueSentinel = {};

            // Dummy constructor functions that we use as the .constructor and
            // .constructor.prototype properties for functions that return Generator
            // objects. For full spec compliance, you may wish to configure your
            // minifier not to mangle the names of these two functions.
            function Generator() {}

            function GeneratorFunction() {}

            function GeneratorFunctionPrototype() {}

            // This is a polyfill for %IteratorPrototype% for environments that
            // don't natively support it.
            var IteratorPrototype = {};
            define(IteratorPrototype, iteratorSymbol, function() {
                return this;
            });

            var getProto = Object.getPrototypeOf;
            var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
            if (NativeIteratorPrototype &&
                NativeIteratorPrototype !== Op &&
                hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
                // This environment has a native %IteratorPrototype%; use it instead
                // of the polyfill.
                IteratorPrototype = NativeIteratorPrototype;
            }

            var Gp = GeneratorFunctionPrototype.prototype =
                Generator.prototype = Object.create(IteratorPrototype);
            GeneratorFunction.prototype = GeneratorFunctionPrototype;
            define(Gp, "constructor", GeneratorFunctionPrototype);
            define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
            GeneratorFunction.displayName = define(
                GeneratorFunctionPrototype,
                toStringTagSymbol,
                "GeneratorFunction"
            );

            // Helper for defining the .next, .throw, and .return methods of the
            // Iterator interface in terms of a single ._invoke method.
            function defineIteratorMethods(prototype) {
                ["next", "throw", "return"].forEach(function(method) {
                    define(prototype, method, function(arg) {
                        return this._invoke(method, arg);
                    });
                });
            }

            exports.isGeneratorFunction = function(genFun) {
                var ctor = typeof genFun === "function" && genFun.constructor;
                return ctor ?
                    ctor === GeneratorFunction ||
                    // For the native GeneratorFunction constructor, the best we can
                    // do is to check its .name property.
                    (ctor.displayName || ctor.name) === "GeneratorFunction" :
                    false;
            };

            exports.mark = function(genFun) {
                if (Object.setPrototypeOf) {
                    Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
                } else {
                    genFun.__proto__ = GeneratorFunctionPrototype;
                    define(genFun, toStringTagSymbol, "GeneratorFunction");
                }
                genFun.prototype = Object.create(Gp);
                return genFun;
            };

            // Within the body of any async function, `await x` is transformed to
            // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
            // `hasOwn.call(value, "__await")` to determine if the yielded value is
            // meant to be awaited.
            exports.awrap = function(arg) {
                return {
                    __await: arg
                };
            };

            function AsyncIterator(generator, PromiseImpl) {
                function invoke(method, arg, resolve, reject) {
                    var record = tryCatch(generator[method], generator, arg);
                    if (record.type === "throw") {
                        reject(record.arg);
                    } else {
                        var result = record.arg;
                        var value = result.value;
                        if (value &&
                            typeof value === "object" &&
                            hasOwn.call(value, "__await")) {
                            return PromiseImpl.resolve(value.__await).then(function(value) {
                                invoke("next", value, resolve, reject);
                            }, function(err) {
                                invoke("throw", err, resolve, reject);
                            });
                        }

                        return PromiseImpl.resolve(value).then(function(unwrapped) {
                            // When a yielded Promise is resolved, its final value becomes
                            // the .value of the Promise<{value,done}> result for the
                            // current iteration.
                            result.value = unwrapped;
                            resolve(result);
                        }, function(error) {
                            // If a rejected Promise was yielded, throw the rejection back
                            // into the async generator function so it can be handled there.
                            return invoke("throw", error, resolve, reject);
                        });
                    }
                }

                var previousPromise;

                function enqueue(method, arg) {
                    function callInvokeWithMethodAndArg() {
                        return new PromiseImpl(function(resolve, reject) {
                            invoke(method, arg, resolve, reject);
                        });
                    }

                    return previousPromise =
                        // If enqueue has been called before, then we want to wait until
                        // all previous Promises have been resolved before calling invoke,
                        // so that results are always delivered in the correct order. If
                        // enqueue has not been called before, then it is important to
                        // call invoke immediately, without waiting on a callback to fire,
                        // so that the async generator function has the opportunity to do
                        // any necessary setup in a predictable way. This predictability
                        // is why the Promise constructor synchronously invokes its
                        // executor callback, and why async functions synchronously
                        // execute code before the first await. Since we implement simple
                        // async functions in terms of async generators, it is especially
                        // important to get this right, even though it requires care.
                        previousPromise ? previousPromise.then(
                            callInvokeWithMethodAndArg,
                            // Avoid propagating failures to Promises returned by later
                            // invocations of the iterator.
                            callInvokeWithMethodAndArg
                        ) : callInvokeWithMethodAndArg();
                }

                // Define the unified helper method that is used to implement .next,
                // .throw, and .return (see defineIteratorMethods).
                this._invoke = enqueue;
            }

            defineIteratorMethods(AsyncIterator.prototype);
            define(AsyncIterator.prototype, asyncIteratorSymbol, function() {
                return this;
            });
            exports.AsyncIterator = AsyncIterator;

            // Note that simple async functions are implemented on top of
            // AsyncIterator objects; they just return a Promise for the value of
            // the final result produced by the iterator.
            exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
                if (PromiseImpl === void 0) PromiseImpl = Promise;

                var iter = new AsyncIterator(
                    wrap(innerFn, outerFn, self, tryLocsList),
                    PromiseImpl
                );

                return exports.isGeneratorFunction(outerFn) ?
                    iter // If outerFn is a generator, return the full iterator.
                    :
                    iter.next().then(function(result) {
                        return result.done ? result.value : iter.next();
                    });
            };

            function makeInvokeMethod(innerFn, self, context) {
                var state = GenStateSuspendedStart;

                return function invoke(method, arg) {
                    if (state === GenStateExecuting) {
                        throw new Error("Generator is already running");
                    }

                    if (state === GenStateCompleted) {
                        if (method === "throw") {
                            throw arg;
                        }

                        // Be forgiving, per 25.3.3.3.3 of the spec:
                        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
                        return doneResult();
                    }

                    context.method = method;
                    context.arg = arg;

                    while (true) {
                        var delegate = context.delegate;
                        if (delegate) {
                            var delegateResult = maybeInvokeDelegate(delegate, context);
                            if (delegateResult) {
                                if (delegateResult === ContinueSentinel) continue;
                                return delegateResult;
                            }
                        }

                        if (context.method === "next") {
                            // Setting context._sent for legacy support of Babel's
                            // function.sent implementation.
                            context.sent = context._sent = context.arg;

                        } else if (context.method === "throw") {
                            if (state === GenStateSuspendedStart) {
                                state = GenStateCompleted;
                                throw context.arg;
                            }

                            context.dispatchException(context.arg);

                        } else if (context.method === "return") {
                            context.abrupt("return", context.arg);
                        }

                        state = GenStateExecuting;

                        var record = tryCatch(innerFn, self, context);
                        if (record.type === "normal") {
                            // If an exception is thrown from innerFn, we leave state ===
                            // GenStateExecuting and loop back for another invocation.
                            state = context.done ?
                                GenStateCompleted :
                                GenStateSuspendedYield;

                            if (record.arg === ContinueSentinel) {
                                continue;
                            }

                            return {
                                value: record.arg,
                                done: context.done
                            };

                        } else if (record.type === "throw") {
                            state = GenStateCompleted;
                            // Dispatch the exception by looping back around to the
                            // context.dispatchException(context.arg) call above.
                            context.method = "throw";
                            context.arg = record.arg;
                        }
                    }
                };
            }

            // Call delegate.iterator[context.method](context.arg) and handle the
            // result, either by returning a { value, done } result from the
            // delegate iterator, or by modifying context.method and context.arg,
            // setting context.delegate to null, and returning the ContinueSentinel.
            function maybeInvokeDelegate(delegate, context) {
                var method = delegate.iterator[context.method];
                if (method === undefined$1) {
                    // A .throw or .return when the delegate iterator has no .throw
                    // method always terminates the yield* loop.
                    context.delegate = null;

                    if (context.method === "throw") {
                        // Note: ["return"] must be used for ES3 parsing compatibility.
                        if (delegate.iterator["return"]) {
                            // If the delegate iterator has a return method, give it a
                            // chance to clean up.
                            context.method = "return";
                            context.arg = undefined$1;
                            maybeInvokeDelegate(delegate, context);

                            if (context.method === "throw") {
                                // If maybeInvokeDelegate(context) changed context.method from
                                // "return" to "throw", let that override the TypeError below.
                                return ContinueSentinel;
                            }
                        }

                        context.method = "throw";
                        context.arg = new TypeError(
                            "The iterator does not provide a 'throw' method");
                    }

                    return ContinueSentinel;
                }

                var record = tryCatch(method, delegate.iterator, context.arg);

                if (record.type === "throw") {
                    context.method = "throw";
                    context.arg = record.arg;
                    context.delegate = null;
                    return ContinueSentinel;
                }

                var info = record.arg;

                if (!info) {
                    context.method = "throw";
                    context.arg = new TypeError("iterator result is not an object");
                    context.delegate = null;
                    return ContinueSentinel;
                }

                if (info.done) {
                    // Assign the result of the finished delegate to the temporary
                    // variable specified by delegate.resultName (see delegateYield).
                    context[delegate.resultName] = info.value;

                    // Resume execution at the desired location (see delegateYield).
                    context.next = delegate.nextLoc;

                    // If context.method was "throw" but the delegate handled the
                    // exception, let the outer generator proceed normally. If
                    // context.method was "next", forget context.arg since it has been
                    // "consumed" by the delegate iterator. If context.method was
                    // "return", allow the original .return call to continue in the
                    // outer generator.
                    if (context.method !== "return") {
                        context.method = "next";
                        context.arg = undefined$1;
                    }

                } else {
                    // Re-yield the result returned by the delegate method.
                    return info;
                }

                // The delegate iterator is finished, so forget it and continue with
                // the outer generator.
                context.delegate = null;
                return ContinueSentinel;
            }

            // Define Generator.prototype.{next,throw,return} in terms of the
            // unified ._invoke helper method.
            defineIteratorMethods(Gp);

            define(Gp, toStringTagSymbol, "Generator");

            // A Generator should always return itself as the iterator object when the
            // @@iterator function is called on it. Some browsers' implementations of the
            // iterator prototype chain incorrectly implement this, causing the Generator
            // object to not be returned from this call. This ensures that doesn't happen.
            // See https://github.com/facebook/regenerator/issues/274 for more details.
            define(Gp, iteratorSymbol, function() {
                return this;
            });

            define(Gp, "toString", function() {
                return "[object Generator]";
            });

            function pushTryEntry(locs) {
                var entry = {
                    tryLoc: locs[0]
                };

                if (1 in locs) {
                    entry.catchLoc = locs[1];
                }

                if (2 in locs) {
                    entry.finallyLoc = locs[2];
                    entry.afterLoc = locs[3];
                }

                this.tryEntries.push(entry);
            }

            function resetTryEntry(entry) {
                var record = entry.completion || {};
                record.type = "normal";
                delete record.arg;
                entry.completion = record;
            }

            function Context(tryLocsList) {
                // The root entry object (effectively a try statement without a catch
                // or a finally block) gives us a place to store values thrown from
                // locations where there is no enclosing try statement.
                this.tryEntries = [{
                    tryLoc: "root"
                }];
                tryLocsList.forEach(pushTryEntry, this);
                this.reset(true);
            }

            exports.keys = function(object) {
                var keys = [];
                for (var key in object) {
                    keys.push(key);
                }
                keys.reverse();

                // Rather than returning an object with a next method, we keep
                // things simple and return the next function itself.
                return function next() {
                    while (keys.length) {
                        var key = keys.pop();
                        if (key in object) {
                            next.value = key;
                            next.done = false;
                            return next;
                        }
                    }

                    // To avoid creating an additional object, we just hang the .value
                    // and .done properties off the next function object itself. This
                    // also ensures that the minifier will not anonymize the function.
                    next.done = true;
                    return next;
                };
            };

            function values(iterable) {
                if (iterable) {
                    var iteratorMethod = iterable[iteratorSymbol];
                    if (iteratorMethod) {
                        return iteratorMethod.call(iterable);
                    }

                    if (typeof iterable.next === "function") {
                        return iterable;
                    }

                    if (!isNaN(iterable.length)) {
                        var i = -1,
                            next = function next() {
                                while (++i < iterable.length) {
                                    if (hasOwn.call(iterable, i)) {
                                        next.value = iterable[i];
                                        next.done = false;
                                        return next;
                                    }
                                }

                                next.value = undefined$1;
                                next.done = true;

                                return next;
                            };

                        return next.next = next;
                    }
                }

                // Return an iterator with no values.
                return {
                    next: doneResult
                };
            }
            exports.values = values;

            function doneResult() {
                return {
                    value: undefined$1,
                    done: true
                };
            }

            Context.prototype = {
                constructor: Context,

                reset: function(skipTempReset) {
                    this.prev = 0;
                    this.next = 0;
                    // Resetting context._sent for legacy support of Babel's
                    // function.sent implementation.
                    this.sent = this._sent = undefined$1;
                    this.done = false;
                    this.delegate = null;

                    this.method = "next";
                    this.arg = undefined$1;

                    this.tryEntries.forEach(resetTryEntry);

                    if (!skipTempReset) {
                        for (var name in this) {
                            // Not sure about the optimal order of these conditions:
                            if (name.charAt(0) === "t" &&
                                hasOwn.call(this, name) &&
                                !isNaN(+name.slice(1))) {
                                this[name] = undefined$1;
                            }
                        }
                    }
                },

                stop: function() {
                    this.done = true;

                    var rootEntry = this.tryEntries[0];
                    var rootRecord = rootEntry.completion;
                    if (rootRecord.type === "throw") {
                        throw rootRecord.arg;
                    }

                    return this.rval;
                },

                dispatchException: function(exception) {
                    if (this.done) {
                        throw exception;
                    }

                    var context = this;

                    function handle(loc, caught) {
                        record.type = "throw";
                        record.arg = exception;
                        context.next = loc;

                        if (caught) {
                            // If the dispatched exception was caught by a catch block,
                            // then let that catch block handle the exception normally.
                            context.method = "next";
                            context.arg = undefined$1;
                        }

                        return !!caught;
                    }

                    for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                        var entry = this.tryEntries[i];
                        var record = entry.completion;

                        if (entry.tryLoc === "root") {
                            // Exception thrown outside of any try block that could handle
                            // it, so set the completion value of the entire function to
                            // throw the exception.
                            return handle("end");
                        }

                        if (entry.tryLoc <= this.prev) {
                            var hasCatch = hasOwn.call(entry, "catchLoc");
                            var hasFinally = hasOwn.call(entry, "finallyLoc");

                            if (hasCatch && hasFinally) {
                                if (this.prev < entry.catchLoc) {
                                    return handle(entry.catchLoc, true);
                                } else if (this.prev < entry.finallyLoc) {
                                    return handle(entry.finallyLoc);
                                }

                            } else if (hasCatch) {
                                if (this.prev < entry.catchLoc) {
                                    return handle(entry.catchLoc, true);
                                }

                            } else if (hasFinally) {
                                if (this.prev < entry.finallyLoc) {
                                    return handle(entry.finallyLoc);
                                }

                            } else {
                                throw new Error("try statement without catch or finally");
                            }
                        }
                    }
                },

                abrupt: function(type, arg) {
                    for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                        var entry = this.tryEntries[i];
                        if (entry.tryLoc <= this.prev &&
                            hasOwn.call(entry, "finallyLoc") &&
                            this.prev < entry.finallyLoc) {
                            var finallyEntry = entry;
                            break;
                        }
                    }

                    if (finallyEntry &&
                        (type === "break" ||
                            type === "continue") &&
                        finallyEntry.tryLoc <= arg &&
                        arg <= finallyEntry.finallyLoc) {
                        // Ignore the finally entry if control is not jumping to a
                        // location outside the try/catch block.
                        finallyEntry = null;
                    }

                    var record = finallyEntry ? finallyEntry.completion : {};
                    record.type = type;
                    record.arg = arg;

                    if (finallyEntry) {
                        this.method = "next";
                        this.next = finallyEntry.finallyLoc;
                        return ContinueSentinel;
                    }

                    return this.complete(record);
                },

                complete: function(record, afterLoc) {
                    if (record.type === "throw") {
                        throw record.arg;
                    }

                    if (record.type === "break" ||
                        record.type === "continue") {
                        this.next = record.arg;
                    } else if (record.type === "return") {
                        this.rval = this.arg = record.arg;
                        this.method = "return";
                        this.next = "end";
                    } else if (record.type === "normal" && afterLoc) {
                        this.next = afterLoc;
                    }

                    return ContinueSentinel;
                },

                finish: function(finallyLoc) {
                    for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                        var entry = this.tryEntries[i];
                        if (entry.finallyLoc === finallyLoc) {
                            this.complete(entry.completion, entry.afterLoc);
                            resetTryEntry(entry);
                            return ContinueSentinel;
                        }
                    }
                },

                "catch": function(tryLoc) {
                    for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                        var entry = this.tryEntries[i];
                        if (entry.tryLoc === tryLoc) {
                            var record = entry.completion;
                            if (record.type === "throw") {
                                var thrown = record.arg;
                                resetTryEntry(entry);
                            }
                            return thrown;
                        }
                    }

                    // The context.catch method must only be called with a location
                    // argument that corresponds to a known catch block.
                    throw new Error("illegal catch attempt");
                },

                delegateYield: function(iterable, resultName, nextLoc) {
                    this.delegate = {
                        iterator: values(iterable),
                        resultName: resultName,
                        nextLoc: nextLoc
                    };

                    if (this.method === "next") {
                        // Deliberately forget the last sent value so that we don't
                        // accidentally pass it on to the delegate.
                        this.arg = undefined$1;
                    }

                    return ContinueSentinel;
                }
            };

            // Regardless of whether this script is executing as a CommonJS module
            // or not, return the runtime object so that we can declare the variable
            // regeneratorRuntime in the outer scope, which allows this module to be
            // injected easily by `bin/regenerator --include-runtime script.js`.
            return exports;

        }(
            // If this script is executing as a CommonJS module, use module.exports
            // as the regeneratorRuntime namespace. Otherwise create a new empty
            // object. Either way, the resulting object will be used to initialize
            // the regeneratorRuntime variable at the top of this file.
            module.exports
        ));

        try {
            regeneratorRuntime = runtime;
        } catch (accidentalStrictMode) {
            // This module should not be running in strict mode, so the above
            // assignment should always work unless something is misconfigured. Just
            // in case runtime.js accidentally runs in strict mode, in modern engines
            // we can explicitly access globalThis. In older engines we can escape
            // strict mode using a global Function call. This could conceivably fail
            // if a Content Security Policy forbids using Function, but in that case
            // the proper solution is to fix the accidental strict mode problem. If
            // you've misconfigured your bundler to force strict mode and applied a
            // CSP to forbid Function, and you're not willing to fix either of those
            // problems, please detail your unique predicament in a GitHub issue.
            if (typeof globalThis === "object") {
                globalThis.regeneratorRuntime = runtime;
            } else {
                Function("r", "regeneratorRuntime = r")(runtime);
            }
        }
    }(runtime));

    var anObject$2 = anObject$h;
    var iteratorClose = iteratorClose$2;

    // call something on iterator step with safe closing on error
    var callWithSafeIterationClosing$1 = function(iterator, fn, value, ENTRIES) {
        try {
            return ENTRIES ? fn(anObject$2(value)[0], value[1]) : fn(value);
        } catch (error) {
            iteratorClose(iterator);
            throw error;
        }
    };

    var toPropertyKey$2 = toPropertyKey$5;
    var definePropertyModule$3 = objectDefineProperty;
    var createPropertyDescriptor$3 = createPropertyDescriptor$6;

    var createProperty$4 = function(object, key, value) {
        var propertyKey = toPropertyKey$2(key);
        if (propertyKey in object) definePropertyModule$3.f(object, propertyKey, createPropertyDescriptor$3(0, value));
        else object[propertyKey] = value;
    };

    var bind$2 = functionBindContext;
    var toObject$c = toObject$g;
    var callWithSafeIterationClosing = callWithSafeIterationClosing$1;
    var isArrayIteratorMethod$1 = isArrayIteratorMethod$3;
    var toLength$h = toLength$n;
    var createProperty$3 = createProperty$4;
    var getIteratorMethod$1 = getIteratorMethod$3;

    // `Array.from` method implementation
    // https://tc39.es/ecma262/#sec-array.from
    var arrayFrom = function from(arrayLike /* , mapfn = undefined, thisArg = undefined */ ) {
        var O = toObject$c(arrayLike);
        var C = typeof this == 'function' ? this : Array;
        var argumentsLength = arguments.length;
        var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
        var mapping = mapfn !== undefined;
        var iteratorMethod = getIteratorMethod$1(O);
        var index = 0;
        var length, result, step, iterator, next, value;
        if (mapping) mapfn = bind$2(mapfn, argumentsLength > 2 ? arguments[2] : undefined, 2);
        // if the target is not iterable or it's an array with the default iterator - use a simple case
        if (iteratorMethod != undefined && !(C == Array && isArrayIteratorMethod$1(iteratorMethod))) {
            iterator = iteratorMethod.call(O);
            next = iterator.next;
            result = new C();
            for (; !(step = next.call(iterator)).done; index++) {
                value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value;
                createProperty$3(result, index, value);
            }
        } else {
            length = toLength$h(O.length);
            result = new C(length);
            for (; length > index; index++) {
                value = mapping ? mapfn(O[index], index) : O[index];
                createProperty$3(result, index, value);
            }
        }
        result.length = index;
        return result;
    };

    var $$n = _export;
    var from = arrayFrom;
    var checkCorrectnessOfIteration$1 = checkCorrectnessOfIteration$3;

    var INCORRECT_ITERATION = !checkCorrectnessOfIteration$1(function(iterable) {
        // eslint-disable-next-line es/no-array-from -- required for testing
        Array.from(iterable);
    });

    // `Array.from` method
    // https://tc39.es/ecma262/#sec-array.from
    $$n({
        target: 'Array',
        stat: true,
        forced: INCORRECT_ITERATION
    }, {
        from: from
    });

    var fails$h = fails$x;

    var correctPrototypeGetter = !fails$h(function() {
        function F() {
            /* empty */ }
        F.prototype.constructor = null;
        // eslint-disable-next-line es/no-object-getprototypeof -- required for testing
        return Object.getPrototypeOf(new F()) !== F.prototype;
    });

    var has$8 = has$g;
    var toObject$b = toObject$g;
    var sharedKey$1 = sharedKey$4;
    var CORRECT_PROTOTYPE_GETTER = correctPrototypeGetter;

    var IE_PROTO = sharedKey$1('IE_PROTO');
    var ObjectPrototype$3 = Object.prototype;

    // `Object.getPrototypeOf` method
    // https://tc39.es/ecma262/#sec-object.getprototypeof
    // eslint-disable-next-line es/no-object-getprototypeof -- safe
    var objectGetPrototypeOf = CORRECT_PROTOTYPE_GETTER ? Object.getPrototypeOf : function(O) {
        O = toObject$b(O);
        if (has$8(O, IE_PROTO)) return O[IE_PROTO];
        if (typeof O.constructor == 'function' && O instanceof O.constructor) {
            return O.constructor.prototype;
        }
        return O instanceof Object ? ObjectPrototype$3 : null;
    };

    var fails$g = fails$x;
    var getPrototypeOf$3 = objectGetPrototypeOf;
    var createNonEnumerableProperty$8 = createNonEnumerableProperty$d;
    var has$7 = has$g;
    var wellKnownSymbol$d = wellKnownSymbol$r;

    var ITERATOR$3 = wellKnownSymbol$d('iterator');
    var BUGGY_SAFARI_ITERATORS$1 = false;

    var returnThis$2 = function() {
        return this;
    };

    // `%IteratorPrototype%` object
    // https://tc39.es/ecma262/#sec-%iteratorprototype%-object
    var IteratorPrototype$2, PrototypeOfArrayIteratorPrototype, arrayIterator;

    /* eslint-disable es/no-array-prototype-keys -- safe */
    if ([].keys) {
        arrayIterator = [].keys();
        // Safari 8 has buggy iterators w/o `next`
        if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS$1 = true;
        else {
            PrototypeOfArrayIteratorPrototype = getPrototypeOf$3(getPrototypeOf$3(arrayIterator));
            if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype$2 = PrototypeOfArrayIteratorPrototype;
        }
    }

    var NEW_ITERATOR_PROTOTYPE = IteratorPrototype$2 == undefined || fails$g(function() {
        var test = {};
        // FF44- legacy iterators case
        return IteratorPrototype$2[ITERATOR$3].call(test) !== test;
    });

    if (NEW_ITERATOR_PROTOTYPE) IteratorPrototype$2 = {};

    // `%IteratorPrototype%[@@iterator]()` method
    // https://tc39.es/ecma262/#sec-%iteratorprototype%-@@iterator
    if (!has$7(IteratorPrototype$2, ITERATOR$3)) {
        createNonEnumerableProperty$8(IteratorPrototype$2, ITERATOR$3, returnThis$2);
    }

    var iteratorsCore = {
        IteratorPrototype: IteratorPrototype$2,
        BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS$1
    };

    var IteratorPrototype$1 = iteratorsCore.IteratorPrototype;
    var create$3 = objectCreate;
    var createPropertyDescriptor$2 = createPropertyDescriptor$6;
    var setToStringTag$3 = setToStringTag$5;
    var Iterators$2 = iterators;

    var returnThis$1 = function() {
        return this;
    };

    var createIteratorConstructor$1 = function(IteratorConstructor, NAME, next) {
        var TO_STRING_TAG = NAME + ' Iterator';
        IteratorConstructor.prototype = create$3(IteratorPrototype$1, {
            next: createPropertyDescriptor$2(1, next)
        });
        setToStringTag$3(IteratorConstructor, TO_STRING_TAG, false);
        Iterators$2[TO_STRING_TAG] = returnThis$1;
        return IteratorConstructor;
    };

    var $$m = _export;
    var createIteratorConstructor = createIteratorConstructor$1;
    var getPrototypeOf$2 = objectGetPrototypeOf;
    var setPrototypeOf$4 = objectSetPrototypeOf;
    var setToStringTag$2 = setToStringTag$5;
    var createNonEnumerableProperty$7 = createNonEnumerableProperty$d;
    var redefine$4 = redefine$b.exports;
    var wellKnownSymbol$c = wellKnownSymbol$r;
    var Iterators$1 = iterators;
    var IteratorsCore = iteratorsCore;

    var IteratorPrototype = IteratorsCore.IteratorPrototype;
    var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
    var ITERATOR$2 = wellKnownSymbol$c('iterator');
    var KEYS = 'keys';
    var VALUES = 'values';
    var ENTRIES = 'entries';

    var returnThis = function() {
        return this;
    };

    var defineIterator$2 = function(Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
        createIteratorConstructor(IteratorConstructor, NAME, next);

        var getIterationMethod = function(KIND) {
            if (KIND === DEFAULT && defaultIterator) return defaultIterator;
            if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];
            switch (KIND) {
                case KEYS:
                    return function keys() {
                        return new IteratorConstructor(this, KIND);
                    };
                case VALUES:
                    return function values() {
                        return new IteratorConstructor(this, KIND);
                    };
                case ENTRIES:
                    return function entries() {
                        return new IteratorConstructor(this, KIND);
                    };
            }
            return function() {
                return new IteratorConstructor(this);
            };
        };

        var TO_STRING_TAG = NAME + ' Iterator';
        var INCORRECT_VALUES_NAME = false;
        var IterablePrototype = Iterable.prototype;
        var nativeIterator = IterablePrototype[ITERATOR$2] ||
            IterablePrototype['@@iterator'] ||
            DEFAULT && IterablePrototype[DEFAULT];
        var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
        var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
        var CurrentIteratorPrototype, methods, KEY;

        // fix native
        if (anyNativeIterator) {
            CurrentIteratorPrototype = getPrototypeOf$2(anyNativeIterator.call(new Iterable()));
            if (IteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
                if (getPrototypeOf$2(CurrentIteratorPrototype) !== IteratorPrototype) {
                    if (setPrototypeOf$4) {
                        setPrototypeOf$4(CurrentIteratorPrototype, IteratorPrototype);
                    } else if (typeof CurrentIteratorPrototype[ITERATOR$2] != 'function') {
                        createNonEnumerableProperty$7(CurrentIteratorPrototype, ITERATOR$2, returnThis);
                    }
                }
                // Set @@toStringTag to native iterators
                setToStringTag$2(CurrentIteratorPrototype, TO_STRING_TAG, true);
            }
        }

        // fix Array.prototype.{ values, @@iterator }.name in V8 / FF
        if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
            INCORRECT_VALUES_NAME = true;
            defaultIterator = function values() {
                return nativeIterator.call(this);
            };
        }

        // define iterator
        if (IterablePrototype[ITERATOR$2] !== defaultIterator) {
            createNonEnumerableProperty$7(IterablePrototype, ITERATOR$2, defaultIterator);
        }
        Iterators$1[NAME] = defaultIterator;

        // export additional methods
        if (DEFAULT) {
            methods = {
                values: getIterationMethod(VALUES),
                keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
                entries: getIterationMethod(ENTRIES)
            };
            if (FORCED)
                for (KEY in methods) {
                    if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
                        redefine$4(IterablePrototype, KEY, methods[KEY]);
                    }
                } else $$m({
                    target: NAME,
                    proto: true,
                    forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME
                }, methods);
        }

        return methods;
    };

    var charAt = stringMultibyte.charAt;
    var toString$7 = toString$h;
    var InternalStateModule$4 = internalState;
    var defineIterator$1 = defineIterator$2;

    var STRING_ITERATOR = 'String Iterator';
    var setInternalState$4 = InternalStateModule$4.set;
    var getInternalState$4 = InternalStateModule$4.getterFor(STRING_ITERATOR);

    // `String.prototype[@@iterator]` method
    // https://tc39.es/ecma262/#sec-string.prototype-@@iterator
    defineIterator$1(String, 'String', function(iterated) {
        setInternalState$4(this, {
            type: STRING_ITERATOR,
            string: toString$7(iterated),
            index: 0
        });
        // `%StringIteratorPrototype%.next` method
        // https://tc39.es/ecma262/#sec-%stringiteratorprototype%.next
    }, function next() {
        var state = getInternalState$4(this);
        var string = state.string;
        var index = state.index;
        var point;
        if (index >= string.length) return {
            value: undefined,
            done: true
        };
        point = charAt(string, index);
        state.index += point.length;
        return {
            value: point,
            done: false
        };
    });

    var classof$3 = classofRaw$1;

    // `IsArray` abstract operation
    // https://tc39.es/ecma262/#sec-isarray
    // eslint-disable-next-line es/no-array-isarray -- safe
    var isArray$4 = Array.isArray || function isArray(arg) {
        return classof$3(arg) == 'Array';
    };

    var fails$f = fails$x;
    var wellKnownSymbol$b = wellKnownSymbol$r;
    var V8_VERSION$1 = engineV8Version;

    var SPECIES$2 = wellKnownSymbol$b('species');

    var arrayMethodHasSpeciesSupport$5 = function(METHOD_NAME) {
        // We can't use this feature detection in V8 since it causes
        // deoptimization and serious performance degradation
        // https://github.com/zloirock/core-js/issues/677
        return V8_VERSION$1 >= 51 || !fails$f(function() {
            var array = [];
            var constructor = array.constructor = {};
            constructor[SPECIES$2] = function() {
                return {
                    foo: 1
                };
            };
            return array[METHOD_NAME](Boolean).foo !== 1;
        });
    };

    var $$l = _export;
    var isObject$8 = isObject$i;
    var isArray$3 = isArray$4;
    var toAbsoluteIndex$4 = toAbsoluteIndex$6;
    var toLength$g = toLength$n;
    var toIndexedObject$4 = toIndexedObject$a;
    var createProperty$2 = createProperty$4;
    var wellKnownSymbol$a = wellKnownSymbol$r;
    var arrayMethodHasSpeciesSupport$4 = arrayMethodHasSpeciesSupport$5;

    var HAS_SPECIES_SUPPORT$3 = arrayMethodHasSpeciesSupport$4('slice');

    var SPECIES$1 = wellKnownSymbol$a('species');
    var nativeSlice = [].slice;
    var max$1 = Math.max;

    // `Array.prototype.slice` method
    // https://tc39.es/ecma262/#sec-array.prototype.slice
    // fallback for not array-like ES3 strings and DOM objects
    $$l({
        target: 'Array',
        proto: true,
        forced: !HAS_SPECIES_SUPPORT$3
    }, {
        slice: function slice(start, end) {
            var O = toIndexedObject$4(this);
            var length = toLength$g(O.length);
            var k = toAbsoluteIndex$4(start, length);
            var fin = toAbsoluteIndex$4(end === undefined ? length : end, length);
            // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible
            var Constructor, result, n;
            if (isArray$3(O)) {
                Constructor = O.constructor;
                // cross-realm fallback
                if (typeof Constructor == 'function' && (Constructor === Array || isArray$3(Constructor.prototype))) {
                    Constructor = undefined;
                } else if (isObject$8(Constructor)) {
                    Constructor = Constructor[SPECIES$1];
                    if (Constructor === null) Constructor = undefined;
                }
                if (Constructor === Array || Constructor === undefined) {
                    return nativeSlice.call(O, k, fin);
                }
            }
            result = new(Constructor === undefined ? Array : Constructor)(max$1(fin - k, 0));
            for (n = 0; k < fin; k++, n++)
                if (k in O) createProperty$2(result, n, O[k]);
            result.length = n;
            return result;
        }
    });

    var $$k = _export;

    // eslint-disable-next-line es/no-math-hypot -- required for testing
    var $hypot = Math.hypot;
    var abs$1 = Math.abs;
    var sqrt = Math.sqrt;

    // Chrome 77 bug
    // https://bugs.chromium.org/p/v8/issues/detail?id=9546
    var BUGGY = !!$hypot && $hypot(Infinity, NaN) !== Infinity;

    // `Math.hypot` method
    // https://tc39.es/ecma262/#sec-math.hypot
    $$k({
        target: 'Math',
        stat: true,
        forced: BUGGY
    }, {
        // eslint-disable-next-line no-unused-vars -- required for `.length`
        hypot: function hypot(value1, value2) {
            var sum = 0;
            var i = 0;
            var aLen = arguments.length;
            var larg = 0;
            var arg, div;
            while (i < aLen) {
                arg = abs$1(arguments[i++]);
                if (larg < arg) {
                    div = larg / arg;
                    sum = sum * div * div + 1;
                    larg = arg;
                } else if (arg > 0) {
                    div = arg / larg;
                    sum += div * div;
                } else sum += arg;
            }
            return larg === Infinity ? Infinity : larg * sqrt(sum);
        }
    });

    var DESCRIPTORS$8 = descriptors;
    var defineProperty$6 = objectDefineProperty.f;

    var FunctionPrototype = Function.prototype;
    var FunctionPrototypeToString = FunctionPrototype.toString;
    var nameRE = /^\s*function ([^ (]*)/;
    var NAME$1 = 'name';

    // Function instances `.name` property
    // https://tc39.es/ecma262/#sec-function-instances-name
    if (DESCRIPTORS$8 && !(NAME$1 in FunctionPrototype)) {
        defineProperty$6(FunctionPrototype, NAME$1, {
            configurable: true,
            get: function() {
                try {
                    return FunctionPrototypeToString.call(this).match(nameRE)[1];
                } catch (error) {
                    return '';
                }
            }
        });
    }

    var isObject$7 = isObject$i;
    var isArray$2 = isArray$4;
    var wellKnownSymbol$9 = wellKnownSymbol$r;

    var SPECIES = wellKnownSymbol$9('species');

    // a part of `ArraySpeciesCreate` abstract operation
    // https://tc39.es/ecma262/#sec-arrayspeciescreate
    var arraySpeciesConstructor$1 = function(originalArray) {
        var C;
        if (isArray$2(originalArray)) {
            C = originalArray.constructor;
            // cross-realm fallback
            if (typeof C == 'function' && (C === Array || isArray$2(C.prototype))) C = undefined;
            else if (isObject$7(C)) {
                C = C[SPECIES];
                if (C === null) C = undefined;
            }
        }
        return C === undefined ? Array : C;
    };

    var arraySpeciesConstructor = arraySpeciesConstructor$1;

    // `ArraySpeciesCreate` abstract operation
    // https://tc39.es/ecma262/#sec-arrayspeciescreate
    var arraySpeciesCreate$3 = function(originalArray, length) {
        return new(arraySpeciesConstructor(originalArray))(length === 0 ? 0 : length);
    };

    var $$j = _export;
    var toAbsoluteIndex$3 = toAbsoluteIndex$6;
    var toInteger$4 = toInteger$a;
    var toLength$f = toLength$n;
    var toObject$a = toObject$g;
    var arraySpeciesCreate$2 = arraySpeciesCreate$3;
    var createProperty$1 = createProperty$4;
    var arrayMethodHasSpeciesSupport$3 = arrayMethodHasSpeciesSupport$5;

    var HAS_SPECIES_SUPPORT$2 = arrayMethodHasSpeciesSupport$3('splice');

    var max = Math.max;
    var min$2 = Math.min;
    var MAX_SAFE_INTEGER$1 = 0x1FFFFFFFFFFFFF;
    var MAXIMUM_ALLOWED_LENGTH_EXCEEDED = 'Maximum allowed length exceeded';

    // `Array.prototype.splice` method
    // https://tc39.es/ecma262/#sec-array.prototype.splice
    // with adding support of @@species
    $$j({
        target: 'Array',
        proto: true,
        forced: !HAS_SPECIES_SUPPORT$2
    }, {
        splice: function splice(start, deleteCount /* , ...items */ ) {
            var O = toObject$a(this);
            var len = toLength$f(O.length);
            var actualStart = toAbsoluteIndex$3(start, len);
            var argumentsLength = arguments.length;
            var insertCount, actualDeleteCount, A, k, from, to;
            if (argumentsLength === 0) {
                insertCount = actualDeleteCount = 0;
            } else if (argumentsLength === 1) {
                insertCount = 0;
                actualDeleteCount = len - actualStart;
            } else {
                insertCount = argumentsLength - 2;
                actualDeleteCount = min$2(max(toInteger$4(deleteCount), 0), len - actualStart);
            }
            if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER$1) {
                throw TypeError(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);
            }
            A = arraySpeciesCreate$2(O, actualDeleteCount);
            for (k = 0; k < actualDeleteCount; k++) {
                from = actualStart + k;
                if (from in O) createProperty$1(A, k, O[from]);
            }
            A.length = actualDeleteCount;
            if (insertCount < actualDeleteCount) {
                for (k = actualStart; k < len - actualDeleteCount; k++) {
                    from = k + actualDeleteCount;
                    to = k + insertCount;
                    if (from in O) O[to] = O[from];
                    else delete O[to];
                }
                for (k = len; k > len - actualDeleteCount + insertCount; k--) delete O[k - 1];
            } else if (insertCount > actualDeleteCount) {
                for (k = len - actualDeleteCount; k > actualStart; k--) {
                    from = k + actualDeleteCount - 1;
                    to = k + insertCount - 1;
                    if (from in O) O[to] = O[from];
                    else delete O[to];
                }
            }
            for (k = 0; k < insertCount; k++) {
                O[k + actualStart] = arguments[k + 2];
            }
            O.length = len - actualDeleteCount + insertCount;
            return A;
        }
    });

    var bind$1 = functionBindContext;
    var IndexedObject$1 = indexedObject;
    var toObject$9 = toObject$g;
    var toLength$e = toLength$n;
    var arraySpeciesCreate$1 = arraySpeciesCreate$3;

    var push = [].push;

    // `Array.prototype.{ forEach, map, filter, some, every, find, findIndex, filterReject }` methods implementation
    var createMethod$2 = function(TYPE) {
        var IS_MAP = TYPE == 1;
        var IS_FILTER = TYPE == 2;
        var IS_SOME = TYPE == 3;
        var IS_EVERY = TYPE == 4;
        var IS_FIND_INDEX = TYPE == 6;
        var IS_FILTER_REJECT = TYPE == 7;
        var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
        return function($this, callbackfn, that, specificCreate) {
            var O = toObject$9($this);
            var self = IndexedObject$1(O);
            var boundFunction = bind$1(callbackfn, that, 3);
            var length = toLength$e(self.length);
            var index = 0;
            var create = specificCreate || arraySpeciesCreate$1;
            var target = IS_MAP ? create($this, length) : IS_FILTER || IS_FILTER_REJECT ? create($this, 0) : undefined;
            var value, result;
            for (; length > index; index++)
                if (NO_HOLES || index in self) {
                    value = self[index];
                    result = boundFunction(value, index, O);
                    if (TYPE) {
                        if (IS_MAP) target[index] = result; // map
                        else if (result) switch (TYPE) {
                            case 3:
                                return true; // some
                            case 5:
                                return value; // find
                            case 6:
                                return index; // findIndex
                            case 2:
                                push.call(target, value); // filter
                        } else switch (TYPE) {
                            case 4:
                                return false; // every
                            case 7:
                                push.call(target, value); // filterReject
                        }
                    }
                }
            return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
        };
    };

    var arrayIteration = {
        // `Array.prototype.forEach` method
        // https://tc39.es/ecma262/#sec-array.prototype.foreach
        forEach: createMethod$2(0),
        // `Array.prototype.map` method
        // https://tc39.es/ecma262/#sec-array.prototype.map
        map: createMethod$2(1),
        // `Array.prototype.filter` method
        // https://tc39.es/ecma262/#sec-array.prototype.filter
        filter: createMethod$2(2),
        // `Array.prototype.some` method
        // https://tc39.es/ecma262/#sec-array.prototype.some
        some: createMethod$2(3),
        // `Array.prototype.every` method
        // https://tc39.es/ecma262/#sec-array.prototype.every
        every: createMethod$2(4),
        // `Array.prototype.find` method
        // https://tc39.es/ecma262/#sec-array.prototype.find
        find: createMethod$2(5),
        // `Array.prototype.findIndex` method
        // https://tc39.es/ecma262/#sec-array.prototype.findIndex
        findIndex: createMethod$2(6),
        // `Array.prototype.filterReject` method
        // https://github.com/tc39/proposal-array-filtering
        filterReject: createMethod$2(7)
    };

    var $$i = _export;
    var $map$1 = arrayIteration.map;
    var arrayMethodHasSpeciesSupport$2 = arrayMethodHasSpeciesSupport$5;

    var HAS_SPECIES_SUPPORT$1 = arrayMethodHasSpeciesSupport$2('map');

    // `Array.prototype.map` method
    // https://tc39.es/ecma262/#sec-array.prototype.map
    // with adding support of @@species
    $$i({
        target: 'Array',
        proto: true,
        forced: !HAS_SPECIES_SUPPORT$1
    }, {
        map: function map(callbackfn /* , thisArg */ ) {
            return $map$1(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        }
    });

    var wellKnownSymbol$8 = wellKnownSymbol$r;
    var create$2 = objectCreate;
    var definePropertyModule$2 = objectDefineProperty;

    var UNSCOPABLES = wellKnownSymbol$8('unscopables');
    var ArrayPrototype = Array.prototype;

    // Array.prototype[@@unscopables]
    // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
    if (ArrayPrototype[UNSCOPABLES] == undefined) {
        definePropertyModule$2.f(ArrayPrototype, UNSCOPABLES, {
            configurable: true,
            value: create$2(null)
        });
    }

    // add a key to Array.prototype[@@unscopables]
    var addToUnscopables$2 = function(key) {
        ArrayPrototype[UNSCOPABLES][key] = true;
    };

    var toIndexedObject$3 = toIndexedObject$a;
    var addToUnscopables$1 = addToUnscopables$2;
    var Iterators = iterators;
    var InternalStateModule$3 = internalState;
    var defineIterator = defineIterator$2;

    var ARRAY_ITERATOR = 'Array Iterator';
    var setInternalState$3 = InternalStateModule$3.set;
    var getInternalState$3 = InternalStateModule$3.getterFor(ARRAY_ITERATOR);

    // `Array.prototype.entries` method
    // https://tc39.es/ecma262/#sec-array.prototype.entries
    // `Array.prototype.keys` method
    // https://tc39.es/ecma262/#sec-array.prototype.keys
    // `Array.prototype.values` method
    // https://tc39.es/ecma262/#sec-array.prototype.values
    // `Array.prototype[@@iterator]` method
    // https://tc39.es/ecma262/#sec-array.prototype-@@iterator
    // `CreateArrayIterator` internal method
    // https://tc39.es/ecma262/#sec-createarrayiterator
    var es_array_iterator = defineIterator(Array, 'Array', function(iterated, kind) {
        setInternalState$3(this, {
            type: ARRAY_ITERATOR,
            target: toIndexedObject$3(iterated), // target
            index: 0, // next index
            kind: kind // kind
        });
        // `%ArrayIteratorPrototype%.next` method
        // https://tc39.es/ecma262/#sec-%arrayiteratorprototype%.next
    }, function() {
        var state = getInternalState$3(this);
        var target = state.target;
        var kind = state.kind;
        var index = state.index++;
        if (!target || index >= target.length) {
            state.target = undefined;
            return {
                value: undefined,
                done: true
            };
        }
        if (kind == 'keys') return {
            value: index,
            done: false
        };
        if (kind == 'values') return {
            value: target[index],
            done: false
        };
        return {
            value: [index, target[index]],
            done: false
        };
    }, 'values');

    // argumentsList[@@iterator] is %ArrayProto_values%
    // https://tc39.es/ecma262/#sec-createunmappedargumentsobject
    // https://tc39.es/ecma262/#sec-createmappedargumentsobject
    Iterators.Arguments = Iterators.Array;

    // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
    addToUnscopables$1('keys');
    addToUnscopables$1('values');
    addToUnscopables$1('entries');

    // iterable DOM collections
    // flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
    var domIterables = {
        CSSRuleList: 0,
        CSSStyleDeclaration: 0,
        CSSValueList: 0,
        ClientRectList: 0,
        DOMRectList: 0,
        DOMStringList: 0,
        DOMTokenList: 1,
        DataTransferItemList: 0,
        FileList: 0,
        HTMLAllCollection: 0,
        HTMLCollection: 0,
        HTMLFormElement: 0,
        HTMLSelectElement: 0,
        MediaList: 0,
        MimeTypeArray: 0,
        NamedNodeMap: 0,
        NodeList: 1,
        PaintRequestList: 0,
        Plugin: 0,
        PluginArray: 0,
        SVGLengthList: 0,
        SVGNumberList: 0,
        SVGPathSegList: 0,
        SVGPointList: 0,
        SVGStringList: 0,
        SVGTransformList: 0,
        SourceBufferList: 0,
        StyleSheetList: 0,
        TextTrackCueList: 0,
        TextTrackList: 0,
        TouchList: 0
    };

    var global$g = global$A;
    var DOMIterables$1 = domIterables;
    var ArrayIteratorMethods = es_array_iterator;
    var createNonEnumerableProperty$6 = createNonEnumerableProperty$d;
    var wellKnownSymbol$7 = wellKnownSymbol$r;

    var ITERATOR$1 = wellKnownSymbol$7('iterator');
    var TO_STRING_TAG$1 = wellKnownSymbol$7('toStringTag');
    var ArrayValues = ArrayIteratorMethods.values;

    for (var COLLECTION_NAME$1 in DOMIterables$1) {
        var Collection$1 = global$g[COLLECTION_NAME$1];
        var CollectionPrototype$1 = Collection$1 && Collection$1.prototype;
        if (CollectionPrototype$1) {
            // some Chrome versions have non-configurable methods on DOMTokenList
            if (CollectionPrototype$1[ITERATOR$1] !== ArrayValues) try {
                createNonEnumerableProperty$6(CollectionPrototype$1, ITERATOR$1, ArrayValues);
            } catch (error) {
                CollectionPrototype$1[ITERATOR$1] = ArrayValues;
            }
            if (!CollectionPrototype$1[TO_STRING_TAG$1]) {
                createNonEnumerableProperty$6(CollectionPrototype$1, TO_STRING_TAG$1, COLLECTION_NAME$1);
            }
            if (DOMIterables$1[COLLECTION_NAME$1])
                for (var METHOD_NAME in ArrayIteratorMethods) {
                    // some Chrome versions have non-configurable methods on DOMTokenList
                    if (CollectionPrototype$1[METHOD_NAME] !== ArrayIteratorMethods[METHOD_NAME]) try {
                        createNonEnumerableProperty$6(CollectionPrototype$1, METHOD_NAME, ArrayIteratorMethods[METHOD_NAME]);
                    } catch (error) {
                        CollectionPrototype$1[METHOD_NAME] = ArrayIteratorMethods[METHOD_NAME];
                    }
                }
        }
    }

    var $$h = _export;
    var fails$e = fails$x;
    var isArray$1 = isArray$4;
    var isObject$6 = isObject$i;
    var toObject$8 = toObject$g;
    var toLength$d = toLength$n;
    var createProperty = createProperty$4;
    var arraySpeciesCreate = arraySpeciesCreate$3;
    var arrayMethodHasSpeciesSupport$1 = arrayMethodHasSpeciesSupport$5;
    var wellKnownSymbol$6 = wellKnownSymbol$r;
    var V8_VERSION = engineV8Version;

    var IS_CONCAT_SPREADABLE = wellKnownSymbol$6('isConcatSpreadable');
    var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;
    var MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded';

    // We can't use this feature detection in V8 since it causes
    // deoptimization and serious performance degradation
    // https://github.com/zloirock/core-js/issues/679
    var IS_CONCAT_SPREADABLE_SUPPORT = V8_VERSION >= 51 || !fails$e(function() {
        var array = [];
        array[IS_CONCAT_SPREADABLE] = false;
        return array.concat()[0] !== array;
    });

    var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport$1('concat');

    var isConcatSpreadable = function(O) {
        if (!isObject$6(O)) return false;
        var spreadable = O[IS_CONCAT_SPREADABLE];
        return spreadable !== undefined ? !!spreadable : isArray$1(O);
    };

    var FORCED$4 = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;

    // `Array.prototype.concat` method
    // https://tc39.es/ecma262/#sec-array.prototype.concat
    // with adding support of @@isConcatSpreadable and @@species
    $$h({
        target: 'Array',
        proto: true,
        forced: FORCED$4
    }, {
        // eslint-disable-next-line no-unused-vars -- required for `.length`
        concat: function concat(arg) {
            var O = toObject$8(this);
            var A = arraySpeciesCreate(O, 0);
            var n = 0;
            var i, k, length, len, E;
            for (i = -1, length = arguments.length; i < length; i++) {
                E = i === -1 ? O : arguments[i];
                if (isConcatSpreadable(E)) {
                    len = toLength$d(E.length);
                    if (n + len > MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
                    for (k = 0; k < len; k++, n++)
                        if (k in E) createProperty(A, n, E[k]);
                } else {
                    if (n >= MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
                    createProperty(A, n++, E);
                }
            }
            A.length = n;
            return A;
        }
    });

    var requireObjectCoercible$3 = requireObjectCoercible$b;
    var toString$6 = toString$h;

    var quot = /"/g;

    // `CreateHTML` abstract operation
    // https://tc39.es/ecma262/#sec-createhtml
    var createHtml = function(string, tag, attribute, value) {
        var S = toString$6(requireObjectCoercible$3(string));
        var p1 = '<' + tag;
        if (attribute !== '') p1 += ' ' + attribute + '="' + toString$6(value).replace(quot, '&quot;') + '"';
        return p1 + '>' + S + '</' + tag + '>';
    };

    var fails$d = fails$x;

    // check the existence of a method, lowercase
    // of a tag and escaping quotes in arguments
    var stringHtmlForced = function(METHOD_NAME) {
        return fails$d(function() {
            var test = '' [METHOD_NAME]('"');
            return test !== test.toLowerCase() || test.split('"').length > 3;
        });
    };

    var $$g = _export;
    var createHTML$2 = createHtml;
    var forcedStringHTMLMethod$2 = stringHtmlForced;

    // `String.prototype.anchor` method
    // https://tc39.es/ecma262/#sec-string.prototype.anchor
    $$g({
        target: 'String',
        proto: true,
        forced: forcedStringHTMLMethod$2('anchor')
    }, {
        anchor: function anchor(name) {
            return createHTML$2(this, 'a', 'name', name);
        }
    });

    var toObject$7 = toObject$g;
    var toAbsoluteIndex$2 = toAbsoluteIndex$6;
    var toLength$c = toLength$n;

    // `Array.prototype.fill` method implementation
    // https://tc39.es/ecma262/#sec-array.prototype.fill
    var arrayFill$1 = function fill(value /* , start = 0, end = @length */ ) {
        var O = toObject$7(this);
        var length = toLength$c(O.length);
        var argumentsLength = arguments.length;
        var index = toAbsoluteIndex$2(argumentsLength > 1 ? arguments[1] : undefined, length);
        var end = argumentsLength > 2 ? arguments[2] : undefined;
        var endPos = end === undefined ? length : toAbsoluteIndex$2(end, length);
        while (endPos > index) O[index++] = value;
        return O;
    };

    var $$f = _export;
    var fill = arrayFill$1;
    var addToUnscopables = addToUnscopables$2;

    // `Array.prototype.fill` method
    // https://tc39.es/ecma262/#sec-array.prototype.fill
    $$f({
        target: 'Array',
        proto: true
    }, {
        fill: fill
    });

    // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
    addToUnscopables('fill');

    var $$e = _export;
    var createHTML$1 = createHtml;
    var forcedStringHTMLMethod$1 = stringHtmlForced;

    // `String.prototype.italics` method
    // https://tc39.es/ecma262/#sec-string.prototype.italics
    $$e({
        target: 'String',
        proto: true,
        forced: forcedStringHTMLMethod$1('italics')
    }, {
        italics: function italics() {
            return createHTML$1(this, 'i', '', '');
        }
    });

    // TODO: use something more complex like timsort?
    var floor$3 = Math.floor;

    var mergeSort = function(array, comparefn) {
        var length = array.length;
        var middle = floor$3(length / 2);
        return length < 8 ? insertionSort(array, comparefn) : merge(
            mergeSort(array.slice(0, middle), comparefn),
            mergeSort(array.slice(middle), comparefn),
            comparefn
        );
    };

    var insertionSort = function(array, comparefn) {
        var length = array.length;
        var i = 1;
        var element, j;

        while (i < length) {
            j = i;
            element = array[i];
            while (j && comparefn(array[j - 1], element) > 0) {
                array[j] = array[--j];
            }
            if (j !== i++) array[j] = element;
        }
        return array;
    };

    var merge = function(left, right, comparefn) {
        var llength = left.length;
        var rlength = right.length;
        var lindex = 0;
        var rindex = 0;
        var result = [];

        while (lindex < llength || rindex < rlength) {
            if (lindex < llength && rindex < rlength) {
                result.push(comparefn(left[lindex], right[rindex]) <= 0 ? left[lindex++] : right[rindex++]);
            } else {
                result.push(lindex < llength ? left[lindex++] : right[rindex++]);
            }
        }
        return result;
    };

    var arraySort = mergeSort;

    var userAgent$1 = engineUserAgent;

    var firefox = userAgent$1.match(/firefox\/(\d+)/i);

    var engineFfVersion = !!firefox && +firefox[1];

    var UA = engineUserAgent;

    var engineIsIeOrEdge = /MSIE|Trident/.test(UA);

    var userAgent = engineUserAgent;

    var webkit = userAgent.match(/AppleWebKit\/(\d+)\./);

    var engineWebkitVersion = !!webkit && +webkit[1];

    var $$d = _export;
    var aFunction$2 = aFunction$7;
    var toObject$6 = toObject$g;
    var toLength$b = toLength$n;
    var toString$5 = toString$h;
    var fails$c = fails$x;
    var internalSort$1 = arraySort;
    var arrayMethodIsStrict$2 = arrayMethodIsStrict$6;
    var FF$1 = engineFfVersion;
    var IE_OR_EDGE$1 = engineIsIeOrEdge;
    var V8$1 = engineV8Version;
    var WEBKIT$1 = engineWebkitVersion;

    var test = [];
    var nativeSort$1 = test.sort;

    // IE8-
    var FAILS_ON_UNDEFINED = fails$c(function() {
        test.sort(undefined);
    });
    // V8 bug
    var FAILS_ON_NULL = fails$c(function() {
        test.sort(null);
    });
    // Old WebKit
    var STRICT_METHOD$2 = arrayMethodIsStrict$2('sort');

    var STABLE_SORT$1 = !fails$c(function() {
        // feature detection can be too slow, so check engines versions
        if (V8$1) return V8$1 < 70;
        if (FF$1 && FF$1 > 3) return;
        if (IE_OR_EDGE$1) return true;
        if (WEBKIT$1) return WEBKIT$1 < 603;

        var result = '';
        var code, chr, value, index;

        // generate an array with more 512 elements (Chakra and old V8 fails only in this case)
        for (code = 65; code < 76; code++) {
            chr = String.fromCharCode(code);

            switch (code) {
                case 66:
                case 69:
                case 70:
                case 72:
                    value = 3;
                    break;
                case 68:
                case 71:
                    value = 4;
                    break;
                default:
                    value = 2;
            }

            for (index = 0; index < 47; index++) {
                test.push({
                    k: chr + index,
                    v: value
                });
            }
        }

        test.sort(function(a, b) {
            return b.v - a.v;
        });

        for (index = 0; index < test.length; index++) {
            chr = test[index].k.charAt(0);
            if (result.charAt(result.length - 1) !== chr) result += chr;
        }

        return result !== 'DGBEFHACIJK';
    });

    var FORCED$3 = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || !STRICT_METHOD$2 || !STABLE_SORT$1;

    var getSortCompare$1 = function(comparefn) {
        return function(x, y) {
            if (y === undefined) return -1;
            if (x === undefined) return 1;
            if (comparefn !== undefined) return +comparefn(x, y) || 0;
            return toString$5(x) > toString$5(y) ? 1 : -1;
        };
    };

    // `Array.prototype.sort` method
    // https://tc39.es/ecma262/#sec-array.prototype.sort
    $$d({
        target: 'Array',
        proto: true,
        forced: FORCED$3
    }, {
        sort: function sort(comparefn) {
            if (comparefn !== undefined) aFunction$2(comparefn);

            var array = toObject$6(this);

            if (STABLE_SORT$1) return comparefn === undefined ? nativeSort$1.call(array) : nativeSort$1.call(array, comparefn);

            var items = [];
            var arrayLength = toLength$b(array.length);
            var itemsLength, index;

            for (index = 0; index < arrayLength; index++) {
                if (index in array) items.push(array[index]);
            }

            items = internalSort$1(items, getSortCompare$1(comparefn));
            itemsLength = items.length;
            index = 0;

            while (index < itemsLength) array[index] = items[index++];
            while (index < arrayLength) delete array[index++];

            return array;
        }
    });

    var fails$b = fails$x;
    var whitespaces = whitespaces$4;

    var non = '\u200B\u0085\u180E';

    // check that a method works with the correct list
    // of whitespaces and has a correct name
    var stringTrimForced = function(METHOD_NAME) {
        return fails$b(function() {
            return !!whitespaces[METHOD_NAME]() || non[METHOD_NAME]() != non || whitespaces[METHOD_NAME].name !== METHOD_NAME;
        });
    };

    var $$c = _export;
    var $trim = stringTrim.trim;
    var forcedStringTrimMethod = stringTrimForced;

    // `String.prototype.trim` method
    // https://tc39.es/ecma262/#sec-string.prototype.trim
    $$c({
        target: 'String',
        proto: true,
        forced: forcedStringTrimMethod('trim')
    }, {
        trim: function trim() {
            return $trim(this);
        }
    });

    var fixRegExpWellKnownSymbolLogic = fixRegexpWellKnownSymbolLogic;
    var anObject$1 = anObject$h;
    var toLength$a = toLength$n;
    var toString$4 = toString$h;
    var requireObjectCoercible$2 = requireObjectCoercible$b;
    var advanceStringIndex = advanceStringIndex$3;
    var regExpExec = regexpExecAbstract;

    // @@match logic
    fixRegExpWellKnownSymbolLogic('match', function(MATCH, nativeMatch, maybeCallNative) {
        return [
            // `String.prototype.match` method
            // https://tc39.es/ecma262/#sec-string.prototype.match
            function match(regexp) {
                var O = requireObjectCoercible$2(this);
                var matcher = regexp == undefined ? undefined : regexp[MATCH];
                return matcher !== undefined ? matcher.call(regexp, O) : new RegExp(regexp)[MATCH](toString$4(O));
            },
            // `RegExp.prototype[@@match]` method
            // https://tc39.es/ecma262/#sec-regexp.prototype-@@match
            function(string) {
                var rx = anObject$1(this);
                var S = toString$4(string);
                var res = maybeCallNative(nativeMatch, rx, S);

                if (res.done) return res.value;

                if (!rx.global) return regExpExec(rx, S);

                var fullUnicode = rx.unicode;
                rx.lastIndex = 0;
                var A = [];
                var n = 0;
                var result;
                while ((result = regExpExec(rx, S)) !== null) {
                    var matchStr = toString$4(result[0]);
                    A[n] = matchStr;
                    if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength$a(rx.lastIndex), fullUnicode);
                    n++;
                }
                return n === 0 ? null : A;
            }
        ];
    });

    var $$b = _export;
    var toObject$5 = toObject$g;
    var nativeKeys = objectKeys$4;
    var fails$a = fails$x;

    var FAILS_ON_PRIMITIVES = fails$a(function() {
        nativeKeys(1);
    });

    // `Object.keys` method
    // https://tc39.es/ecma262/#sec-object.keys
    $$b({
        target: 'Object',
        stat: true,
        forced: FAILS_ON_PRIMITIVES
    }, {
        keys: function keys(it) {
            return nativeKeys(toObject$5(it));
        }
    });

    var aFunction$1 = aFunction$7;
    var toObject$4 = toObject$g;
    var IndexedObject = indexedObject;
    var toLength$9 = toLength$n;

    // `Array.prototype.{ reduce, reduceRight }` methods implementation
    var createMethod$1 = function(IS_RIGHT) {
        return function(that, callbackfn, argumentsLength, memo) {
            aFunction$1(callbackfn);
            var O = toObject$4(that);
            var self = IndexedObject(O);
            var length = toLength$9(O.length);
            var index = IS_RIGHT ? length - 1 : 0;
            var i = IS_RIGHT ? -1 : 1;
            if (argumentsLength < 2)
                while (true) {
                    if (index in self) {
                        memo = self[index];
                        index += i;
                        break;
                    }
                    index += i;
                    if (IS_RIGHT ? index < 0 : length <= index) {
                        throw TypeError('Reduce of empty array with no initial value');
                    }
                }
            for (; IS_RIGHT ? index >= 0 : length > index; index += i)
                if (index in self) {
                    memo = callbackfn(memo, self[index], index, O);
                }
            return memo;
        };
    };

    var arrayReduce = {
        // `Array.prototype.reduce` method
        // https://tc39.es/ecma262/#sec-array.prototype.reduce
        left: createMethod$1(false),
        // `Array.prototype.reduceRight` method
        // https://tc39.es/ecma262/#sec-array.prototype.reduceright
        right: createMethod$1(true)
    };

    var $$a = _export;
    var $reduce$1 = arrayReduce.left;
    var arrayMethodIsStrict$1 = arrayMethodIsStrict$6;
    var CHROME_VERSION = engineV8Version;
    var IS_NODE = engineIsNode;

    var STRICT_METHOD$1 = arrayMethodIsStrict$1('reduce');
    // Chrome 80-82 has a critical bug
    // https://bugs.chromium.org/p/chromium/issues/detail?id=1049982
    var CHROME_BUG = !IS_NODE && CHROME_VERSION > 79 && CHROME_VERSION < 83;

    // `Array.prototype.reduce` method
    // https://tc39.es/ecma262/#sec-array.prototype.reduce
    $$a({
        target: 'Array',
        proto: true,
        forced: !STRICT_METHOD$1 || CHROME_BUG
    }, {
        reduce: function reduce(callbackfn /* , initialValue */ ) {
            return $reduce$1(this, callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
        }
    });

    var typedArrayConstructor = {
        exports: {}
    };

    // eslint-disable-next-line es/no-typed-arrays -- safe
    var arrayBufferNative = typeof ArrayBuffer !== 'undefined' && typeof DataView !== 'undefined';

    var NATIVE_ARRAY_BUFFER$1 = arrayBufferNative;
    var DESCRIPTORS$7 = descriptors;
    var global$f = global$A;
    var isObject$5 = isObject$i;
    var has$6 = has$g;
    var classof$2 = classof$8;
    var createNonEnumerableProperty$5 = createNonEnumerableProperty$d;
    var redefine$3 = redefine$b.exports;
    var defineProperty$5 = objectDefineProperty.f;
    var getPrototypeOf$1 = objectGetPrototypeOf;
    var setPrototypeOf$3 = objectSetPrototypeOf;
    var wellKnownSymbol$5 = wellKnownSymbol$r;
    var uid$1 = uid$4;

    var Int8Array$3 = global$f.Int8Array;
    var Int8ArrayPrototype = Int8Array$3 && Int8Array$3.prototype;
    var Uint8ClampedArray = global$f.Uint8ClampedArray;
    var Uint8ClampedArrayPrototype = Uint8ClampedArray && Uint8ClampedArray.prototype;
    var TypedArray$1 = Int8Array$3 && getPrototypeOf$1(Int8Array$3);
    var TypedArrayPrototype$1 = Int8ArrayPrototype && getPrototypeOf$1(Int8ArrayPrototype);
    var ObjectPrototype$2 = Object.prototype;
    var isPrototypeOf = ObjectPrototype$2.isPrototypeOf;

    var TO_STRING_TAG = wellKnownSymbol$5('toStringTag');
    var TYPED_ARRAY_TAG$1 = uid$1('TYPED_ARRAY_TAG');
    var TYPED_ARRAY_CONSTRUCTOR$2 = uid$1('TYPED_ARRAY_CONSTRUCTOR');
    // Fixing native typed arrays in Opera Presto crashes the browser, see #595
    var NATIVE_ARRAY_BUFFER_VIEWS$2 = NATIVE_ARRAY_BUFFER$1 && !!setPrototypeOf$3 && classof$2(global$f.opera) !== 'Opera';
    var TYPED_ARRAY_TAG_REQIRED = false;
    var NAME, Constructor, Prototype;

    var TypedArrayConstructorsList = {
        Int8Array: 1,
        Uint8Array: 1,
        Uint8ClampedArray: 1,
        Int16Array: 2,
        Uint16Array: 2,
        Int32Array: 4,
        Uint32Array: 4,
        Float32Array: 4,
        Float64Array: 8
    };

    var BigIntArrayConstructorsList = {
        BigInt64Array: 8,
        BigUint64Array: 8
    };

    var isView = function isView(it) {
        if (!isObject$5(it)) return false;
        var klass = classof$2(it);
        return klass === 'DataView' ||
            has$6(TypedArrayConstructorsList, klass) ||
            has$6(BigIntArrayConstructorsList, klass);
    };

    var isTypedArray$1 = function(it) {
        if (!isObject$5(it)) return false;
        var klass = classof$2(it);
        return has$6(TypedArrayConstructorsList, klass) ||
            has$6(BigIntArrayConstructorsList, klass);
    };

    var aTypedArray$m = function(it) {
        if (isTypedArray$1(it)) return it;
        throw TypeError('Target is not a typed array');
    };

    var aTypedArrayConstructor$3 = function(C) {
        if (setPrototypeOf$3 && !isPrototypeOf.call(TypedArray$1, C)) {
            throw TypeError('Target is not a typed array constructor');
        }
        return C;
    };

    var exportTypedArrayMethod$n = function(KEY, property, forced) {
        if (!DESCRIPTORS$7) return;
        if (forced)
            for (var ARRAY in TypedArrayConstructorsList) {
                var TypedArrayConstructor = global$f[ARRAY];
                if (TypedArrayConstructor && has$6(TypedArrayConstructor.prototype, KEY)) try {
                    delete TypedArrayConstructor.prototype[KEY];
                } catch (error) {
                    /* empty */ }
            }
        if (!TypedArrayPrototype$1[KEY] || forced) {
            redefine$3(TypedArrayPrototype$1, KEY, forced ? property :
                NATIVE_ARRAY_BUFFER_VIEWS$2 && Int8ArrayPrototype[KEY] || property);
        }
    };

    var exportTypedArrayStaticMethod = function(KEY, property, forced) {
        var ARRAY, TypedArrayConstructor;
        if (!DESCRIPTORS$7) return;
        if (setPrototypeOf$3) {
            if (forced)
                for (ARRAY in TypedArrayConstructorsList) {
                    TypedArrayConstructor = global$f[ARRAY];
                    if (TypedArrayConstructor && has$6(TypedArrayConstructor, KEY)) try {
                        delete TypedArrayConstructor[KEY];
                    } catch (error) {
                        /* empty */ }
                }
            if (!TypedArray$1[KEY] || forced) {
                // V8 ~ Chrome 49-50 `%TypedArray%` methods are non-writable non-configurable
                try {
                    return redefine$3(TypedArray$1, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS$2 && TypedArray$1[KEY] || property);
                } catch (error) {
                    /* empty */ }
            } else return;
        }
        for (ARRAY in TypedArrayConstructorsList) {
            TypedArrayConstructor = global$f[ARRAY];
            if (TypedArrayConstructor && (!TypedArrayConstructor[KEY] || forced)) {
                redefine$3(TypedArrayConstructor, KEY, property);
            }
        }
    };

    for (NAME in TypedArrayConstructorsList) {
        Constructor = global$f[NAME];
        Prototype = Constructor && Constructor.prototype;
        if (Prototype) createNonEnumerableProperty$5(Prototype, TYPED_ARRAY_CONSTRUCTOR$2, Constructor);
        else NATIVE_ARRAY_BUFFER_VIEWS$2 = false;
    }

    for (NAME in BigIntArrayConstructorsList) {
        Constructor = global$f[NAME];
        Prototype = Constructor && Constructor.prototype;
        if (Prototype) createNonEnumerableProperty$5(Prototype, TYPED_ARRAY_CONSTRUCTOR$2, Constructor);
    }

    // WebKit bug - typed arrays constructors prototype is Object.prototype
    if (!NATIVE_ARRAY_BUFFER_VIEWS$2 || typeof TypedArray$1 != 'function' || TypedArray$1 === Function.prototype) {
        // eslint-disable-next-line no-shadow -- safe
        TypedArray$1 = function TypedArray() {
            throw TypeError('Incorrect invocation');
        };
        if (NATIVE_ARRAY_BUFFER_VIEWS$2)
            for (NAME in TypedArrayConstructorsList) {
                if (global$f[NAME]) setPrototypeOf$3(global$f[NAME], TypedArray$1);
            }
    }

    if (!NATIVE_ARRAY_BUFFER_VIEWS$2 || !TypedArrayPrototype$1 || TypedArrayPrototype$1 === ObjectPrototype$2) {
        TypedArrayPrototype$1 = TypedArray$1.prototype;
        if (NATIVE_ARRAY_BUFFER_VIEWS$2)
            for (NAME in TypedArrayConstructorsList) {
                if (global$f[NAME]) setPrototypeOf$3(global$f[NAME].prototype, TypedArrayPrototype$1);
            }
    }

    // WebKit bug - one more object in Uint8ClampedArray prototype chain
    if (NATIVE_ARRAY_BUFFER_VIEWS$2 && getPrototypeOf$1(Uint8ClampedArrayPrototype) !== TypedArrayPrototype$1) {
        setPrototypeOf$3(Uint8ClampedArrayPrototype, TypedArrayPrototype$1);
    }

    if (DESCRIPTORS$7 && !has$6(TypedArrayPrototype$1, TO_STRING_TAG)) {
        TYPED_ARRAY_TAG_REQIRED = true;
        defineProperty$5(TypedArrayPrototype$1, TO_STRING_TAG, {
            get: function() {
                return isObject$5(this) ? this[TYPED_ARRAY_TAG$1] : undefined;
            }
        });
        for (NAME in TypedArrayConstructorsList)
            if (global$f[NAME]) {
                createNonEnumerableProperty$5(global$f[NAME], TYPED_ARRAY_TAG$1, NAME);
            }
    }

    var arrayBufferViewCore = {
        NATIVE_ARRAY_BUFFER_VIEWS: NATIVE_ARRAY_BUFFER_VIEWS$2,
        TYPED_ARRAY_CONSTRUCTOR: TYPED_ARRAY_CONSTRUCTOR$2,
        TYPED_ARRAY_TAG: TYPED_ARRAY_TAG_REQIRED && TYPED_ARRAY_TAG$1,
        aTypedArray: aTypedArray$m,
        aTypedArrayConstructor: aTypedArrayConstructor$3,
        exportTypedArrayMethod: exportTypedArrayMethod$n,
        exportTypedArrayStaticMethod: exportTypedArrayStaticMethod,
        isView: isView,
        isTypedArray: isTypedArray$1,
        TypedArray: TypedArray$1,
        TypedArrayPrototype: TypedArrayPrototype$1
    };

    /* eslint-disable no-new -- required for testing */

    var global$e = global$A;
    var fails$9 = fails$x;
    var checkCorrectnessOfIteration = checkCorrectnessOfIteration$3;
    var NATIVE_ARRAY_BUFFER_VIEWS$1 = arrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS;

    var ArrayBuffer$3 = global$e.ArrayBuffer;
    var Int8Array$2 = global$e.Int8Array;

    var typedArrayConstructorsRequireWrappers = !NATIVE_ARRAY_BUFFER_VIEWS$1 || !fails$9(function() {
        Int8Array$2(1);
    }) || !fails$9(function() {
        new Int8Array$2(-1);
    }) || !checkCorrectnessOfIteration(function(iterable) {
        new Int8Array$2();
        new Int8Array$2(null);
        new Int8Array$2(1.5);
        new Int8Array$2(iterable);
    }, true) || fails$9(function() {
        // Safari (11+) bug - a reason why even Safari 13 should load a typed array polyfill
        return new Int8Array$2(new ArrayBuffer$3(2), 1, undefined).length !== 1;
    });

    var toInteger$3 = toInteger$a;
    var toLength$8 = toLength$n;

    // `ToIndex` abstract operation
    // https://tc39.es/ecma262/#sec-toindex
    var toIndex$2 = function(it) {
        if (it === undefined) return 0;
        var number = toInteger$3(it);
        var length = toLength$8(number);
        if (number !== length) throw RangeError('Wrong length or index');
        return length;
    };

    // IEEE754 conversions based on https://github.com/feross/ieee754
    var abs = Math.abs;
    var pow = Math.pow;
    var floor$2 = Math.floor;
    var log = Math.log;
    var LN2 = Math.LN2;

    var pack = function(number, mantissaLength, bytes) {
        var buffer = new Array(bytes);
        var exponentLength = bytes * 8 - mantissaLength - 1;
        var eMax = (1 << exponentLength) - 1;
        var eBias = eMax >> 1;
        var rt = mantissaLength === 23 ? pow(2, -24) - pow(2, -77) : 0;
        var sign = number < 0 || number === 0 && 1 / number < 0 ? 1 : 0;
        var index = 0;
        var exponent, mantissa, c;
        number = abs(number);
        // eslint-disable-next-line no-self-compare -- NaN check
        if (number != number || number === Infinity) {
            // eslint-disable-next-line no-self-compare -- NaN check
            mantissa = number != number ? 1 : 0;
            exponent = eMax;
        } else {
            exponent = floor$2(log(number) / LN2);
            if (number * (c = pow(2, -exponent)) < 1) {
                exponent--;
                c *= 2;
            }
            if (exponent + eBias >= 1) {
                number += rt / c;
            } else {
                number += rt * pow(2, 1 - eBias);
            }
            if (number * c >= 2) {
                exponent++;
                c /= 2;
            }
            if (exponent + eBias >= eMax) {
                mantissa = 0;
                exponent = eMax;
            } else if (exponent + eBias >= 1) {
                mantissa = (number * c - 1) * pow(2, mantissaLength);
                exponent = exponent + eBias;
            } else {
                mantissa = number * pow(2, eBias - 1) * pow(2, mantissaLength);
                exponent = 0;
            }
        }
        for (; mantissaLength >= 8; buffer[index++] = mantissa & 255, mantissa /= 256, mantissaLength -= 8);
        exponent = exponent << mantissaLength | mantissa;
        exponentLength += mantissaLength;
        for (; exponentLength > 0; buffer[index++] = exponent & 255, exponent /= 256, exponentLength -= 8);
        buffer[--index] |= sign * 128;
        return buffer;
    };

    var unpack = function(buffer, mantissaLength) {
        var bytes = buffer.length;
        var exponentLength = bytes * 8 - mantissaLength - 1;
        var eMax = (1 << exponentLength) - 1;
        var eBias = eMax >> 1;
        var nBits = exponentLength - 7;
        var index = bytes - 1;
        var sign = buffer[index--];
        var exponent = sign & 127;
        var mantissa;
        sign >>= 7;
        for (; nBits > 0; exponent = exponent * 256 + buffer[index], index--, nBits -= 8);
        mantissa = exponent & (1 << -nBits) - 1;
        exponent >>= -nBits;
        nBits += mantissaLength;
        for (; nBits > 0; mantissa = mantissa * 256 + buffer[index], index--, nBits -= 8);
        if (exponent === 0) {
            exponent = 1 - eBias;
        } else if (exponent === eMax) {
            return mantissa ? NaN : sign ? -Infinity : Infinity;
        } else {
            mantissa = mantissa + pow(2, mantissaLength);
            exponent = exponent - eBias;
        }
        return (sign ? -1 : 1) * mantissa * pow(2, exponent - mantissaLength);
    };

    var ieee754 = {
        pack: pack,
        unpack: unpack
    };

    var global$d = global$A;
    var DESCRIPTORS$6 = descriptors;
    var NATIVE_ARRAY_BUFFER = arrayBufferNative;
    var createNonEnumerableProperty$4 = createNonEnumerableProperty$d;
    var redefineAll = redefineAll$2;
    var fails$8 = fails$x;
    var anInstance$1 = anInstance$3;
    var toInteger$2 = toInteger$a;
    var toLength$7 = toLength$n;
    var toIndex$1 = toIndex$2;
    var IEEE754 = ieee754;
    var getPrototypeOf = objectGetPrototypeOf;
    var setPrototypeOf$2 = objectSetPrototypeOf;
    var getOwnPropertyNames$3 = objectGetOwnPropertyNames.f;
    var defineProperty$4 = objectDefineProperty.f;
    var arrayFill = arrayFill$1;
    var setToStringTag$1 = setToStringTag$5;
    var InternalStateModule$2 = internalState;

    var getInternalState$2 = InternalStateModule$2.get;
    var setInternalState$2 = InternalStateModule$2.set;
    var ARRAY_BUFFER$1 = 'ArrayBuffer';
    var DATA_VIEW = 'DataView';
    var PROTOTYPE$1 = 'prototype';
    var WRONG_LENGTH$1 = 'Wrong length';
    var WRONG_INDEX = 'Wrong index';
    var NativeArrayBuffer$1 = global$d[ARRAY_BUFFER$1];
    var $ArrayBuffer = NativeArrayBuffer$1;
    var $DataView = global$d[DATA_VIEW];
    var $DataViewPrototype = $DataView && $DataView[PROTOTYPE$1];
    var ObjectPrototype$1 = Object.prototype;
    var RangeError$2 = global$d.RangeError;

    var packIEEE754 = IEEE754.pack;
    var unpackIEEE754 = IEEE754.unpack;

    var packInt8 = function(number) {
        return [number & 0xFF];
    };

    var packInt16 = function(number) {
        return [number & 0xFF, number >> 8 & 0xFF];
    };

    var packInt32 = function(number) {
        return [number & 0xFF, number >> 8 & 0xFF, number >> 16 & 0xFF, number >> 24 & 0xFF];
    };

    var unpackInt32 = function(buffer) {
        return buffer[3] << 24 | buffer[2] << 16 | buffer[1] << 8 | buffer[0];
    };

    var packFloat32 = function(number) {
        return packIEEE754(number, 23, 4);
    };

    var packFloat64 = function(number) {
        return packIEEE754(number, 52, 8);
    };

    var addGetter$1 = function(Constructor, key) {
        defineProperty$4(Constructor[PROTOTYPE$1], key, {
            get: function() {
                return getInternalState$2(this)[key];
            }
        });
    };

    var get = function(view, count, index, isLittleEndian) {
        var intIndex = toIndex$1(index);
        var store = getInternalState$2(view);
        if (intIndex + count > store.byteLength) throw RangeError$2(WRONG_INDEX);
        var bytes = getInternalState$2(store.buffer).bytes;
        var start = intIndex + store.byteOffset;
        var pack = bytes.slice(start, start + count);
        return isLittleEndian ? pack : pack.reverse();
    };

    var set = function(view, count, index, conversion, value, isLittleEndian) {
        var intIndex = toIndex$1(index);
        var store = getInternalState$2(view);
        if (intIndex + count > store.byteLength) throw RangeError$2(WRONG_INDEX);
        var bytes = getInternalState$2(store.buffer).bytes;
        var start = intIndex + store.byteOffset;
        var pack = conversion(+value);
        for (var i = 0; i < count; i++) bytes[start + i] = pack[isLittleEndian ? i : count - i - 1];
    };

    if (!NATIVE_ARRAY_BUFFER) {
        $ArrayBuffer = function ArrayBuffer(length) {
            anInstance$1(this, $ArrayBuffer, ARRAY_BUFFER$1);
            var byteLength = toIndex$1(length);
            setInternalState$2(this, {
                bytes: arrayFill.call(new Array(byteLength), 0),
                byteLength: byteLength
            });
            if (!DESCRIPTORS$6) this.byteLength = byteLength;
        };

        $DataView = function DataView(buffer, byteOffset, byteLength) {
            anInstance$1(this, $DataView, DATA_VIEW);
            anInstance$1(buffer, $ArrayBuffer, DATA_VIEW);
            var bufferLength = getInternalState$2(buffer).byteLength;
            var offset = toInteger$2(byteOffset);
            if (offset < 0 || offset > bufferLength) throw RangeError$2('Wrong offset');
            byteLength = byteLength === undefined ? bufferLength - offset : toLength$7(byteLength);
            if (offset + byteLength > bufferLength) throw RangeError$2(WRONG_LENGTH$1);
            setInternalState$2(this, {
                buffer: buffer,
                byteLength: byteLength,
                byteOffset: offset
            });
            if (!DESCRIPTORS$6) {
                this.buffer = buffer;
                this.byteLength = byteLength;
                this.byteOffset = offset;
            }
        };

        if (DESCRIPTORS$6) {
            addGetter$1($ArrayBuffer, 'byteLength');
            addGetter$1($DataView, 'buffer');
            addGetter$1($DataView, 'byteLength');
            addGetter$1($DataView, 'byteOffset');
        }

        redefineAll($DataView[PROTOTYPE$1], {
            getInt8: function getInt8(byteOffset) {
                return get(this, 1, byteOffset)[0] << 24 >> 24;
            },
            getUint8: function getUint8(byteOffset) {
                return get(this, 1, byteOffset)[0];
            },
            getInt16: function getInt16(byteOffset /* , littleEndian */ ) {
                var bytes = get(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : undefined);
                return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
            },
            getUint16: function getUint16(byteOffset /* , littleEndian */ ) {
                var bytes = get(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : undefined);
                return bytes[1] << 8 | bytes[0];
            },
            getInt32: function getInt32(byteOffset /* , littleEndian */ ) {
                return unpackInt32(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined));
            },
            getUint32: function getUint32(byteOffset /* , littleEndian */ ) {
                return unpackInt32(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined)) >>> 0;
            },
            getFloat32: function getFloat32(byteOffset /* , littleEndian */ ) {
                return unpackIEEE754(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined), 23);
            },
            getFloat64: function getFloat64(byteOffset /* , littleEndian */ ) {
                return unpackIEEE754(get(this, 8, byteOffset, arguments.length > 1 ? arguments[1] : undefined), 52);
            },
            setInt8: function setInt8(byteOffset, value) {
                set(this, 1, byteOffset, packInt8, value);
            },
            setUint8: function setUint8(byteOffset, value) {
                set(this, 1, byteOffset, packInt8, value);
            },
            setInt16: function setInt16(byteOffset, value /* , littleEndian */ ) {
                set(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : undefined);
            },
            setUint16: function setUint16(byteOffset, value /* , littleEndian */ ) {
                set(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : undefined);
            },
            setInt32: function setInt32(byteOffset, value /* , littleEndian */ ) {
                set(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : undefined);
            },
            setUint32: function setUint32(byteOffset, value /* , littleEndian */ ) {
                set(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : undefined);
            },
            setFloat32: function setFloat32(byteOffset, value /* , littleEndian */ ) {
                set(this, 4, byteOffset, packFloat32, value, arguments.length > 2 ? arguments[2] : undefined);
            },
            setFloat64: function setFloat64(byteOffset, value /* , littleEndian */ ) {
                set(this, 8, byteOffset, packFloat64, value, arguments.length > 2 ? arguments[2] : undefined);
            }
        });
    } else {
        /* eslint-disable no-new -- required for testing */
        if (!fails$8(function() {
                NativeArrayBuffer$1(1);
            }) || !fails$8(function() {
                new NativeArrayBuffer$1(-1);
            }) || fails$8(function() {
                new NativeArrayBuffer$1();
                new NativeArrayBuffer$1(1.5);
                new NativeArrayBuffer$1(NaN);
                return NativeArrayBuffer$1.name != ARRAY_BUFFER$1;
            })) {
            /* eslint-enable no-new -- required for testing */
            $ArrayBuffer = function ArrayBuffer(length) {
                anInstance$1(this, $ArrayBuffer);
                return new NativeArrayBuffer$1(toIndex$1(length));
            };
            var ArrayBufferPrototype = $ArrayBuffer[PROTOTYPE$1] = NativeArrayBuffer$1[PROTOTYPE$1];
            for (var keys$2 = getOwnPropertyNames$3(NativeArrayBuffer$1), j$1 = 0, key$1; keys$2.length > j$1;) {
                if (!((key$1 = keys$2[j$1++]) in $ArrayBuffer)) {
                    createNonEnumerableProperty$4($ArrayBuffer, key$1, NativeArrayBuffer$1[key$1]);
                }
            }
            ArrayBufferPrototype.constructor = $ArrayBuffer;
        }

        // WebKit bug - the same parent prototype for typed arrays and data view
        if (setPrototypeOf$2 && getPrototypeOf($DataViewPrototype) !== ObjectPrototype$1) {
            setPrototypeOf$2($DataViewPrototype, ObjectPrototype$1);
        }

        // iOS Safari 7.x bug
        var testView = new $DataView(new $ArrayBuffer(2));
        var $setInt8 = $DataViewPrototype.setInt8;
        testView.setInt8(0, 2147483648);
        testView.setInt8(1, 2147483649);
        if (testView.getInt8(0) || !testView.getInt8(1)) redefineAll($DataViewPrototype, {
            setInt8: function setInt8(byteOffset, value) {
                $setInt8.call(this, byteOffset, value << 24 >> 24);
            },
            setUint8: function setUint8(byteOffset, value) {
                $setInt8.call(this, byteOffset, value << 24 >> 24);
            }
        }, {
            unsafe: true
        });
    }

    setToStringTag$1($ArrayBuffer, ARRAY_BUFFER$1);
    setToStringTag$1($DataView, DATA_VIEW);

    var arrayBuffer = {
        ArrayBuffer: $ArrayBuffer,
        DataView: $DataView
    };

    var isObject$4 = isObject$i;

    var floor$1 = Math.floor;

    // `Number.isInteger` method implementation
    // https://tc39.es/ecma262/#sec-number.isinteger
    var isInteger$1 = function isInteger(it) {
        return !isObject$4(it) && isFinite(it) && floor$1(it) === it;
    };

    var toInteger$1 = toInteger$a;

    var toPositiveInteger$1 = function(it) {
        var result = toInteger$1(it);
        if (result < 0) throw RangeError("The argument can't be less than 0");
        return result;
    };

    var toPositiveInteger = toPositiveInteger$1;

    var toOffset$2 = function(it, BYTES) {
        var offset = toPositiveInteger(it);
        if (offset % BYTES) throw RangeError('Wrong offset');
        return offset;
    };

    var toObject$3 = toObject$g;
    var toLength$6 = toLength$n;
    var getIteratorMethod = getIteratorMethod$3;
    var isArrayIteratorMethod = isArrayIteratorMethod$3;
    var bind = functionBindContext;
    var aTypedArrayConstructor$2 = arrayBufferViewCore.aTypedArrayConstructor;

    var typedArrayFrom$1 = function from(source /* , mapfn, thisArg */ ) {
        var O = toObject$3(source);
        var argumentsLength = arguments.length;
        var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
        var mapping = mapfn !== undefined;
        var iteratorMethod = getIteratorMethod(O);
        var i, length, result, step, iterator, next;
        if (iteratorMethod != undefined && !isArrayIteratorMethod(iteratorMethod)) {
            iterator = iteratorMethod.call(O);
            next = iterator.next;
            O = [];
            while (!(step = next.call(iterator)).done) {
                O.push(step.value);
            }
        }
        if (mapping && argumentsLength > 2) {
            mapfn = bind(mapfn, arguments[2], 2);
        }
        length = toLength$6(O.length);
        result = new(aTypedArrayConstructor$2(this))(length);
        for (i = 0; length > i; i++) {
            result[i] = mapping ? mapfn(O[i], i) : O[i];
        }
        return result;
    };

    var isObject$3 = isObject$i;
    var setPrototypeOf$1 = objectSetPrototypeOf;

    // makes subclassing work correct for wrapped built-ins
    var inheritIfRequired$3 = function($this, dummy, Wrapper) {
        var NewTarget, NewTargetPrototype;
        if (
            // it can work only with native `setPrototypeOf`
            setPrototypeOf$1 &&
            // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
            typeof(NewTarget = dummy.constructor) == 'function' &&
            NewTarget !== Wrapper &&
            isObject$3(NewTargetPrototype = NewTarget.prototype) &&
            NewTargetPrototype !== Wrapper.prototype
        ) setPrototypeOf$1($this, NewTargetPrototype);
        return $this;
    };

    var $$9 = _export;
    var global$c = global$A;
    var DESCRIPTORS$5 = descriptors;
    var TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS = typedArrayConstructorsRequireWrappers;
    var ArrayBufferViewCore$n = arrayBufferViewCore;
    var ArrayBufferModule = arrayBuffer;
    var anInstance = anInstance$3;
    var createPropertyDescriptor$1 = createPropertyDescriptor$6;
    var createNonEnumerableProperty$3 = createNonEnumerableProperty$d;
    var isInteger = isInteger$1;
    var toLength$5 = toLength$n;
    var toIndex = toIndex$2;
    var toOffset$1 = toOffset$2;
    var toPropertyKey$1 = toPropertyKey$5;
    var has$5 = has$g;
    var classof$1 = classof$8;
    var isObject$2 = isObject$i;
    var isSymbol$2 = isSymbol$6;
    var create$1 = objectCreate;
    var setPrototypeOf = objectSetPrototypeOf;
    var getOwnPropertyNames$2 = objectGetOwnPropertyNames.f;
    var typedArrayFrom = typedArrayFrom$1;
    var forEach$1 = arrayIteration.forEach;
    var setSpecies$2 = setSpecies$4;
    var definePropertyModule$1 = objectDefineProperty;
    var getOwnPropertyDescriptorModule$1 = objectGetOwnPropertyDescriptor;
    var InternalStateModule$1 = internalState;
    var inheritIfRequired$2 = inheritIfRequired$3;

    var getInternalState$1 = InternalStateModule$1.get;
    var setInternalState$1 = InternalStateModule$1.set;
    var nativeDefineProperty$1 = definePropertyModule$1.f;
    var nativeGetOwnPropertyDescriptor$1 = getOwnPropertyDescriptorModule$1.f;
    var round = Math.round;
    var RangeError$1 = global$c.RangeError;
    var ArrayBuffer$2 = ArrayBufferModule.ArrayBuffer;
    var DataView$1 = ArrayBufferModule.DataView;
    var NATIVE_ARRAY_BUFFER_VIEWS = ArrayBufferViewCore$n.NATIVE_ARRAY_BUFFER_VIEWS;
    var TYPED_ARRAY_CONSTRUCTOR$1 = ArrayBufferViewCore$n.TYPED_ARRAY_CONSTRUCTOR;
    var TYPED_ARRAY_TAG = ArrayBufferViewCore$n.TYPED_ARRAY_TAG;
    var TypedArray = ArrayBufferViewCore$n.TypedArray;
    var TypedArrayPrototype = ArrayBufferViewCore$n.TypedArrayPrototype;
    var aTypedArrayConstructor$1 = ArrayBufferViewCore$n.aTypedArrayConstructor;
    var isTypedArray = ArrayBufferViewCore$n.isTypedArray;
    var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
    var WRONG_LENGTH = 'Wrong length';

    var fromList = function(C, list) {
        var index = 0;
        var length = list.length;
        var result = new(aTypedArrayConstructor$1(C))(length);
        while (length > index) result[index] = list[index++];
        return result;
    };

    var addGetter = function(it, key) {
        nativeDefineProperty$1(it, key, {
            get: function() {
                return getInternalState$1(this)[key];
            }
        });
    };

    var isArrayBuffer = function(it) {
        var klass;
        return it instanceof ArrayBuffer$2 || (klass = classof$1(it)) == 'ArrayBuffer' || klass == 'SharedArrayBuffer';
    };

    var isTypedArrayIndex = function(target, key) {
        return isTypedArray(target) &&
            !isSymbol$2(key) &&
            key in target &&
            isInteger(+key) &&
            key >= 0;
    };

    var wrappedGetOwnPropertyDescriptor = function getOwnPropertyDescriptor(target, key) {
        key = toPropertyKey$1(key);
        return isTypedArrayIndex(target, key) ?
            createPropertyDescriptor$1(2, target[key]) :
            nativeGetOwnPropertyDescriptor$1(target, key);
    };

    var wrappedDefineProperty = function defineProperty(target, key, descriptor) {
        key = toPropertyKey$1(key);
        if (isTypedArrayIndex(target, key) &&
            isObject$2(descriptor) &&
            has$5(descriptor, 'value') &&
            !has$5(descriptor, 'get') &&
            !has$5(descriptor, 'set')
            // TODO: add validation descriptor w/o calling accessors
            &&
            !descriptor.configurable &&
            (!has$5(descriptor, 'writable') || descriptor.writable) &&
            (!has$5(descriptor, 'enumerable') || descriptor.enumerable)
        ) {
            target[key] = descriptor.value;
            return target;
        }
        return nativeDefineProperty$1(target, key, descriptor);
    };

    if (DESCRIPTORS$5) {
        if (!NATIVE_ARRAY_BUFFER_VIEWS) {
            getOwnPropertyDescriptorModule$1.f = wrappedGetOwnPropertyDescriptor;
            definePropertyModule$1.f = wrappedDefineProperty;
            addGetter(TypedArrayPrototype, 'buffer');
            addGetter(TypedArrayPrototype, 'byteOffset');
            addGetter(TypedArrayPrototype, 'byteLength');
            addGetter(TypedArrayPrototype, 'length');
        }

        $$9({
            target: 'Object',
            stat: true,
            forced: !NATIVE_ARRAY_BUFFER_VIEWS
        }, {
            getOwnPropertyDescriptor: wrappedGetOwnPropertyDescriptor,
            defineProperty: wrappedDefineProperty
        });

        typedArrayConstructor.exports = function(TYPE, wrapper, CLAMPED) {
            var BYTES = TYPE.match(/\d+$/)[0] / 8;
            var CONSTRUCTOR_NAME = TYPE + (CLAMPED ? 'Clamped' : '') + 'Array';
            var GETTER = 'get' + TYPE;
            var SETTER = 'set' + TYPE;
            var NativeTypedArrayConstructor = global$c[CONSTRUCTOR_NAME];
            var TypedArrayConstructor = NativeTypedArrayConstructor;
            var TypedArrayConstructorPrototype = TypedArrayConstructor && TypedArrayConstructor.prototype;
            var exported = {};

            var getter = function(that, index) {
                var data = getInternalState$1(that);
                return data.view[GETTER](index * BYTES + data.byteOffset, true);
            };

            var setter = function(that, index, value) {
                var data = getInternalState$1(that);
                if (CLAMPED) value = (value = round(value)) < 0 ? 0 : value > 0xFF ? 0xFF : value & 0xFF;
                data.view[SETTER](index * BYTES + data.byteOffset, value, true);
            };

            var addElement = function(that, index) {
                nativeDefineProperty$1(that, index, {
                    get: function() {
                        return getter(this, index);
                    },
                    set: function(value) {
                        return setter(this, index, value);
                    },
                    enumerable: true
                });
            };

            if (!NATIVE_ARRAY_BUFFER_VIEWS) {
                TypedArrayConstructor = wrapper(function(that, data, offset, $length) {
                    anInstance(that, TypedArrayConstructor, CONSTRUCTOR_NAME);
                    var index = 0;
                    var byteOffset = 0;
                    var buffer, byteLength, length;
                    if (!isObject$2(data)) {
                        length = toIndex(data);
                        byteLength = length * BYTES;
                        buffer = new ArrayBuffer$2(byteLength);
                    } else if (isArrayBuffer(data)) {
                        buffer = data;
                        byteOffset = toOffset$1(offset, BYTES);
                        var $len = data.byteLength;
                        if ($length === undefined) {
                            if ($len % BYTES) throw RangeError$1(WRONG_LENGTH);
                            byteLength = $len - byteOffset;
                            if (byteLength < 0) throw RangeError$1(WRONG_LENGTH);
                        } else {
                            byteLength = toLength$5($length) * BYTES;
                            if (byteLength + byteOffset > $len) throw RangeError$1(WRONG_LENGTH);
                        }
                        length = byteLength / BYTES;
                    } else if (isTypedArray(data)) {
                        return fromList(TypedArrayConstructor, data);
                    } else {
                        return typedArrayFrom.call(TypedArrayConstructor, data);
                    }
                    setInternalState$1(that, {
                        buffer: buffer,
                        byteOffset: byteOffset,
                        byteLength: byteLength,
                        length: length,
                        view: new DataView$1(buffer)
                    });
                    while (index < length) addElement(that, index++);
                });

                if (setPrototypeOf) setPrototypeOf(TypedArrayConstructor, TypedArray);
                TypedArrayConstructorPrototype = TypedArrayConstructor.prototype = create$1(TypedArrayPrototype);
            } else if (TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS) {
                TypedArrayConstructor = wrapper(function(dummy, data, typedArrayOffset, $length) {
                    anInstance(dummy, TypedArrayConstructor, CONSTRUCTOR_NAME);
                    return inheritIfRequired$2(function() {
                        if (!isObject$2(data)) return new NativeTypedArrayConstructor(toIndex(data));
                        if (isArrayBuffer(data)) return $length !== undefined ?
                            new NativeTypedArrayConstructor(data, toOffset$1(typedArrayOffset, BYTES), $length) :
                            typedArrayOffset !== undefined ?
                            new NativeTypedArrayConstructor(data, toOffset$1(typedArrayOffset, BYTES)) :
                            new NativeTypedArrayConstructor(data);
                        if (isTypedArray(data)) return fromList(TypedArrayConstructor, data);
                        return typedArrayFrom.call(TypedArrayConstructor, data);
                    }(), dummy, TypedArrayConstructor);
                });

                if (setPrototypeOf) setPrototypeOf(TypedArrayConstructor, TypedArray);
                forEach$1(getOwnPropertyNames$2(NativeTypedArrayConstructor), function(key) {
                    if (!(key in TypedArrayConstructor)) {
                        createNonEnumerableProperty$3(TypedArrayConstructor, key, NativeTypedArrayConstructor[key]);
                    }
                });
                TypedArrayConstructor.prototype = TypedArrayConstructorPrototype;
            }

            if (TypedArrayConstructorPrototype.constructor !== TypedArrayConstructor) {
                createNonEnumerableProperty$3(TypedArrayConstructorPrototype, 'constructor', TypedArrayConstructor);
            }

            createNonEnumerableProperty$3(TypedArrayConstructorPrototype, TYPED_ARRAY_CONSTRUCTOR$1, TypedArrayConstructor);

            if (TYPED_ARRAY_TAG) {
                createNonEnumerableProperty$3(TypedArrayConstructorPrototype, TYPED_ARRAY_TAG, CONSTRUCTOR_NAME);
            }

            exported[CONSTRUCTOR_NAME] = TypedArrayConstructor;

            $$9({
                global: true,
                forced: TypedArrayConstructor != NativeTypedArrayConstructor,
                sham: !NATIVE_ARRAY_BUFFER_VIEWS
            }, exported);

            if (!(BYTES_PER_ELEMENT in TypedArrayConstructor)) {
                createNonEnumerableProperty$3(TypedArrayConstructor, BYTES_PER_ELEMENT, BYTES);
            }

            if (!(BYTES_PER_ELEMENT in TypedArrayConstructorPrototype)) {
                createNonEnumerableProperty$3(TypedArrayConstructorPrototype, BYTES_PER_ELEMENT, BYTES);
            }

            setSpecies$2(CONSTRUCTOR_NAME);
        };
    } else typedArrayConstructor.exports = function() {
        /* empty */ };

    var createTypedArrayConstructor$2 = typedArrayConstructor.exports;

    // `Float32Array` constructor
    // https://tc39.es/ecma262/#sec-typedarray-objects
    createTypedArrayConstructor$2('Float32', function(init) {
        return function Float32Array(data, byteOffset, length) {
            return init(this, data, byteOffset, length);
        };
    });

    var toObject$2 = toObject$g;
    var toAbsoluteIndex$1 = toAbsoluteIndex$6;
    var toLength$4 = toLength$n;

    var min$1 = Math.min;

    // `Array.prototype.copyWithin` method implementation
    // https://tc39.es/ecma262/#sec-array.prototype.copywithin
    // eslint-disable-next-line es/no-array-prototype-copywithin -- safe
    var arrayCopyWithin = [].copyWithin || function copyWithin(target /* = 0 */ , start /* = 0, end = @length */ ) {
        var O = toObject$2(this);
        var len = toLength$4(O.length);
        var to = toAbsoluteIndex$1(target, len);
        var from = toAbsoluteIndex$1(start, len);
        var end = arguments.length > 2 ? arguments[2] : undefined;
        var count = min$1((end === undefined ? len : toAbsoluteIndex$1(end, len)) - from, len - to);
        var inc = 1;
        if (from < to && to < from + count) {
            inc = -1;
            from += count - 1;
            to += count - 1;
        }
        while (count-- > 0) {
            if (from in O) O[to] = O[from];
            else delete O[to];
            to += inc;
            from += inc;
        }
        return O;
    };

    var ArrayBufferViewCore$m = arrayBufferViewCore;
    var $copyWithin = arrayCopyWithin;

    var aTypedArray$l = ArrayBufferViewCore$m.aTypedArray;
    var exportTypedArrayMethod$m = ArrayBufferViewCore$m.exportTypedArrayMethod;

    // `%TypedArray%.prototype.copyWithin` method
    // https://tc39.es/ecma262/#sec-%typedarray%.prototype.copywithin
    exportTypedArrayMethod$m('copyWithin', function copyWithin(target, start /* , end */ ) {
        return $copyWithin.call(aTypedArray$l(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
    });

    var ArrayBufferViewCore$l = arrayBufferViewCore;
    var $every = arrayIteration.every;

    var aTypedArray$k = ArrayBufferViewCore$l.aTypedArray;
    var exportTypedArrayMethod$l = ArrayBufferViewCore$l.exportTypedArrayMethod;

    // `%TypedArray%.prototype.every` method
    // https://tc39.es/ecma262/#sec-%typedarray%.prototype.every
    exportTypedArrayMethod$l('every', function every(callbackfn /* , thisArg */ ) {
        return $every(aTypedArray$k(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    });

    var ArrayBufferViewCore$k = arrayBufferViewCore;
    var $fill = arrayFill$1;

    var aTypedArray$j = ArrayBufferViewCore$k.aTypedArray;
    var exportTypedArrayMethod$k = ArrayBufferViewCore$k.exportTypedArrayMethod;

    // `%TypedArray%.prototype.fill` method
    // https://tc39.es/ecma262/#sec-%typedarray%.prototype.fill
    // eslint-disable-next-line no-unused-vars -- required for `.length`
    exportTypedArrayMethod$k('fill', function fill(value /* , start, end */ ) {
        return $fill.apply(aTypedArray$j(this), arguments);
    });

    var arrayFromConstructorAndList$1 = function(Constructor, list) {
        var index = 0;
        var length = list.length;
        var result = new Constructor(length);
        while (length > index) result[index] = list[index++];
        return result;
    };

    var ArrayBufferViewCore$j = arrayBufferViewCore;
    var speciesConstructor = speciesConstructor$3;

    var TYPED_ARRAY_CONSTRUCTOR = ArrayBufferViewCore$j.TYPED_ARRAY_CONSTRUCTOR;
    var aTypedArrayConstructor = ArrayBufferViewCore$j.aTypedArrayConstructor;

    // a part of `TypedArraySpeciesCreate` abstract operation
    // https://tc39.es/ecma262/#typedarray-species-create
    var typedArraySpeciesConstructor$4 = function(originalArray) {
        return aTypedArrayConstructor(speciesConstructor(originalArray, originalArray[TYPED_ARRAY_CONSTRUCTOR]));
    };

    var arrayFromConstructorAndList = arrayFromConstructorAndList$1;
    var typedArraySpeciesConstructor$3 = typedArraySpeciesConstructor$4;

    var typedArrayFromSpeciesAndList = function(instance, list) {
        return arrayFromConstructorAndList(typedArraySpeciesConstructor$3(instance), list);
    };

    var ArrayBufferViewCore$i = arrayBufferViewCore;
    var $filter$1 = arrayIteration.filter;
    var fromSpeciesAndList = typedArrayFromSpeciesAndList;

    var aTypedArray$i = ArrayBufferViewCore$i.aTypedArray;
    var exportTypedArrayMethod$j = ArrayBufferViewCore$i.exportTypedArrayMethod;

    // `%TypedArray%.prototype.filter` method
    // https://tc39.es/ecma262/#sec-%typedarray%.prototype.filter
    exportTypedArrayMethod$j('filter', function filter(callbackfn /* , thisArg */ ) {
        var list = $filter$1(aTypedArray$i(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        return fromSpeciesAndList(this, list);
    });

    var ArrayBufferViewCore$h = arrayBufferViewCore;
    var $find = arrayIteration.find;

    var aTypedArray$h = ArrayBufferViewCore$h.aTypedArray;
    var exportTypedArrayMethod$i = ArrayBufferViewCore$h.exportTypedArrayMethod;

    // `%TypedArray%.prototype.find` method
    // https://tc39.es/ecma262/#sec-%typedarray%.prototype.find
    exportTypedArrayMethod$i('find', function find(predicate /* , thisArg */ ) {
        return $find(aTypedArray$h(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    });

    var ArrayBufferViewCore$g = arrayBufferViewCore;
    var $findIndex = arrayIteration.findIndex;

    var aTypedArray$g = ArrayBufferViewCore$g.aTypedArray;
    var exportTypedArrayMethod$h = ArrayBufferViewCore$g.exportTypedArrayMethod;

    // `%TypedArray%.prototype.findIndex` method
    // https://tc39.es/ecma262/#sec-%typedarray%.prototype.findindex
    exportTypedArrayMethod$h('findIndex', function findIndex(predicate /* , thisArg */ ) {
        return $findIndex(aTypedArray$g(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    });

    var ArrayBufferViewCore$f = arrayBufferViewCore;
    var $forEach$2 = arrayIteration.forEach;

    var aTypedArray$f = ArrayBufferViewCore$f.aTypedArray;
    var exportTypedArrayMethod$g = ArrayBufferViewCore$f.exportTypedArrayMethod;

    // `%TypedArray%.prototype.forEach` method
    // https://tc39.es/ecma262/#sec-%typedarray%.prototype.foreach
    exportTypedArrayMethod$g('forEach', function forEach(callbackfn /* , thisArg */ ) {
        $forEach$2(aTypedArray$f(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    });

    var ArrayBufferViewCore$e = arrayBufferViewCore;
    var $includes = arrayIncludes.includes;

    var aTypedArray$e = ArrayBufferViewCore$e.aTypedArray;
    var exportTypedArrayMethod$f = ArrayBufferViewCore$e.exportTypedArrayMethod;

    // `%TypedArray%.prototype.includes` method
    // https://tc39.es/ecma262/#sec-%typedarray%.prototype.includes
    exportTypedArrayMethod$f('includes', function includes(searchElement /* , fromIndex */ ) {
        return $includes(aTypedArray$e(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    });

    var ArrayBufferViewCore$d = arrayBufferViewCore;
    var $indexOf = arrayIncludes.indexOf;

    var aTypedArray$d = ArrayBufferViewCore$d.aTypedArray;
    var exportTypedArrayMethod$e = ArrayBufferViewCore$d.exportTypedArrayMethod;

    // `%TypedArray%.prototype.indexOf` method
    // https://tc39.es/ecma262/#sec-%typedarray%.prototype.indexof
    exportTypedArrayMethod$e('indexOf', function indexOf(searchElement /* , fromIndex */ ) {
        return $indexOf(aTypedArray$d(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    });

    var global$b = global$A;
    var ArrayBufferViewCore$c = arrayBufferViewCore;
    var ArrayIterators = es_array_iterator;
    var wellKnownSymbol$4 = wellKnownSymbol$r;

    var ITERATOR = wellKnownSymbol$4('iterator');
    var Uint8Array$1 = global$b.Uint8Array;
    var arrayValues = ArrayIterators.values;
    var arrayKeys = ArrayIterators.keys;
    var arrayEntries = ArrayIterators.entries;
    var aTypedArray$c = ArrayBufferViewCore$c.aTypedArray;
    var exportTypedArrayMethod$d = ArrayBufferViewCore$c.exportTypedArrayMethod;
    var nativeTypedArrayIterator = Uint8Array$1 && Uint8Array$1.prototype[ITERATOR];

    var CORRECT_ITER_NAME = !!nativeTypedArrayIterator &&
        (nativeTypedArrayIterator.name == 'values' || nativeTypedArrayIterator.name == undefined);

    var typedArrayValues = function values() {
        return arrayValues.call(aTypedArray$c(this));
    };

    // `%TypedArray%.prototype.entries` method
    // https://tc39.es/ecma262/#sec-%typedarray%.prototype.entries
    exportTypedArrayMethod$d('entries', function entries() {
        return arrayEntries.call(aTypedArray$c(this));
    });
    // `%TypedArray%.prototype.keys` method
    // https://tc39.es/ecma262/#sec-%typedarray%.prototype.keys
    exportTypedArrayMethod$d('keys', function keys() {
        return arrayKeys.call(aTypedArray$c(this));
    });
    // `%TypedArray%.prototype.values` method
    // https://tc39.es/ecma262/#sec-%typedarray%.prototype.values
    exportTypedArrayMethod$d('values', typedArrayValues, !CORRECT_ITER_NAME);
    // `%TypedArray%.prototype[@@iterator]` method
    // https://tc39.es/ecma262/#sec-%typedarray%.prototype-@@iterator
    exportTypedArrayMethod$d(ITERATOR, typedArrayValues, !CORRECT_ITER_NAME);

    var ArrayBufferViewCore$b = arrayBufferViewCore;

    var aTypedArray$b = ArrayBufferViewCore$b.aTypedArray;
    var exportTypedArrayMethod$c = ArrayBufferViewCore$b.exportTypedArrayMethod;
    var $join = [].join;

    // `%TypedArray%.prototype.join` method
    // https://tc39.es/ecma262/#sec-%typedarray%.prototype.join
    // eslint-disable-next-line no-unused-vars -- required for `.length`
    exportTypedArrayMethod$c('join', function join(separator) {
        return $join.apply(aTypedArray$b(this), arguments);
    });

    var ArrayBufferViewCore$a = arrayBufferViewCore;
    var $lastIndexOf = arrayLastIndexOf;

    var aTypedArray$a = ArrayBufferViewCore$a.aTypedArray;
    var exportTypedArrayMethod$b = ArrayBufferViewCore$a.exportTypedArrayMethod;

    // `%TypedArray%.prototype.lastIndexOf` method
    // https://tc39.es/ecma262/#sec-%typedarray%.prototype.lastindexof
    // eslint-disable-next-line no-unused-vars -- required for `.length`
    exportTypedArrayMethod$b('lastIndexOf', function lastIndexOf(searchElement /* , fromIndex */ ) {
        return $lastIndexOf.apply(aTypedArray$a(this), arguments);
    });

    var ArrayBufferViewCore$9 = arrayBufferViewCore;
    var $map = arrayIteration.map;
    var typedArraySpeciesConstructor$2 = typedArraySpeciesConstructor$4;

    var aTypedArray$9 = ArrayBufferViewCore$9.aTypedArray;
    var exportTypedArrayMethod$a = ArrayBufferViewCore$9.exportTypedArrayMethod;

    // `%TypedArray%.prototype.map` method
    // https://tc39.es/ecma262/#sec-%typedarray%.prototype.map
    exportTypedArrayMethod$a('map', function map(mapfn /* , thisArg */ ) {
        return $map(aTypedArray$9(this), mapfn, arguments.length > 1 ? arguments[1] : undefined, function(O, length) {
            return new(typedArraySpeciesConstructor$2(O))(length);
        });
    });

    var ArrayBufferViewCore$8 = arrayBufferViewCore;
    var $reduce = arrayReduce.left;

    var aTypedArray$8 = ArrayBufferViewCore$8.aTypedArray;
    var exportTypedArrayMethod$9 = ArrayBufferViewCore$8.exportTypedArrayMethod;

    // `%TypedArray%.prototype.reduce` method
    // https://tc39.es/ecma262/#sec-%typedarray%.prototype.reduce
    exportTypedArrayMethod$9('reduce', function reduce(callbackfn /* , initialValue */ ) {
        return $reduce(aTypedArray$8(this), callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
    });

    var ArrayBufferViewCore$7 = arrayBufferViewCore;
    var $reduceRight = arrayReduce.right;

    var aTypedArray$7 = ArrayBufferViewCore$7.aTypedArray;
    var exportTypedArrayMethod$8 = ArrayBufferViewCore$7.exportTypedArrayMethod;

    // `%TypedArray%.prototype.reduceRicht` method
    // https://tc39.es/ecma262/#sec-%typedarray%.prototype.reduceright
    exportTypedArrayMethod$8('reduceRight', function reduceRight(callbackfn /* , initialValue */ ) {
        return $reduceRight(aTypedArray$7(this), callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
    });

    var ArrayBufferViewCore$6 = arrayBufferViewCore;

    var aTypedArray$6 = ArrayBufferViewCore$6.aTypedArray;
    var exportTypedArrayMethod$7 = ArrayBufferViewCore$6.exportTypedArrayMethod;
    var floor = Math.floor;

    // `%TypedArray%.prototype.reverse` method
    // https://tc39.es/ecma262/#sec-%typedarray%.prototype.reverse
    exportTypedArrayMethod$7('reverse', function reverse() {
        var that = this;
        var length = aTypedArray$6(that).length;
        var middle = floor(length / 2);
        var index = 0;
        var value;
        while (index < middle) {
            value = that[index];
            that[index++] = that[--length];
            that[length] = value;
        }
        return that;
    });

    var ArrayBufferViewCore$5 = arrayBufferViewCore;
    var toLength$3 = toLength$n;
    var toOffset = toOffset$2;
    var toObject$1 = toObject$g;
    var fails$7 = fails$x;

    var aTypedArray$5 = ArrayBufferViewCore$5.aTypedArray;
    var exportTypedArrayMethod$6 = ArrayBufferViewCore$5.exportTypedArrayMethod;

    var FORCED$2 = fails$7(function() {
        // eslint-disable-next-line es/no-typed-arrays -- required for testing
        new Int8Array(1).set({});
    });

    // `%TypedArray%.prototype.set` method
    // https://tc39.es/ecma262/#sec-%typedarray%.prototype.set
    exportTypedArrayMethod$6('set', function set(arrayLike /* , offset */ ) {
        aTypedArray$5(this);
        var offset = toOffset(arguments.length > 1 ? arguments[1] : undefined, 1);
        var length = this.length;
        var src = toObject$1(arrayLike);
        var len = toLength$3(src.length);
        var index = 0;
        if (len + offset > length) throw RangeError('Wrong length');
        while (index < len) this[offset + index] = src[index++];
    }, FORCED$2);

    var ArrayBufferViewCore$4 = arrayBufferViewCore;
    var typedArraySpeciesConstructor$1 = typedArraySpeciesConstructor$4;
    var fails$6 = fails$x;

    var aTypedArray$4 = ArrayBufferViewCore$4.aTypedArray;
    var exportTypedArrayMethod$5 = ArrayBufferViewCore$4.exportTypedArrayMethod;
    var $slice$1 = [].slice;

    var FORCED$1 = fails$6(function() {
        // eslint-disable-next-line es/no-typed-arrays -- required for testing
        new Int8Array(1).slice();
    });

    // `%TypedArray%.prototype.slice` method
    // https://tc39.es/ecma262/#sec-%typedarray%.prototype.slice
    exportTypedArrayMethod$5('slice', function slice(start, end) {
        var list = $slice$1.call(aTypedArray$4(this), start, end);
        var C = typedArraySpeciesConstructor$1(this);
        var index = 0;
        var length = list.length;
        var result = new C(length);
        while (length > index) result[index] = list[index++];
        return result;
    }, FORCED$1);

    var ArrayBufferViewCore$3 = arrayBufferViewCore;
    var $some = arrayIteration.some;

    var aTypedArray$3 = ArrayBufferViewCore$3.aTypedArray;
    var exportTypedArrayMethod$4 = ArrayBufferViewCore$3.exportTypedArrayMethod;

    // `%TypedArray%.prototype.some` method
    // https://tc39.es/ecma262/#sec-%typedarray%.prototype.some
    exportTypedArrayMethod$4('some', function some(callbackfn /* , thisArg */ ) {
        return $some(aTypedArray$3(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    });

    var ArrayBufferViewCore$2 = arrayBufferViewCore;
    var global$a = global$A;
    var fails$5 = fails$x;
    var aFunction = aFunction$7;
    var toLength$2 = toLength$n;
    var internalSort = arraySort;
    var FF = engineFfVersion;
    var IE_OR_EDGE = engineIsIeOrEdge;
    var V8 = engineV8Version;
    var WEBKIT = engineWebkitVersion;

    var aTypedArray$2 = ArrayBufferViewCore$2.aTypedArray;
    var exportTypedArrayMethod$3 = ArrayBufferViewCore$2.exportTypedArrayMethod;
    var Uint16Array = global$a.Uint16Array;
    var nativeSort = Uint16Array && Uint16Array.prototype.sort;

    // WebKit
    var ACCEPT_INCORRECT_ARGUMENTS = !!nativeSort && !fails$5(function() {
        var array = new Uint16Array(2);
        array.sort(null);
        array.sort({});
    });

    var STABLE_SORT = !!nativeSort && !fails$5(function() {
        // feature detection can be too slow, so check engines versions
        if (V8) return V8 < 74;
        if (FF) return FF < 67;
        if (IE_OR_EDGE) return true;
        if (WEBKIT) return WEBKIT < 602;

        var array = new Uint16Array(516);
        var expected = Array(516);
        var index, mod;

        for (index = 0; index < 516; index++) {
            mod = index % 4;
            array[index] = 515 - index;
            expected[index] = index - 2 * mod + 3;
        }

        array.sort(function(a, b) {
            return (a / 4 | 0) - (b / 4 | 0);
        });

        for (index = 0; index < 516; index++) {
            if (array[index] !== expected[index]) return true;
        }
    });

    var getSortCompare = function(comparefn) {
        return function(x, y) {
            if (comparefn !== undefined) return +comparefn(x, y) || 0;
            // eslint-disable-next-line no-self-compare -- NaN check
            if (y !== y) return -1;
            // eslint-disable-next-line no-self-compare -- NaN check
            if (x !== x) return 1;
            if (x === 0 && y === 0) return 1 / x > 0 && 1 / y < 0 ? 1 : -1;
            return x > y;
        };
    };

    // `%TypedArray%.prototype.sort` method
    // https://tc39.es/ecma262/#sec-%typedarray%.prototype.sort
    exportTypedArrayMethod$3('sort', function sort(comparefn) {
        var array = this;
        if (comparefn !== undefined) aFunction(comparefn);
        if (STABLE_SORT) return nativeSort.call(array, comparefn);

        aTypedArray$2(array);
        var arrayLength = toLength$2(array.length);
        var items = Array(arrayLength);
        var index;

        for (index = 0; index < arrayLength; index++) {
            items[index] = array[index];
        }

        items = internalSort(array, getSortCompare(comparefn));

        for (index = 0; index < arrayLength; index++) {
            array[index] = items[index];
        }

        return array;
    }, !STABLE_SORT || ACCEPT_INCORRECT_ARGUMENTS);

    var ArrayBufferViewCore$1 = arrayBufferViewCore;
    var toLength$1 = toLength$n;
    var toAbsoluteIndex = toAbsoluteIndex$6;
    var typedArraySpeciesConstructor = typedArraySpeciesConstructor$4;

    var aTypedArray$1 = ArrayBufferViewCore$1.aTypedArray;
    var exportTypedArrayMethod$2 = ArrayBufferViewCore$1.exportTypedArrayMethod;

    // `%TypedArray%.prototype.subarray` method
    // https://tc39.es/ecma262/#sec-%typedarray%.prototype.subarray
    exportTypedArrayMethod$2('subarray', function subarray(begin, end) {
        var O = aTypedArray$1(this);
        var length = O.length;
        var beginIndex = toAbsoluteIndex(begin, length);
        var C = typedArraySpeciesConstructor(O);
        return new C(
            O.buffer,
            O.byteOffset + beginIndex * O.BYTES_PER_ELEMENT,
            toLength$1((end === undefined ? length : toAbsoluteIndex(end, length)) - beginIndex)
        );
    });

    var global$9 = global$A;
    var ArrayBufferViewCore = arrayBufferViewCore;
    var fails$4 = fails$x;

    var Int8Array$1 = global$9.Int8Array;
    var aTypedArray = ArrayBufferViewCore.aTypedArray;
    var exportTypedArrayMethod$1 = ArrayBufferViewCore.exportTypedArrayMethod;
    var $toLocaleString = [].toLocaleString;
    var $slice = [].slice;

    // iOS Safari 6.x fails here
    var TO_LOCALE_STRING_BUG = !!Int8Array$1 && fails$4(function() {
        $toLocaleString.call(new Int8Array$1(1));
    });

    var FORCED = fails$4(function() {
        return [1, 2].toLocaleString() != new Int8Array$1([1, 2]).toLocaleString();
    }) || !fails$4(function() {
        Int8Array$1.prototype.toLocaleString.call([1, 2]);
    });

    // `%TypedArray%.prototype.toLocaleString` method
    // https://tc39.es/ecma262/#sec-%typedarray%.prototype.tolocalestring
    exportTypedArrayMethod$1('toLocaleString', function toLocaleString() {
        return $toLocaleString.apply(TO_LOCALE_STRING_BUG ? $slice.call(aTypedArray(this)) : aTypedArray(this), arguments);
    }, FORCED);

    var exportTypedArrayMethod = arrayBufferViewCore.exportTypedArrayMethod;
    var fails$3 = fails$x;
    var global$8 = global$A;

    var Uint8Array = global$8.Uint8Array;
    var Uint8ArrayPrototype = Uint8Array && Uint8Array.prototype || {};
    var arrayToString = [].toString;
    var arrayJoin = [].join;

    if (fails$3(function() {
            arrayToString.call({});
        })) {
        arrayToString = function toString() {
            return arrayJoin.call(this);
        };
    }

    var IS_NOT_ARRAY_METHOD = Uint8ArrayPrototype.toString != arrayToString;

    // `%TypedArray%.prototype.toString` method
    // https://tc39.es/ecma262/#sec-%typedarray%.prototype.tostring
    exportTypedArrayMethod('toString', arrayToString, IS_NOT_ARRAY_METHOD);

    var createTypedArrayConstructor$1 = typedArrayConstructor.exports;

    // `Uint16Array` constructor
    // https://tc39.es/ecma262/#sec-typedarray-objects
    createTypedArrayConstructor$1('Uint16', function(init) {
        return function Uint16Array(data, byteOffset, length) {
            return init(this, data, byteOffset, length);
        };
    });

    var createTypedArrayConstructor = typedArrayConstructor.exports;

    // `Uint32Array` constructor
    // https://tc39.es/ecma262/#sec-typedarray-objects
    createTypedArrayConstructor('Uint32', function(init) {
        return function Uint32Array(data, byteOffset, length) {
            return init(this, data, byteOffset, length);
        };
    });

    var $$8 = _export;
    var global$7 = global$A;
    var arrayBufferModule = arrayBuffer;
    var setSpecies$1 = setSpecies$4;

    var ARRAY_BUFFER = 'ArrayBuffer';
    var ArrayBuffer$1 = arrayBufferModule[ARRAY_BUFFER];
    var NativeArrayBuffer = global$7[ARRAY_BUFFER];

    // `ArrayBuffer` constructor
    // https://tc39.es/ecma262/#sec-arraybuffer-constructor
    $$8({
        global: true,
        forced: NativeArrayBuffer !== ArrayBuffer$1
    }, {
        ArrayBuffer: ArrayBuffer$1
    });

    setSpecies$1(ARRAY_BUFFER);

    var toInteger = toInteger$a;
    var toString$3 = toString$h;
    var requireObjectCoercible$1 = requireObjectCoercible$b;

    // `String.prototype.repeat` method implementation
    // https://tc39.es/ecma262/#sec-string.prototype.repeat
    var stringRepeat = function repeat(count) {
        var str = toString$3(requireObjectCoercible$1(this));
        var result = '';
        var n = toInteger(count);
        if (n < 0 || n == Infinity) throw RangeError('Wrong number of repetitions');
        for (; n > 0;
            (n >>>= 1) && (str += str))
            if (n & 1) result += str;
        return result;
    };

    var $$7 = _export;
    var repeat = stringRepeat;

    // `String.prototype.repeat` method
    // https://tc39.es/ecma262/#sec-string.prototype.repeat
    $$7({
        target: 'String',
        proto: true
    }, {
        repeat: repeat
    });

    var $forEach$1 = arrayIteration.forEach;
    var arrayMethodIsStrict = arrayMethodIsStrict$6;

    var STRICT_METHOD = arrayMethodIsStrict('forEach');

    // `Array.prototype.forEach` method implementation
    // https://tc39.es/ecma262/#sec-array.prototype.foreach
    var arrayForEach = !STRICT_METHOD ? function forEach(callbackfn /* , thisArg */ ) {
        return $forEach$1(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        // eslint-disable-next-line es/no-array-prototype-foreach -- safe
    } : [].forEach;

    var global$6 = global$A;
    var DOMIterables = domIterables;
    var forEach = arrayForEach;
    var createNonEnumerableProperty$2 = createNonEnumerableProperty$d;

    for (var COLLECTION_NAME in DOMIterables) {
        var Collection = global$6[COLLECTION_NAME];
        var CollectionPrototype = Collection && Collection.prototype;
        // some Chrome versions have non-configurable methods on DOMTokenList
        if (CollectionPrototype && CollectionPrototype.forEach !== forEach) try {
            createNonEnumerableProperty$2(CollectionPrototype, 'forEach', forEach);
        } catch (error) {
            CollectionPrototype.forEach = forEach;
        }
    }

    var DESCRIPTORS$4 = descriptors;
    var objectKeys$1 = objectKeys$4;
    var toIndexedObject$2 = toIndexedObject$a;
    var propertyIsEnumerable = objectPropertyIsEnumerable.f;

    // `Object.{ entries, values }` methods implementation
    var createMethod = function(TO_ENTRIES) {
        return function(it) {
            var O = toIndexedObject$2(it);
            var keys = objectKeys$1(O);
            var length = keys.length;
            var i = 0;
            var result = [];
            var key;
            while (length > i) {
                key = keys[i++];
                if (!DESCRIPTORS$4 || propertyIsEnumerable.call(O, key)) {
                    result.push(TO_ENTRIES ? [key, O[key]] : O[key]);
                }
            }
            return result;
        };
    };

    var objectToArray = {
        // `Object.entries` method
        // https://tc39.es/ecma262/#sec-object.entries
        entries: createMethod(true),
        // `Object.values` method
        // https://tc39.es/ecma262/#sec-object.values
        values: createMethod(false)
    };

    var $$6 = _export;
    var $entries = objectToArray.entries;

    // `Object.entries` method
    // https://tc39.es/ecma262/#sec-object.entries
    $$6({
        target: 'Object',
        stat: true
    }, {
        entries: function entries(O) {
            return $entries(O);
        }
    });

    var DESCRIPTORS$3 = descriptors;
    var global$5 = global$A;
    var isForced$1 = isForced_1;
    var inheritIfRequired$1 = inheritIfRequired$3;
    var createNonEnumerableProperty$1 = createNonEnumerableProperty$d;
    var defineProperty$3 = objectDefineProperty.f;
    var getOwnPropertyNames$1 = objectGetOwnPropertyNames.f;
    var isRegExp$1 = isRegexp;
    var toString$2 = toString$h;
    var getFlags = regexpFlags$1;
    var stickyHelpers = regexpStickyHelpers;
    var redefine$2 = redefine$b.exports;
    var fails$2 = fails$x;
    var has$4 = has$g;
    var enforceInternalState = internalState.enforce;
    var setSpecies = setSpecies$4;
    var wellKnownSymbol$3 = wellKnownSymbol$r;
    var UNSUPPORTED_DOT_ALL = regexpUnsupportedDotAll;
    var UNSUPPORTED_NCG = regexpUnsupportedNcg;

    var MATCH$1 = wellKnownSymbol$3('match');
    var NativeRegExp = global$5.RegExp;
    var RegExpPrototype = NativeRegExp.prototype;
    // TODO: Use only propper RegExpIdentifierName
    var IS_NCG = /^\?<[^\s\d!#%&*+<=>@^][^\s!#%&*+<=>@^]*>/;
    var re1 = /a/g;
    var re2 = /a/g;

    // "new" should create a new object, old webkit bug
    var CORRECT_NEW = new NativeRegExp(re1) !== re1;

    var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y;

    var BASE_FORCED = DESCRIPTORS$3 &&
        (!CORRECT_NEW || UNSUPPORTED_Y || UNSUPPORTED_DOT_ALL || UNSUPPORTED_NCG || fails$2(function() {
            re2[MATCH$1] = false;
            // RegExp constructor can alter flags and IsRegExp works correct with @@match
            return NativeRegExp(re1) != re1 || NativeRegExp(re2) == re2 || NativeRegExp(re1, 'i') != '/a/i';
        }));

    var handleDotAll = function(string) {
        var length = string.length;
        var index = 0;
        var result = '';
        var brackets = false;
        var chr;
        for (; index <= length; index++) {
            chr = string.charAt(index);
            if (chr === '\\') {
                result += chr + string.charAt(++index);
                continue;
            }
            if (!brackets && chr === '.') {
                result += '[\\s\\S]';
            } else {
                if (chr === '[') {
                    brackets = true;
                } else if (chr === ']') {
                    brackets = false;
                }
                result += chr;
            }
        }
        return result;
    };

    var handleNCG = function(string) {
        var length = string.length;
        var index = 0;
        var result = '';
        var named = [];
        var names = {};
        var brackets = false;
        var ncg = false;
        var groupid = 0;
        var groupname = '';
        var chr;
        for (; index <= length; index++) {
            chr = string.charAt(index);
            if (chr === '\\') {
                chr = chr + string.charAt(++index);
            } else if (chr === ']') {
                brackets = false;
            } else if (!brackets) switch (true) {
                case chr === '[':
                    brackets = true;
                    break;
                case chr === '(':
                    if (IS_NCG.test(string.slice(index + 1))) {
                        index += 2;
                        ncg = true;
                    }
                    result += chr;
                    groupid++;
                    continue;
                case chr === '>' && ncg:
                    if (groupname === '' || has$4(names, groupname)) {
                        throw new SyntaxError('Invalid capture group name');
                    }
                    names[groupname] = true;
                    named.push([groupname, groupid]);
                    ncg = false;
                    groupname = '';
                    continue;
            }
            if (ncg) groupname += chr;
            else result += chr;
        }
        return [result, named];
    };

    // `RegExp` constructor
    // https://tc39.es/ecma262/#sec-regexp-constructor
    if (isForced$1('RegExp', BASE_FORCED)) {
        var RegExpWrapper = function RegExp(pattern, flags) {
            var thisIsRegExp = this instanceof RegExpWrapper;
            var patternIsRegExp = isRegExp$1(pattern);
            var flagsAreUndefined = flags === undefined;
            var groups = [];
            var rawPattern = pattern;
            var rawFlags, dotAll, sticky, handled, result, state;

            if (!thisIsRegExp && patternIsRegExp && flagsAreUndefined && pattern.constructor === RegExpWrapper) {
                return pattern;
            }

            if (patternIsRegExp || pattern instanceof RegExpWrapper) {
                pattern = pattern.source;
                if (flagsAreUndefined) flags = 'flags' in rawPattern ? rawPattern.flags : getFlags.call(rawPattern);
            }

            pattern = pattern === undefined ? '' : toString$2(pattern);
            flags = flags === undefined ? '' : toString$2(flags);
            rawPattern = pattern;

            if (UNSUPPORTED_DOT_ALL && 'dotAll' in re1) {
                dotAll = !!flags && flags.indexOf('s') > -1;
                if (dotAll) flags = flags.replace(/s/g, '');
            }

            rawFlags = flags;

            if (UNSUPPORTED_Y && 'sticky' in re1) {
                sticky = !!flags && flags.indexOf('y') > -1;
                if (sticky) flags = flags.replace(/y/g, '');
            }

            if (UNSUPPORTED_NCG) {
                handled = handleNCG(pattern);
                pattern = handled[0];
                groups = handled[1];
            }

            result = inheritIfRequired$1(NativeRegExp(pattern, flags), thisIsRegExp ? this : RegExpPrototype, RegExpWrapper);

            if (dotAll || sticky || groups.length) {
                state = enforceInternalState(result);
                if (dotAll) {
                    state.dotAll = true;
                    state.raw = RegExpWrapper(handleDotAll(pattern), rawFlags);
                }
                if (sticky) state.sticky = true;
                if (groups.length) state.groups = groups;
            }

            if (pattern !== rawPattern) try {
                // fails in old engines, but we have no alternatives for unsupported regex syntax
                createNonEnumerableProperty$1(result, 'source', rawPattern === '' ? '(?:)' : rawPattern);
            } catch (error) {
                /* empty */ }

            return result;
        };

        var proxy = function(key) {
            key in RegExpWrapper || defineProperty$3(RegExpWrapper, key, {
                configurable: true,
                get: function() {
                    return NativeRegExp[key];
                },
                set: function(it) {
                    NativeRegExp[key] = it;
                }
            });
        };

        for (var keys$1 = getOwnPropertyNames$1(NativeRegExp), index = 0; keys$1.length > index;) {
            proxy(keys$1[index++]);
        }

        RegExpPrototype.constructor = RegExpWrapper;
        RegExpWrapper.prototype = RegExpPrototype;
        redefine$2(global$5, 'RegExp', RegExpWrapper);
    }

    // https://tc39.es/ecma262/#sec-get-regexp-@@species
    setSpecies('RegExp');

    var isRegExp = isRegexp;

    var notARegexp = function(it) {
        if (isRegExp(it)) {
            throw TypeError("The method doesn't accept regular expressions");
        }
        return it;
    };

    var wellKnownSymbol$2 = wellKnownSymbol$r;

    var MATCH = wellKnownSymbol$2('match');

    var correctIsRegexpLogic = function(METHOD_NAME) {
        var regexp = /./;
        try {
            '/./' [METHOD_NAME](regexp);
        } catch (error1) {
            try {
                regexp[MATCH] = false;
                return '/./' [METHOD_NAME](regexp);
            } catch (error2) {
                /* empty */ }
        }
        return false;
    };

    var $$5 = _export;
    var getOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f;
    var toLength = toLength$n;
    var toString$1 = toString$h;
    var notARegExp = notARegexp;
    var requireObjectCoercible = requireObjectCoercible$b;
    var correctIsRegExpLogic = correctIsRegexpLogic;

    // eslint-disable-next-line es/no-string-prototype-endswith -- safe
    var $endsWith = ''.endsWith;
    var min = Math.min;

    var CORRECT_IS_REGEXP_LOGIC = correctIsRegExpLogic('endsWith');
    // https://github.com/zloirock/core-js/pull/702
    var MDN_POLYFILL_BUG = !CORRECT_IS_REGEXP_LOGIC && !! function() {
        var descriptor = getOwnPropertyDescriptor$1(String.prototype, 'endsWith');
        return descriptor && !descriptor.writable;
    }();

    // `String.prototype.endsWith` method
    // https://tc39.es/ecma262/#sec-string.prototype.endswith
    $$5({
        target: 'String',
        proto: true,
        forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC
    }, {
        endsWith: function endsWith(searchString /* , endPosition = @length */ ) {
            var that = toString$1(requireObjectCoercible(this));
            notARegExp(searchString);
            var endPosition = arguments.length > 1 ? arguments[1] : undefined;
            var len = toLength(that.length);
            var end = endPosition === undefined ? len : min(toLength(endPosition), len);
            var search = toString$1(searchString);
            return $endsWith ?
                $endsWith.call(that, search, end) :
                that.slice(end - search.length, end) === search;
        }
    });

    var $$4 = _export;
    var createHTML = createHtml;
    var forcedStringHTMLMethod = stringHtmlForced;

    // `String.prototype.fixed` method
    // https://tc39.es/ecma262/#sec-string.prototype.fixed
    $$4({
        target: 'String',
        proto: true,
        forced: forcedStringHTMLMethod('fixed')
    }, {
        fixed: function fixed() {
            return createHTML(this, 'tt', '', '');
        }
    });

    var objectGetOwnPropertyNamesExternal = {};

    /* eslint-disable es/no-object-getownpropertynames -- safe */

    var toIndexedObject$1 = toIndexedObject$a;
    var $getOwnPropertyNames$1 = objectGetOwnPropertyNames.f;

    var toString = {}.toString;

    var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames ?
        Object.getOwnPropertyNames(window) : [];

    var getWindowNames = function(it) {
        try {
            return $getOwnPropertyNames$1(it);
        } catch (error) {
            return windowNames.slice();
        }
    };

    // fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
    objectGetOwnPropertyNamesExternal.f = function getOwnPropertyNames(it) {
        return windowNames && toString.call(it) == '[object Window]' ?
            getWindowNames(it) :
            $getOwnPropertyNames$1(toIndexedObject$1(it));
    };

    var wellKnownSymbolWrapped = {};

    var wellKnownSymbol$1 = wellKnownSymbol$r;

    wellKnownSymbolWrapped.f = wellKnownSymbol$1;

    var global$4 = global$A;

    var path$1 = global$4;

    var path = path$1;
    var has$3 = has$g;
    var wrappedWellKnownSymbolModule$1 = wellKnownSymbolWrapped;
    var defineProperty$2 = objectDefineProperty.f;

    var defineWellKnownSymbol$1 = function(NAME) {
        var Symbol = path.Symbol || (path.Symbol = {});
        if (!has$3(Symbol, NAME)) defineProperty$2(Symbol, NAME, {
            value: wrappedWellKnownSymbolModule$1.f(NAME)
        });
    };

    var $$3 = _export;
    var global$3 = global$A;
    var getBuiltIn = getBuiltIn$7;
    var DESCRIPTORS$2 = descriptors;
    var NATIVE_SYMBOL = nativeSymbol;
    var fails$1 = fails$x;
    var has$2 = has$g;
    var isArray = isArray$4;
    var isObject$1 = isObject$i;
    var isSymbol$1 = isSymbol$6;
    var anObject = anObject$h;
    var toObject = toObject$g;
    var toIndexedObject = toIndexedObject$a;
    var toPropertyKey = toPropertyKey$5;
    var $toString = toString$h;
    var createPropertyDescriptor = createPropertyDescriptor$6;
    var nativeObjectCreate = objectCreate;
    var objectKeys = objectKeys$4;
    var getOwnPropertyNamesModule = objectGetOwnPropertyNames;
    var getOwnPropertyNamesExternal = objectGetOwnPropertyNamesExternal;
    var getOwnPropertySymbolsModule = objectGetOwnPropertySymbols;
    var getOwnPropertyDescriptorModule = objectGetOwnPropertyDescriptor;
    var definePropertyModule = objectDefineProperty;
    var propertyIsEnumerableModule = objectPropertyIsEnumerable;
    var createNonEnumerableProperty = createNonEnumerableProperty$d;
    var redefine$1 = redefine$b.exports;
    var shared = shared$5.exports;
    var sharedKey = sharedKey$4;
    var hiddenKeys = hiddenKeys$5;
    var uid = uid$4;
    var wellKnownSymbol = wellKnownSymbol$r;
    var wrappedWellKnownSymbolModule = wellKnownSymbolWrapped;
    var defineWellKnownSymbol = defineWellKnownSymbol$1;
    var setToStringTag = setToStringTag$5;
    var InternalStateModule = internalState;
    var $forEach = arrayIteration.forEach;

    var HIDDEN = sharedKey('hidden');
    var SYMBOL = 'Symbol';
    var PROTOTYPE = 'prototype';
    var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');
    var setInternalState = InternalStateModule.set;
    var getInternalState = InternalStateModule.getterFor(SYMBOL);
    var ObjectPrototype = Object[PROTOTYPE];
    var $Symbol = global$3.Symbol;
    var $stringify = getBuiltIn('JSON', 'stringify');
    var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
    var nativeDefineProperty = definePropertyModule.f;
    var nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;
    var nativePropertyIsEnumerable = propertyIsEnumerableModule.f;
    var AllSymbols = shared('symbols');
    var ObjectPrototypeSymbols = shared('op-symbols');
    var StringToSymbolRegistry = shared('string-to-symbol-registry');
    var SymbolToStringRegistry = shared('symbol-to-string-registry');
    var WellKnownSymbolsStore = shared('wks');
    var QObject = global$3.QObject;
    // Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
    var USE_SETTER = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

    // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
    var setSymbolDescriptor = DESCRIPTORS$2 && fails$1(function() {
        return nativeObjectCreate(nativeDefineProperty({}, 'a', {
            get: function() {
                return nativeDefineProperty(this, 'a', {
                    value: 7
                }).a;
            }
        })).a != 7;
    }) ? function(O, P, Attributes) {
        var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor(ObjectPrototype, P);
        if (ObjectPrototypeDescriptor) delete ObjectPrototype[P];
        nativeDefineProperty(O, P, Attributes);
        if (ObjectPrototypeDescriptor && O !== ObjectPrototype) {
            nativeDefineProperty(ObjectPrototype, P, ObjectPrototypeDescriptor);
        }
    } : nativeDefineProperty;

    var wrap = function(tag, description) {
        var symbol = AllSymbols[tag] = nativeObjectCreate($Symbol[PROTOTYPE]);
        setInternalState(symbol, {
            type: SYMBOL,
            tag: tag,
            description: description
        });
        if (!DESCRIPTORS$2) symbol.description = description;
        return symbol;
    };

    var $defineProperty = function defineProperty(O, P, Attributes) {
        if (O === ObjectPrototype) $defineProperty(ObjectPrototypeSymbols, P, Attributes);
        anObject(O);
        var key = toPropertyKey(P);
        anObject(Attributes);
        if (has$2(AllSymbols, key)) {
            if (!Attributes.enumerable) {
                if (!has$2(O, HIDDEN)) nativeDefineProperty(O, HIDDEN, createPropertyDescriptor(1, {}));
                O[HIDDEN][key] = true;
            } else {
                if (has$2(O, HIDDEN) && O[HIDDEN][key]) O[HIDDEN][key] = false;
                Attributes = nativeObjectCreate(Attributes, {
                    enumerable: createPropertyDescriptor(0, false)
                });
            }
            return setSymbolDescriptor(O, key, Attributes);
        }
        return nativeDefineProperty(O, key, Attributes);
    };

    var $defineProperties = function defineProperties(O, Properties) {
        anObject(O);
        var properties = toIndexedObject(Properties);
        var keys = objectKeys(properties).concat($getOwnPropertySymbols(properties));
        $forEach(keys, function(key) {
            if (!DESCRIPTORS$2 || $propertyIsEnumerable.call(properties, key)) $defineProperty(O, key, properties[key]);
        });
        return O;
    };

    var $create = function create(O, Properties) {
        return Properties === undefined ? nativeObjectCreate(O) : $defineProperties(nativeObjectCreate(O), Properties);
    };

    var $propertyIsEnumerable = function propertyIsEnumerable(V) {
        var P = toPropertyKey(V);
        var enumerable = nativePropertyIsEnumerable.call(this, P);
        if (this === ObjectPrototype && has$2(AllSymbols, P) && !has$2(ObjectPrototypeSymbols, P)) return false;
        return enumerable || !has$2(this, P) || !has$2(AllSymbols, P) || has$2(this, HIDDEN) && this[HIDDEN][P] ? enumerable : true;
    };

    var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {
        var it = toIndexedObject(O);
        var key = toPropertyKey(P);
        if (it === ObjectPrototype && has$2(AllSymbols, key) && !has$2(ObjectPrototypeSymbols, key)) return;
        var descriptor = nativeGetOwnPropertyDescriptor(it, key);
        if (descriptor && has$2(AllSymbols, key) && !(has$2(it, HIDDEN) && it[HIDDEN][key])) {
            descriptor.enumerable = true;
        }
        return descriptor;
    };

    var $getOwnPropertyNames = function getOwnPropertyNames(O) {
        var names = nativeGetOwnPropertyNames(toIndexedObject(O));
        var result = [];
        $forEach(names, function(key) {
            if (!has$2(AllSymbols, key) && !has$2(hiddenKeys, key)) result.push(key);
        });
        return result;
    };

    var $getOwnPropertySymbols = function getOwnPropertySymbols(O) {
        var IS_OBJECT_PROTOTYPE = O === ObjectPrototype;
        var names = nativeGetOwnPropertyNames(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject(O));
        var result = [];
        $forEach(names, function(key) {
            if (has$2(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || has$2(ObjectPrototype, key))) {
                result.push(AllSymbols[key]);
            }
        });
        return result;
    };

    // `Symbol` constructor
    // https://tc39.es/ecma262/#sec-symbol-constructor
    if (!NATIVE_SYMBOL) {
        $Symbol = function Symbol() {
            if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor');
            var description = !arguments.length || arguments[0] === undefined ? undefined : $toString(arguments[0]);
            var tag = uid(description);
            var setter = function(value) {
                if (this === ObjectPrototype) setter.call(ObjectPrototypeSymbols, value);
                if (has$2(this, HIDDEN) && has$2(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
                setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));
            };
            if (DESCRIPTORS$2 && USE_SETTER) setSymbolDescriptor(ObjectPrototype, tag, {
                configurable: true,
                set: setter
            });
            return wrap(tag, description);
        };

        redefine$1($Symbol[PROTOTYPE], 'toString', function toString() {
            return getInternalState(this).tag;
        });

        redefine$1($Symbol, 'withoutSetter', function(description) {
            return wrap(uid(description), description);
        });

        propertyIsEnumerableModule.f = $propertyIsEnumerable;
        definePropertyModule.f = $defineProperty;
        getOwnPropertyDescriptorModule.f = $getOwnPropertyDescriptor;
        getOwnPropertyNamesModule.f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;
        getOwnPropertySymbolsModule.f = $getOwnPropertySymbols;

        wrappedWellKnownSymbolModule.f = function(name) {
            return wrap(wellKnownSymbol(name), name);
        };

        if (DESCRIPTORS$2) {
            // https://github.com/tc39/proposal-Symbol-description
            nativeDefineProperty($Symbol[PROTOTYPE], 'description', {
                configurable: true,
                get: function description() {
                    return getInternalState(this).description;
                }
            }); {
                redefine$1(ObjectPrototype, 'propertyIsEnumerable', $propertyIsEnumerable, {
                    unsafe: true
                });
            }
        }
    }

    $$3({
        global: true,
        wrap: true,
        forced: !NATIVE_SYMBOL,
        sham: !NATIVE_SYMBOL
    }, {
        Symbol: $Symbol
    });

    $forEach(objectKeys(WellKnownSymbolsStore), function(name) {
        defineWellKnownSymbol(name);
    });

    $$3({
        target: SYMBOL,
        stat: true,
        forced: !NATIVE_SYMBOL
    }, {
        // `Symbol.for` method
        // https://tc39.es/ecma262/#sec-symbol.for
        'for': function(key) {
            var string = $toString(key);
            if (has$2(StringToSymbolRegistry, string)) return StringToSymbolRegistry[string];
            var symbol = $Symbol(string);
            StringToSymbolRegistry[string] = symbol;
            SymbolToStringRegistry[symbol] = string;
            return symbol;
        },
        // `Symbol.keyFor` method
        // https://tc39.es/ecma262/#sec-symbol.keyfor
        keyFor: function keyFor(sym) {
            if (!isSymbol$1(sym)) throw TypeError(sym + ' is not a symbol');
            if (has$2(SymbolToStringRegistry, sym)) return SymbolToStringRegistry[sym];
        },
        useSetter: function() {
            USE_SETTER = true;
        },
        useSimple: function() {
            USE_SETTER = false;
        }
    });

    $$3({
        target: 'Object',
        stat: true,
        forced: !NATIVE_SYMBOL,
        sham: !DESCRIPTORS$2
    }, {
        // `Object.create` method
        // https://tc39.es/ecma262/#sec-object.create
        create: $create,
        // `Object.defineProperty` method
        // https://tc39.es/ecma262/#sec-object.defineproperty
        defineProperty: $defineProperty,
        // `Object.defineProperties` method
        // https://tc39.es/ecma262/#sec-object.defineproperties
        defineProperties: $defineProperties,
        // `Object.getOwnPropertyDescriptor` method
        // https://tc39.es/ecma262/#sec-object.getownpropertydescriptors
        getOwnPropertyDescriptor: $getOwnPropertyDescriptor
    });

    $$3({
        target: 'Object',
        stat: true,
        forced: !NATIVE_SYMBOL
    }, {
        // `Object.getOwnPropertyNames` method
        // https://tc39.es/ecma262/#sec-object.getownpropertynames
        getOwnPropertyNames: $getOwnPropertyNames,
        // `Object.getOwnPropertySymbols` method
        // https://tc39.es/ecma262/#sec-object.getownpropertysymbols
        getOwnPropertySymbols: $getOwnPropertySymbols
    });

    // Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
    // https://bugs.chromium.org/p/v8/issues/detail?id=3443
    $$3({
        target: 'Object',
        stat: true,
        forced: fails$1(function() {
            getOwnPropertySymbolsModule.f(1);
        })
    }, {
        getOwnPropertySymbols: function getOwnPropertySymbols(it) {
            return getOwnPropertySymbolsModule.f(toObject(it));
        }
    });

    // `JSON.stringify` method behavior with symbols
    // https://tc39.es/ecma262/#sec-json.stringify
    if ($stringify) {
        var FORCED_JSON_STRINGIFY = !NATIVE_SYMBOL || fails$1(function() {
            var symbol = $Symbol();
            // MS Edge converts symbol values to JSON as {}
            return $stringify([symbol]) != '[null]'
                // WebKit converts symbol values to JSON as null
                ||
                $stringify({
                    a: symbol
                }) != '{}'
                // V8 throws on boxed symbols
                ||
                $stringify(Object(symbol)) != '{}';
        });

        $$3({
            target: 'JSON',
            stat: true,
            forced: FORCED_JSON_STRINGIFY
        }, {
            // eslint-disable-next-line no-unused-vars -- required for `.length`
            stringify: function stringify(it, replacer, space) {
                var args = [it];
                var index = 1;
                var $replacer;
                while (arguments.length > index) args.push(arguments[index++]);
                $replacer = replacer;
                if (!isObject$1(replacer) && it === undefined || isSymbol$1(it)) return; // IE8 returns string on undefined
                if (!isArray(replacer)) replacer = function(key, value) {
                    if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
                    if (!isSymbol$1(value)) return value;
                };
                args[1] = replacer;
                return $stringify.apply(null, args);
            }
        });
    }

    // `Symbol.prototype[@@toPrimitive]` method
    // https://tc39.es/ecma262/#sec-symbol.prototype-@@toprimitive
    if (!$Symbol[PROTOTYPE][TO_PRIMITIVE]) {
        createNonEnumerableProperty($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
    }
    // `Symbol.prototype[@@toStringTag]` property
    // https://tc39.es/ecma262/#sec-symbol.prototype-@@tostringtag
    setToStringTag($Symbol, SYMBOL);

    hiddenKeys[HIDDEN] = true;

    var $$2 = _export;
    var DESCRIPTORS$1 = descriptors;
    var global$2 = global$A;
    var has$1 = has$g;
    var isObject = isObject$i;
    var defineProperty$1 = objectDefineProperty.f;
    var copyConstructorProperties = copyConstructorProperties$2;

    var NativeSymbol = global$2.Symbol;

    if (DESCRIPTORS$1 && typeof NativeSymbol == 'function' && (!('description' in NativeSymbol.prototype) ||
            // Safari 12 bug
            NativeSymbol().description !== undefined
        )) {
        var EmptyStringDescriptionStore = {};
        // wrap Symbol constructor for correct work with undefined description
        var SymbolWrapper = function Symbol() {
            var description = arguments.length < 1 || arguments[0] === undefined ? undefined : String(arguments[0]);
            var result = this instanceof SymbolWrapper ?
                new NativeSymbol(description)
                // in Edge 13, String(Symbol(undefined)) === 'Symbol(undefined)'
                :
                description === undefined ? NativeSymbol() : NativeSymbol(description);
            if (description === '') EmptyStringDescriptionStore[result] = true;
            return result;
        };
        copyConstructorProperties(SymbolWrapper, NativeSymbol);
        var symbolPrototype = SymbolWrapper.prototype = NativeSymbol.prototype;
        symbolPrototype.constructor = SymbolWrapper;

        var symbolToString = symbolPrototype.toString;
        var native = String(NativeSymbol('test')) == 'Symbol(test)';
        var regexp = /^Symbol\((.*)\)[^)]+$/;
        defineProperty$1(symbolPrototype, 'description', {
            configurable: true,
            get: function description() {
                var symbol = isObject(this) ? this.valueOf() : this;
                var string = symbolToString.call(symbol);
                if (has$1(EmptyStringDescriptionStore, symbol)) return '';
                var desc = native ? string.slice(7, -1) : string.replace(regexp, '$1');
                return desc === '' ? undefined : desc;
            }
        });

        $$2({
            global: true,
            forced: true
        }, {
            Symbol: SymbolWrapper
        });
    }

    var $$1 = _export;

    // `Number.MAX_SAFE_INTEGER` constant
    // https://tc39.es/ecma262/#sec-number.max_safe_integer
    $$1({
        target: 'Number',
        stat: true
    }, {
        MAX_SAFE_INTEGER: 0x1FFFFFFFFFFFFF
    });

    var DESCRIPTORS = descriptors;
    var global$1 = global$A;
    var isForced = isForced_1;
    var redefine = redefine$b.exports;
    var has = has$g;
    var classof = classofRaw$1;
    var inheritIfRequired = inheritIfRequired$3;
    var isSymbol = isSymbol$6;
    var toPrimitive = toPrimitive$2;
    var fails = fails$x;
    var create = objectCreate;
    var getOwnPropertyNames = objectGetOwnPropertyNames.f;
    var getOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;
    var defineProperty = objectDefineProperty.f;
    var trim = stringTrim.trim;

    var NUMBER = 'Number';
    var NativeNumber = global$1[NUMBER];
    var NumberPrototype = NativeNumber.prototype;

    // Opera ~12 has broken Object#toString
    var BROKEN_CLASSOF = classof(create(NumberPrototype)) == NUMBER;

    // `ToNumber` abstract operation
    // https://tc39.es/ecma262/#sec-tonumber
    var toNumber = function(argument) {
        if (isSymbol(argument)) throw TypeError('Cannot convert a Symbol value to a number');
        var it = toPrimitive(argument, 'number');
        var first, third, radix, maxCode, digits, length, index, code;
        if (typeof it == 'string' && it.length > 2) {
            it = trim(it);
            first = it.charCodeAt(0);
            if (first === 43 || first === 45) {
                third = it.charCodeAt(2);
                if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
            } else if (first === 48) {
                switch (it.charCodeAt(1)) {
                    case 66:
                    case 98:
                        radix = 2;
                        maxCode = 49;
                        break; // fast equal of /^0b[01]+$/i
                    case 79:
                    case 111:
                        radix = 8;
                        maxCode = 55;
                        break; // fast equal of /^0o[0-7]+$/i
                    default:
                        return +it;
                }
                digits = it.slice(2);
                length = digits.length;
                for (index = 0; index < length; index++) {
                    code = digits.charCodeAt(index);
                    // parseInt parses a string to a first unavailable symbol
                    // but ToNumber should return NaN if a string contains unavailable symbols
                    if (code < 48 || code > maxCode) return NaN;
                }
                return parseInt(digits, radix);
            }
        }
        return +it;
    };

    // `Number` constructor
    // https://tc39.es/ecma262/#sec-number-constructor
    if (isForced(NUMBER, !NativeNumber(' 0o1') || !NativeNumber('0b1') || NativeNumber('+0x1'))) {
        var NumberWrapper = function Number(value) {
            var it = arguments.length < 1 ? 0 : value;
            var dummy = this;
            return dummy instanceof NumberWrapper
                // check on 1..constructor(foo) case
                &&
                (BROKEN_CLASSOF ? fails(function() {
                    NumberPrototype.valueOf.call(dummy);
                }) : classof(dummy) != NUMBER) ?
                inheritIfRequired(new NativeNumber(toNumber(it)), dummy, NumberWrapper) : toNumber(it);
        };
        for (var keys = DESCRIPTORS ? getOwnPropertyNames(NativeNumber) : (
                // ES3:
                'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
                // ES2015 (in case, if modules with ES2015 Number statics required before):
                'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
                'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger,' +
                // ESNext
                'fromString,range'
            ).split(','), j = 0, key; keys.length > j; j++) {
            if (has(NativeNumber, key = keys[j]) && !has(NumberWrapper, key)) {
                defineProperty(NumberWrapper, key, getOwnPropertyDescriptor(NativeNumber, key));
            }
        }
        NumberWrapper.prototype = NumberPrototype;
        NumberPrototype.constructor = NumberWrapper;
        redefine(global$1, NUMBER, NumberWrapper);
    }

    var $ = _export;
    var $filter = arrayIteration.filter;
    var arrayMethodHasSpeciesSupport = arrayMethodHasSpeciesSupport$5;

    var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('filter');

    // `Array.prototype.filter` method
    // https://tc39.es/ecma262/#sec-array.prototype.filter
    // with adding support of @@species
    $({
        target: 'Array',
        proto: true,
        forced: !HAS_SPECIES_SUPPORT
    }, {
        filter: function filter(callbackfn /* , thisArg */ ) {
            return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        }
    });

}());

! function() {
    function e(e, t) {
        return (t || "") + " (SystemJS https://git.io/JvFET#" + e + ")"
    }

    function t(e, t) {
        if (-1 !== e.indexOf("\\") && (e = e.replace(/\\/g, "/")), "/" === e[0] && "/" === e[1]) return t.slice(0, t.indexOf(":") + 1) + e;
        if ("." === e[0] && ("/" === e[1] || "." === e[1] && ("/" === e[2] || 2 === e.length && (e += "/")) || 1 === e.length && (e += "/")) || "/" === e[0]) {
            var n, r = t.slice(0, t.indexOf(":") + 1);
            if (n = "/" === t[r.length + 1] ? "file:" !== r ? (n = t.slice(r.length + 2)).slice(n.indexOf("/") + 1) : t.slice(8) : t.slice(r.length + ("/" === t[r.length])), "/" === e[0]) return t.slice(0, t.length - n.length - 1) + e;
            for (var i = n.slice(0, n.lastIndexOf("/") + 1) + e, o = [], c = -1, s = 0; i.length > s; s++) - 1 !== c ? "/" === i[s] && (o.push(i.slice(c, s + 1)), c = -1) : "." === i[s] ? "." !== i[s + 1] || "/" !== i[s + 2] && s + 2 !== i.length ? "/" === i[s + 1] || s + 1 === i.length ? s += 1 : c = s : (o.pop(), s += 2) : c = s;
            return -1 !== c && o.push(i.slice(c)), t.slice(0, t.length - n.length) + o.join("")
        }
    }

    function n(e, n) {
        return t(e, n) || (-1 !== e.indexOf(":") ? e : t("./" + e, n))
    }

    function r(e, n, r, i, o) {
        for (var u in e) {
            var f = t(u, r) || u,
                a = e[u];
            if ("string" == typeof a) {
                var l = s(i, t(a, r) || a, o);
                l ? n[f] = l : c("W1", u, a)
            }
        }
    }

    function i(e, t) {
        if (t[e]) return e;
        var n = e.length;
        do {
            var r = e.slice(0, n + 1);
            if (r in t) return r
        } while (-1 !== (n = e.lastIndexOf("/", n - 1)))
    }

    function o(e, t) {
        var n = i(e, t);
        if (n) {
            var r = t[n];
            if (null === r) return;
            if (n.length >= e.length || "/" === r[r.length - 1]) return r + e.slice(n.length);
            c("W2", n, r)
        }
    }

    function c(t, n, r) {
        console.warn(e(t, [r, n].join(", ")))
    }

    function s(e, t, n) {
        for (var r = e.scopes, c = n && i(n, r); c;) {
            var s = o(t, r[c]);
            if (s) return s;
            c = i(c.slice(0, c.lastIndexOf("/")), r)
        }
        return o(t, e.imports) || -1 !== t.indexOf(":") && t
    }

    function u() {
        this[w] = {}
    }

    function f(t, n, r) {
        var i = t[w][n];
        if (i) return i;
        var o = [],
            c = Object.create(null);
        E && Object.defineProperty(c, E, {
            value: "Module"
        });
        var s = Promise.resolve().then((function() {
                return t.instantiate(n, r)
            })).then((function(r) {
                if (!r) throw Error(e(2, n));
                var s = r[1]((function(e, t) {
                    i.h = !0;
                    var n = !1;
                    if ("string" == typeof e) e in c && c[e] === t || (c[e] = t, n = !0);
                    else {
                        for (var r in e) t = e[r], r in c && c[r] === t || (c[r] = t, n = !0);
                        e.__esModule && (c.__esModule = e.__esModule)
                    }
                    if (n)
                        for (var s = 0; o.length > s; s++) {
                            var u = o[s];
                            u && u(c)
                        }
                    return t
                }), 2 === r[1].length ? {
                    import: function(e) {
                        return t.import(e, n)
                    },
                    meta: t.createContext(n)
                } : void 0);
                return i.e = s.execute || function() {}, [r[0], s.setters || []]
            }), (function(e) {
                throw i.e = null, i.er = e, e
            })),
            u = s.then((function(e) {
                return Promise.all(e[0].map((function(r, i) {
                    var o = e[1][i];
                    return Promise.resolve(t.resolve(r, n)).then((function(e) {
                        var r = f(t, e, n);
                        return Promise.resolve(r.I).then((function() {
                            return o && (r.i.push(o), !r.h && r.I || o(r.n)), r
                        }))
                    }))
                }))).then((function(e) {
                    i.d = e
                }))
            }));
        return i = t[w][n] = {
            id: n,
            i: o,
            n: c,
            I: s,
            L: u,
            h: !1,
            d: void 0,
            e: void 0,
            er: void 0,
            E: void 0,
            C: void 0,
            p: void 0
        }
    }

    function a() {
        [].forEach.call(document.querySelectorAll("script"), (function(t) {
            if (!t.sp)
                if ("systemjs-module" === t.type) {
                    if (t.sp = !0, !t.src) return;
                    System.import("import:" === t.src.slice(0, 7) ? t.src.slice(7) : n(t.src, l)).catch((function(e) {
                        if (e.message.indexOf("https://git.io/JvFET#3") > -1) {
                            var n = document.createEvent("Event");
                            n.initEvent("error", !1, !1), t.dispatchEvent(n)
                        }
                        return Promise.reject(e)
                    }))
                } else if ("systemjs-importmap" === t.type) {
                t.sp = !0;
                var i = t.src ? fetch(t.src, {
                    integrity: t.integrity
                }).then((function(e) {
                    if (!e.ok) throw Error(e.status);
                    return e.text()
                })).catch((function(n) {
                    return n.message = e("W4", t.src) + "\n" + n.message, console.warn(n), "{}"
                })) : t.innerHTML;
                j = j.then((function() {
                    return i
                })).then((function(i) {
                    ! function(t, i, o) {
                        var c = {};
                        try {
                            c = JSON.parse(i)
                        } catch (s) {
                            console.warn(Error(e("W5")))
                        }! function(e, t, i) {
                            var o;
                            for (o in e.imports && r(e.imports, i.imports, t, i, null), e.scopes || {}) {
                                var c = n(o, t);
                                r(e.scopes[o], i.scopes[c] || (i.scopes[c] = {}), t, i, c)
                            }
                            for (o in e.depcache || {}) i.depcache[n(o, t)] = e.depcache[o];
                            for (o in e.integrity || {}) i.integrity[n(o, t)] = e.integrity[o]
                        }(c, o, t)
                    }(L, i, t.src || l)
                }))
            }
        }))
    }
    var l, h = "undefined" != typeof Symbol,
        v = "undefined" != typeof self,
        d = "undefined" != typeof document,
        p = v ? self : global;
    if (d) {
        var m = document.querySelector("base[href]");
        m && (l = m.href)
    }
    if (!l && "undefined" != typeof location) {
        var g = (l = location.href.split("#")[0].split("?")[0]).lastIndexOf("/"); - 1 !== g && (l = l.slice(0, g + 1))
    }
    var y, E = h && Symbol.toStringTag,
        w = h ? Symbol() : "@",
        x = u.prototype;
    x.import = function(e, t) {
        var n = this;
        return Promise.resolve(n.prepareImport()).then((function() {
            return n.resolve(e, t)
        })).then((function(e) {
            var t = f(n, e);
            return t.C || function(e, t) {
                return t.C = function e(t, n, r, i) {
                    if (!i[n.id]) return i[n.id] = !0, Promise.resolve(n.L).then((function() {
                        return n.p && null !== n.p.e || (n.p = r), Promise.all(n.d.map((function(n) {
                            return e(t, n, r, i)
                        })))
                    })).catch((function(e) {
                        if (n.er) throw e;
                        throw n.e = null, e
                    }))
                }(e, t, t, {}).then((function() {
                    return function e(t, n, r) {
                        function i() {
                            try {
                                var e = n.e.call(O);
                                if (e) return e = e.then((function() {
                                    n.C = n.n, n.E = null
                                }), (function(e) {
                                    throw n.er = e, n.E = null, e
                                })), n.E = e;
                                n.C = n.n, n.L = n.I = void 0
                            } catch (t) {
                                throw n.er = t, t
                            } finally {
                                n.e = null
                            }
                        }
                        if (!r[n.id]) {
                            if (r[n.id] = !0, !n.e) {
                                if (n.er) throw n.er;
                                return n.E ? n.E : void 0
                            }
                            var o;
                            return n.d.forEach((function(i) {
                                try {
                                    var c = e(t, i, r);
                                    c && (o = o || []).push(c)
                                } catch (s) {
                                    throw n.e = null, n.er = s, s
                                }
                            })), o ? Promise.all(o).then(i) : i()
                        }
                    }(e, t, {})
                })).then((function() {
                    return t.n
                }))
            }(n, t)
        }))
    }, x.createContext = function(e) {
        var t = this;
        return {
            url: e,
            resolve: function(n, r) {
                return Promise.resolve(t.resolve(n, r || e))
            }
        }
    }, x.register = function(e, t) {
        y = [e, t]
    }, x.getRegister = function() {
        var e = y;
        return y = void 0, e
    };
    var O = Object.freeze(Object.create(null));
    p.System = new u;
    var S, P, j = Promise.resolve(),
        L = {
            imports: {},
            scopes: {},
            depcache: {},
            integrity: {}
        },
        C = d;
    if (x.prepareImport = function(e) {
            return (C || e) && (a(), C = !1), j
        }, d && (a(), window.addEventListener("DOMContentLoaded", a)), d) {
        window.addEventListener("error", (function(e) {
            b = e.filename, T = e.error
        }));
        var I = location.origin
    }
    x.createScript = function(e) {
        var t = document.createElement("script");
        t.async = !0, e.indexOf(I + "/") && (t.crossOrigin = "anonymous");
        var n = L.integrity[e];
        return n && (t.integrity = n), t.src = e, t
    };
    var b, T, M = {},
        R = x.register;
    x.register = function(e, t) {
        if (d && "loading" === document.readyState && "string" != typeof e) {
            var n = document.querySelectorAll("script[src]"),
                r = n[n.length - 1];
            if (r) {
                S = e;
                var i = this;
                P = setTimeout((function() {
                    M[r.src] = [e, t], i.import(r.src)
                }))
            }
        } else S = void 0;
        return R.call(this, e, t)
    }, x.instantiate = function(t, n) {
        var r = M[t];
        if (r) return delete M[t], r;
        var i = this;
        return new Promise((function(r, o) {
            var c = x.createScript(t);
            c.addEventListener("error", (function() {
                o(Error(e(3, [t, n].join(", "))))
            })), c.addEventListener("load", (function() {
                if (document.head.removeChild(c), b === t) o(T);
                else {
                    var e = i.getRegister();
                    e && e[0] === S && clearTimeout(P), r(e)
                }
            })), document.head.appendChild(c)
        }))
    }, x.shouldFetch = function() {
        return !1
    }, "undefined" != typeof fetch && (x.fetch = fetch);
    var _ = x.instantiate,
        F = /^(text|application)\/(x-)?javascript(;|$)/;
    x.instantiate = function(t, n) {
        var r = this;
        return this.shouldFetch(t) ? this.fetch(t, {
            credentials: "same-origin",
            integrity: L.integrity[t]
        }).then((function(i) {
            if (!i.ok) throw Error(e(7, [i.status, i.statusText, t, n].join(", ")));
            var o = i.headers.get("content-type");
            if (!o || !F.test(o)) throw Error(e(4, o));
            return i.text().then((function(e) {
                return 0 > e.indexOf("//# sourceURL=") && (e += "\n//# sourceURL=" + t), (0, eval)(e), r.getRegister()
            }))
        })) : _.apply(this, arguments)
    }, x.resolve = function(n, r) {
        return s(L, t(n, r = r || l) || n, r) || function(t, n) {
            throw Error(e(8, [t, n].join(", ")))
        }(n, r)
    };
    var J = x.instantiate;
    x.instantiate = function(e, t) {
        var n = L.depcache[e];
        if (n)
            for (var r = 0; n.length > r; r++) f(this, this.resolve(n[r], e), e);
        return J.call(this, e, t)
    }, v && "function" == typeof importScripts && (x.instantiate = function(e) {
        var t = this;
        return Promise.resolve().then((function() {
            return importScripts(e), t.getRegister()
        }))
    })
}();
//# sourceMappingURL=s.min.js.map

System.register([], function(exports, module) {
    "born sloppy";
    return {
        execute: function() {

            window.eventTypes = { // all events are cached by default if global or their group is frozen and then fired when global and/or their group is unfrozen
                cached: {
                    name: 'cached',
                    events: undefined
                }, // these events are force-fired even if global or their respective freeze-group is frozen
                forced: {
                    name: 'forced',
                    events: ['resize', 'late-resize', 'login', 'login-error', 'save', 'logout', 'FBInstantStart', 'FBInstantComplete', 'mutemusic', 'mutesound', 'dataloaded', 'datasaved', 'update-image', 'addedToStage', 'removedFromStage']
                }, // these events are transient and won't fire and won't be cached if global or their respective freeze-group is frozen
                transient: {
                    name: 'transient',
                    events: ['down', 'rightdown', 'up', 'rightup', 'move', 'tick', 'animate', 'render']
                }
            };

            function sanitizeEventOpts(eventName, opts) {
                if (!opts || typeof opts !== 'object') opts = {};
                if (!opts.eventType || !(opts.eventType in eventTypes)) {
                    opts.eventType = eventTypes.cached.name;
                    if (eventTypes.forced.events.indexOf(eventName) > -1) {
                        opts.eventType = eventTypes.forced.name;
                    } else if (eventTypes.transient.events.indexOf(eventName) > -1) {
                        opts.eventType = eventTypes.transient.name;
                    }
                }
                opts.freezeGroup = opts.freezeGroup || window._defFrzGrp;
                return opts;
            } //Magic that might allow for overwrite of on
            function _onMethod(event_name, callback, opts) {
                this.emit('eventAttached', {
                    eventName: event_name
                });
                this.__listeners = this.__listeners || {};
                this.__listeners[event_name] = this.__listeners[event_name] || [];
                opts = sanitizeEventOpts(event_name, opts);
                var listener = {
                    callback: callback,
                    frzGrp: opts.freezeGroup,
                    eventType: opts.eventType,
                    callFrom: opts.callFrom
                };
                this.__listeners[event_name].push(listener);
                return this;
            }
            /**
             * @function Object.on
             * @desc Attach event handler for events on this object
             * Listen for events emitted on object.
             */
            Object.defineProperty(Object.prototype, 'on', {
                enumerable: false,
                get: function get() {
                    if (typeof this.___on === 'undefined') {
                        return _onMethod;
                    } else {
                        return this.___on;
                    }
                },
                set: function set(value) {
                    this.___on = value;
                }
            });
            /**
             * @function Object.emit
             * @desc Emit events from this object
             */
            Object.defineProperty(Object.prototype, 'emit', {
                enumerable: false,
                value: function value(event_name, data) {
                    var org = (this.__listeners || {})[event_name];
                    if (org && org.length) { //Clone list of tweens before emit to prevent loop failure when list is modified during emit execution.
                        //E.g. off is called on self during execution changing length of list.
                        var list = [];
                        for (var a = 0; a < org.length; a++) {
                            list.push(org[a]);
                        }
                        for (var a = 0; a < list.length; a++) {
                            var caller = list[a].callFrom || this;
                            var event = {
                                name: event_name,
                                cbData: data,
                                frzGrp: list[a].frzGrp,
                                type: list[a].eventType,
                                callback: list[a].callback,
                                callFrom: caller,
                                emitter: this
                            };
                            try {
                                if (this._freezeEmit === undefined || !this._freezeEmit(event)) {
                                    list[a].callback.call(caller, data);
                                }
                            } catch (e) {
                                window.onerror && window.onerror(e.toString(), 'Event: ' + event_name, e.line, e.column, '');
                                console.error(e.toString(), 'Event: ' + event_name, e.line, e.column, 'Failure in', list[a]);
                            }
                        }
                    }
                    return this;
                },
                writable: true
            });
            /**
             * @function Object.off
             * @desc Remove event listener, call with no callback to remove all
             */
            Object.defineProperty(Object.prototype, 'off', {
                enumerable: false,
                value: function value(event_name, callback, opts) {
                    opts = sanitizeEventOpts(event_name, opts);
                    var list = (this.__listeners || {})[event_name] || [];
                    for (var a = 0; a < list.length; a++) {
                        if (list[a].callback === callback && list[a].frzGrp === opts.freezeGroup && list[a].callFrom == opts.callFrom || callback === undefined) {
                            list.splice(a--, 1);
                        }
                    }
                    if (!list.length) {
                        delete(this.__listeners || {})[event_name];
                    }
                    this.emit('eventRemoved', {
                        eventName: event_name
                    });
                    return this;
                },
                writable: true
            });
            /**
             * @function Object.once
             * @desc Attach an event listener that removes itself after being triggered for the first time
             */
            Object.defineProperty(Object.prototype, 'once', {
                enumerable: false,
                value: function value(event_name, callback, opts) {
                    opts = sanitizeEventOpts(event_name, opts);

                    function once(data) {
                        this.off(event_name, once, opts);
                        callback.call(this, data);
                    }
                    this.on(event_name, once, opts);
                    return this;
                },
                writable: true
            });
            /**
             * @function Object.deepMerge
             * @desc Recursive merge of the objects
             */
            Object.defineProperty(Object.prototype, 'deepMerge', {
                value: function value(source) {
                    var isObject = function isObject(obj) {
                        return obj && typeof obj === 'object';
                    };
                    for (var key in source) {
                        if (Array.isArray(source[key])) {
                            this[key] = source[key];
                        } else if (!isObject(source[key])) {
                            this[key] = source[key];
                        } else {
                            if (!this[key]) {
                                this[key] = source[key];
                            }
                            this[key].deepMerge(source[key]);
                        }
                    }
                    return this;
                }
            }); //Create expand short handler (Makes it easier to expand classes)
            Object.defineProperty(Function.prototype, 'expand', {
                enumerable: false,
                value: function value(method) {
                    method.prototype = Object.create(this.prototype);
                    method.prototype.constructor = method;
                    return method;
                }
            });
            /**
             * Math.seed polyfill.<br>
             * Put in global scope as this is a general fix to JavaScript not related to XS engine
             * @ignore
             */
            if (typeof Math.seed !== 'function') {
                Math.seed = function(firstSeed) {
                    var seed = firstSeed || 0x2F6E2B1;
                    return function() { // Robert Jenkinsâ 32 bit integer hash function
                        seed = seed + 0x7ED55D16 + (seed << 12) & 0xFFFFFFFF;
                        seed = (seed ^ 0xC761C23C ^ seed >>> 19) & 0xFFFFFFFF;
                        seed = seed + 0x165667B1 + (seed << 5) & 0xFFFFFFFF;
                        seed = (seed + 0xD3A2646C ^ seed << 9) & 0xFFFFFFFF;
                        seed = seed + 0xFD7046C5 + (seed << 3) & 0xFFFFFFFF;
                        seed = (seed ^ 0xB55A4F09 ^ seed >>> 16) & 0xFFFFFFFF;
                        return (seed & 0xFFFFFFF) / 0x10000000;
                    };
                };
            } /** Resolve a mnemonic path, like 'i/g/s' to an actual FS path */
            window.__resolvePath = function(path) {
                if (path.substring(0, 2) != "//" && path.substring(0, 4) != "http") { // becasuse vpath ends with '/', by convention
                    if (path[0] == '/') path = path.slice(1);
                    path = vpath + path;
                }
                return path;
            };

            window.ATLUtil = function(exports) {
                var Packer = function Packer(w, h) {
                    this.root = {
                        x: bleedMargin,
                        y: bleedMargin,
                        w: w - bleedMargin * 2,
                        h: h - bleedMargin * 2
                    };
                }; // margin to account for anti-aliasing artifacts spilling
                // into the edges around images
                var bleedMargin = 2;
                Packer.prototype = {
                    /** Find free space for the requested blocks and if found
                     *  allocate it, and assign it to the block
                     *  @param {object} a rectangle with width w and height h
                     *  @returns {node} where 'block' will end up.
                     *  */
                    fit: function fit(w, h) {
                        return this.insert(this.root, w, h);
                    },
                    /** Make a new node in 'tree' to fit a rectangle of 'w' x 'h'
                     *  dimensions.  Modifies the structure of 'tree' if needed.
                     *
                     *  @returns {object | null} the new node, wherever it wound up.
                     *
                     *  If 'null' is returned, the insertion failed.
                     *
                     *  @param {object} tree a root of a tree
                     *  @param {number} w
                     *  @param {number} h
                     *  */
                    insert: function insert(tree, w, h) { // helper function to tell if rect fits in a node
                        function fits(node) {
                            return w <= node.w && h <= node.h;
                        } // helper function to use a node and make its unused subnodes
                        function useit(node, w, h, options) {
                            node.right = {
                                x: node.x + bleedMargin + w,
                                y: node.y + 0,
                                w: node.w - bleedMargin - w
                            };
                            node.down = {
                                x: node.x + 0,
                                y: node.y + bleedMargin + h,
                                h: node.h - bleedMargin - h
                            };
                            node.used = {
                                w: w,
                                h: h
                            };
                            options = options || {};
                            var isLandscape = w > h;
                            var isDownStrat = typeof options.strat !== 'undefined' ? options.strat === 'down' : isLandscape;
                            if (isDownStrat) {
                                node.strat = 'down'; // "down" strategy, good for when w > h
                                //
                                // +----+------+
                                // |xxxx|      |
                                // +----+      |
                                // |    |      |
                                // |free| free |
                                // |    |      |
                                // +----+------+
                                node.down.w = 0 - 0 + w;
                                node.right.h = node.h - 0 + 0;
                            } else {
                                node.strat = 'side'; // "side" strategy, good for when w < h
                                //
                                // +--+--------+
                                // |xx|        |
                                // |xx| free   |
                                // |xx|        |
                                // |--+--------|
                                // |    free   |
                                // +-----------+
                                node.down.w = node.w - 0 + 0;
                                node.right.h = 0 - 0 + h;
                            }
                            return node;
                        } // if this node isn't used at all, return immediately with
                        // either null failure or a new used node right here.
                        if (!tree.used) return fits(tree) && useit(tree, w, h); // Else establish a helper function to search "locally"
                        function localattempt(secondtry) {
                            var fr = !tree.right.used && fits(tree.right);
                            var fd = !tree.down.used && fits(tree.down);

                            function smallest(r1, r2) {
                                return r1.h * r1.w < r2.h * r2.w ? r1 : r2;
                            }
                            if (fr && fd) {
                                return useit(smallest(tree.right, tree.down), w, h);
                            } else if (fr) {
                                return useit(tree.right, w, h);
                            } else if (fd) {
                                return useit(tree.down, w, h);
                            } else if (!tree.down.used && !tree.right.used && !secondtry) { // Here, none of the children are used.  But the image
                                // doesn't fit in either of them.  So change our (=tree)
                                // splitting strategy and try localattempt() again, but just
                                // once.
                                useit(tree, tree.used.w, tree.used.h, {
                                    strat: tree.strat === 'down' ? 'side' : 'down'
                                });
                                return localattempt(tree);
                            }
                            return null;
                        } // Call it once.
                        return localattempt() || this.insert(tree.down, w, h) || this.insert(tree.right, w, h);
                    }
                };
                var relasedCanvasElements = []; // "relased" (sic)
                function getNewCanvasObject() {
                    var cachedElement = relasedCanvasElements.pop();
                    if (cachedElement) return cachedElement;
                    return document.createElement('canvas');
                }

                function releaseCanvas(canvas) {
                    canvas.getContext('2d').setTransform(1, 0, 0, 1, 0, 0);
                    canvas.width = canvas.height = 1;
                    relasedCanvasElements.push(canvas);
                }
                var _textureAtlases = [];
                var ATLAS_SIZE = {
                    w: 2048,
                    h: 2048
                }; // If it's an android browsers on Android 4.x and make smaller atlases
                // Duplicates logic from XS.is.slow for now
                try {
                    var match = navigator.userAgent.toLowerCase().match(/android\s([0-9\.]*)/);
                    var androidVersion = parseFloat(match ? match[1] : 0);
                    if (androidVersion > 0 && androidVersion < 5) {
                        ATLAS_SIZE = {
                            w: 1024,
                            h: 1024
                        };
                    }
                } catch (e) {}

                function createTextureAtlas() {
                    var d = document.createElement('canvas');
                    d.width = ATLAS_SIZE.w;
                    d.height = ATLAS_SIZE.h;
                    d.packer = new Packer(d.width, d.height);
                    d.id = "atlas_" + _textureAtlases.length; // Clear canvas, reset packer
                    d.reset = function() {
                        var ctx = d.getContext('2d');
                        ctx.clearRect(0, 0, d.width, d.height);
                        ctx.setTransform(1, 0, 0, 1, 0, 0);
                        d.packer = new Packer(d.width, d.height);
                        d.__outstandingDraws = 0;
                    };
                    d.reset();
                    d._atlasIndex = _textureAtlases.length;
                    _textureAtlases.push(d); //console.error("Created textureatlas", d.id)
                    return d;
                }
                /** Return object holding a dedicated HTMLCanvas and properties for image
                 *  measuring 'width' x 'height'.
                 *  @param {number} width
                 *  @param {number} height
                 *  @return {object} object */
                function getDedicatedFit(width, height) {
                    return {
                        x: 0,
                        y: 0,
                        canvas: getNewCanvasObject(),
                        width: width,
                        height: height
                    };
                }
                /** Return object holding a shared 'Atlas' HTMLCanvas and properties
                 *  for image measuring 'width' x 'height'.  Falls back to
                 *  'getDedicatedFit' if there's no such thing.
                 *  @param {number} w the width.
                 *  @param {number} h the height.
                 *  @return {object} object */
                function getAtlasFit(w, h) { // Too big to fit
                    if (w > ATLAS_SIZE.w - bleedMargin * 2 || h > ATLAS_SIZE.h - bleedMargin * 2) {
                        console.warn('Falling back to getDedicatedFit  w:' + w + ' h:' + h);
                        return getDedicatedFit(w, h);
                    }
                    for (var i = 0; i < _textureAtlases.length; ++i) {
                        var cv = _textureAtlases[i];
                        var probe = cv.packer.fit(w, h);
                        if (probe) return {
                            canvas: cv,
                            x: probe.x,
                            y: probe.y,
                            width: w,
                            height: h
                        };
                    } // Open a new atlas.  Image is guaranteed to fit, because of
                    // pre-conditions above.
                    cv = createTextureAtlas();
                    if (!cv.packer.fit(w, h)) {
                        throw new Error('Report this bug! w:' + w + ' h:' + h);
                    }
                    return {
                        canvas: cv,
                        x: 0,
                        y: 0,
                        width: w,
                        height: h
                    };
                }

                function buildCharIndex(chars) {
                    var index = {};
                    for (var i = 0; i < chars.length; i++) {
                        index[chars[i]] = i;
                    }
                    return index;
                }
                var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/!#$&*-,.:;@()<=>?[]^`{|}";
                var charIndex = buildCharIndex(chars);
                var intChars = "()<=>?[]^`{|}";
                var intCharIndex = buildCharIndex(intChars);

                function JSGImageRenderer(path, actions, coords) {
                    this.path = path;
                    this.actions = actions;
                    this.coords = coords;
                    this.coordOffset = 0;
                    this.assetWidth = this.getCoord();
                    this.assetHeight = this.getCoord();
                }
                JSGImageRenderer.prototype.getCoord = function() {
                    var coords = this.coords;
                    var first = coords[this.coordOffset++];
                    var res, intChar;
                    switch (first) {
                        case '_':
                            res = 0;
                            break;
                        case '~':
                            res = 1;
                            break;
                        case '%':
                            res = 149932;
                            break;
                        case '\'':
                            res = -149932;
                            break;
                        case '@':
                            res = charIndex[coords[this.coordOffset++]] + charIndex[coords[this.coordOffset++]] * 74 + charIndex[coords[this.coordOffset++]] * 5476 // (74 * 74)
                                +
                                charIndex[coords[this.coordOffset++]] * 405224; // (74 * 74 * 74)
                            res = res / 100 - 149932;
                            break;
                        default:
                            intChar = intCharIndex[first];
                            if (intChar !== undefined) {
                                res = intChar * 88 + charIndex[coords[this.coordOffset++]];
                            } else {
                                res = charIndex[first] + charIndex[coords[this.coordOffset++]] * 74 + charIndex[coords[this.coordOffset++]] * 5476; // (74 * 74)
                                res = res / 100 - 2026;
                            }
                    }
                    return res;
                };
                JSGImageRenderer.prototype.getColor = function() {
                    return this.getCoord() ? 'rgb(' + this.getCoord() + ',' + this.getCoord() + ',' + this.getCoord() + ')' : 'rgba(' + this.getCoord() + ',' + this.getCoord() + ',' + this.getCoord() + ',' + this.getCoord() + ')';
                };
                JSGImageRenderer.prototype.draw = function(canvas, options) {
                    var scale = options.scale || 1;
                    var offset = options.offset || {
                        x: 0,
                        y: 0
                    };
                    if (options.autoSizeCanvas && !canvas.packer) {
                        canvas.width = Math.ceil(this.assetWidth * scale);
                        canvas.height = Math.ceil(this.assetHeight * scale);
                    } // This signals to pixi that it needs to update the texture to webgl
                    if (canvas.__atlasBaseTexture) {
                        canvas.__atlasBaseTexture.dirty();
                    }
                    var ctx = canvas.getContext('2d');
                    if (offset) {
                        ctx.save();
                        ctx.translate(offset.x, offset.y); //lock changes to relevant area
                        ctx.beginPath();
                        ctx.rect(0, 0, offset.width, offset.height);
                        ctx.clip();
                    } // Uncomment to debug
                    //
                    // ctx.fillStyle = 'rgb(' + Math.floor(Math.random()*256) + ',' + Math.floor(Math.random()*256) + ',' + Math.floor(Math.random()*256) + ')';
                    // ctx.fill();
                    ctx.scale(scale, scale);
                    var canvasStack = [canvas];
                    var fillObject;
                    for (var a = 0; a < this.actions.length; a++) {
                        switch (this.actions[a]) {
                            case '4':
                                var newCanvas = getNewCanvasObject();
                                newCanvas.width = this.getCoord();
                                newCanvas.height = this.getCoord();
                                ctx = newCanvas.getContext('2d');
                                canvasStack.push(newCanvas);
                                break;
                            case 'b':
                                var pattern = ctx.createPattern(ctx.canvas, 'no-repeat');
                                var removed = canvasStack.pop();
                                releaseCanvas(removed);
                                ctx = canvasStack[canvasStack.length - 1].getContext('2d');
                                ctx.fillStyle = pattern;
                                break;
                            case 't':
                                fillObject = ctx.createLinearGradient(this.getCoord(), this.getCoord(), this.getCoord(), this.getCoord());
                                break;
                            case 'D':
                                fillObject = ctx.createRadialGradient(this.getCoord(), this.getCoord(), this.getCoord(), this.getCoord(), this.getCoord(), this.getCoord());
                                break;
                            case '8':
                                fillObject.addColorStop(this.getCoord(), this.getColor());
                                break;
                            case 'F':
                                ctx.fillStyle = fillObject;
                                break;
                            case 'f':
                                ctx.save();
                                break;
                            case '/':
                                ctx.bezierCurveTo(this.getCoord(), this.getCoord(), this.getCoord(), this.getCoord(), this.getCoord(), this.getCoord());
                                break;
                            case 'p':
                                ctx.strokeStyle = this.getColor();
                                break;
                            case 'w':
                                ctx.lineCap = 'butt';
                                break;
                            case 'y':
                                ctx.lineJoin = 'miter';
                                break;
                            case '9':
                                ctx.miterLimit = this.getCoord();
                                break;
                            case '6':
                                ctx.fillStyle = this.getColor();
                                break;
                            case 'n':
                                ctx.beginPath();
                                break;
                            case 'q':
                                ctx.closePath();
                                break;
                            case 'o':
                                ctx.fill();
                                break;
                            case 'P':
                                ctx.stroke();
                                break;
                            case 'r':
                                ctx.restore();
                                break;
                            case '2':
                                ctx.arc(this.getCoord(), this.getCoord(), this.getCoord(), this.getCoord(), this.getCoord(), this.getCoord() === 1);
                                break;
                            case 'm':
                                ctx.moveTo(this.getCoord(), this.getCoord());
                                break;
                            case 'l':
                                ctx.lineTo(this.getCoord(), this.getCoord());
                                break;
                            case '5':
                                ctx.quadraticCurveTo(this.getCoord(), this.getCoord(), this.getCoord(), this.getCoord());
                                break;
                            case 'C':
                                ctx.clip();
                                break;
                            case 'E':
                                ctx.lineWidth = this.getCoord();
                                break;
                            case 'A':
                                ctx.transform(this.getCoord(), this.getCoord(), this.getCoord(), this.getCoord(), this.getCoord(), this.getCoord());
                                break;
                            case 'u':
                                ctx.translate(this.getCoord(), this.getCoord());
                                break;
                            case 'V':
                                ctx.scale(this.getCoord(), this.getCoord());
                                break;
                            case '0':
                                ctx.rotate(this.getCoord());
                                break;
                            case 'K':
                                ctx.globalAlpha = this.getCoord();
                                break;
                            case 'G':
                                ctx.strokeStyle = fillObject;
                                break;
                            default:
                                console.error('unhandled', this.actions[a]);
                        }
                    } // Reset JSG drawing
                    this.coordOffset = 0;
                    this.getCoord(); // Skips the width/height settings so we're ready to read again
                    this.getCoord();
                    if (offset) {
                        ctx.restore();
                    }
                    return canvas;
                };
                /**
                 * @param {string} path the mnemonic or somehow the identifier of the asset.
                 * @param {object} config the 'imageData' object passed to __importATL
                 */
                function PlainImageRenderer(path, imageData) {
                    this.path = path;
                    var data = imageData.data,
                        mimetype = imageData.mimetype;
                    this.imageData = imageData;
                    this.dataurl = "data:image/" + mimetype + ";base64," + btoa(data);
                    this.assetWidth = imageData.width;
                    this.assetHeight = imageData.height;
                }
                /**
                 * @param {HTMLImageCanvas} canvas previously picked by getAtlasFit().
                 * @param {object} options controls how to draw to that canvas,
                 *                 contains important things like 'scale' and 'offset'
                 */
                PlainImageRenderer.prototype.draw = function(canvas, options) {
                    var path = this.path;
                    canvas.__outstandingDraws++;
                    canvas[path] = {
                        drawPending: true
                    };

                    function drawit(img) {
                        canvas.__outstandingDraws--;
                        if (canvas.__atlasBaseTexture && !canvas.__outstandingDraws) {
                            canvas.__atlasBaseTexture.dirty();
                        }
                        var ctx = canvas.getContext('2d');
                        var offset = options.offset || {
                            x: 0,
                            y: 0
                        };
                        ctx.drawImage(img, offset.x, offset.y, offset.width, offset.height);
                        canvas[path].drawPending = false;
                    }
                    if (this.img) drawit(this.img);
                    else {
                        var img = new Image();
                        var self = this;
                        img.onerror = function(e) {
                            canvas.__outstandingDraws--;
                            console.error('Loading this image failed', e, self);
                        };
                        var packer = canvas.packer;
                        img.onload = function() { // The following line makes framerate slightly slower (why?
                            // maybe memory), but faster on resizes (which includes
                            // flips).  It'll keep reasonably expensive HTMLImageElement
                            // from being re-calculated.  Commenting it will also cause
                            // slightly glitchy resizes.
                            self.img = img; // JT@2021-11-27: Because of the async nature of the canvas
                            // draw, it may be that a resizeTextureAtlases() has occured
                            // between the time that 'img' was created and this 'onload'
                            // function.  We can't draw to that canvas, since we'll be
                            // drawing at an invalid location from an invalid previous
                            // packing.  So just abort and wait for the outer 'draw()' to
                            // be called again.
                            if (canvas.packer != packer) {
                                return;
                            }
                            drawit(img);
                        };
                        img.src = this.dataurl;
                    }
                    return canvas;
                };
                var ATLImageRenderer = {};
                ATLImageRenderer.cache = {};
                ATLImageRenderer.load = function(path, imageData) { // JT@2021-11-26: Really question this longstanding "renderer"
                    // cache...  It doesn't store results of any actual valuable work.
                    // Not very problematic either, so keeping it for now.
                    if (ATLImageRenderer.cache[path]) {
                        return ATLImageRenderer.cache[path];
                    }
                    var jsgData = embeddedAssets[path] || imageData.jsgData;
                    var retval = jsgData ? new JSGImageRenderer(path, jsgData[0], jsgData[1]) : new PlainImageRenderer(path, imageData);
                    ATLImageRenderer.cache[path] = retval;
                    return retval;
                };
                exports.getNewCanvasObject = getNewCanvasObject;
                exports.releaseCanvas = releaseCanvas;
                exports._textureAtlases = _textureAtlases;
                exports.ATLAS_SIZE = ATLAS_SIZE;
                exports.getDedicatedFit = getDedicatedFit;
                exports.getAtlasFit = getAtlasFit;
                exports.ATLImageRenderer = ATLImageRenderer; // FIXME: hex needs this, naughty naughty hex
                window.getNewCanvasObject = getNewCanvasObject; // FIXME: frvr-tools/Shared/plugins/social/instant.js needs both
                window.releaseCanvas = releaseCanvas;
                return exports;
            }({}); // Local Variables:
            // indent-tabs-mode: nil
            // End:

            var scriptRel;
            var seen = {};
            var __vitePreload = function preload(baseModule, deps) { // @ts-ignore
                if (!false || !deps) {
                    return baseModule();
                } // @ts-ignore
                if (scriptRel === undefined) { // @ts-ignore
                    var relList = document.createElement('link').relList; // @ts-ignore
                    scriptRel = relList && relList.supports && relList.supports('modulepreload') ? 'modulepreload' : 'preload';
                }
                return Promise.all(deps.map(function(dep) { // @ts-ignore
                    if (dep in seen) return; // @ts-ignore
                    seen[dep] = true;
                    var isCss = dep.endsWith('.css');
                    var cssSelector = isCss ? '[rel="stylesheet"]' : ''; // @ts-ignore check if the file is already preloaded by SSR markup
                    if (document.querySelector("link[href=\"" + dep + "\"]" + cssSelector)) {
                        return;
                    } // @ts-ignore
                    var link = document.createElement('link'); // @ts-ignore
                    link.rel = isCss ? 'stylesheet' : scriptRel;
                    if (!isCss) {
                        link.as = 'script';
                        link.crossOrigin = '';
                    }
                    link.href = dep; // @ts-ignore
                    document.head.appendChild(link);
                    if (isCss) {
                        return new Promise(function(res, rej) {
                            link.addEventListener('load', res);
                            link.addEventListener('error', rej);
                        });
                    }
                })).then(function() {
                    return baseModule();
                });
            };

            (function(scope) {
                var callbacks = {};
                var Host = window.Host || {};
                window.Host = Host;
                Host.bootstrapper = {
                    loadPromises: []
                };
                Host.bootstrapper.hasPreInitializationPromise = false;
                Host.bootstrapper.start = function() {
                    console.log('Host.bootstrapper.start is no-op, not yet setup!');
                };
                Host.bootstrapper.preInitializationReady = function() {
                    console.error('Host.bootstrapper.preInitializationReady no-op, not yet setup!');
                };
                Host.bootstrapper.preInitializationPromise = new Promise(function(resolve, reject) {
                    Host.bootstrapper.preInitializationReady = resolve;
                }); // Array to collect all keys, the game use to store data
                Host.GameRemoteDataKeys = [];
                /** Give {@link cb} a chance to load things just before game-time.
                 *
                 *  @param {function} cb is called with two arguments.
                 *  @param {boolean} legacy indicates if a nullary function should
                 *  be returned instead of a Promise.
                 *
                 *  The two arguments are resolve/reject and are usual Promise
                 *  callbacks.  @{link cb} should arrange for them to be called with
                 *  the value or error, respectively, when the loading is settled.
                 *  Alternatively, {@link cb} can also return non-undefined, which
                 *  also counts as a resolved value.
                 *
                 *  @return {Promise|function} If {@link legacy} is false, returns a
                 *  Promise.  Else, if {@link legacy} is truish, return a function
                 *  which.  When called at game-time, that function guaranteedly
                 *  returns the promised value.  Else, it'll return undefined.  */
                Host.bootstrapper.load = function(cb, legacy) {
                    var v;
                    var promise = new Promise(function(resolve, reject) {
                        try {
                            var retval = cb(resolve, reject);
                            if (retval !== undefined) resolve(retval);
                        } catch (e) {
                            reject(e);
                        }
                    });
                    if (legacy) {
                        Host.bootstrapper.loadPromises.push(promise.then(function(value) {
                            v = value;
                        }));
                        return function() {
                            return v;
                        };
                    } else {
                        return promise;
                    }
                };
                /** For bare "ref"-style resource references (bare strings), keep a
                 *  map of the actual unembedded emitted asset file to the mnemonic
                 *  that gave origin to it.  This is used when checking if the same
                 *  mnemonic happens to have been also embedded. */
                Host.bootstrapper.mnemonicMap = {};
                Host.call = function(method, args, callback) { // register callback
                    if (callback != null) {
                        var callbackId = "cb" + Math.round(Math.random() * 99999) + "" + new Date().getTime();
                        callbacks[callbackId] = callback;
                        args._callback = callbackId;
                    } // send data to host as string message
                    args._method = method;
                    Host.sendToHost("json1:" + JSON.stringify(args));
                };
                Host.callResult = function(message) {
                    var idx = message.indexOf(":");
                    if (idx > 0) {
                        var type = message.substring(0, idx);
                        var rest = message.substring(idx + 1);
                        switch (type) {
                            case "json1": //console.log(rest)
                                var args = JSON.parse(rest);
                                var callback = callbacks[args._callback];
                                if (callback) {
                                    delete args["_callback"];
                                    callback(args);
                                }
                                break;
                        }
                    }
                }; // FIXME: new iOS wrapper compatibility
                window.FRVR = Object.assign({}, window.FRVR, {
                    channel: {
                        getBootstrapper: function getBootstrapper() {
                            return {
                                nativeBridge: {
                                    callResult: Host.callResult
                                }
                            };
                        }
                    }
                });
                Host.Application = {};
                Host.Application.SetStatusbarColor = function(isLight) {};
                Host.onPauseEvent = function() { // what to do on pause...
                };
                Host.onResumeEvent = function() { // what to do on resume...
                };
                Host.onStartEvent = function() { // what to do on resume...
                };
                Host.onMarginsChanged = function(margins) {
                    Host.Log("Margins changed! [t:" + margins["top"] + ", b:" + margins["bottom"] + ", l:" + margins["left"] + ", r:" + margins["right"] + "]");
                    XS.styles.margins.top = margins["top"];
                    XS.styles.margins.bottom = margins["bottom"];
                    XS.styles.margins.left = margins["left"];
                    XS.styles.margins.right = margins["right"];
                };
                Host.pauseResizing = function() {
                    XS.skipResizing = true;
                };
                Host.resumeResizing = function() {
                    XS.skipResizing = false;
                    window.dispatchEvent(new Event('resize'));
                };
                Host.onSafeToExitEvent = function() {
                    var eventAction = {}; // TODO: Figure out if the game save state is dirty and if not return the following action:
                    // eventAction.type = "Exit" 
                    // For now we ask the wrapper to show a modal
                    eventAction.type = "ShowModal";
                    eventAction.titleTxt = Host.Localize.Translate("Progress might be lost if you exit {game_name} now!", {
                        game_name: Config.shortTitle
                    }).toString();
                    eventAction.msgTxt = Host.Localize.Translate("Are you sure you want to close the app?").toString();
                    eventAction.confirmTxt = Host.Localize.Translate("Confirm").toString();
                    eventAction.confirmCb = function() { // do nothing in this case as app will exit
                    };
                    eventAction.cancelTxt = Host.Localize.Translate("Cancel").toString();
                    eventAction.cancelCb = function() {
                        XS.unfreeze();
                    };
                    XS.freeze();
                    return eventAction;
                };
                Host.makeGameShareURL = function() {
                    return encodeURI("https://" + Config.domain + "/alc/");
                }; //Quick Cache for Preferences.
                Host.Preferences = {};
                Host.Preferences.cache = {};
                Host.Preferences.QuickBool = function(key) {
                    return {
                        get: function get() {
                            return Host.Preferences.cache[key] || false;
                        },
                        set: function set(value) {
                            Host.Preferences.SetBool(key, value);
                        },
                        remove: function remove() {
                            Host.Preferences.Remove(key);
                        }
                    };
                };
                Host.Preferences.QuickInt = function(key) {
                    return {
                        get: function get() {
                            return parseInt(Host.Preferences.cache[key]) || 0;
                        },
                        set: function set(value) {
                            Host.Preferences.SetInt(key, value);
                        },
                        remove: function remove() {
                            Host.Preferences.Remove(key);
                        }
                    };
                };
                Host.Preferences.QuickFloat = function(key) {
                    return {
                        get: function get() {
                            return parseFloat(Host.Preferences.cache[key]) || 0;
                        },
                        set: function set(value) {
                            Host.Preferences.SetFloat(key, value);
                        },
                        remove: function remove() {
                            Host.Preferences.Remove(key);
                        }
                    };
                };
                Host.Preferences.QuickString = function(key) {
                    return {
                        get: function get() {
                            return Host.Preferences.cache[key] || "";
                        },
                        set: function set(value) {
                            Host.Preferences.SetString(key, value);
                        },
                        remove: function remove() {
                            Host.Preferences.Remove(key);
                        }
                    };
                };

                function requestJSON(type, path, data, callback, failure_callback) {
                    var xobj = new XMLHttpRequest();
                    xobj.crossOrigin = 'anonymous'; //Conditional for IE10
                    if (xobj.overrideMimeType) {
                        xobj.overrideMimeType("application/json");
                    } //Try catch block for IE9
                    try {
                        xobj.open(type, path, true);
                        if (type == "POST") {
                            xobj.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                        }
                        xobj.onreadystatechange = function() {
                            if (xobj.readyState == 4) { //Success
                                if (xobj.status == "200") {
                                    var data = {};
                                    try {
                                        data = JSON.parse(xobj.responseText);
                                    } catch (e) {
                                        window.onerror && window.onerror("Failed to parse JSON return data " + path + "> " + e.message, e.sourceURL, e.line);
                                        failure_callback();
                                        return;
                                    }
                                    callback(data);
                                } else { //window.onerror&&window.onerror("Failed to "+type+" JSON "+getJSONBasePath(path)+" > http code: " + xobj.status + " - " + xobj.responseText)
                                    //Bit of inline GC to prevent onreadystatechange from triggering multipe times.
                                    xobj = xobj.onreadystatechange = null; //On failure 						
                                    if (failure_callback) failure_callback();
                                }
                            }
                        };
                        xobj.send(data);
                    } catch (e) {
                        window.onerror && window.onerror("Failed to execute JSON load code " + path + "> " + e.message, e.sourceURL, e.line);
                        failure_callback();
                    }
                }
                Host.Tools = {};
                Host.Tools.LoadJSON = function(path, callback, failure_callback) { //setTimeout(function(){
                    requestJSON('GET', path, null, callback, failure_callback); //},5000)
                };
                Host.Tools.SendJSON = function(path, data, callback, failure_callback) { //setTimeout(function(){
                    requestJSON('POST', path, data, callback, failure_callback); //},5000)
                };
                /**
                 * Sends a POST request with JSON body content
                 * @param {string} path endpoint url path
                 * @param {object} data json object to send with the post request
                 * @param {function} callback callback function with (true/false, response) as parameters; true = success, false = failure
                 */
                Host.Tools.PostJSON = function(path, data, callback) {
                    var req = new XMLHttpRequest();
                    req.crossOrigin = "anonymous"; // onreadystatechange rather than onload is used to support ie9
                    try {
                        req.onreadystatechange = function() {
                            if (req.readyState == 4) {
                                if (req.status == "200") { // HANDLE SUCCESS
                                    callback && callback(true, req.responseText);
                                } else { // HANDLE FAILURE
                                    // window.onerror&&window.onerror("Failed to "+type+" JSON "+getJSONBasePath(path)+" > http code: " + req.status + " - " + req.responseText)
                                    Host.Log("PostJSON Error Status: " + "Response: " + req.responseText); // Bit of inline GC to prevent onreadystatechange from triggering multipe times.
                                    var errorResponse = req.responseText;
                                    req = req.onreadystatechange = null;
                                    callback && callback(false, errorResponse);
                                }
                            }
                        };
                        req.open("POST", path, true);
                        req.setRequestHeader("Content-type", "application/json;charset=UTF-8");
                        req.send(typeof data === "string" ? data : JSON.stringify(data));
                    } catch (err) { // window.onerror&&window.onerror("Failed to execute JSON load code "+path+"> "  + e.message, e.sourceURL, e.line)
                        Host.Log("PostJSON Error:", err);
                        callback && callback(false, err);
                    }
                };
                Host.Web = {};
                Host.Web.GetQueryString = window.__FRVR.getQueryString;
                Host.Localize = Host.Localize || {};
                Host.Localize.Translations = {
                    'en': {},
                    'en-US': {}
                };
                Host.Localize._currentLanguage = 'en-US';
                /** Hold a string that can be translated to other languages.
                 *  The string also supports argument interpolation.
                 *
                 *  @param {string|LocalizedString} originalTemplate contains the
                 *  text to be translated.  If it is a LocalizedString already, the
                 *  object being created is a copy thereof.
                 *  @param {Object} replacements is a dictionary of keys filling in
                 *  the interpolatable brace-delimited fields of originalTemplate.
                 * */
                Host.Localize.LocalizedString = function(originalTemplate, replacements) { // Honour legacy, deprecated uses of Text2
                    if (originalTemplate === 0) originalTemplate = '0';
                    else if (!originalTemplate) originalTemplate = '';
                    else if (originalTemplate instanceof Host.Localize.LocalizedString) {
                        replacements = originalTemplate._replacements || replacements;
                        originalTemplate = originalTemplate._originalTemplate;
                    }
                    this._originalTemplate = originalTemplate;
                    this._lang = undefined;
                    this._cached = undefined;
                    this._replacements = replacements;
                }; /** Make a LocalizedString (which see). */
                Host.Localize.Translate = function(toTranslate, replacements) {
                    return new Host.Localize.LocalizedString(toTranslate, replacements);
                };
                /** Translate and interpolate a LocalizedString and produce a string.
                 *  @returns {string} */
                Host.Localize.LocalizedString.prototype.toString = function() {
                    if (!this._cached || this._lang !== Host.Localize._currentLanguage) {
                        this._lang = Host.Localize._currentLanguage;
                        var dict = Host.Localize.Translations[this._lang];
                        var trans = dict && dict[this._originalTemplate];
                        var template = trans && trans.translation || this._originalTemplate;
                        for (var x in this._replacements) {
                            template = template.split("{" + x + "}").join(this._replacements[x]);
                        }
                        this._cached = template;
                    }
                    return this._cached;
                }; /** Legacy-motivated shim/shortcut for toString() */
                Object.defineProperty(Host.Localize.LocalizedString.prototype, 'translated', {
                    get: function get() {
                        return this.toString();
                    }
                });
                /** Call onLanguageChange on all Text2 instances in the PIXI graph.
                 *  @param {PIXI.DisplayObject} */
                Host.Localize.UpdateChildren = function(node) {
                    for (var x in node.children) {
                        var child = node.children[x];
                        if (child instanceof Text2) {
                            child.onLanguageChange();
                        } else if (child.children) {
                            Host.Localize.UpdateChildren(child);
                        }
                    }
                };
                /** Load the translation strings for a specific language and apply
                 *  everywhere, retroactively for existing Text2 and proactively for
                 *  future Text2.
                 *
                 *  @param {string} lang a short identifier for the language, like
                 *  "ru" or "pt" or "zh-Hans".
                 *
                 *  @param {function} callback if this function is supplied, call
                 *  this with 'lang' and true (if loading was successful), or with
                 *  'false' (if loading failed).
                 *
                 *  @return {Promise} */
                Host.Localize.Load = function(lang, callback) {
                    function loadLanguageFromJSON(lang, success, failure) {
                        return __vitePreload(function() {
                            return module.import("__FRVR_GAME_LANGUAGES_ROOT__/" + lang + ".json");
                        }, false ? "__VITE_PRELOAD__" : void 0).then(function(module) {
                            success(module.default);
                            return true;
                        }).catch(failure);
                    }

                    function fixNewlines(dict) { // Fix newline keys
                        for (var key in dict) {
                            var key2 = key.replace(/\\n/g, "\n");
                            if (key2 != key) {
                                var trans = dict[key];
                                delete dict[key];
                                if (!trans.translation) { // Fallback to avoid empty strings
                                    console.warn("Missing translation: \"" + key + "\"");
                                    dict[key2] = key;
                                } else {
                                    trans.translation = trans.translation.replace(/\\n/g, "\n");
                                    dict[key2] = trans;
                                }
                            }
                        }
                        return dict;
                    }

                    function done(newlang) {
                        Host.Localize._currentLanguage = newlang;
                        Host.Localize.UpdateChildren(XS.stageContainer);
                        XS.emit('language-changed', {
                            language: newlang
                        });
                        XS.emit('translate');
                        callback && callback(newlang, true);
                        return true;
                    }
                    if (Host.Localize.Translations[lang]) return Promise.resolve(done(lang));
                    return loadLanguageFromJSON(lang, function(dict) {
                        Host.Localize.Translations[lang] = fixNewlines(dict);
                        console.log('Loaded', lang, 'dictionary');
                        done(lang);
                    }, function failLoadLanguage() {
                        console.warn("Failed to load language", lang);
                        callback && callback(lang, false);
                    });
                };
                if (Host.Web.GetQueryString("lang")) {
                    Host.Localize.Load(Host.Web.GetQueryString("lang"));
                }
                Host.Localize.CurrentLanguage = function() {
                    return Host.Localize._currentLanguage;
                };
                Host.Localize.languages = Host.Localize.languages || []; /** @returns {string} Best guess of desired language */
                Host.Localize.GetLanguage = function() {
                    var nav = window.navigator; // support for HTML 5.1 "navigator.languages"
                    if (Array.isArray(nav.languages)) {
                        for (var i = 0; i < nav.languages.length; i++) {
                            var language = nav.languages[i];
                            if (language && language.length) {
                                return language;
                            }
                        }
                    }
                    var props = ['language', 'browserLanguage', 'systemLanguage', 'userLanguage']; // support for other well known properties in browsers
                    for (i = 0; i < props.length; i++) {
                        language = nav[props[i]];
                        if (language && language.length) {
                            return language;
                        }
                    }
                    return "en";
                }; // Type for switching
                Host.Type = "undefined";
                Host.supports = {
                    showSidebar: true,
                    showSidebarSocial: true,
                    showSidebarMore: true,
                    showSidebarLegal: false,
                    showSidebarSaveProgressHeader: true,
                    showSidebarShare: true,
                    hideSidebarSoundButton: false,
                    hideSidebarMusicButton: false,
                    showModalLoginWithFacebook: true,
                    showModalShareDialog: true,
                    showModalCrossPromo: true,
                    showModalMetaButtonOnGameStart: true,
                    showModalMetaButtonOnGameEnd: true,
                    showLoginWithFacebook: true,
                    createWebSocialFrame: true,
                    useGamepad: false,
                    showModalPreGame: false,
                    showCrossPromoBanner: false,
                    showModalTryAgain: true
                };
                return Host;
            })();

            (function(context) {
                context.Host = context.Host || {};
                Host.Type = "web";
                Host.Log = function(message) {
                    console.log(message);
                }; // Intentionally empty, because we don't want these messages printing except in the mobile wrappers
                Host.WrapperLog = function(message) {};
                Host.sendToHost = function() { //do nothing -- console.log("Send to host called in web context, this is clearly an error!")
                };
                var unsetValue = null;
                var store = function() {
                    var cache = {};
                    var _hasLocalStorageSupport = function() {
                        try {
                            return 'localStorage' in window && window['localStorage'] !== null;
                        } catch (e) {
                            return false;
                        }
                    }();
                    if (_hasLocalStorageSupport) { //Now prefixing with gameid to ensure each localstorage scope is unique
                        return {
                            set: function set(name, value) {
                                cache[name] = value;
                                try {
                                    localStorage.setItem(gameid + name, value);
                                } catch (e) { //Do nothing
                                }
                            },
                            get: function get(name) {
                                return cache[name] || localStorage.getItem(gameid + name);
                            },
                            remove: function remove(name) {
                                delete cache[name];
                                localStorage.removeItem(gameid + name);
                            }
                        };
                    }
                    unsetValue = undefined;
                    return {
                        set: function set(name, value) {
                            cache[name] = value;
                        },
                        get: function get(name) {
                            return cache[name];
                        },
                        remove: function remove(name) {
                            delete cache[name];
                        }
                    };
                }();
                Host.Preferences = Host.Preferences || {};
                Host.Preferences.SetBool = function(key, value) {
                    Host.Preferences.cache[key] = value;
                    store.set(key, value ? "true" : "false");
                };
                Host.Preferences.SetInt = function(key, value) {
                    Host.Preferences.cache[key] = value;
                    store.set(key, value);
                };
                Host.Preferences.SetFloat = function(key, value) {
                    Host.Preferences.cache[key] = value;
                    store.set(key, value);
                };
                Host.Preferences.SetString = function(key, value) {
                    Host.Preferences.cache[key] = value;
                    store.set(key, value);
                };
                Host.Preferences.Remove = function(key) {
                    delete Host.Preferences.cache[key];
                    store.remove(key);
                };
                Host.Preferences.GetBool = function(key, callback) {
                    var keyFound = store.get(key) !== unsetValue || Host.Preferences.cache.hasOwnProperty(key);
                    var value = store.get(key) == "true";
                    Host.Preferences.cache[key] = value;
                    callback && callback(value, keyFound);
                };
                Host.Preferences.GetInt = function(key, callback) {
                    var keyFound = store.get(key) !== unsetValue || Host.Preferences.cache.hasOwnProperty(key);
                    var value = parseInt(store.get(key));
                    Host.Preferences.cache[key] = value;
                    callback && callback(value, keyFound);
                };
                Host.Preferences.GetFloat = function(key, callback) {
                    var keyFound = store.get(key) !== unsetValue || Host.Preferences.cache.hasOwnProperty(key);
                    var value = parseFloat(store.get(key));
                    Host.Preferences.cache[key] = value;
                    callback && callback(value, keyFound);
                };
                Host.Preferences.GetString = function(key, callback) {
                    var keyFound = store.get(key) !== unsetValue || Host.Preferences.cache.hasOwnProperty(key);
                    var value = store.get(key);
                    Host.Preferences.cache[key] = value;
                    callback && callback(value, keyFound);
                };
                Host.Localize.Translate = Host.Localize.Translate || {};
                Host.Localize.Translate.GetString = function(key) {
                    return Lang[key] || "!!No translation found!!";
                };
            })(window);

            (function(scope) {
                scope.getRenderer = function() {
                    /**
                     * @author Mat Groves http://matgroves.com/ @Doormat23
                     */
                    /**
                     * The [pixi.js](http://www.pixijs.com/) module/namespace.
                     *
                     * @module PIXI
                     */
                    /**
                     * Namespace-class for [pixi.js](http://www.pixijs.com/).
                     *
                     * Contains assorted static properties and enumerations.
                     *
                     * @class PIXI
                     * @static
                     */
                    var PIXI = {};
                    PIXI.frvrTextureMemoryUsage = 0;
                    /**
                     * FRVR: Check and report WebGL errors to tracking
                     */
                    PIXI.frvrGLErrors = {
                        NO_ERROR: 0,
                        OUT_OF_MEMORY: 0,
                        INVALID_ENUM: 0,
                        INVALID_VALUE: 0,
                        INVALID_OPERATION: 0,
                        INVALID_FRAMEBUFFER_OPERATION: 0,
                        CONTEXT_LOST_WEBGL: 0,
                        TOTAL_ERRORS: 0
                    };
                    PIXI.frvrErrorStats = function() {
                        var str = "";
                        for (name in PIXI.frvrGLErrors) {
                            var n = PIXI.frvrGLErrors[name];
                            str += "" + name + ": " + n + "\n";
                        }
                        return str;
                    }; //PIXI.frvrCheckGLError=function(){} 
                    /**
                     * @property {Number} WEBGL_RENDERER
                     * @protected
                     * @static
                     */
                    PIXI.WEBGL_RENDERER = 0;
                    /**
                     * @property {Number} CANVAS_RENDERER
                     * @protected
                     * @static
                     */
                    PIXI.CANVAS_RENDERER = 1;
                    /**
                     * Version of pixi that is loaded.
                     * @property {String} VERSION
                     * @static
                     */
                    PIXI.VERSION = "v2.2.3FRVR";
                    /**
                     * Various blend modes supported by pixi. IMPORTANT - The WebGL renderer only supports the NORMAL, ADD, MULTIPLY and SCREEN blend modes.
                     * @property {Object} blendModes
                     * @property {Number} blendModes.NORMAL
                     * @property {Number} blendModes.ADD
                     * @property {Number} blendModes.MULTIPLY
                     * @property {Number} blendModes.SCREEN
                     * @property {Number} blendModes.OVERLAY
                     * @property {Number} blendModes.DARKEN
                     * @property {Number} blendModes.LIGHTEN
                     * @property {Number} blendModes.COLOR_DODGE
                     * @property {Number} blendModes.COLOR_BURN
                     * @property {Number} blendModes.HARD_LIGHT
                     * @property {Number} blendModes.SOFT_LIGHT
                     * @property {Number} blendModes.DIFFERENCE
                     * @property {Number} blendModes.EXCLUSION
                     * @property {Number} blendModes.HUE
                     * @property {Number} blendModes.SATURATION
                     * @property {Number} blendModes.COLOR
                     * @property {Number} blendModes.LUMINOSITY
                     * @static
                     */
                    PIXI.blendModes = {
                        NORMAL: 0,
                        ADD: 1,
                        MULTIPLY: 2,
                        SCREEN: 3
                    };
                    /**
                     * The scale modes that are supported by pixi.
                     *
                     * The DEFAULT scale mode affects the default scaling mode of future operations.
                     * It can be re-assigned to either LINEAR or NEAREST, depending upon suitability.
                     *
                     * @property {Object} scaleModes
                     * @property {Number} scaleModes.DEFAULT=LINEAR
                     * @property {Number} scaleModes.LINEAR Smooth scaling
                     * @property {Number} scaleModes.NEAREST Pixelating scaling
                     * @static
                     */
                    PIXI.scaleModes = {
                        DEFAULT: 0,
                        LINEAR: 0,
                        NEAREST: 1
                    }; // used to create uids for various pixi objects..
                    PIXI._UID = 0;
                    if (typeof Float32Array != 'undefined') {
                        PIXI.Float32Array = Float32Array;
                        PIXI.Uint16Array = Uint16Array; // Uint32Array and ArrayBuffer only used by WebGL renderer
                        // We can suppose that if WebGL is supported then typed arrays are supported too
                        // as they predate WebGL support for all browsers:
                        // see typed arrays support: http://caniuse.com/#search=TypedArrays
                        // see WebGL support: http://caniuse.com/#search=WebGL
                        PIXI.Uint32Array = Uint32Array;
                        PIXI.ArrayBuffer = ArrayBuffer;
                    } else {
                        PIXI.Float32Array = Array;
                        PIXI.Uint16Array = Array;
                    } // interaction frequency
                    PIXI.INTERACTION_FREQUENCY = 30;
                    PIXI.AUTO_PREVENT_DEFAULT = true;
                    /**
                     * @property {Number} PI_2
                     * @static
                     */
                    PIXI.PI_2 = Math.PI * 2;
                    /**
                     * @property {Number} RAD_TO_DEG
                     * @static
                     */
                    PIXI.RAD_TO_DEG = 180 / Math.PI;
                    /**
                     * @property {Number} DEG_TO_RAD
                     * @static
                     */
                    PIXI.DEG_TO_RAD = Math.PI / 180;
                    /**
                     * If true the default pixi startup (console) banner message will be suppressed.
                     *
                     * @property {Boolean} dontSayHello
                     * @default false
                     * @static
                     */ //PIXI.dontSayHello = false;
                    /**
                     * The default render options if none are supplied to
                     * {{#crossLink "WebGLRenderer"}}{{/crossLink}} or {{#crossLink "CanvasRenderer"}}{{/crossLink}}.
                     *
                     * @property {Object} defaultRenderOptions
                     * @property {Object} defaultRenderOptions.view=null
                     * @property {Boolean} defaultRenderOptions.transparent=false
                     * @property {Boolean} defaultRenderOptions.antialias=false
                     * @property {Boolean} defaultRenderOptions.preserveDrawingBuffer=false
                     * @property {Boolean} defaultRenderOptions.clearBeforeRender=true
                     * @property {Boolean} defaultRenderOptions.autoResize=false
                     * @static
                     */
                    PIXI.defaultRenderOptions = {
                        view: null,
                        transparent: false,
                        antialias: false,
                        preserveDrawingBuffer: false,
                        clearBeforeRender: true,
                        autoResize: false
                    };
                    /*PIXI.sayHello = function (type)
                                	{
                                		if(PIXI.dontSayHello)return;

                                		if ( navigator.userAgent.toLowerCase().indexOf('chrome') > -1 )
                                		{
                                			var args = [
                                				'%c %c %c Pixi.js ' + PIXI.VERSION + ' - ' + type + '  %c ' + ' %c ' + ' http://www.pixijs.com/  %c %c â¥%câ¥%câ¥ ',
                                				'background: #ff66a5',
                                				'background: #ff66a5',
                                				'color: #ff66a5; background: #030307;',
                                				'background: #ff66a5',
                                				'background: #ffc3dc',
                                				'background: #ff66a5',
                                				'color: #ff2424; background: #fff',
                                				'color: #ff2424; background: #fff',
                                				'color: #ff2424; background: #fff'
                                			];

                                			console.log.apply(console, args);
                                		}
                                		else if (window['console'])
                                		{
                                			console.log('Pixi.js ' + PIXI.VERSION + ' - http://www.pixijs.com/');
                                		}

                                		PIXI.dontSayHello = true;
                                	};*/
                    /**
                     * @author Mat Groves http://matgroves.com/ @Doormat23
                     */
                    /**
                     * The Point object represents a location in a two-dimensional coordinate system, where x represents the horizontal axis and y represents the vertical axis.
                     *
                     * @class Point
                     * @constructor
                     * @param x {Number} position of the point on the x axis
                     * @param y {Number} position of the point on the y axis
                     */
                    PIXI.Point = function(x, y) {
                        /**
                         * @property x
                         * @type Number
                         * @default 0
                         */
                        this.x = x || 0;
                        /**
                         * @property y
                         * @type Number
                         * @default 0
                         */
                        this.y = y || 0;
                    };
                    /**
                     * Creates a clone of this point
                     *
                     * @method clone
                     * @return {Point} a copy of the point
                     */
                    PIXI.Point.prototype.clone = function() {
                        return new PIXI.Point(this.x, this.y);
                    };
                    /**
                     * Sets the point to a new x and y position.
                     * If y is omitted, both x and y will be set to x.
                     * 
                     * @method set
                     * @param [x=0] {Number} position of the point on the x axis
                     * @param [y=0] {Number} position of the point on the y axis
                     */
                    PIXI.Point.prototype.set = function(x, y) {
                        this.x = x || 0;
                        this.y = y || (y !== 0 ? this.x : 0);
                    }; // constructor
                    PIXI.Point.prototype.constructor = PIXI.Point;
                    /**
                     * @author Mat Groves http://matgroves.com/
                     */
                    /**
                     * the Rectangle object is an area defined by its position, as indicated by its top-left corner point (x, y) and by its width and its height.
                     *
                     * @class Rectangle
                     * @constructor
                     * @param x {Number} The X coordinate of the upper-left corner of the rectangle
                     * @param y {Number} The Y coordinate of the upper-left corner of the rectangle
                     * @param width {Number} The overall width of this rectangle
                     * @param height {Number} The overall height of this rectangle
                     */
                    PIXI.Rectangle = function(x, y, width, height) {
                        /**
                         * @property x
                         * @type Number
                         * @default 0
                         */
                        this.x = x || 0;
                        /**
                         * @property y
                         * @type Number
                         * @default 0
                         */
                        this.y = y || 0;
                        /**
                         * @property width
                         * @type Number
                         * @default 0
                         */
                        this.width = width || 0;
                        /**
                         * @property height
                         * @type Number
                         * @default 0
                         */
                        this.height = height || 0;
                    };
                    /**
                     * Creates a clone of this Rectangle
                     *
                     * @method clone
                     * @return {Rectangle} a copy of the rectangle
                     */
                    PIXI.Rectangle.prototype.clone = function() {
                        return new PIXI.Rectangle(this.x, this.y, this.width, this.height);
                    };
                    /**
                     * Checks whether the x and y coordinates given are contained within this Rectangle
                     *
                     * @method contains
                     * @param x {Number} The X coordinate of the point to test
                     * @param y {Number} The Y coordinate of the point to test
                     * @return {Boolean} Whether the x/y coordinates are within this Rectangle
                     */
                    PIXI.Rectangle.prototype.contains = function(x, y) {
                        if (this.width <= 0 || this.height <= 0) return false;
                        var x1 = this.x;
                        if (x >= x1 && x <= x1 + this.width) {
                            var y1 = this.y;
                            if (y >= y1 && y <= y1 + this.height) {
                                return true;
                            }
                        }
                        return false;
                    }; // constructor
                    PIXI.Rectangle.prototype.constructor = PIXI.Rectangle;
                    PIXI.EmptyRectangle = new PIXI.Rectangle(0, 0, 0, 0);
                    /**
                     * @author Adrien Brault <adrien.brault@gmail.com>
                     */
                    /**
                     * @class Polygon
                     * @constructor
                     * @param points* {Array(Point)|Array(Number)|Point...|Number...} This can be an array of Points that form the polygon,
                     *      a flat array of numbers that will be interpreted as [x,y, x,y, ...], or the arguments passed can be
                     *      all the points of the polygon e.g. `new PIXI.Polygon(new PIXI.Point(), new PIXI.Point(), ...)`, or the
                     *      arguments passed can be flat x,y values e.g. `new PIXI.Polygon(x,y, x,y, x,y, ...)` where `x` and `y` are
                     *      Numbers.
                     */
                    PIXI.Polygon = function(points) { //if points isn't an array, use arguments as the array
                        if (!(points instanceof Array)) points = Array.prototype.slice.call(arguments); //if this is a flat array of numbers, convert it to points
                        if (points[0] instanceof PIXI.Point) {
                            var p = [];
                            for (var i = 0, il = points.length; i < il; i++) {
                                p.push(points[i].x, points[i].y);
                            }
                            points = p;
                        }
                        this.closed = true;
                        this.points = points;
                    };
                    /**
                     * Creates a clone of this polygon
                     *
                     * @method clone
                     * @return {Polygon} a copy of the polygon
                     */
                    PIXI.Polygon.prototype.clone = function() {
                        var points = this.points.slice();
                        return new PIXI.Polygon(points);
                    };
                    /**
                     * Checks whether the x and y coordinates passed to this function are contained within this polygon
                     *
                     * @method contains
                     * @param x {Number} The X coordinate of the point to test
                     * @param y {Number} The Y coordinate of the point to test
                     * @return {Boolean} Whether the x/y coordinates are within this polygon
                     */
                    PIXI.Polygon.prototype.contains = function(x, y) {
                        var inside = false; // use some raycasting to test hits
                        // https://github.com/substack/point-in-polygon/blob/master/index.js
                        var length = this.points.length / 2;
                        for (var i = 0, j = length - 1; i < length; j = i++) {
                            var xi = this.points[i * 2],
                                yi = this.points[i * 2 + 1],
                                xj = this.points[j * 2],
                                yj = this.points[j * 2 + 1],
                                intersect = yi > y !== yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi;
                            if (intersect) inside = !inside;
                        }
                        return inside;
                    }; // constructor
                    PIXI.Polygon.prototype.constructor = PIXI.Polygon;
                    /**
                     * @author Chad Engler <chad@pantherdev.com>
                     */
                    /**
                     * The Circle object can be used to specify a hit area for displayObjects
                     *
                     * @class Circle
                     * @constructor
                     * @param x {Number} The X coordinate of the center of this circle
                     * @param y {Number} The Y coordinate of the center of this circle
                     * @param radius {Number} The radius of the circle
                     */
                    PIXI.Circle = function(x, y, radius) {
                        /**
                         * @property x
                         * @type Number
                         * @default 0
                         */
                        this.x = x || 0;
                        /**
                         * @property y
                         * @type Number
                         * @default 0
                         */
                        this.y = y || 0;
                        /**
                         * @property radius
                         * @type Number
                         * @default 0
                         */
                        this.radius = radius || 0;
                    };
                    /**
                     * Creates a clone of this Circle instance
                     *
                     * @method clone
                     * @return {Circle} a copy of the Circle
                     */
                    PIXI.Circle.prototype.clone = function() {
                        return new PIXI.Circle(this.x, this.y, this.radius);
                    };
                    /**
                     * Checks whether the x and y coordinates given are contained within this circle
                     *
                     * @method contains
                     * @param x {Number} The X coordinate of the point to test
                     * @param y {Number} The Y coordinate of the point to test
                     * @return {Boolean} Whether the x/y coordinates are within this Circle
                     */
                    PIXI.Circle.prototype.contains = function(x, y) {
                        if (this.radius <= 0) return false;
                        var dx = this.x - x,
                            dy = this.y - y,
                            r2 = this.radius * this.radius;
                        dx *= dx;
                        dy *= dy;
                        return dx + dy <= r2;
                    };
                    /**
                     * Returns the framing rectangle of the circle as a PIXI.Rectangle object
                     *
                     * @method getBounds
                     * @return {Rectangle} the framing rectangle
                     */
                    PIXI.Circle.prototype.getBounds = function() {
                        return new PIXI.Rectangle(this.x - this.radius, this.y - this.radius, this.radius * 2, this.radius * 2);
                    }; // constructor
                    PIXI.Circle.prototype.constructor = PIXI.Circle;
                    /**
                     * @author Chad Engler <chad@pantherdev.com>
                     */
                    /**
                     * The Ellipse object can be used to specify a hit area for displayObjects
                     *
                     * @class Ellipse
                     * @constructor
                     * @param x {Number} The X coordinate of the center of the ellipse
                     * @param y {Number} The Y coordinate of the center of the ellipse
                     * @param width {Number} The half width of this ellipse
                     * @param height {Number} The half height of this ellipse
                     */
                    PIXI.Ellipse = function(x, y, width, height) {
                        /**
                         * @property x
                         * @type Number
                         * @default 0
                         */
                        this.x = x || 0;
                        /**
                         * @property y
                         * @type Number
                         * @default 0
                         */
                        this.y = y || 0;
                        /**
                         * @property width
                         * @type Number
                         * @default 0
                         */
                        this.width = width || 0;
                        /**
                         * @property height
                         * @type Number
                         * @default 0
                         */
                        this.height = height || 0;
                    };
                    /**
                     * Creates a clone of this Ellipse instance
                     *
                     * @method clone
                     * @return {Ellipse} a copy of the ellipse
                     */
                    PIXI.Ellipse.prototype.clone = function() {
                        return new PIXI.Ellipse(this.x, this.y, this.width, this.height);
                    };
                    /**
                     * Checks whether the x and y coordinates given are contained within this ellipse
                     *
                     * @method contains
                     * @param x {Number} The X coordinate of the point to test
                     * @param y {Number} The Y coordinate of the point to test
                     * @return {Boolean} Whether the x/y coords are within this ellipse
                     */
                    PIXI.Ellipse.prototype.contains = function(x, y) {
                        if (this.width <= 0 || this.height <= 0) return false; //normalize the coords to an ellipse with center 0,0
                        var normx = (x - this.x) / this.width,
                            normy = (y - this.y) / this.height;
                        normx *= normx;
                        normy *= normy;
                        return normx + normy <= 1;
                    };
                    /**
                     * Returns the framing rectangle of the ellipse as a PIXI.Rectangle object
                     *
                     * @method getBounds
                     * @return {Rectangle} the framing rectangle
                     */
                    PIXI.Ellipse.prototype.getBounds = function() {
                        return new PIXI.Rectangle(this.x - this.width, this.y - this.height, this.width, this.height);
                    }; // constructor
                    PIXI.Ellipse.prototype.constructor = PIXI.Ellipse;
                    /**
                     * @author Mat Groves http://matgroves.com/
                     */
                    /**
                     * The Rounded Rectangle object is an area defined by its position and has nice rounded corners, as indicated by its top-left corner point (x, y) and by its width and its height.
                     *
                     * @class RoundedRectangle
                     * @constructor
                     * @param x {Number} The X coordinate of the upper-left corner of the rounded rectangle
                     * @param y {Number} The Y coordinate of the upper-left corner of the rounded rectangle
                     * @param width {Number} The overall width of this rounded rectangle
                     * @param height {Number} The overall height of this rounded rectangle
                     * @param radius {Number} The overall radius of this corners of this rounded rectangle
                     */
                    PIXI.RoundedRectangle = function(x, y, width, height, radius) {
                        /**
                         * @property x
                         * @type Number
                         * @default 0
                         */
                        this.x = x || 0;
                        /**
                         * @property y
                         * @type Number
                         * @default 0
                         */
                        this.y = y || 0;
                        /**
                         * @property width
                         * @type Number
                         * @default 0
                         */
                        this.width = width || 0;
                        /**
                         * @property height
                         * @type Number
                         * @default 0
                         */
                        this.height = height || 0;
                        /**
                         * @property radius
                         * @type Number
                         * @default 20
                         */
                        this.radius = radius || 20;
                    };
                    /**
                     * Creates a clone of this Rounded Rectangle
                     *
                     * @method clone
                     * @return {RoundedRectangle} a copy of the rounded rectangle
                     */
                    PIXI.RoundedRectangle.prototype.clone = function() {
                        return new PIXI.RoundedRectangle(this.x, this.y, this.width, this.height, this.radius);
                    };
                    /**
                     * Checks whether the x and y coordinates given are contained within this Rounded Rectangle
                     *
                     * @method contains
                     * @param x {Number} The X coordinate of the point to test
                     * @param y {Number} The Y coordinate of the point to test
                     * @return {Boolean} Whether the x/y coordinates are within this Rounded Rectangle
                     */
                    PIXI.RoundedRectangle.prototype.contains = function(x, y) {
                        if (this.width <= 0 || this.height <= 0) return false;
                        var x1 = this.x;
                        if (x >= x1 && x <= x1 + this.width) {
                            var y1 = this.y;
                            if (y >= y1 && y <= y1 + this.height) {
                                return true;
                            }
                        }
                        return false;
                    }; // constructor
                    PIXI.RoundedRectangle.prototype.constructor = PIXI.RoundedRectangle;
                    /**
                     * @author Mat Groves http://matgroves.com/ @Doormat23
                     */
                    /**
                     * The Matrix class is now an object, which makes it a lot faster, 
                     * here is a representation of it : 
                     * | a | b | tx|
                     * | c | d | ty|
                     * | 0 | 0 | 1 |
                     *
                     * @class Matrix
                     * @constructor
                     */
                    PIXI.Matrix = function() {
                        /**
                         * @property a
                         * @type Number
                         * @default 1
                         */
                        this.a = 1;
                        /**
                         * @property b
                         * @type Number
                         * @default 0
                         */
                        this.b = 0;
                        /**
                         * @property c
                         * @type Number
                         * @default 0
                         */
                        this.c = 0;
                        /**
                         * @property d
                         * @type Number
                         * @default 1
                         */
                        this.d = 1;
                        /**
                         * @property tx
                         * @type Number
                         * @default 0
                         */
                        this.tx = 0;
                        /**
                         * @property ty
                         * @type Number
                         * @default 0
                         */
                        this.ty = 0;
                    };
                    /**
                     * Creates a Matrix object based on the given array. The Element to Matrix mapping order is as follows:
                     *
                     * a = array[0]
                     * b = array[1]
                     * c = array[3]
                     * d = array[4]
                     * tx = array[2]
                     * ty = array[5]
                     *
                     * @method fromArray
                     * @param array {Array} The array that the matrix will be populated from.
                     */
                    PIXI.Matrix.prototype.fromArray = function(array) {
                        this.a = array[0];
                        this.b = array[1];
                        this.c = array[3];
                        this.d = array[4];
                        this.tx = array[2];
                        this.ty = array[5];
                    };
                    /**
                     * Creates an array from the current Matrix object.
                     *
                     * @method toArray
                     * @param transpose {Boolean} Whether we need to transpose the matrix or not
                     * @return {Array} the newly created array which contains the matrix
                     */
                    PIXI.Matrix.prototype.toArray = function(transpose) {
                        if (!this.array) this.array = new PIXI.Float32Array(9);
                        var array = this.array;
                        if (transpose) {
                            array[0] = this.a;
                            array[1] = this.b;
                            array[2] = 0;
                            array[3] = this.c;
                            array[4] = this.d;
                            array[5] = 0;
                            array[6] = this.tx;
                            array[7] = this.ty;
                            array[8] = 1;
                        } else {
                            array[0] = this.a;
                            array[1] = this.c;
                            array[2] = this.tx;
                            array[3] = this.b;
                            array[4] = this.d;
                            array[5] = this.ty;
                            array[6] = 0;
                            array[7] = 0;
                            array[8] = 1;
                        }
                        return array;
                    };
                    /**
                     * Get a new position with the current transformation applied.
                     * Can be used to go from a child's coordinate space to the world coordinate space. (e.g. rendering)
                     *
                     * @method apply
                     * @param pos {Point} The origin
                     * @param [newPos] {Point} The point that the new position is assigned to (allowed to be same as input)
                     * @return {Point} The new point, transformed through this matrix
                     */
                    PIXI.Matrix.prototype.apply = function(pos, newPos) {
                        newPos = newPos || new PIXI.Point();
                        newPos.x = this.a * pos.x + this.c * pos.y + this.tx;
                        newPos.y = this.b * pos.x + this.d * pos.y + this.ty;
                        return newPos;
                    };
                    /**
                     * Get a new position with the inverse of the current transformation applied.
                     * Can be used to go from the world coordinate space to a child's coordinate space. (e.g. input)
                     *
                     * @method applyInverse
                     * @param pos {Point} The origin
                     * @param [newPos] {Point} The point that the new position is assigned to (allowed to be same as input)
                     * @return {Point} The new point, inverse-transformed through this matrix
                     */
                    PIXI.Matrix.prototype.applyInverse = function(pos, newPos) {
                        newPos = newPos || new PIXI.Point();
                        var id = 1 / (this.a * this.d + this.c * -this.b);
                        newPos.x = this.d * id * pos.x + -this.c * id * pos.y + (this.ty * this.c - this.tx * this.d) * id;
                        newPos.y = this.a * id * pos.y + -this.b * id * pos.x + (-this.ty * this.a + this.tx * this.b) * id;
                        return newPos;
                    };
                    /**
                     * Translates the matrix on the x and y.
                     * 
                     * @method translate
                     * @param {Number} x
                     * @param {Number} y
                     * @return {Matrix} This matrix. Good for chaining method calls.
                     **/
                    PIXI.Matrix.prototype.translate = function(x, y) {
                        this.tx += x;
                        this.ty += y;
                        return this;
                    };
                    /**
                     * Applies a scale transformation to the matrix.
                     * 
                     * @method scale
                     * @param {Number} x The amount to scale horizontally
                     * @param {Number} y The amount to scale vertically
                     * @return {Matrix} This matrix. Good for chaining method calls.
                     **/
                    PIXI.Matrix.prototype.scale = function(x, y) {
                        this.a *= x;
                        this.d *= y;
                        this.c *= x;
                        this.b *= y;
                        this.tx *= x;
                        this.ty *= y;
                        return this;
                    };
                    /**
                     * Applies a rotation transformation to the matrix.
                     * @method rotate
                     * @param {Number} angle The angle in radians.
                     * @return {Matrix} This matrix. Good for chaining method calls.
                     **/
                    PIXI.Matrix.prototype.rotate = function(angle) {
                        var cos = Math.cos(angle);
                        var sin = Math.sin(angle);
                        var a1 = this.a;
                        var c1 = this.c;
                        var tx1 = this.tx;
                        this.a = a1 * cos - this.b * sin;
                        this.b = a1 * sin + this.b * cos;
                        this.c = c1 * cos - this.d * sin;
                        this.d = c1 * sin + this.d * cos;
                        this.tx = tx1 * cos - this.ty * sin;
                        this.ty = tx1 * sin + this.ty * cos;
                        return this;
                    };
                    /**
                     * Appends the given Matrix to this Matrix.
                     * 
                     * @method append
                     * @param {Matrix} matrix
                     * @return {Matrix} This matrix. Good for chaining method calls.
                     */
                    PIXI.Matrix.prototype.append = function(matrix) {
                        var a1 = this.a;
                        var b1 = this.b;
                        var c1 = this.c;
                        var d1 = this.d;
                        this.a = matrix.a * a1 + matrix.b * c1;
                        this.b = matrix.a * b1 + matrix.b * d1;
                        this.c = matrix.c * a1 + matrix.d * c1;
                        this.d = matrix.c * b1 + matrix.d * d1;
                        this.tx = matrix.tx * a1 + matrix.ty * c1 + this.tx;
                        this.ty = matrix.tx * b1 + matrix.ty * d1 + this.ty;
                        return this;
                    };
                    /**
                     * Resets this Matix to an identity (default) matrix.
                     * 
                     * @method identity
                     * @return {Matrix} This matrix. Good for chaining method calls.
                     */
                    PIXI.Matrix.prototype.identity = function() {
                        this.a = 1;
                        this.b = 0;
                        this.c = 0;
                        this.d = 1;
                        this.tx = 0;
                        this.ty = 0;
                        return this;
                    };
                    PIXI.identityMatrix = new PIXI.Matrix();
                    /**
                     * @author Mat Groves http://matgroves.com/ @Doormat23
                     */
                    /**
                     * The base class for all objects that are rendered on the screen.
                     * This is an abstract class and should not be used on its own rather it should be extended.
                     *
                     * @class DisplayObject
                     * @constructor
                     */
                    PIXI.DisplayObject = function() {
                        /**
                         * The coordinate of the object relative to the local coordinates of the parent.
                         *
                         * @property position
                         * @type Point
                         */
                        this.position = new PIXI.Point();
                        /**
                         * The scale factor of the object.
                         *
                         * @property scale
                         * @type Point
                         */
                        this.scale = new PIXI.Point(1, 1); //{x:1, y:1};
                        /**
                         * The pivot point of the displayObject that it rotates around
                         *
                         * @property pivot
                         * @type Point
                         */
                        this.pivot = new PIXI.Point(0, 0);
                        /**
                         * The rotation of the object in radians.
                         *
                         * @property rotation
                         * @type Number
                         */
                        this.rotation = 0;
                        /**
                         * The opacity of the object.
                         *
                         * @property alpha
                         * @type Number
                         */
                        this.alpha = 1;
                        /**
                         * The visibility of the object.
                         *
                         * @property visible
                         * @type Boolean
                         */
                        this.visible = true;
                        /**
                         * This is the defined area that will pick up mouse / touch events. It is null by default.
                         * Setting it is a neat way of optimising the hitTest function that the interactionManager will use (as it will not need to hit test all the children)
                         *
                         * @property hitArea
                         * @type Rectangle|Circle|Ellipse|Polygon
                         */
                        this.hitArea = null;
                        /**
                         * This is used to indicate if the displayObject should display a mouse hand cursor on rollover
                         *
                         * @property buttonMode
                         * @type Boolean
                         */
                        this.buttonMode = false;
                        /**
                         * Can this object be rendered
                         *
                         * @property renderable
                         * @type Boolean
                         */
                        this.renderable = false;
                        /**
                         * [read-only] The display object container that contains this display object.
                         *
                         * @property parent
                         * @type DisplayObjectContainer
                         * @readOnly
                         */
                        this.parent = null;
                        /**
                         * [read-only] The stage the display object is connected to, or undefined if it is not connected to the stage.
                         *
                         * @property stage
                         * @type Stage
                         * @readOnly
                         */
                        this.stage = null;
                        /**
                         * [read-only] The multiplied alpha of the displayObject
                         *
                         * @property worldAlpha
                         * @type Number
                         * @readOnly
                         */
                        this.worldAlpha = 1;
                        /**
                         * [read-only] Whether or not the object is interactive, do not toggle directly! use the `interactive` property
                         *
                         * @property _interactive
                         * @type Boolean
                         * @readOnly
                         * @private
                         */
                        this._interactive = false;
                        /**
                         * This is the cursor that will be used when the mouse is over this object. To enable this the element must have interaction = true and buttonMode = true
                         *
                         * @property defaultCursor
                         * @type String
                         *
                         */
                        this.defaultCursor = 'pointer';
                        /**
                         * [read-only] Current transform of the object based on world (parent) factors
                         *
                         * @property worldTransform
                         * @type Matrix
                         * @readOnly
                         * @private
                         */
                        this.worldTransform = new PIXI.Matrix();
                        /**
                         * cached sin rotation and cos rotation
                         *
                         * @property _sr
                         * @type Number
                         * @private
                         */
                        this._sr = 0;
                        /**
                         * cached sin rotation and cos rotation
                         *
                         * @property _cr
                         * @type Number
                         * @private
                         */
                        this._cr = 1;
                        /**
                         * The area the filter is applied to like the hitArea this is used as more of an optimisation
                         * rather than figuring out the dimensions of the displayObject each frame you can set this rectangle
                         *
                         * @property filterArea
                         * @type Rectangle
                         */
                        this.filterArea = null; //new PIXI.Rectangle(0,0,1,1);
                        /**
                         * The original, cached bounds of the object
                         *
                         * @property _bounds
                         * @type Rectangle
                         * @private
                         */
                        this._bounds = new PIXI.Rectangle(0, 0, 1, 1);
                        /**
                         * The most up-to-date bounds of the object
                         *
                         * @property _currentBounds
                         * @type Rectangle
                         * @private
                         */
                        this._currentBounds = null;
                        /**
                         * The original, cached mask of the object
                         *
                         * @property _currentBounds
                         * @type Rectangle
                         * @private
                         */
                        this._mask = null;
                        /**
                         * Cached internal flag.
                         *
                         * @property _cacheAsBitmap
                         * @type Boolean
                         * @private
                         */ //    this._cacheAsBitmap = false;
                        /**
                         * Cached internal flag.
                         *
                         * @property _cacheIsDirty
                         * @type Boolean
                         * @private
                         */
                        this._cacheIsDirty = false;
                        /*
                         * MOUSE Callbacks
                         */
                        /**
                         * A callback that is used when the users mouse rolls over the displayObject
                         * @method mouseover
                         * @param interactionData {InteractionData}
                         */
                        /**
                         * A callback that is used when the users mouse leaves the displayObject
                         * @method mouseout
                         * @param interactionData {InteractionData}
                         */ //Left button
                        /**
                         * A callback that is used when the users clicks on the displayObject with their mouse's left button
                         * @method click
                         * @param interactionData {InteractionData}
                         */
                        /**
                         * A callback that is used when the user clicks the mouse's left button down over the sprite
                         * @method mousedown
                         * @param interactionData {InteractionData}
                         */
                        /**
                         * A callback that is used when the user releases the mouse's left button that was over the displayObject
                         * for this callback to be fired, the mouse's left button must have been pressed down over the displayObject
                         * @method mouseup
                         * @param interactionData {InteractionData}
                         */
                        /**
                         * A callback that is used when the user releases the mouse's left button that was over the displayObject but is no longer over the displayObject
                         * for this callback to be fired, the mouse's left button must have been pressed down over the displayObject
                         * @method mouseupoutside
                         * @param interactionData {InteractionData}
                         */ //Right button
                        /**
                         * A callback that is used when the users clicks on the displayObject with their mouse's right button
                         * @method rightclick
                         * @param interactionData {InteractionData}
                         */
                        /**
                         * A callback that is used when the user clicks the mouse's right button down over the sprite
                         * @method rightdown
                         * @param interactionData {InteractionData}
                         */
                        /**
                         * A callback that is used when the user releases the mouse's right button that was over the displayObject
                         * for this callback to be fired the mouse's right button must have been pressed down over the displayObject
                         * @method rightup
                         * @param interactionData {InteractionData}
                         */
                        /**
                         * A callback that is used when the user releases the mouse's right button that was over the displayObject but is no longer over the displayObject
                         * for this callback to be fired, the mouse's right button must have been pressed down over the displayObject
                         * @method rightupoutside
                         * @param interactionData {InteractionData}
                         */
                        /*
                         * TOUCH Callbacks
                         */
                        /**
                         * A callback that is used when the users taps on the sprite with their finger
                         * basically a touch version of click
                         * @method tap
                         * @param interactionData {InteractionData}
                         */
                        /**
                         * A callback that is used when the user touches over the displayObject
                         * @method touchstart
                         * @param interactionData {InteractionData}
                         */
                        /**
                         * A callback that is used when the user releases a touch over the displayObject
                         * @method touchend
                         * @param interactionData {InteractionData}
                         */
                        /**
                         * A callback that is used when the user releases the touch that was over the displayObject
                         * for this callback to be fired, The touch must have started over the sprite
                         * @method touchendoutside
                         * @param interactionData {InteractionData}
                         */
                    }; // constructor
                    PIXI.DisplayObject.prototype.constructor = PIXI.DisplayObject;
                    /**
                     * Indicates if the sprite will have touch and mouse interactivity. It is false by default
                     *
                     * @property interactive
                     * @type Boolean
                     * @default false
                     */
                    Object.defineProperty(PIXI.DisplayObject.prototype, 'interactive', {
                        get: function get() {
                            return this._interactive;
                        },
                        set: function set(value) {
                            this._interactive = value; // TODO more to be done here..
                            // need to sort out a re-crawl!
                            if (this.stage) this.stage.dirty = true;
                        }
                    });
                    /**
                     * [read-only] Indicates if the sprite is globally visible.
                     *
                     * @property worldVisible
                     * @type Boolean
                     */
                    Object.defineProperty(PIXI.DisplayObject.prototype, 'worldVisible', {
                        get: function get() {
                            var item = this;
                            do {
                                if (!item.visible) return false;
                                item = item.parent;
                            } while (item);
                            return true;
                        }
                    });
                    /**
                     * Sets a mask for the displayObject. A mask is an object that limits the visibility of an object to the shape of the mask applied to it.
                     * In PIXI a regular mask must be a PIXI.Graphics object. This allows for much faster masking in canvas as it utilises shape clipping.
                     * To remove a mask, set this property to null.
                     *
                     * @property mask
                     * @type Graphics
                     */
                    Object.defineProperty(PIXI.DisplayObject.prototype, 'mask', {
                        get: function get() {
                            return this._mask;
                        },
                        set: function set(value) {
                            if (this._mask) this._mask.isMask = false;
                            this._mask = value;
                            if (this._mask) this._mask.isMask = true;
                        }
                    });
                    /**
                     * Sets the filters for the displayObject.
                     * * IMPORTANT: This is a webGL only feature and will be ignored by the canvas renderer.
                     * To remove filters simply set this property to 'null'
                     * @property filters
                     * @type Array(Filter)
                     */
                    Object.defineProperty(PIXI.DisplayObject.prototype, 'filters', {
                        get: function get() {
                            return this._filters;
                        },
                        set: function set(value) {
                            if (value) { // now put all the passes in one place..
                                var passes = [];
                                for (var i = 0; i < value.length; i++) {
                                    var filterPasses = value[i].passes;
                                    for (var j = 0; j < filterPasses.length; j++) {
                                        passes.push(filterPasses[j]);
                                    }
                                } // TODO change this as it is legacy
                                this._filterBlock = {
                                    target: this,
                                    filterPasses: passes
                                };
                            }
                            this._filters = value;
                        }
                    });
                    /*
                     * Updates the object transform for rendering
                     *
                     * @method updateTransform
                     * @private
                     */
                    PIXI.DisplayObject.prototype.updateTransform = function(pt, wt, a, b, c, d, tx, ty) { // create some matrix refs for easy access
                        pt = this.parent.worldTransform;
                        wt = this.worldTransform; // so if rotation is between 0 then we can simplify the multiplication process..
                        if (this.rotation % PIXI.PI_2 !== 0) { // check to see if the rotation is the same as the previous render. This means we only need to use sin and cos when rotation actually changes
                            if (this.rotation !== this.rotationCache) {
                                this.rotationCache = this.rotation;
                                this._sr = Math.sin(this.rotation);
                                this._cr = Math.cos(this.rotation);
                            } // get the matrix values of the displayobject based on its transform properties..
                            a = this._cr * this.scale.x;
                            b = this._sr * this.scale.x;
                            c = -this._sr * this.scale.y;
                            d = this._cr * this.scale.y;
                            tx = this.position.x;
                            ty = this.position.y; // check for pivot.. not often used so geared towards that fact!
                            if (this.pivot.x || this.pivot.y) {
                                tx -= this.pivot.x * a + this.pivot.y * c;
                                ty -= this.pivot.x * b + this.pivot.y * d;
                            } // concat the parent matrix with the objects transform.
                            wt.a = a * pt.a + b * pt.c;
                            wt.b = a * pt.b + b * pt.d;
                            wt.c = c * pt.a + d * pt.c;
                            wt.d = c * pt.b + d * pt.d;
                            wt.tx = tx * pt.a + ty * pt.c + pt.tx;
                            wt.ty = tx * pt.b + ty * pt.d + pt.ty;
                        } else { // lets do the fast version as we know there is no rotation..
                            a = this.scale.x;
                            d = this.scale.y;
                            tx = this.position.x - this.pivot.x * a;
                            ty = this.position.y - this.pivot.y * d;
                            wt.a = a * pt.a;
                            wt.b = a * pt.b;
                            wt.c = d * pt.c;
                            wt.d = d * pt.d;
                            wt.tx = tx * pt.a + ty * pt.c + pt.tx;
                            wt.ty = tx * pt.b + ty * pt.d + pt.ty;
                        } // multiply the alphas..
                        this.worldAlpha = this.alpha * this.parent.worldAlpha;
                    }; // performance increase to avoid using call.. (10x faster)
                    PIXI.DisplayObject.prototype.displayObjectUpdateTransform = PIXI.DisplayObject.prototype.updateTransform;
                    /**
                     * Retrieves the bounds of the displayObject as a rectangle object
                     *
                     * @method getBounds
                     * @param matrix {Matrix}
                     * @return {Rectangle} the rectangular bounding area
                     */
                    PIXI.DisplayObject.prototype.getBounds = function(matrix) {
                        return PIXI.EmptyRectangle;
                    };
                    /**
                     * Retrieves the local bounds of the displayObject as a rectangle object
                     *
                     * @method getLocalBounds
                     * @return {Rectangle} the rectangular bounding area
                     */
                    PIXI.DisplayObject.prototype.getLocalBounds = function() {
                        return this.getBounds(PIXI.identityMatrix); ///PIXI.EmptyRectangle();
                    };
                    /**
                     * Sets the object's stage reference, the stage this object is connected to
                     *
                     * @method setStageReference
                     * @param stage {Stage} the stage that the object will have as its current stage reference
                     */
                    PIXI.DisplayObject.prototype.setStageReference = function(stage) {
                        this.stage = stage;
                        if (this._interactive) this.stage.dirty = true;
                    };
                    /**
                     * Calculates the global position of the display object
                     *
                     * @method toGlobal
                     * @param position {Point} The world origin to calculate from
                     * @return {Point} A point object representing the position of this object
                     */
                    PIXI.DisplayObject.prototype.toGlobal = function(position) { // don't need to u[date the lot
                        this.displayObjectUpdateTransform();
                        return this.worldTransform.apply(position);
                    };
                    /**
                     * FRVR Extension
                     * Converts sizes between global and local scaling using matrix a and d components
                     */
                    PIXI.DisplayObject.prototype.toGlobalSize = function(size) {
                        this.displayObjectUpdateTransform();
                        return new Point(size.x * this.worldTransform.a, size.y * this.worldTransform.d);
                    };
                    /**
                     * FRVR Extension
                     * Converts sizes between global and local scaling using matrix a and d components
                     */
                    PIXI.DisplayObject.prototype.toLocalSize = function(size, from) {
                        if (from) {
                            size = from.toGlobal(size);
                        }
                        this.displayObjectUpdateTransform();
                        return new Point(size.x / this.worldTransform.a, size.y / this.worldTransform.d);
                    };
                    /**
                     * Calculates the local position of the display object relative to another point
                     *
                     * @method toLocal
                     * @param position {Point} The world origin to calculate from
                     * @param [from] {DisplayObject} The DisplayObject to calculate the global position from
                     * @return {Point} A point object representing the position of this object
                     */
                    PIXI.DisplayObject.prototype.toLocal = function(position, from) { // 
                        if (from) {
                            position = from.toGlobal(position);
                        } // don't need to u[date the lot
                        this.displayObjectUpdateTransform();
                        return this.worldTransform.applyInverse(position);
                    };
                    /**
                     * Renders the object using the WebGL renderer
                     *
                     * @method _renderWebGL
                     * @param renderSession {RenderSession}
                     * @private
                     */
                    PIXI.DisplayObject.prototype._renderWebGL = function(renderSession) { //    renderSession = renderSession;
                    };
                    /**
                     * Renders the object using the Canvas renderer
                     *
                     * @method _renderCanvas
                     * @param renderSession {RenderSession}
                     * @private
                     */
                    PIXI.DisplayObject.prototype._renderCanvas = function(renderSession) { // OVERWRITE;
                        // this line is just here to pass jshinting :)
                        //   renderSession = renderSession;
                    };
                    PIXI.DisplayObject._tempMatrix = new PIXI.Matrix();
                    /**
                     * The position of the displayObject on the x axis relative to the local coordinates of the parent.
                     *
                     * @property x
                     * @type Number
                     */
                    Object.defineProperty(PIXI.DisplayObject.prototype, 'x', {
                        get: function get() {
                            return this.position.x;
                        },
                        set: function set(value) {
                            this.position.x = value;
                        }
                    });
                    /**
                     * The position of the displayObject on the y axis relative to the local coordinates of the parent.
                     *
                     * @property y
                     * @type Number
                     */
                    Object.defineProperty(PIXI.DisplayObject.prototype, 'y', {
                        get: function get() {
                            return this.position.y;
                        },
                        set: function set(value) {
                            this.position.y = value;
                        }
                    });
                    /**
                     * @author Mat Groves http://matgroves.com/ @Doormat23
                     */
                    /**
                     * A DisplayObjectContainer represents a collection of display objects.
                     * It is the base class of all display objects that act as a container for other objects.
                     *
                     * @class DisplayObjectContainer
                     * @extends DisplayObject
                     * @constructor
                     */
                    PIXI.DisplayObjectContainer = function() {
                        PIXI.DisplayObject.call(this);
                        /**
                         * [read-only] The array of children of this container.
                         *
                         * @property children
                         * @type Array(DisplayObject)
                         * @readOnly
                         */
                        this.children = []; // fast access to update transform..
                    }; // constructor
                    PIXI.DisplayObjectContainer.prototype = Object.create(PIXI.DisplayObject.prototype);
                    PIXI.DisplayObjectContainer.prototype.constructor = PIXI.DisplayObjectContainer;
                    /**
                     * The width of the displayObjectContainer, setting this will actually modify the scale to achieve the value set
                     *
                     * @property width
                     * @type Number
                     */
                    Object.defineProperty(PIXI.DisplayObjectContainer.prototype, 'width', {
                        get: function get() {
                            return this.scale.x * this.getLocalBounds().width;
                        },
                        set: function set(value) {
                            var width = this.getLocalBounds().width;
                            if (width !== 0) {
                                this.scale.x = value / width;
                            } else {
                                this.scale.x = 1;
                            }
                            this._width = value;
                        }
                    });
                    /**
                     * The height of the displayObjectContainer, setting this will actually modify the scale to achieve the value set
                     *
                     * @property height
                     * @type Number
                     */
                    Object.defineProperty(PIXI.DisplayObjectContainer.prototype, 'height', {
                        get: function get() {
                            return this.scale.y * this.getLocalBounds().height;
                        },
                        set: function set(value) {
                            var height = this.getLocalBounds().height;
                            if (height !== 0) {
                                this.scale.y = value / height;
                            } else {
                                this.scale.y = 1;
                            }
                            this._height = value;
                        }
                    });
                    /**
                     * Adds a child to the container.
                     *
                     * @method addChild
                     * @param child {DisplayObject} The DisplayObject to add to the container
                     * @return {DisplayObject} The child that was added.
                     */
                    PIXI.DisplayObjectContainer.prototype.addChild = function(child) {
                        window.dirtyOnce = true;
                        return this.addChildAt(child, this.children.length);
                    };
                    /**
                     * Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown
                     *
                     * @method addChildAt
                     * @param child {DisplayObject} The child to add
                     * @param index {Number} The index to place the child in
                     * @return {DisplayObject} The child that was added.
                     */
                    PIXI.DisplayObjectContainer.prototype.addChildAt = function(child, index) {
                        if (index >= 0 && index <= this.children.length) {
                            window.dirtyOnce = true;
                            window.Host && Host.Localize.UpdateChildren(child);
                            if (child.parent) {
                                child.parent.removeChild(child);
                            }
                            child.parent = this;
                            this.children.splice(index, 0, child);
                            if (this.stage) child.setStageReference(this.stage);
                            return child;
                        } else {
                            throw new Error(child + 'addChildAt: The index ' + index + ' supplied is out of bounds ' + this.children.length);
                        }
                    };
                    /**
                     * Returns the index position of a child DisplayObject instance
                     *
                     * @method getChildIndex
                     * @param child {DisplayObject} The DisplayObject instance to identify
                     * @return {Number} The index position of the child display object to identify
                     */
                    PIXI.DisplayObjectContainer.prototype.getChildIndex = function(child) {
                        var index = this.children.indexOf(child);
                        if (index === -1) {
                            throw new Error('The supplied DisplayObject must be a child of the caller');
                        }
                        return index;
                    };
                    /**
                     * Changes the position of an existing child in the display object container
                     *
                     * @method setChildIndex
                     * @param child {DisplayObject} The child DisplayObject instance for which you want to change the index number
                     * @param index {Number} The resulting index number for the child display object
                     */
                    PIXI.DisplayObjectContainer.prototype.setChildIndex = function(child, index) {
                        if (index < 0 || index >= this.children.length) {
                            throw new Error('The supplied index is out of bounds');
                        }
                        window.dirtyOnce = true;
                        var currentIndex = this.getChildIndex(child);
                        this.children.splice(currentIndex, 1); //remove from old position
                        this.children.splice(index, 0, child); //add at new position
                    };
                    /**
                     * Returns the child at the specified index
                     *
                     * @method getChildAt
                     * @param index {Number} The index to get the child from
                     * @return {DisplayObject} The child at the given index, if any.
                     */
                    PIXI.DisplayObjectContainer.prototype.getChildAt = function(index) {
                        if (index < 0 || index >= this.children.length) {
                            throw new Error('getChildAt: Supplied index ' + index + ' does not exist in the child list, or the supplied DisplayObject must be a child of the caller');
                        }
                        return this.children[index];
                    };
                    /**
                     * Removes a child from the container.
                     *
                     * @method removeChild
                     * @param child {DisplayObject} The DisplayObject to remove
                     * @return {DisplayObject} The child that was removed.
                     */
                    PIXI.DisplayObjectContainer.prototype.removeChild = function(child) {
                        var index = this.children.indexOf(child);
                        if (index === -1) return;
                        return this.removeChildAt(index);
                    };
                    /**
                     * Removes a child from the specified index position.
                     *
                     * @method removeChildAt
                     * @param index {Number} The index to get the child from
                     * @return {DisplayObject} The child that was removed.
                     */
                    PIXI.DisplayObjectContainer.prototype.removeChildAt = function(index) {
                        var child = this.getChildAt(index);
                        if (this.stage) child.removeStageReference();
                        window.dirtyOnce = true;
                        child.parent = undefined;
                        this.children.splice(index, 1);
                        return child;
                    };
                    /*
                     * Updates the transform on all children of this container for rendering
                     *
                     * @method updateTransform
                     * @private
                     */
                    PIXI.DisplayObjectContainer.prototype.updateTransform = function() {
                        if (!this.visible) return;
                        this.displayObjectUpdateTransform(); //PIXI.DisplayObject.prototype.updateTransform.call( this );
                        //if(this._cacheAsBitmap)return;
                        for (var i = 0, j = this.children.length; i < j; i++) {
                            this.children[i].updateTransform();
                        }
                    }; // performance increase to avoid using call.. (10x faster)
                    PIXI.DisplayObjectContainer.prototype.displayObjectContainerUpdateTransform = PIXI.DisplayObjectContainer.prototype.updateTransform;
                    /**
                     * Retrieves the bounds of the displayObjectContainer as a rectangle. The bounds calculation takes all visible children into consideration.
                     *
                     * @method getBounds
                     * @return {Rectangle} The rectangular bounding area
                     */
                    PIXI.DisplayObjectContainer.prototype.getBounds = function() {
                        if (this.children.length === 0) return PIXI.EmptyRectangle; // TODO the bounds have already been calculated this render session so return what we have
                        var minX = Infinity;
                        var minY = Infinity;
                        var maxX = -Infinity;
                        var maxY = -Infinity;
                        var childBounds;
                        var childMaxX;
                        var childMaxY;
                        var childVisible = false;
                        for (var i = 0, j = this.children.length; i < j; i++) {
                            var child = this.children[i];
                            if (!child.visible) continue;
                            childVisible = true;
                            childBounds = this.children[i].getBounds();
                            minX = minX < childBounds.x ? minX : childBounds.x;
                            minY = minY < childBounds.y ? minY : childBounds.y;
                            childMaxX = childBounds.width + childBounds.x;
                            childMaxY = childBounds.height + childBounds.y;
                            maxX = maxX > childMaxX ? maxX : childMaxX;
                            maxY = maxY > childMaxY ? maxY : childMaxY;
                        }
                        if (!childVisible) return PIXI.EmptyRectangle;
                        var bounds = this._bounds;
                        bounds.x = minX;
                        bounds.y = minY;
                        bounds.width = maxX - minX;
                        bounds.height = maxY - minY; // TODO: store a reference so that if this function gets called again in the render cycle we do not have to recalculate
                        //this._currentBounds = bounds;
                        return bounds;
                    };
                    /**
                     * Retrieves the non-global local bounds of the displayObjectContainer as a rectangle. The calculation takes all visible children into consideration.
                     *
                     * @method getLocalBounds
                     * @return {Rectangle} The rectangular bounding area
                     */
                    PIXI.DisplayObjectContainer.prototype.getLocalBounds = function() {
                        var matrixCache = this.worldTransform;
                        this.worldTransform = PIXI.identityMatrix;
                        for (var i = 0, j = this.children.length; i < j; i++) {
                            this.children[i].updateTransform();
                        }
                        var bounds = this.getBounds();
                        this.worldTransform = matrixCache; //Reset identiy matrix for children after getLocalBounds.
                        for (var i = 0, j = this.children.length; i < j; i++) {
                            this.children[i].updateTransform();
                        }
                        return bounds;
                    };
                    /**
                     * Sets the containers Stage reference. This is the Stage that this object, and all of its children, is connected to.
                     *
                     * @method setStageReference
                     * @param stage {Stage} the stage that the container will have as its current stage reference
                     */
                    PIXI.DisplayObjectContainer.prototype.setStageReference = function(stage) {
                        if (this.stage === stage) return;
                        this.stage = stage;
                        if (this._interactive) this.stage.dirty = true;
                        for (var i = 0, j = this.children.length; i < j; i++) {
                            var child = this.children[i];
                            child.setStageReference(stage);
                        }
                        this.emit('addedToStage');
                    };
                    /**
                     * Removes the current stage reference from the container and all of its children.
                     *
                     * @method removeStageReference
                     */
                    PIXI.DisplayObjectContainer.prototype.removeStageReference = function() {
                        for (var i = 0, j = this.children.length; i < j; i++) {
                            var child = this.children[i];
                            child.removeStageReference();
                        }
                        if (this._interactive) this.stage.dirty = true;
                        this.stage = null;
                        this.emit('removedFromStage');
                    };
                    /**
                     * Renders the object using the WebGL renderer
                     *
                     * @method _renderWebGL
                     * @param renderSession {RenderSession} 
                     * @private
                     */
                    PIXI.DisplayObjectContainer.prototype._renderWebGL = function(renderSession) {
                        if (!this.visible || this.alpha <= 0) return;
                        /*if(this._cacheAsBitmap)
                                    		{
                                    			this._renderCachedSprite(renderSession);
                                    			return;
                                    		}*/
                        var i, j;
                        if (this._mask || this._filters) { // push filter first as we need to ensure the stencil buffer is correct for any masking
                            /* if(this._filters)
                            			{
                            				renderSession.spriteBatch.flush();
                            				renderSession.filterManager.pushFilter(this._filterBlock);
                            			}*/
                            if (this._mask) {
                                renderSession.spriteBatch.stop();
                                renderSession.maskManager.pushMask(this.mask, renderSession);
                                renderSession.spriteBatch.start();
                            } // simple render children!
                            for (i = 0, j = this.children.length; i < j; i++) {
                                this.children[i]._renderWebGL(renderSession);
                            }
                            renderSession.spriteBatch.stop();
                            if (this._mask) renderSession.maskManager.popMask(this._mask, renderSession); //  if(this._filters)renderSession.filterManager.popFilter();
                            renderSession.spriteBatch.start();
                        } else { // simple render children!
                            for (i = 0, j = this.children.length; i < j; i++) {
                                this.children[i]._renderWebGL(renderSession);
                            }
                        }
                    };
                    /**
                     * Renders the object using the Canvas renderer
                     *
                     * @method _renderCanvas
                     * @param renderSession {RenderSession} 
                     * @private
                     */
                    PIXI.DisplayObjectContainer.prototype._renderCanvas = function(renderSession) {
                        if (this.visible === false || this.alpha === 0) return;
                        /*if(this._cacheAsBitmap)
                                    		{

                                    			this._renderCachedSprite(renderSession);
                                    			return;
                                    		}*/
                        if (this._mask) {
                            renderSession.maskManager.pushMask(this._mask, renderSession);
                        }
                        for (var i = 0, j = this.children.length; i < j; i++) {
                            var child = this.children[i];
                            child._renderCanvas(renderSession);
                        }
                        if (this._mask) {
                            renderSession.maskManager.popMask(renderSession);
                        }
                    };
                    /**
                     * @author Mat Groves http://matgroves.com/ @Doormat23
                     */
                    /**
                     * The Sprite object is the base for all textured objects that are rendered to the screen
                     *
                     * @class Sprite
                     * @extends DisplayObjectContainer
                     * @constructor
                     * @param texture {Texture} The texture for this sprite
                     *
                     * A sprite can be created directly from an image like this :
                     * var sprite = new PIXI.Sprite.fromImage('assets/image.png');
                     * yourStage.addChild(sprite);
                     * then obviously don't forget to add it to the stage you have already created
                     */
                    PIXI.Sprite = function(texture) {
                        PIXI.DisplayObjectContainer.call(this);
                        /**
                         * The anchor sets the origin point of the texture.
                         * The default is 0,0 this means the texture's origin is the top left
                         * Setting than anchor to 0.5,0.5 means the textures origin is centered
                         * Setting the anchor to 1,1 would mean the textures origin points will be the bottom right corner
                         *
                         * @property anchor
                         * @type Point
                         */
                        this.anchor = new PIXI.Point();
                        /**
                         * The texture that the sprite is using
                         *
                         * @property texture
                         * @type Texture
                         */
                        this.texture = texture || PIXI.Texture.emptyTexture;
                        /**
                         * The width of the sprite (this is initially set by the texture)
                         *
                         * @property _width
                         * @type Number
                         * @private
                         */
                        this._width = 0;
                        /**
                         * The height of the sprite (this is initially set by the texture)
                         *
                         * @property _height
                         * @type Number
                         * @private
                         */
                        this._height = 0;
                        /**
                         * The tint applied to the sprite. This is a hex value. A value of 0xFFFFFF will remove any tint effect.
                         *
                         * @property tint
                         * @type Number
                         * @default 0xFFFFFF
                         */
                        this.tint = 0xFFFFFF;
                        /**
                         * The blend mode to be applied to the sprite. Set to PIXI.blendModes.NORMAL to remove any blend mode.
                         *
                         * @property blendMode
                         * @type Number
                         * @default PIXI.blendModes.NORMAL;
                         */
                        this.blendMode = PIXI.blendModes.NORMAL;
                        /**
                         * The shader that will be used to render the texture to the stage. Set to null to remove a current shader.
                         *
                         * @property shader
                         * @type AbstractFilter
                         * @default null
                         */
                        this.shader = null;
                        if (this.texture.baseTexture.hasLoaded) {
                            this.onTextureUpdate();
                        } else {
                            this.texture.onPixi('update', this.onTextureUpdate.bind(this));
                        }
                        this.renderable = true;
                    }; // constructor
                    PIXI.Sprite.prototype = Object.create(PIXI.DisplayObjectContainer.prototype);
                    PIXI.Sprite.prototype.constructor = PIXI.Sprite;
                    /**
                     * The width of the sprite, setting this will actually modify the scale to achieve the value set
                     *
                     * @property width
                     * @type Number
                     */
                    Object.defineProperty(PIXI.Sprite.prototype, 'width', {
                        get: function get() {
                            return this.scale.x * this.texture.frame.width;
                        },
                        set: function set(value) {
                            this.scale.x = value / this.texture.frame.width;
                            this._width = value;
                        }
                    });
                    /**
                     * The height of the sprite, setting this will actually modify the scale to achieve the value set
                     *
                     * @property height
                     * @type Number
                     */
                    Object.defineProperty(PIXI.Sprite.prototype, 'height', {
                        get: function get() {
                            return this.scale.y * this.texture.frame.height;
                        },
                        set: function set(value) {
                            this.scale.y = value / this.texture.frame.height;
                            this._height = value;
                        }
                    });
                    /**
                     * Sets the texture of the sprite
                     *
                     * @method setTexture
                     * @param texture {Texture} The PIXI texture that is displayed by the sprite
                     */
                    PIXI.Sprite.prototype.setTexture = function(texture) {
                        this.texture = texture;
                        this.cachedTint = 0xFFFFFF;
                    }; //_total_pixel_mem = 0
                    /**
                     * When the texture is updated, this event will fire to update the scale and frame
                     *
                     * @method onTextureUpdate
                     * @param event
                     * @private
                     */
                    PIXI.Sprite.prototype.onTextureUpdate = function() { // so if _width is 0 then width was not set..
                        if (this._width) this.scale.x = this._width / this.texture.frame.width;
                        if (this._height) this.scale.y = this._height / this.texture.frame.height; //try { 
                        //_total_pixel_mem += (4 * this.texture.baseTexture.width * this.texture.baseTexture.height ) 
                        //console.log("BaseTexture Loaded: ", this.image ? this.image.path : "unknown", this.texture.baseTexture.width, this.texture.baseTexture.height, _total_pixel_mem/(1000*1000) ) 
                        //} catch(e) { }
                        //this.updateFrame = true;
                    };
                    /**
                     * Returns the bounds of the Sprite as a rectangle. The bounds calculation takes the worldTransform into account.
                     *
                     * @method getBounds
                     * @param matrix {Matrix} the transformation matrix of the sprite
                     * @return {Rectangle} the framing rectangle
                     */
                    PIXI.Sprite.prototype.getBounds = function(matrix) {
                        var width = this.texture.frame.width;
                        var height = this.texture.frame.height; // This fixes a race condition where a brand new fetch'd image has been generated
                        // and assigned to a sprite, but we use it's dimensions before it hits the 'loaded' event
                        // that sets its dimensions on a slow 
                        if (!this.texture.baseTexture.hasLoaded && this.image && this.image.width) {
                            width = this.image.width;
                            height = this.image.height;
                        }
                        var w0 = width * (1.0 - this.anchor.x);
                        var w1 = width * -this.anchor.x;
                        var h0 = height * (1.0 - this.anchor.y);
                        var h1 = height * -this.anchor.y;
                        var worldTransform = matrix || this.worldTransform;
                        var a = worldTransform.a;
                        var b = worldTransform.b;
                        var c = worldTransform.c;
                        var d = worldTransform.d;
                        var tx = worldTransform.tx;
                        var ty = worldTransform.ty;
                        var maxX = -Infinity;
                        var maxY = -Infinity;
                        var minX = Infinity;
                        var minY = Infinity;
                        if (b === 0 && c === 0) { // scale may be negative!
                            if (a < 0) a *= -1;
                            if (d < 0) d *= -1; // this means there is no rotation going on right? RIGHT?
                            // if thats the case then we can avoid checking the bound values! yay         
                            minX = a * w1 + tx;
                            maxX = a * w0 + tx;
                            minY = d * h1 + ty;
                            maxY = d * h0 + ty;
                        } else {
                            var x1 = a * w1 + c * h1 + tx;
                            var y1 = d * h1 + b * w1 + ty;
                            var x2 = a * w0 + c * h1 + tx;
                            var y2 = d * h1 + b * w0 + ty;
                            var x3 = a * w0 + c * h0 + tx;
                            var y3 = d * h0 + b * w0 + ty;
                            var x4 = a * w1 + c * h0 + tx;
                            var y4 = d * h0 + b * w1 + ty;
                            minX = x1 < minX ? x1 : minX;
                            minX = x2 < minX ? x2 : minX;
                            minX = x3 < minX ? x3 : minX;
                            minX = x4 < minX ? x4 : minX;
                            minY = y1 < minY ? y1 : minY;
                            minY = y2 < minY ? y2 : minY;
                            minY = y3 < minY ? y3 : minY;
                            minY = y4 < minY ? y4 : minY;
                            maxX = x1 > maxX ? x1 : maxX;
                            maxX = x2 > maxX ? x2 : maxX;
                            maxX = x3 > maxX ? x3 : maxX;
                            maxX = x4 > maxX ? x4 : maxX;
                            maxY = y1 > maxY ? y1 : maxY;
                            maxY = y2 > maxY ? y2 : maxY;
                            maxY = y3 > maxY ? y3 : maxY;
                            maxY = y4 > maxY ? y4 : maxY;
                        }
                        var bounds = this._bounds;
                        bounds.x = minX;
                        bounds.width = maxX - minX;
                        bounds.y = minY;
                        bounds.height = maxY - minY; // store a reference so that if this function gets called again in the render cycle we do not have to recalculate
                        this._currentBounds = bounds;
                        return bounds;
                    };
                    /**
                     * Renders the object using the WebGL renderer
                     *
                     * @method _renderWebGL
                     * @param renderSession {RenderSession}
                     * @private
                     */
                    PIXI.Sprite.prototype._renderWebGL = function(renderSession) { // if the sprite is not visible or the alpha is 0 then no need to render this element
                        if (!this.visible || this.alpha <= 0) return;
                        var i, j; // do a quick check to see if this element has a mask or a filter.
                        if (this._mask || this._filters) {
                            var spriteBatch = renderSession.spriteBatch; // push filter first as we need to ensure the stencil buffer is correct for any masking
                            if (this._filters) {
                                spriteBatch.flush();
                                renderSession.filterManager.pushFilter(this._filterBlock);
                            }
                            if (this._mask) {
                                spriteBatch.stop();
                                renderSession.maskManager.pushMask(this.mask, renderSession);
                                spriteBatch.start();
                            } // add this sprite to the batch
                            spriteBatch.render(this); // now loop through the children and make sure they get rendered
                            for (i = 0, j = this.children.length; i < j; i++) {
                                this.children[i]._renderWebGL(renderSession);
                            } // time to stop the sprite batch as either a mask element or a filter draw will happen next
                            spriteBatch.stop();
                            if (this._mask) renderSession.maskManager.popMask(this._mask, renderSession);
                            if (this._filters) renderSession.filterManager.popFilter();
                            spriteBatch.start();
                        } else {
                            renderSession.spriteBatch.render(this); // simple render children!
                            for (i = 0, j = this.children.length; i < j; i++) {
                                this.children[i]._renderWebGL(renderSession);
                            }
                        }
                    };
                    /**
                     * Renders the object using the Canvas renderer
                     *
                     * @method _renderCanvas
                     * @param renderSession {RenderSession}
                     * @private
                     */
                    PIXI.Sprite.prototype._renderCanvas = function(renderSession) { // If the sprite is not visible or the alpha is 0 then no need to render this element
                        if (this.visible === false || this.alpha === 0 || this.texture.frame.width <= 0 || this.texture.frame.height <= 0) return;
                        if (this.blendMode !== renderSession.currentBlendMode) {
                            renderSession.currentBlendMode = this.blendMode;
                            renderSession.context.globalCompositeOperation = PIXI.blendModesCanvas[renderSession.currentBlendMode];
                        }
                        if (this._mask) {
                            renderSession.maskManager.pushMask(this._mask, renderSession);
                        } //  Ignore null sources
                        if (this.texture.valid && !this.texture.baseTexture.source.isMock) {
                            renderSession.context.globalAlpha = this.worldAlpha; //  If smoothingEnabled is supported and we need to change the smoothing property for this texture
                            if (renderSession.smoothProperty && renderSession.scaleMode !== this.texture.baseTexture.scaleMode) {
                                renderSession.scaleMode = this.texture.baseTexture.scaleMode;
                                renderSession.context[renderSession.smoothProperty] = renderSession.scaleMode === PIXI.scaleModes.LINEAR;
                            } //  If the texture is trimmed we offset by the trim x/y, otherwise we use the frame dimensions
                            var dx = this.texture.trim ? this.texture.trim.x - this.anchor.x * this.texture.trim.width : this.anchor.x * -this.texture.frame.width;
                            var dy = this.texture.trim ? this.texture.trim.y - this.anchor.y * this.texture.trim.height : this.anchor.y * -this.texture.frame.height; //  Allow for pixel rounding
                            /*   if (renderSession.roundPixels)
                            			{*/
                            renderSession.context.setTransform(this.worldTransform.a, this.worldTransform.b, this.worldTransform.c, this.worldTransform.d, this.worldTransform.tx | 0, this.worldTransform.ty | 0);
                            dx = dx | 0;
                            dy = dy | 0;
                            /* }
                                        			else
                                        			{
                                        				renderSession.context.setTransform(
                                        					this.worldTransform.a,
                                        					this.worldTransform.b,
                                        					this.worldTransform.c,
                                        					this.worldTransform.d,
                                        					this.worldTransform.tx,
                                        					this.worldTransform.ty);
                                        			}*/
                            var tx = this.texture;
                            var frame = tx.frame; // Don't tint images pending draw because we will get a blank image saved on tint cache
                            // Also tint things with no _image which is the case of text2
                            var isImgDrawn = !this._image || this._image && (!tx.baseTexture.source[this._image.path] || !tx.baseTexture.source[this._image.path].drawPending);
                            if (this.tint !== 0xFFFFFF && isImgDrawn) {
                                var tintedCanvas = PIXI.CanvasTinter.getTintedTexture(this, this.tint);
                                renderSession.context.drawImage(tintedCanvas, 0, 0, frame.width * tx.resolution << 0, frame.height * tx.resolution << 0, dx, dy, frame.width, frame.height);
                            } else { // docs: context.drawImage(img,sourceX,sourceY,sourceWidth,sourceHeight,destX,destY,destWidth,destHeight);
                                renderSession.context.drawImage(tx.baseTexture.source, frame.x * tx.resolution << 0, frame.y * tx.resolution << 0, frame.width * tx.resolution << 0, frame.height * tx.resolution << 0, dx, dy, frame.width, frame.height);
                            }
                        } // OVERWRITE
                        for (var i = 0, j = this.children.length; i < j; i++) {
                            this.children[i]._renderCanvas(renderSession);
                        }
                        if (this._mask) {
                            renderSession.maskManager.popMask(renderSession);
                        }
                    }; // some helper functions..
                    /**
                     *
                     * Helper function that creates a sprite that will contain a texture from the TextureCache based on the frameId
                     * The frame ids are created when a Texture packer file has been loaded
                     *
                     * @method fromFrame
                     * @static
                     * @param frameId {String} The frame Id of the texture in the cache
                     * @return {Sprite} A new Sprite using a texture from the texture cache matching the frameId
                     */
                    PIXI.Sprite.fromFrame = function(frameId) {
                        var texture = PIXI.TextureCache[frameId];
                        if (!texture) throw new Error('The frameId "' + frameId + '" does not exist in the texture cache' + this);
                        return new PIXI.Sprite(texture);
                    };
                    /**
                     *
                     * Helper function that creates a sprite that will contain a texture based on an image url
                     * If the image is not in the texture cache it will be loaded
                     *
                     * @method fromImage
                     * @static
                     * @param imageId {String} The image url of the texture
                     * @return {Sprite} A new Sprite using a texture from the texture cache matching the image id
                     */
                    PIXI.Sprite.fromImage = function(imageId, crossorigin, scaleMode) {
                        var texture = PIXI.Texture.fromImage(imageId, crossorigin, scaleMode);
                        return new PIXI.Sprite(texture);
                    };
                    /**
                     * @author Mat Groves http://matgroves.com/
                     */
                    /**
                               	 * The SpriteBatch class is a really fast version of the DisplayObjectContainer 
                               	 * built solely for speed, so use when you need a lot of sprites or particles.
                               	 * And it's extremely easy to use : 

                               		var container = new PIXI.SpriteBatch();
                               	 
                               		stage.addChild(container);
                               	 
                               		for(var i  = 0; i < 100; i++)
                               		{
                               			var sprite = new PIXI.Sprite.fromImage("myImage.png");
                               			container.addChild(sprite);
                               		}
                               	 * And here you have a hundred sprites that will be renderer at the speed of light
                               	 *
                               	 * @class SpriteBatch
                               	 * @constructor
                               	 * @param texture {Texture}
                               	 */ //TODO RENAME to PARTICLE CONTAINER?
                    PIXI.SpriteBatch = function() {
                        PIXI.DisplayObjectContainer.call(this);
                        this.ready = false;
                    };
                    PIXI.SpriteBatch.prototype = Object.create(PIXI.DisplayObjectContainer.prototype);
                    PIXI.SpriteBatch.prototype.constructor = PIXI.SpriteBatch;
                    /*
                     * Initialises the spriteBatch
                     *
                     * @method initWebGL
                     * @param gl {WebGLContext} the current WebGL drawing context
                     */
                    PIXI.SpriteBatch.prototype.initWebGL = function(gl) { // TODO only one needed for the whole engine really?
                        this.fastSpriteBatch = new PIXI.WebGLFastSpriteBatch(gl);
                        this.ready = true;
                    };
                    /*
                     * Updates the object transform for rendering
                     *
                     * @method updateTransform
                     * @private
                     */
                    PIXI.SpriteBatch.prototype.updateTransform = function() { // TODO don't need to!
                        this.displayObjectUpdateTransform(); //  PIXI.DisplayObjectContainer.prototype.updateTransform.call( this );
                    };
                    /**
                     * Renders the object using the WebGL renderer
                     *
                     * @method _renderWebGL
                     * @param renderSession {RenderSession} 
                     * @private
                     */
                    PIXI.SpriteBatch.prototype._renderWebGL = function(renderSession) {
                        if (!this.visible || this.alpha <= 0 || !this.children.length) return;
                        if (!this.ready) this.initWebGL(renderSession.gl);
                        renderSession.spriteBatch.stop();
                        renderSession.shaderManager.setShader(renderSession.shaderManager.fastShader);
                        this.fastSpriteBatch.begin(this, renderSession);
                        this.fastSpriteBatch.render(this);
                        renderSession.spriteBatch.start();
                    };
                    /**
                     * Renders the object using the Canvas renderer
                     *
                     * @method _renderCanvas
                     * @param renderSession {RenderSession} 
                     * @private
                     */
                    PIXI.SpriteBatch.prototype._renderCanvas = function(renderSession) {
                        if (!this.visible || this.alpha <= 0 || !this.children.length) return;
                        var context = renderSession.context;
                        context.globalAlpha = this.worldAlpha;
                        this.displayObjectUpdateTransform();
                        var transform = this.worldTransform; // alow for trimming
                        var isRotated = true;
                        for (var i = 0; i < this.children.length; i++) {
                            var child = this.children[i];
                            if (!child.visible) continue;
                            var texture = child.texture;
                            var frame = texture.frame;
                            context.globalAlpha = this.worldAlpha * child.alpha; //BMA-FIXME: Fix for texture ratios
                            if (child.rotation % (Math.PI * 2) === 0) {
                                if (isRotated) {
                                    context.setTransform(transform.a, transform.b, transform.c, transform.d, transform.tx, transform.ty);
                                    isRotated = false;
                                } // this is the fastest  way to optimise! - if rotation is 0 then we can avoid any kind of setTransform call
                                context.drawImage(texture.baseTexture.source, frame.x, frame.y, frame.width, frame.height, child.anchor.x * (-frame.width * child.scale.x) + child.position.x + 0.5 | 0, child.anchor.y * (-frame.height * child.scale.y) + child.position.y + 0.5 | 0, frame.width * child.scale.x, frame.height * child.scale.y);
                            } else {
                                if (!isRotated) isRotated = true;
                                child.displayObjectUpdateTransform();
                                var childTransform = child.worldTransform; // allow for trimming
                                /*            if (renderSession.roundPixels)
                                				{*/
                                context.setTransform(childTransform.a, childTransform.b, childTransform.c, childTransform.d, childTransform.tx | 0, childTransform.ty | 0);
                                /*}
                                            				else
                                            				{
                                            					context.setTransform(childTransform.a, childTransform.b, childTransform.c, childTransform.d, childTransform.tx, childTransform.ty);
                                            				}*/
                                context.drawImage(texture.baseTexture.source, frame.x, frame.y, frame.width, frame.height, child.anchor.x * -frame.width + 0.5 | 0, child.anchor.y * -frame.height + 0.5 | 0, frame.width, frame.height);
                            } // context.restore();
                        } //    context.restore();
                    };
                    /**
                     * @author Mat Groves http://matgroves.com/ @Doormat23
                     * Modified by Tom Slezakowski http://www.tomslezakowski.com @TomSlezakowski (24/03/2014) - Added dropShadowColor.
                     */
                    /**
                     * A Text Object will create a line or multiple lines of text. To split a line you can use '\n' in your text string,
                     * or add a wordWrap property set to true and and wordWrapWidth property with a value in the style object.
                     *
                     * @class Text
                     * @extends Sprite
                     * @constructor
                     * @param text {String} The copy that you would like the text to display
                     * @param [style] {Object} The style parameters
                     * @param [style.font] {String} default 'bold 20px Arial' The style and size of the font
                     * @param [style.fill='black'] {String|Number} A canvas fillstyle that will be used on the text e.g 'red', '#00FF00'
                     * @param [style.align='left'] {String} Alignment for multiline text ('left', 'center' or 'right'), does not affect single line text
                     * @param [style.stroke] {String|Number} A canvas fillstyle that will be used on the text stroke e.g 'blue', '#FCFF00'
                     * @param [style.strokeThickness=0] {Number} A number that represents the thickness of the stroke. Default is 0 (no stroke)
                     * @param [style.wordWrap=false] {Boolean} Indicates if word wrap should be used
                     * @param [style.wordWrapWidth=100] {Number} The width at which text will wrap, it needs wordWrap to be set to true
                     * @param [style.dropShadow=false] {Boolean} Set a drop shadow for the text
                     * @param [style.dropShadowColor='#000000'] {String} A fill style to be used on the dropshadow e.g 'red', '#00FF00'
                     * @param [style.dropShadowAngle=Math.PI/4] {Number} Set a angle of the drop shadow
                     * @param [style.dropShadowDistance=5] {Number} Set a distance of the drop shadow
                     */
                    PIXI.Text = function(text, style) {
                        /**
                         * The canvas element that everything is drawn to
                         *
                         * @property canvas
                         * @type HTMLCanvasElement
                         */
                        this.canvas = document.createElement('canvas');
                        /**
                         * The canvas 2d context that everything is drawn with
                         * @property context
                         * @type HTMLCanvasElement
                         */
                        this.context = this.canvas.getContext('2d');
                        PIXI.Sprite.call(this, PIXI.Texture.fromCanvas(this.canvas));
                        this.setText(text);
                        this.setStyle(style);
                    }; // constructor
                    PIXI.Text.prototype = Object.create(PIXI.Sprite.prototype);
                    PIXI.Text.prototype.constructor = PIXI.Text;
                    /**
                     * The width of the Text, setting this will actually modify the scale to achieve the value set
                     *
                     * @property width
                     * @type Number
                     */
                    Object.defineProperty(PIXI.Text.prototype, 'width', {
                        get: function get() {
                            if (this.dirty) {
                                this.updateText();
                                this.dirty = false;
                            }
                            return this.scale.x * this.texture.frame.width;
                        },
                        set: function set(value) {
                            this.scale.x = value / this.texture.frame.width;
                            this._width = value;
                        }
                    });
                    /**
                     * The height of the Text, setting this will actually modify the scale to achieve the value set
                     *
                     * @property height
                     * @type Number
                     */
                    Object.defineProperty(PIXI.Text.prototype, 'height', {
                        get: function get() {
                            if (this.dirty) {
                                this.updateText();
                                this.dirty = false;
                            }
                            return this.scale.y * this.texture.frame.height;
                        },
                        set: function set(value) {
                            this.scale.y = value / this.texture.frame.height;
                            this._height = value;
                        }
                    });
                    /**
                     * Set the style of the text
                     *
                     * @method setStyle
                     * @param [style] {Object} The style parameters
                     * @param [style.font='bold 20pt Arial'] {String} The style and size of the font
                     * @param [style.fill='black'] {Object} A canvas fillstyle that will be used on the text eg 'red', '#00FF00'
                     * @param [style.align='left'] {String} Alignment for multiline text ('left', 'center' or 'right'), does not affect single line text
                     * @param [style.stroke='black'] {String} A canvas fillstyle that will be used on the text stroke eg 'blue', '#FCFF00'
                     * @param [style.strokeThickness=0] {Number} A number that represents the thickness of the stroke. Default is 0 (no stroke)
                     * @param [style.wordWrap=false] {Boolean} Indicates if word wrap should be used
                     * @param [style.wordWrapWidth=100] {Number} The width at which text will wrap
                     * @param [style.dropShadow=false] {Boolean} Set a drop shadow for the text
                     * @param [style.dropShadowColor='#000000'] {String} A fill style to be used on the dropshadow e.g 'red', '#00FF00'
                     * @param [style.dropShadowAngle=Math.PI/4] {Number} Set a angle of the drop shadow
                     * @param [style.dropShadowDistance=5] {Number} Set a distance of the drop shadow
                     */
                    PIXI.Text.prototype.setStyle = function(style) {
                        style = style || {};
                        style.font = style.font || 'bold 20pt Arial';
                        style.fill = style.fill || 'black';
                        style.align = style.align || 'left';
                        style.stroke = style.stroke || 'black'; //provide a default, see: https://github.com/GoodBoyDigital/pixi.js/issues/136
                        style.strokeThickness = style.strokeThickness || 0;
                        style.wordWrap = style.wordWrap || false;
                        style.wordWrapWidth = style.wordWrapWidth || 100;
                        style.dropShadow = style.dropShadow || false;
                        style.dropShadowAngle = style.dropShadowAngle || Math.PI / 6;
                        style.dropShadowDistance = style.dropShadowDistance || 4;
                        style.dropShadowColor = style.dropShadowColor || 'black';
                        this.style = style;
                        this.dirty = true;
                    };
                    /**
                     * Set the copy for the text object. To split a line you can use '\n'.
                     *
                     * @method setText
                     * @param text {String} The copy that you would like the text to display
                     */
                    PIXI.Text.prototype.setText = function(text) {
                        if (this.text != text.toString()) {
                            this.text = text.toString() || ' ';
                            this.dirty = true;
                            window.dirtyOnce = true;
                        }
                    };
                    /**
                     * Renders text and updates it when needed
                     *
                     * @method updateText
                     * @private
                     */
                    PIXI.Text.prototype.updateText = function() {
                        this.context.font = this.style._font || this.style.font;
                        var outputText = this.text.toString(); // word wrap
                        // preserve original text
                        if (this.style.wordWrap) outputText = this.wordWrap(this.text); //split text into lines
                        var lines = outputText ? outputText.split(/(?:\r\n|\r|\n)/) : []; //calculate text width
                        var lineWidths = [];
                        var maxLineWidth = 0;
                        var fontProperties = this.determineFontProperties(this.style._font || this.style.font);
                        for (var i = 0; i < lines.length; i++) {
                            var lineWidth = this.context.measureText(lines[i]).width;
                            lineWidths[i] = lineWidth;
                            maxLineWidth = Math.max(maxLineWidth, lineWidth);
                        }
                        var width = maxLineWidth + this.style.strokeThickness;
                        if (this.style.dropShadow) width += this.style.dropShadowDistance;
                        this.canvas.width = Math.max(width + this.context.lineWidth, 1); //calculate text height
                        var lineHeight = fontProperties.fontSize + this.style.strokeThickness;
                        var height = lineHeight * lines.length;
                        if (this.style.dropShadow) height += this.style.dropShadowDistance;
                        this.canvas.height = Math.max(height, 1);
                        this.context.scale(1, 1);
                        this.context.font = this.style._font || this.style.font;
                        this.context.strokeStyle = this.style.stroke;
                        this.context.lineWidth = this.style.strokeThickness;
                        this.context.textBaseline = 'alphabetic'; //this.context.lineJoin = 'round';
                        var linePositionX;
                        var linePositionY;
                        if (this.style.dropShadow) {
                            this.context.fillStyle = this.style.dropShadowColor;
                            var xShadowOffset = Math.sin(this.style.dropShadowAngle) * this.style.dropShadowDistance;
                            var yShadowOffset = Math.cos(this.style.dropShadowAngle) * this.style.dropShadowDistance;
                            for (i = 0; i < lines.length; i++) {
                                linePositionX = this.style.strokeThickness / 2;
                                linePositionY = this.style.strokeThickness / 2 + i * lineHeight + fontProperties.ascent;
                                if (this.style.align === 'right') {
                                    linePositionX += maxLineWidth - lineWidths[i];
                                } else if (this.style.align === 'center') {
                                    linePositionX += (maxLineWidth - lineWidths[i]) / 2;
                                }
                                if (this.style.fill) { //this.context.fillText(lines[i], linePositionX + xShadowOffset*.7, linePositionY + yShadowOffset*.7);
                                    this.context.fillText(lines[i], linePositionX + xShadowOffset, linePositionY + yShadowOffset);
                                } //  if(dropShadow)
                            }
                        } //set canvas text styles
                        this.context.fillStyle = this.style.fill; //draw lines line by line
                        for (i = 0; i < lines.length; i++) {
                            linePositionX = this.style.strokeThickness / 2;
                            linePositionY = this.style.strokeThickness / 2 + i * lineHeight + fontProperties.ascent;
                            if (this.style.align === 'right') {
                                linePositionX += maxLineWidth - lineWidths[i];
                            } else if (this.style.align === 'center') {
                                linePositionX += (maxLineWidth - lineWidths[i]) / 2;
                            }
                            if (this.style.stroke && this.style.strokeThickness) {
                                this.context.strokeText(lines[i], linePositionX, linePositionY);
                            }
                            if (this.style.fill) {
                                this.context.fillText(lines[i], linePositionX, linePositionY);
                            } //  if(dropShadow)
                        }
                        this.updateTexture();
                    };
                    /**
                     * Updates texture size based on canvas size
                     *
                     * @method updateTexture
                     * @private
                     */
                    PIXI.Text.prototype.updateTexture = function() {
                        try {
                            if (typeof this._lastSize !== 'undefined') {
                                PIXI.frvrTextureMemoryUsage -= 4 * this._lastSize.w * this._lastSize.h;
                            }
                        } catch (e) {}
                        this.texture.baseTexture.width = this.canvas.width;
                        this.texture.baseTexture.height = this.canvas.height;
                        this.texture.frame.width = this.canvas.width;
                        this.texture.frame.height = this.canvas.height;
                        this._width = this.canvas.width;
                        this._height = this.canvas.height;
                        try {
                            PIXI.frvrTextureMemoryUsage += 4 * this.texture.baseTexture.width * this.texture.baseTexture.height;
                            this._lastSize = {
                                w: this.texture.baseTexture.width,
                                h: this.texture.baseTexture.height
                            };
                        } catch (e) {} // update the dirty base textures
                        this.texture.baseTexture.dirty();
                        this.texture.tintCache = [];
                    };
                    /**
                     * Renders the object using the WebGL renderer
                     *
                     * @method _renderWebGL
                     * @param renderSession {RenderSession} 
                     * @private
                     */
                    PIXI.Text.prototype._renderWebGL = function(renderSession) {
                        if (this.dirty) {
                            this.updateText();
                            this.dirty = false;
                        }
                        PIXI.Sprite.prototype._renderWebGL.call(this, renderSession);
                    };
                    /**
                     * Renders the object using the Canvas renderer
                     *
                     * @method _renderCanvas
                     * @param renderSession {RenderSession} 
                     * @private
                     */
                    PIXI.Text.prototype._renderCanvas = function(renderSession) {
                        if (this.dirty) {
                            this.updateText();
                            this.dirty = false;
                        }
                        PIXI.Sprite.prototype._renderCanvas.call(this, renderSession);
                    };
                    /**
                     * Calculates the ascent, descent and fontSize of a given fontStyle
                     *
                     * @method determineFontProperties
                     * @param fontStyle {Object}
                     * @private
                     */
                    PIXI.Text.prototype.determineFontProperties = function(fontStyle) {
                        var properties = PIXI.Text.fontPropertiesCache[fontStyle];
                        if (!properties) {
                            properties = {};
                            var canvas = PIXI.Text.fontPropertiesCanvas;
                            var context = PIXI.Text.fontPropertiesContext;
                            context.font = fontStyle;
                            var width = Math.max(Math.ceil(context.measureText('|MÃq').width), 1);
                            var baseline = Math.ceil(context.measureText('M').width);
                            var height = Math.max(2 * baseline, 1);
                            baseline = baseline * 1.4 | 0;
                            canvas.width = width;
                            canvas.height = height;
                            context.fillStyle = '#ffffff';
                            context.fillRect(0, 0, width, height);
                            context.font = fontStyle;
                            context.textBaseline = 'alphabetic';
                            context.fillStyle = '#888888';
                            context.fillText('|MÃq', 0, baseline);
                            var imagedata = context.getImageData(0, 0, width, height).data;
                            var pixels = imagedata.length;
                            var line = width * 4;
                            var i, j;
                            var idx = 0;
                            var stop = false; // ascent. scan from top to bottom until we find a non red pixel
                            for (i = 0; i < baseline; i++) {
                                for (j = 0; j < line; j += 4) {
                                    if (imagedata[idx + j] !== 255) {
                                        stop = true;
                                        break;
                                    }
                                }
                                if (!stop) {
                                    idx += line;
                                } else {
                                    break;
                                }
                            }
                            properties.ascent = baseline - i;
                            idx = pixels - line;
                            stop = false; // descent. scan from bottom to top until we find a non red pixel
                            for (i = height; i > baseline; i--) {
                                for (j = 0; j < line; j += 4) {
                                    if (imagedata[idx + j] !== 255) {
                                        stop = true;
                                        break;
                                    }
                                }
                                if (!stop) {
                                    idx -= line;
                                } else {
                                    break;
                                }
                            }
                            properties.descent = i - baseline; //TODO might need a tweak. kind of a temp fix!
                            //properties.descent += 6;
                            properties.fontSize = properties.ascent + properties.descent;
                            PIXI.Text.fontPropertiesCache[fontStyle] = properties;
                        }
                        return properties;
                    };
                    /**
                     * Applies newlines to a string to have it optimally fit into the horizontal
                     * bounds set by the Text object's wordWrapWidth property.
                     *
                     * @method wordWrap
                     * @param text {String}
                     * @private
                     */
                    PIXI.Text.prototype.wordWrap = function(text) { // Greedy wrapping algorithm that will wrap words as the line grows longer
                        // than its horizontal bounds.
                        var result = '';
                        var lines = text.split('\n');
                        for (var i = 0; i < lines.length; i++) {
                            var spaceLeft = this.style.wordWrapWidth;
                            var words = lines[i].split(' ');
                            for (var j = 0; j < words.length; j++) {
                                var wordWidth = this.context.measureText(words[j]).width;
                                var wordWidthWithSpace = wordWidth + this.context.measureText(' ').width;
                                if (j === 0 || wordWidthWithSpace > spaceLeft) { // Skip printing the newline if it's the first word of the line that is
                                    // greater than the word wrap width.
                                    if (j > 0) {
                                        result += '\n';
                                    }
                                    result += words[j];
                                    spaceLeft = this.style.wordWrapWidth - wordWidth;
                                } else {
                                    spaceLeft -= wordWidthWithSpace;
                                    result += ' ' + words[j];
                                }
                            }
                            if (i < lines.length - 1) {
                                result += '\n';
                            }
                        }
                        return result;
                    };
                    /**
                     * Returns the bounds of the Text as a rectangle. The bounds calculation takes the worldTransform into account.
                     *
                     * @method getBounds
                     * @param matrix {Matrix} the transformation matrix of the Text
                     * @return {Rectangle} the framing rectangle
                     */
                    PIXI.Text.prototype.getBounds = function(matrix) {
                        if (this.dirty) {
                            this.updateText();
                            this.dirty = false;
                        }
                        return PIXI.Sprite.prototype.getBounds.call(this, matrix);
                    };
                    /**
                     * Destroys this text object.
                     *
                     * @method destroy
                     * @param destroyBaseTexture {Boolean} whether to destroy the base texture as well
                     */
                    PIXI.Text.prototype.destroy = function(destroyBaseTexture) { // make sure to reset the the context and canvas.. dont want this hanging around in memory!
                        this.context = null;
                        this.canvas = null;
                        this.texture.destroy(destroyBaseTexture === undefined ? true : destroyBaseTexture);
                    };
                    PIXI.Text.fontPropertiesCache = {};
                    PIXI.Text.fontPropertiesCanvas = document.createElement('canvas');
                    PIXI.Text.fontPropertiesContext = PIXI.Text.fontPropertiesCanvas.getContext('2d');
                    /**
                     * @author Mat Groves http://matgroves.com/ @Doormat23
                     */
                    /**
                     * Holds all information related to an Interaction event
                     *
                     * @class InteractionData
                     * @constructor
                     */
                    PIXI.InteractionData = function() {
                        /**
                         * This point stores the global coords of where the touch/mouse event happened
                         *
                         * @property global
                         * @type Point
                         */
                        this.global = new PIXI.Point();
                        /**
                         * The target Sprite that was interacted with
                         *
                         * @property target
                         * @type Sprite
                         */
                        this.target = null;
                        /**
                         * When passed to an event handler, this will be the original DOM Event that was captured
                         *
                         * @property originalEvent
                         * @type Event
                         */
                        this.originalEvent = null;
                    };
                    /**
                     * This will return the local coordinates of the specified displayObject for this InteractionData
                     *
                     * @method getLocalPosition
                     * @param displayObject {DisplayObject} The DisplayObject that you would like the local coords off
                     * @param [point] {Point} A Point object in which to store the value, optional (otherwise will create a new point)
                     * @return {Point} A point containing the coordinates of the InteractionData position relative to the DisplayObject
                     */
                    PIXI.InteractionData.prototype.getLocalPosition = function(displayObject, point) {
                        var worldTransform = displayObject.worldTransform;
                        var global = this.global; // do a cheeky transform to get the mouse coords;
                        var a00 = worldTransform.a,
                            a01 = worldTransform.c,
                            a02 = worldTransform.tx,
                            a10 = worldTransform.b,
                            a11 = worldTransform.d,
                            a12 = worldTransform.ty,
                            id = 1 / (a00 * a11 + a01 * -a10);
                        point = point || new PIXI.Point();
                        point.x = a11 * id * global.x + -a01 * id * global.y + (a12 * a01 - a02 * a11) * id;
                        point.y = a00 * id * global.y + -a10 * id * global.x + (-a12 * a00 + a02 * a10) * id; // set the mouse coords...
                        return point;
                    }; // constructor
                    PIXI.InteractionData.prototype.constructor = PIXI.InteractionData;
                    /**
                     * @author Mat Groves http://matgroves.com/ @Doormat23
                     */
                    /**
                     * The interaction manager deals with mouse and touch events. Any DisplayObject can be interactive
                     * if its interactive parameter is set to true
                     * This manager also supports multitouch.
                     *
                     * @class InteractionManager
                     * @constructor
                     * @param stage {Stage} The stage to handle interactions
                     */
                    PIXI.InteractionManager = function(stage) {
                        /**
                         * A reference to the stage
                         *
                         * @property stage
                         * @type Stage
                         */
                        this.stage = stage;
                        /**
                         * The mouse data
                         *
                         * @property mouse
                         * @type InteractionData
                         */
                        this.mouse = new PIXI.InteractionData();
                        /**
                         * An object that stores current touches (InteractionData) by id reference
                         *
                         * @property touches
                         * @type Object
                         */
                        this.touches = {};
                        /**
                         * @property tempPoint
                         * @type Point
                         * @private
                         */
                        this.tempPoint = new PIXI.Point();
                        /**
                         * @property mouseoverEnabled
                         * @type Boolean
                         * @default
                         */
                        this.mouseoverEnabled = true;
                        /**
                         * Tiny little interactiveData pool !
                         *
                         * @property pool
                         * @type Array
                         */
                        this.pool = [];
                        /**
                         * An array containing all the iterative items from the our interactive tree
                         * @property interactiveItems
                         * @type Array
                         * @private
                         */
                        this.interactiveItems = [];
                        /**
                         * Our canvas
                         * @property interactionDOMElement
                         * @type HTMLCanvasElement
                         * @private
                         */
                        this.interactionDOMElement = null; //this will make it so that you don't have to call bind all the time
                        /**
                         * @property onMouseMove
                         * @type Function
                         */
                        this.onMouseMove = this.onMouseMove.bind(this);
                        /**
                         * @property onMouseDown
                         * @type Function
                         */
                        this.onMouseDown = this.onMouseDown.bind(this);
                        /**
                         * @property onMouseOut
                         * @type Function
                         */
                        this.onMouseOut = this.onMouseOut.bind(this);
                        /**
                         * @property onMouseUp
                         * @type Function
                         */
                        this.onMouseUp = this.onMouseUp.bind(this);
                        /**
                         * @property onTouchStart
                         * @type Function
                         */
                        this.onTouchStart = this.onTouchStart.bind(this);
                        /**
                         * @property onTouchEnd
                         * @type Function
                         */
                        this.onTouchEnd = this.onTouchEnd.bind(this);
                        /**
                         * @property onTouchMove
                         * @type Function
                         */
                        this.onTouchMove = this.onTouchMove.bind(this);
                        /**
                         * @property last
                         * @type Number
                         */
                        this.last = 0;
                        /**
                         * The css style of the cursor that is being used
                         * @property currentCursorStyle
                         * @type String
                         */
                        this.currentCursorStyle = 'inherit';
                        /**
                         * Is set to true when the mouse is moved out of the canvas
                         * @property mouseOut
                         * @type Boolean
                         */
                        this.mouseOut = false; // used for hit testing
                        this._tempPoint = new PIXI.Point();
                    }; // constructor
                    PIXI.InteractionManager.prototype.constructor = PIXI.InteractionManager;
                    /**
                     * Collects an interactive sprite recursively to have their interactions managed
                     *
                     * @method collectInteractiveSprite
                     * @param displayObject {DisplayObject} the displayObject to collect
                     * @param iParent {DisplayObject} the display object's parent
                     * @private
                     */
                    PIXI.InteractionManager.prototype.collectInteractiveSprite = function(displayObject, iParent) {
                        var children = displayObject.children;
                        var length = children.length; // make an interaction tree... {item.__interactiveParent}
                        for (var i = length - 1; i >= 0; i--) {
                            var child = children[i]; // push all interactive bits
                            if (child._interactive) {
                                iParent.interactiveChildren = true; //child.__iParent = iParent;
                                this.interactiveItems.push(child);
                                if (child.children.length > 0) {
                                    this.collectInteractiveSprite(child, child);
                                }
                            } else {
                                child.__iParent = null;
                                if (child.children.length > 0) {
                                    this.collectInteractiveSprite(child, iParent);
                                }
                            }
                        }
                    };
                    /**
                     * Sets the target for event delegation
                     *
                     * @method setTarget
                     * @param target {WebGLRenderer|CanvasRenderer} the renderer to bind events to
                     * @private
                     */
                    PIXI.InteractionManager.prototype.setTarget = function(target) {
                        this.target = target; // Check if the dom element has been set. If it has don't do anything.
                        if (this.interactionDOMElement !== null) return; //console.log(target.view)
                        this.setTargetDomElement(target.view);
                    };
                    /**
                     * Sets the DOM element which will receive mouse/touch events. This is useful for when you have other DOM
                     * elements on top of the renderers Canvas element. With this you'll be able to delegate another DOM element
                     * to receive those events
                     *
                     * @method setTargetDomElement
                     * @param domElement {DOMElement} the DOM element which will receive mouse and touch events
                     * @private
                     */
                    PIXI.InteractionManager.prototype.setTargetDomElement = function(domElement) {
                        this.removeEvents();
                        if (window.navigator.msPointerEnabled) { // time to remove some of that zoom in ja..
                            domElement.style['-ms-content-zooming'] = 'none';
                            domElement.style['-ms-touch-action'] = 'none';
                        }
                        this.interactionDOMElement = domElement;
                        domElement.addEventListener('mousemove', this.onMouseMove, true);
                        domElement.addEventListener('mousedown', this.onMouseDown, true);
                        domElement.addEventListener('mouseout', this.onMouseOut, true); // aint no multi touch just yet!
                        domElement.addEventListener('touchstart', this.onTouchStart, true);
                        domElement.addEventListener('touchend', this.onTouchEnd, true);
                        domElement.addEventListener('touchmove', this.onTouchMove, true);
                        window.addEventListener('mouseup', this.onMouseUp, true);
                    };
                    /**
                     * @method removeEvents
                     * @private
                     */
                    PIXI.InteractionManager.prototype.removeEvents = function() {
                        if (!this.interactionDOMElement) return;
                        this.interactionDOMElement.style['-ms-content-zooming'] = '';
                        this.interactionDOMElement.style['-ms-touch-action'] = '';
                        this.interactionDOMElement.removeEventListener('mousemove', this.onMouseMove, true);
                        this.interactionDOMElement.removeEventListener('mousedown', this.onMouseDown, true);
                        this.interactionDOMElement.removeEventListener('mouseout', this.onMouseOut, true); // aint no multi touch just yet!
                        this.interactionDOMElement.removeEventListener('touchstart', this.onTouchStart, true);
                        this.interactionDOMElement.removeEventListener('touchend', this.onTouchEnd, true);
                        this.interactionDOMElement.removeEventListener('touchmove', this.onTouchMove, true);
                        this.interactionDOMElement = null;
                        window.removeEventListener('mouseup', this.onMouseUp, true);
                    };
                    /**
                     * updates the state of interactive objects
                     *
                     * @method update
                     * @private
                     */
                    PIXI.InteractionManager.prototype.update = function() {
                        if (!this.target) return; // frequency of 30fps??
                        var now = Date.now();
                        var diff = now - this.last;
                        diff = diff * PIXI.INTERACTION_FREQUENCY / 1000;
                        if (diff < 1) return;
                        this.last = now;
                        var i = 0; // ok.. so mouse events??
                        // yes for now :)
                        // OPTIMISE - how often to check??
                        if (this.dirty) {
                            this.rebuildInteractiveGraph();
                        } // loop through interactive objects!
                        var length = this.interactiveItems.length;
                        var cursor = 'inherit';
                        var over = false;
                        for (i = 0; i < length; i++) {
                            var item = this.interactiveItems[i]; // OPTIMISATION - only calculate every time if the mousemove function exists..
                            // OK so.. does the object have any other interactive functions?
                            // hit-test the clip!
                            // if (item.mouseover || item.mouseout || item.buttonMode)
                            // {
                            // ok so there are some functions so lets hit test it..
                            item.__hit = this.hitTest(item, this.mouse);
                            this.mouse.target = item; // ok so deal with interactions..
                            // looks like there was a hit!
                            if (item.__hit && !over) {
                                if (item.buttonMode) cursor = item.defaultCursor;
                                if (!item.interactiveChildren) {
                                    over = true;
                                }
                                if (!item.__isOver) {
                                    if (item.mouseover) {
                                        item.mouseover(this.mouse);
                                    }
                                    item.__isOver = true;
                                }
                            } else {
                                if (item.__isOver) { // roll out!
                                    if (item.mouseout) {
                                        item.mouseout(this.mouse);
                                    }
                                    item.__isOver = false;
                                }
                            }
                        }
                        if (this.currentCursorStyle !== cursor && !XS.ignoreCursorChanges) {
                            this.currentCursorStyle = cursor;
                            this.interactionDOMElement.style.cursor = cursor;
                        }
                    };
                    /**
                     * @method rebuildInteractiveGraph
                     * @private
                     */
                    PIXI.InteractionManager.prototype.rebuildInteractiveGraph = function() {
                        this.dirty = false;
                        var len = this.interactiveItems.length;
                        for (var i = 0; i < len; i++) {
                            this.interactiveItems[i].interactiveChildren = false;
                        }
                        this.interactiveItems = [];
                        if (this.stage.interactive) {
                            this.interactiveItems.push(this.stage);
                        } // Go through and collect all the objects that are interactive..
                        this.collectInteractiveSprite(this.stage, this.stage);
                    };
                    /**
                     * Is called when the mouse moves across the renderer element
                     *
                     * @method onMouseMove
                     * @param event {Event} The DOM event of the mouse moving
                     * @private
                     */
                    PIXI.InteractionManager.prototype.onMouseMove = function(event) {
                        if (this.dirty) {
                            this.rebuildInteractiveGraph();
                        }
                        if (!this.mouse) return;
                        this.mouse.originalEvent = event; // TODO optimize by not check EVERY TIME! maybe half as often? //
                        var rect = this.interactionDOMElement.getBoundingClientRect();
                        this.mouse.global.x = (event.clientX - rect.left) * (this.target.width / rect.width);
                        this.mouse.global.y = (event.clientY - rect.top) * (this.target.height / rect.height);
                        var length = this.interactiveItems.length;
                        for (var i = 0; i < length; i++) {
                            var item = this.interactiveItems[i]; // Call the function!
                            if (item.mousemove) {
                                item.mousemove(this.mouse);
                            }
                        }
                    };
                    /**
                     * Is called when the mouse button is pressed down on the renderer element
                     *
                     * @method onMouseDown
                     * @param event {Event} The DOM event of a mouse button being pressed down
                     * @private
                     */
                    PIXI.InteractionManager.prototype.onMouseDown = function(event) { //console.log("Mouse down")
                        if (this.dirty) {
                            this.rebuildInteractiveGraph();
                        }
                        if (!this.mouse) return;
                        this.mouse.originalEvent = event;
                        if (PIXI.AUTO_PREVENT_DEFAULT && this.mouse.originalEvent) {
                            if (this.mouse.originalEvent.cancelable === undefined || this.mouse.originalEvent.cancelable) {
                                this.mouse.originalEvent.preventDefault();
                            }
                        } // loop through interaction tree...
                        // hit test each item! ->
                        // get interactive items under point??
                        //stage.__i
                        var length = this.interactiveItems.length;
                        var e = this.mouse.originalEvent;
                        var isRightButton = e.button === 2 || e.which === 3;
                        var downFunction = isRightButton ? 'rightdown' : 'mousedown';
                        var clickFunction = isRightButton ? 'rightclick' : '__click';
                        var buttonIsDown = isRightButton ? '__rightIsDown' : '__mouseIsDown';
                        var isDown = isRightButton ? '__isRightDown' : '__isDown'; // while
                        // hit test
                        for (var i = 0; i < length; i++) {
                            var item = this.interactiveItems[i];
                            if (item[downFunction] || item[clickFunction]) {
                                item[buttonIsDown] = true;
                                item.__hit = this.hitTest(item, this.mouse);
                                if (item.__hit) { //call the function!
                                    if (item[downFunction]) {
                                        item[downFunction](this.mouse);
                                    }
                                    item[isDown] = true; // just the one!
                                    if (!item.interactiveChildren) break;
                                }
                            }
                        }
                    };
                    /**
                     * Is called when the mouse is moved out of the renderer element
                     *
                     * @method onMouseOut
                     * @param event {Event} The DOM event of a mouse being moved out
                     * @private
                     */
                    PIXI.InteractionManager.prototype.onMouseOut = function(event) { //console.log("Mouse out")
                        if (this.dirty) {
                            this.rebuildInteractiveGraph();
                        }
                        if (!this.mouse) return;
                        this.mouse.originalEvent = event;
                        var length = this.interactiveItems.length;
                        this.interactionDOMElement.style.cursor = 'inherit';
                        for (var i = 0; i < length; i++) {
                            var item = this.interactiveItems[i];
                            if (item.__isOver) {
                                this.mouse.target = item;
                                if (item.mouseout) {
                                    item.mouseout(this.mouse);
                                }
                                item.__isOver = false;
                            }
                        }
                        this.mouseOut = true; // move the mouse to an impossible position
                        /*this.mouse.global.x = -10000;
                        		this.mouse.global.y = -10000;*/
                    };
                    /**
                     * Is called when the mouse button is released on the renderer element
                     *
                     * @method onMouseUp
                     * @param event {Event} The DOM event of a mouse button being released
                     * @private
                     */
                    PIXI.InteractionManager.prototype.onMouseUp = function(event) { //console.log("Mouse up")
                        if (this.dirty) {
                            this.rebuildInteractiveGraph();
                        }
                        if (!this.mouse) return;
                        this.mouse.originalEvent = event;
                        var length = this.interactiveItems.length;
                        var up = false;
                        var e = this.mouse.originalEvent;
                        var isRightButton = e.button === 2 || e.which === 3;
                        var upFunction = isRightButton ? 'rightup' : 'mouseup';
                        var clickFunction = isRightButton ? 'rightclick' : '__click';
                        var upOutsideFunction = isRightButton ? 'rightupoutside' : 'mouseupoutside';
                        var isDown = isRightButton ? '__isRightDown' : '__isDown';
                        for (var i = 0; i < length; i++) {
                            var item = this.interactiveItems[i];
                            if (item[clickFunction] || item[upFunction] || item[upOutsideFunction]) {
                                item.__hit = this.hitTest(item, this.mouse);
                                if (item.__hit && !up) { //call the function!
                                    if (item[upFunction]) {
                                        item[upFunction](this.mouse);
                                    }
                                    if (item[isDown]) {
                                        if (item[clickFunction]) {
                                            item[clickFunction](this.mouse);
                                        }
                                    }
                                    if (!item.interactiveChildren) {
                                        up = true;
                                    }
                                } else {
                                    if (item[isDown]) {
                                        if (item[upOutsideFunction]) item[upOutsideFunction](this.mouse);
                                    }
                                }
                                item[isDown] = false;
                            }
                        }
                    };
                    /**
                     * Tests if the current mouse coordinates hit a sprite
                     *
                     * @method hitTest
                     * @param item {DisplayObject} The displayObject to test for a hit
                     * @param interactionData {InteractionData} The interactionData object to update in the case there is a hit
                     * @private
                     */
                    PIXI.InteractionManager.prototype.hitTest = function(item, interactionData) {
                        var global = interactionData.global;
                        if (!item.worldVisible) {
                            return false;
                        } // map the global point to local space.
                        item.worldTransform.applyInverse(global, this._tempPoint);
                        var x = this._tempPoint.x,
                            y = this._tempPoint.y,
                            i;
                        interactionData.target = item; //a sprite or display object with a hit area defined
                        if (item.hitArea && item.hitArea.contains) {
                            return item.hitArea.contains(x, y);
                        } // a sprite with no hitarea defined
                        else if (item instanceof PIXI.Sprite) {
                            var width = item.texture.frame.width;
                            var height = item.texture.frame.height;
                            var x1 = -width * item.anchor.x;
                            var y1;
                            if (x > x1 && x < x1 + width) {
                                y1 = -height * item.anchor.y;
                                if (y > y1 && y < y1 + height) { // set the target property if a hit is true!
                                    return true;
                                }
                            }
                        } else if (item instanceof PIXI.Graphics) {
                            var graphicsData = item.graphicsData;
                            for (i = 0; i < graphicsData.length; i++) {
                                var data = graphicsData[i];
                                if (!data.fill) continue; // only deal with fills..
                                if (data.shape) {
                                    if (data.shape.contains(x, y)) { //interactionData.target = item;
                                        return true;
                                    }
                                }
                            }
                        }
                        var length = item.children.length;
                        for (i = 0; i < length; i++) {
                            var tempItem = item.children[i];
                            var hit = this.hitTest(tempItem, interactionData);
                            if (hit) { // hmm.. TODO SET CORRECT TARGET?
                                interactionData.target = item;
                                return true;
                            }
                        }
                        return false;
                    };
                    /**
                     * Is called when a touch is moved across the renderer element
                     *
                     * @method onTouchMove
                     * @param event {Event} The DOM event of a touch moving across the renderer view
                     * @private
                     */
                    PIXI.InteractionManager.prototype.onTouchMove = function(event) {
                        if (this.dirty) {
                            this.rebuildInteractiveGraph();
                        }
                        var rect = this.interactionDOMElement.getBoundingClientRect();
                        var changedTouches = event.changedTouches;
                        var touchData;
                        var i = 0;
                        for (i = 0; i < changedTouches.length; i++) {
                            var touchEvent = changedTouches[i];
                            touchData = this.touches[touchEvent.identifier];
                            if (!touchData) continue;
                            touchData.originalEvent = event; // update the touch position
                            touchData.global.x = (touchEvent.clientX - rect.left) * (this.target.width / rect.width);
                            touchData.global.y = (touchEvent.clientY - rect.top) * (this.target.height / rect.height);
                            /*if (navigator.isCocoonJS && !rect.left && !rect.top && !event.target.style.width && !event.target.style.height)
                                        			{
                                        				//Support for CocoonJS fullscreen scale modes
                                        				touchData.global.x = touchEvent.clientX;
                                        				touchData.global.y = touchEvent.clientY;
                                        			}*/
                            for (var j = 0; j < this.interactiveItems.length; j++) {
                                var item = this.interactiveItems[j];
                                if (item.touchmove && item.__touchData && item.__touchData[touchEvent.identifier]) {
                                    item.touchmove(touchData);
                                }
                            }
                        } //Really important for Android 4.2- browsers.
                        if (event.cancelable === undefined || event.cancelable) {
                            event.preventDefault();
                        }
                    };
                    /**
                     * Is called when a touch is started on the renderer element
                     *
                     * @method onTouchStart
                     * @param event {Event} The DOM event of a touch starting on the renderer view
                     * @private
                     */
                    PIXI.InteractionManager.prototype.onTouchStart = function(event) {
                        if (this.dirty) {
                            this.rebuildInteractiveGraph();
                        }
                        var rect = this.interactionDOMElement.getBoundingClientRect();
                        if (PIXI.AUTO_PREVENT_DEFAULT) {
                            if (event.cancelable === undefined || event.cancelable) {
                                event.preventDefault();
                            }
                        }
                        var changedTouches = event.changedTouches;
                        for (var i = 0; i < changedTouches.length; i++) {
                            var touchEvent = changedTouches[i];
                            var touchData = this.pool.pop();
                            if (!touchData) {
                                touchData = new PIXI.InteractionData();
                            }
                            touchData.originalEvent = event;
                            this.touches[touchEvent.identifier] = touchData;
                            touchData.global.x = (touchEvent.clientX - rect.left) * (this.target.width / rect.width);
                            touchData.global.y = (touchEvent.clientY - rect.top) * (this.target.height / rect.height);
                            /* if (navigator.isCocoonJS && !rect.left && !rect.top && !event.target.style.width && !event.target.style.height)
                                        			{
                                        				//Support for CocoonJS fullscreen scale modes
                                        				touchData.global.x = touchEvent.clientX;
                                        				touchData.global.y = touchEvent.clientY;
                                        			}*/
                            var length = this.interactiveItems.length;
                            for (var j = 0; j < length; j++) {
                                var item = this.interactiveItems[j];
                                if (item.touchstart || item.tap) {
                                    item.__hit = this.hitTest(item, touchData);
                                    if (item.__hit) { //call the function!
                                        if (item.touchstart) item.touchstart(touchData);
                                        item.__isDown = true;
                                        item.__touchData = item.__touchData || {};
                                        item.__touchData[touchEvent.identifier] = touchData;
                                        if (!item.interactiveChildren) break;
                                    }
                                }
                            }
                        }
                    };
                    /**
                     * Is called when a touch is ended on the renderer element
                     *
                     * @method onTouchEnd
                     * @param event {Event} The DOM event of a touch ending on the renderer view
                     * @private
                     */
                    PIXI.InteractionManager.prototype.onTouchEnd = function(event) {
                        if (this.dirty) {
                            this.rebuildInteractiveGraph();
                        }
                        var rect = this.interactionDOMElement.getBoundingClientRect();
                        var changedTouches = event.changedTouches;
                        for (var i = 0; i < changedTouches.length; i++) {
                            var touchEvent = changedTouches[i];
                            var touchData = this.touches[touchEvent.identifier];
                            if (!touchData) continue;
                            var up = false;
                            touchData.global.x = (touchEvent.clientX - rect.left) * (this.target.width / rect.width);
                            touchData.global.y = (touchEvent.clientY - rect.top) * (this.target.height / rect.height);
                            /*if (navigator.isCocoonJS && !rect.left && !rect.top && !event.target.style.width && !event.target.style.height)
                                        			{
                                        				//Support for CocoonJS fullscreen scale modes
                                        				touchData.global.x = touchEvent.clientX;
                                        				touchData.global.y = touchEvent.clientY;
                                        			}*/
                            var length = this.interactiveItems.length;
                            for (var j = 0; j < length; j++) {
                                var item = this.interactiveItems[j];
                                if (item.__touchData && item.__touchData[touchEvent.identifier]) {
                                    item.__hit = this.hitTest(item, item.__touchData[touchEvent.identifier]); // so this one WAS down...
                                    touchData.originalEvent = event; // hitTest??
                                    if (item.touchend || item.tap) {
                                        if (item.__hit && !up) {
                                            if (item.touchend) {
                                                item.touchend(touchData);
                                            }
                                            if (item.__isDown && item.tap) {
                                                item.tap(touchData);
                                            }
                                            if (!item.interactiveChildren) {
                                                up = true;
                                            }
                                        } else {
                                            if (item.__isDown && item.touchendoutside) {
                                                item.touchendoutside(touchData);
                                            }
                                        }
                                        item.__isDown = false;
                                    }
                                    item.__touchData[touchEvent.identifier] = null;
                                }
                            } // remove the touch..
                            this.pool.push(touchData);
                            this.touches[touchEvent.identifier] = null;
                        }
                    };
                    /**
                     * @author Mat Groves http://matgroves.com/ @Doormat23
                     */
                    /**
                     * A Stage represents the root of the display tree. Everything connected to the stage is rendered
                     *
                     * @class Stage
                     * @extends DisplayObjectContainer
                     * @constructor
                     * @param backgroundColor {Number} the background color of the stage, you have to pass this in is in hex format
                     *      like: 0xFFFFFF for white
                     * 
                     * Creating a stage is a mandatory process when you use Pixi, which is as simple as this : 
                     * var stage = new PIXI.Stage(0xFFFFFF);
                     * where the parameter given is the background colour of the stage, in hex
                     * you will use this stage instance to add your sprites to it and therefore to the renderer
                     * Here is how to add a sprite to the stage : 
                     * stage.addChild(sprite);
                     */
                    PIXI.Stage = function(backgroundColor) {
                        PIXI.DisplayObjectContainer.call(this);
                        /**
                         * [read-only] Current transform of the object based on world (parent) factors
                         *
                         * @property worldTransform
                         * @type Matrix
                         * @readOnly
                         * @private
                         */
                        this.worldTransform = new PIXI.Matrix();
                        /**
                         * Whether or not the stage is interactive
                         *
                         * @property interactive
                         * @type Boolean
                         */
                        this.interactive = true;
                        /**
                         * The interaction manage for this stage, manages all interactive activity on the stage
                         *
                         * @property interactionManager
                         * @type InteractionManager
                         */
                        this.interactionManager = new PIXI.InteractionManager(this);
                        /**
                         * Whether the stage is dirty and needs to have interactions updated
                         *
                         * @property dirty
                         * @type Boolean
                         * @private
                         */
                        this.dirty = true; //the stage is its own stage
                        this.stage = this; //optimize hit detection a bit
                        this.stage.hitArea = new PIXI.Rectangle(0, 0, 100000, 100000);
                        this.setBackgroundColor(backgroundColor);
                    }; // constructor
                    PIXI.Stage.prototype = Object.create(PIXI.DisplayObjectContainer.prototype);
                    PIXI.Stage.prototype.constructor = PIXI.Stage;
                    /**
                     * Sets another DOM element which can receive mouse/touch interactions instead of the default Canvas element.
                     * This is useful for when you have other DOM elements on top of the Canvas element.
                     *
                     * @method setInteractionDelegate
                     * @param domElement {DOMElement} This new domElement which will receive mouse/touch events
                     */
                    /*PIXI.Stage.prototype.setInteractionDelegate = function(domElement)
                               	{
                               		this.interactionManager.setTargetDomElement( domElement );
                               	};*/
                    /*
                     * Updates the object transform for rendering
                     *
                     * @method updateTransform
                     * @private
                     */
                    PIXI.Stage.prototype.updateTransform = function() {
                        this.worldAlpha = 1;
                        for (var i = 0, j = this.children.length; i < j; i++) {
                            this.children[i].updateTransform();
                        }
                        if (this.dirty) {
                            this.dirty = false; // update interactive!
                            this.interactionManager.dirty = true;
                        }
                        if (this.interactive) this.interactionManager.update();
                    };
                    /**
                     * Sets the background color for the stage
                     *
                     * @method setBackgroundColor
                     * @param backgroundColor {Number} the color of the background, easiest way to pass this in is in hex format
                     *      like: 0xFFFFFF for white
                     */
                    PIXI.Stage.prototype.setBackgroundColor = function(backgroundColor) {
                        this.backgroundColor = backgroundColor || 0x000000;
                        this.backgroundColorSplit = PIXI.hex2rgb(this.backgroundColor);
                        var hex = this.backgroundColor.toString(16);
                        hex = '000000'.substr(0, 6 - hex.length) + hex;
                        this.backgroundColorString = '#' + hex;
                    };
                    /**
                     * This will return the point containing global coordinates of the mouse.
                     *
                     * @method getMousePosition
                     * @return {Point} A point containing the coordinates of the global InteractionData position.
                     */
                    PIXI.Stage.prototype.getMousePosition = function() {
                        return this.interactionManager.mouse.global;
                    };
                    /**
                     * Converts a hex color number to an [R, G, B] array
                     *
                     * @method hex2rgb
                     * @param hex {Number}
                     */
                    PIXI.hex2rgb = function(hex) {
                        return [(hex >> 16 & 0xFF) / 255, (hex >> 8 & 0xFF) / 255, (hex & 0xFF) / 255];
                    };
                    /**
                     * Converts a color as an [R, G, B] array to a hex number
                     *
                     * @method rgb2hex
                     * @param rgb {Array}
                     */
                    PIXI.rgb2hex = function(rgb) {
                        return (rgb[0] * 255 << 16) + (rgb[1] * 255 << 8) + rgb[2] * 255;
                    };
                    /**
                     * Checks whether the Canvas BlendModes are supported by the current browser
                     *
                     * @method canUseNewCanvasBlendModes
                     * @return {Boolean} whether they are supported
                     */
                    PIXI.canUseNewCanvasBlendModes = function() {
                        if (typeof document === 'undefined') return false;
                        var canvas = document.createElement('canvas');
                        canvas.width = 1;
                        canvas.height = 1;
                        var context = canvas.getContext('2d');
                        context.fillStyle = '#000';
                        context.fillRect(0, 0, 1, 1);
                        context.globalCompositeOperation = 'multiply';
                        context.fillStyle = '#fff';
                        context.fillRect(0, 0, 1, 1);
                        return context.getImageData(0, 0, 1, 1).data[0] === 0;
                    };
                    /**
                     * Given a number, this function returns the closest number that is a power of two
                     * this function is taken from Starling Framework as its pretty neat ;)
                     *
                     * @method getNextPowerOfTwo
                     * @param number {Number}
                     * @return {Number} the closest number that is a power of two
                     */
                    PIXI.getNextPowerOfTwo = function(number) {
                        if (number > 0 && (number & number - 1) === 0) // see: http://goo.gl/D9kPj
                            return number;
                        else {
                            var result = 1;
                            while (result < number) {
                                result <<= 1;
                            }
                            return result;
                        }
                    };
                    PIXI.isPowerOfTwo = function(width, height) {
                        return width > 0 && (width & width - 1) === 0 && height > 0 && (height & height - 1) === 0;
                    };
                    /*
                                		PolyK library
                                		url: http://polyk.ivank.net
                                		Released under MIT licence.

                                		Copyright (c) 2012 Ivan Kuckir

                                		Permission is hereby granted, free of charge, to any person
                                		obtaining a copy of this software and associated documentation
                                		files (the "Software"), to deal in the Software without
                                		restriction, including without limitation the rights to use,
                                		copy, modify, merge, publish, distribute, sublicense, and/or sell
                                		copies of the Software, and to permit persons to whom the
                                		Software is furnished to do so, subject to the following
                                		conditions:

                                		The above copyright notice and this permission notice shall be
                                		included in all copies or substantial portions of the Software.

                                		THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
                                		EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
                                		OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
                                		NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
                                		HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
                                		WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
                                		FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
                                		OTHER DEALINGS IN THE SOFTWARE.

                                		This is an amazing lib!

                                		Slightly modified by Mat Groves (matgroves.com);
                                	*/
                    /**
                     * Based on the Polyk library http://polyk.ivank.net released under MIT licence.
                     * This is an amazing lib!
                     * Slightly modified by Mat Groves (matgroves.com);
                     * @class PolyK
                     */
                    PIXI.PolyK = {};
                    /**
                     * Triangulates shapes for webGL graphic fills.
                     *
                     * @method Triangulate
                     */
                    PIXI.PolyK.Triangulate = function(p) {
                        var sign = true;
                        var n = p.length >> 1;
                        if (n < 3) return [];
                        var tgs = [];
                        var avl = [];
                        for (var i = 0; i < n; i++) {
                            avl.push(i);
                        }
                        i = 0;
                        var al = n;
                        while (al > 3) {
                            var i0 = avl[(i + 0) % al];
                            var i1 = avl[(i + 1) % al];
                            var i2 = avl[(i + 2) % al];
                            var ax = p[2 * i0],
                                ay = p[2 * i0 + 1];
                            var bx = p[2 * i1],
                                by = p[2 * i1 + 1];
                            var cx = p[2 * i2],
                                cy = p[2 * i2 + 1];
                            var earFound = false;
                            if (PIXI.PolyK._convex(ax, ay, bx, by, cx, cy, sign)) {
                                earFound = true;
                                for (var j = 0; j < al; j++) {
                                    var vi = avl[j];
                                    if (vi === i0 || vi === i1 || vi === i2) continue;
                                    if (PIXI.PolyK._PointInTriangle(p[2 * vi], p[2 * vi + 1], ax, ay, bx, by, cx, cy)) {
                                        earFound = false;
                                        break;
                                    }
                                }
                            }
                            if (earFound) {
                                tgs.push(i0, i1, i2);
                                avl.splice((i + 1) % al, 1);
                                al--;
                                i = 0;
                            } else if (i++ > 3 * al) { // need to flip flip reverse it!
                                // reset!
                                if (sign) {
                                    tgs = [];
                                    avl = [];
                                    for (i = 0; i < n; i++) {
                                        avl.push(i);
                                    }
                                    i = 0;
                                    al = n;
                                    sign = false;
                                } else { //   window.console.log("PIXI Warning: shape too complex to fill");
                                    return null;
                                }
                            }
                        }
                        tgs.push(avl[0], avl[1], avl[2]);
                        return tgs;
                    };
                    /**
                     * Checks whether a point is within a triangle
                     *
                     * @method _PointInTriangle
                     * @param px {Number} x coordinate of the point to test
                     * @param py {Number} y coordinate of the point to test
                     * @param ax {Number} x coordinate of the a point of the triangle
                     * @param ay {Number} y coordinate of the a point of the triangle
                     * @param bx {Number} x coordinate of the b point of the triangle
                     * @param by {Number} y coordinate of the b point of the triangle
                     * @param cx {Number} x coordinate of the c point of the triangle
                     * @param cy {Number} y coordinate of the c point of the triangle
                     * @private
                     * @return {Boolean}
                     */
                    PIXI.PolyK._PointInTriangle = function(px, py, ax, ay, bx, by, cx, cy) {
                        var v0x = cx - ax;
                        var v0y = cy - ay;
                        var v1x = bx - ax;
                        var v1y = by - ay;
                        var v2x = px - ax;
                        var v2y = py - ay;
                        var dot00 = v0x * v0x + v0y * v0y;
                        var dot01 = v0x * v1x + v0y * v1y;
                        var dot02 = v0x * v2x + v0y * v2y;
                        var dot11 = v1x * v1x + v1y * v1y;
                        var dot12 = v1x * v2x + v1y * v2y;
                        var invDenom = 1 / (dot00 * dot11 - dot01 * dot01);
                        var u = (dot11 * dot02 - dot01 * dot12) * invDenom;
                        var v = (dot00 * dot12 - dot01 * dot02) * invDenom; // Check if point is in triangle
                        return u >= 0 && v >= 0 && u + v < 1;
                    };
                    /**
                     * Checks whether a shape is convex
                     *
                     * @method _convex
                     * @private
                     * @return {Boolean}
                     */
                    PIXI.PolyK._convex = function(ax, ay, bx, by, cx, cy, sign) {
                        return (ay - by) * (cx - bx) + (bx - ax) * (cy - by) >= 0 === sign;
                    };
                    /**
                     * @author Mat Groves http://matgroves.com/ @Doormat23
                     * @author Chad Engler https://github.com/englercj @Rolnaaba
                     */
                    /**
                     * Originally based on https://github.com/mrdoob/eventtarget.js/ from mr Doob.
                     * Currently takes inspiration from the nodejs EventEmitter, EventEmitter3, and smokesignals
                     */
                    /**
                     * Mixins event emitter functionality to a class
                     *
                     * @class EventTarget
                     * @example
                     *      function MyEmitter() {}
                     *
                     *      PIXI.EventTarget.mixin(MyEmitter.prototype);
                     *
                     *      var em = new MyEmitter();
                     *      em.emit('eventName', 'some data', 'some more data', {}, null, ...);
                     */
                    PIXI.EventTarget = {
                        /**
                         * Backward compat from when this used to be a function
                         */
                        call: function callCompat(obj) {
                            if (obj) {
                                obj = obj.prototype || obj;
                                PIXI.EventTarget.mixin(obj);
                            }
                        },
                        /**
                         * Mixes in the properties of the EventTarget prototype onto another object
                         *
                         * @method mixin
                         * @param object {Object} The obj to mix into
                         */
                        mixin: function mixin(obj) {
                            /**
                             * Return a list of assigned event listeners.
                             *
                             * @method listeners
                             * @param eventName {String} The events that should be listed.
                             * @return {Array} An array of listener functions
                             */
                            obj.listeners = function listeners(eventName) {
                                this._listeners = this._listeners || {};
                                return this._listeners[eventName] ? this._listeners[eventName].slice() : [];
                            };
                            /**
                             * Emit an event to all registered event listeners.
                             *
                             * @method emit
                             * @alias dispatchEvent
                             * @param eventName {String} The name of the event.
                             * @return {Boolean} Indication if we've emitted an event.
                             */
                            obj.emitPixi = obj.dispatchEvent = function emit(eventName, data) {
                                this._listeners = this._listeners || {}; //backwards compat with old method ".emit({ type: 'something' })"
                                if (typeof eventName === 'object') {
                                    data = eventName;
                                    eventName = eventName.type;
                                } //ensure we are using a real pixi event
                                if (!data || data.__isEventObject !== true) {
                                    data = new PIXI.Event(this, eventName, data);
                                } //iterate the listeners
                                if (this._listeners && this._listeners[eventName]) {
                                    var listeners = this._listeners[eventName].slice(0),
                                        length = listeners.length,
                                        fn = listeners[0],
                                        i;
                                    for (i = 0; i < length; fn = listeners[++i]) { //call the event listener
                                        fn.call(this, data); //if "stopImmediatePropagation" is called, stop calling sibling events
                                        if (data.stoppedImmediate) {
                                            return this;
                                        }
                                    } //if "stopPropagation" is called then don't bubble the event
                                    if (data.stopped) {
                                        return this;
                                    }
                                } //bubble this event up the scene graph
                                if (this.parent && this.parent.emit) {
                                    this.parent.emit.call(this.parent, eventName, data);
                                }
                                return this;
                            };
                            /**
                             * Register a new EventListener for the given event.
                             *
                             * @method on
                             * @alias addEventListener
                             * @param eventName {String} Name of the event.
                             * @param callback {Functon} fn Callback function.
                             */
                            obj.onPixi = obj.addEventListener = function on(eventName, fn) {
                                this._listeners = this._listeners || {};
                                (this._listeners[eventName] = this._listeners[eventName] || []).push(fn);
                                return this;
                            };
                            /**
                             * Add an EventListener that's only called once.
                             *
                             * @method once
                             * @param eventName {String} Name of the event.
                             * @param callback {Function} Callback function.
                             */
                            obj.oncePixi = function once(eventName, fn) {
                                this._listeners = this._listeners || {};
                                var self = this;

                                function onceHandlerWrapper() {
                                    fn.apply(self.offPixi(eventName, onceHandlerWrapper), arguments);
                                }
                                onceHandlerWrapper._originalHandler = fn;
                                return this.onPixi(eventName, onceHandlerWrapper);
                            };
                            /**
                             * Remove event listeners.
                             *
                             * @method off
                             * @alias removeEventListener
                             * @param eventName {String} The event we want to remove.
                             * @param callback {Function} The listener that we need to find.
                             */
                            obj.offPixi = obj.removeEventListener = function off(eventName, fn) {
                                this._listeners = this._listeners || {};
                                if (!this._listeners[eventName]) return this;
                                var list = this._listeners[eventName],
                                    i = fn ? list.length : 0;
                                while (i-- > 0) {
                                    if (list[i] === fn || list[i]._originalHandler === fn) {
                                        list.splice(i, 1);
                                    }
                                }
                                if (list.length === 0) {
                                    delete this._listeners[eventName];
                                }
                                return this;
                            };
                            /**
                             * Remove all listeners or only the listeners for the specified event.
                             *
                             * @method removeAllListeners
                             * @param eventName {String} The event you want to remove all listeners for.
                             */
                            obj.removeAllListeners = function removeAllListeners(eventName) {
                                this._listeners = this._listeners || {};
                                if (!this._listeners[eventName]) return this;
                                delete this._listeners[eventName];
                                return this;
                            };
                        }
                    };
                    /**
                     * Creates an homogenous object for tracking events so users can know what to expect.
                     *
                     * @class Event
                     * @extends Object
                     * @constructor
                     * @param target {Object} The target object that the event is called on
                     * @param name {String} The string name of the event that was triggered
                     * @param data {Object} Arbitrary event data to pass along
                     */
                    PIXI.Event = function(target, name, data) { //for duck typing in the ".on()" function
                        this.__isEventObject = true;
                        /**
                         * Tracks the state of bubbling propagation. Do not
                         * set this directly, instead use `event.stopPropagation()`
                         *
                         * @property stopped
                         * @type Boolean
                         * @private
                         * @readOnly
                         */
                        this.stopped = false;
                        /**
                         * Tracks the state of sibling listener propagation. Do not
                         * set this directly, instead use `event.stopImmediatePropagation()`
                         *
                         * @property stoppedImmediate
                         * @type Boolean
                         * @private
                         * @readOnly
                         */
                        this.stoppedImmediate = false;
                        /**
                         * The original target the event triggered on.
                         *
                         * @property target
                         * @type Object
                         * @readOnly
                         */
                        this.target = target;
                        /**
                         * The string name of the event that this represents.
                         *
                         * @property type
                         * @type String
                         * @readOnly
                         */
                        this.type = name;
                        /**
                         * The data that was passed in with this event.
                         *
                         * @property data
                         * @type Object
                         * @readOnly
                         */
                        this.data = data; //backwards compat with older version of events
                        this.content = data;
                        /**
                         * The timestamp when the event occurred.
                         *
                         * @property timeStamp
                         * @type Number
                         * @readOnly
                         */
                        this.timeStamp = Date.now();
                    };
                    /**
                     * Stops the propagation of events up the scene graph (prevents bubbling).
                     *
                     * @method stopPropagation
                     */
                    PIXI.Event.prototype.stopPropagation = function stopPropagation() {
                        this.stopped = true;
                    };
                    /**
                     * Stops the propagation of events to sibling listeners (no longer calls any listeners).
                     *
                     * @method stopImmediatePropagation
                     */
                    PIXI.Event.prototype.stopImmediatePropagation = function stopImmediatePropagation() {
                        this.stoppedImmediate = true;
                    };
                    /**
                     * @author Mat Groves http://matgroves.com/ @Doormat23
                     */
                    /**
                     * This helper function will automatically detect which renderer you should be using.
                     * WebGL is the preferred renderer as it is a lot faster. If webGL is not supported by
                     * the browser then this function will return a canvas renderer
                     *
                     * @method autoDetectRenderer
                     * @for PIXI
                     * @static
                     * @param width=800 {Number} the width of the renderers view
                     * @param height=600 {Number} the height of the renderers view
                     * 
                     * @param [options] {Object} The optional renderer parameters
                     * @param [options.view] {HTMLCanvasElement} the canvas to use as a view, optional
                     * @param [options.transparent=false] {Boolean} If the render view is transparent, default false
                     * @param [options.antialias=false] {Boolean} sets antialias (only applicable in chrome at the moment)
                     * @param [options.preserveDrawingBuffer=false] {Boolean} enables drawing buffer preservation, enable this if you need to call toDataUrl on the webgl context
                     * 
                     */
                    PIXI.autoDetectRenderer = function(width, height, options) {
                        if (!width) width = 800;
                        if (!height) height = 600; // BORROWED from Mr Doob (mrdoob.com)
                        var webgl = function() {
                            try { //Do not use options.view as it will result in getContext being initialied wrongly (Which cannot be redone.)
                                var canvas = options.view || document.createElement('canvas'); //Removed webgl-experimental as it fucks up on android 4.2
                                var webGLOptions = {
                                    alpha: options.transparent,
                                    antialias: options.antialias, // SPEED UP??
                                    premultipliedAlpha: options.transparent && options.transparent !== 'notMultiplied',
                                    stencil: true,
                                    preserveDrawingBuffer: options.preserveDrawingBuffer
                                };
                                return !!window.WebGLRenderingContext && canvas.getContext('webgl', webGLOptions);
                            } catch (e) {
                                console.warn("Failed to create WebGL renderer", e);
                                return false;
                            }
                        }();
                        if (webgl) {
                            return new PIXI.WebGLRenderer(width, height, options);
                        }
                        return new PIXI.CanvasRenderer(width, height, options);
                    };
                    /**
                     * This helper function will automatically detect which renderer you should be using.
                     * This function is very similar to the autoDetectRenderer function except that is will return a canvas renderer for android.
                     * Even thought both android chrome supports webGL the canvas implementation perform better at the time of writing. 
                     * This function will likely change and update as webGL performance improves on these devices.
                     * 
                     * @method autoDetectRecommendedRenderer
                     * @for PIXI
                     * @static
                     * @param width=800 {Number} the width of the renderers view
                     * @param height=600 {Number} the height of the renderers view
                     * 
                     * @param [options] {Object} The optional renderer parameters
                     * @param [options.view] {HTMLCanvasElement} the canvas to use as a view, optional
                     * @param [options.transparent=false] {Boolean} If the render view is transparent, default false
                     * @param [options.antialias=false] {Boolean} sets antialias (only applicable in chrome at the moment)
                     * @param [options.preserveDrawingBuffer=false] {Boolean} enables drawing buffer preservation, enable this if you need to call toDataUrl on the webgl context
                     * 
                     */
                    /*PIXI.autoDetectRecommendedRenderer = function(width, height, options)
                               	{
                               		if(!width)width = 800;
                               		if(!height)height = 600;

                               		// BORROWED from Mr Doob (mrdoob.com)
                               		var webgl = ( function () { try {
                               										var canvas = document.createElement( 'canvas' );
                               										return !! window.WebGLRenderingContext && ( canvas.getContext( 'webgl' ) || canvas.getContext( 'experimental-webgl' ) );
                               									} catch( e ) {
                               										return false;
                               									}
                               								} )();

                               		var isAndroid = /Android/i.test(navigator.userAgent);

                               		if( webgl && !android)
                               		{
                               			return new PIXI.WebGLRenderer(width, height, options);
                               		}

                               		return  new PIXI.CanvasRenderer(width, height, options);
                               	};*/
                    /**
                     * @author Mat Groves http://matgroves.com/ @Doormat23
                     */
                    /**
                     * @method initDefaultShaders
                     * @static
                     * @private
                     */
                    PIXI.initDefaultShaders = function() {};
                    /**
                     * @method CompileVertexShader
                     * @static
                     * @param gl {WebGLContext} the current WebGL drawing context
                     * @param shaderSrc {Array}
                     * @return {Any}
                     */
                    PIXI.CompileVertexShader = function(gl, shaderSrc) {
                        return PIXI._CompileShader(gl, shaderSrc, gl.VERTEX_SHADER);
                    };
                    /**
                     * @method CompileFragmentShader
                     * @static
                     * @param gl {WebGLContext} the current WebGL drawing context
                     * @param shaderSrc {Array}
                     * @return {Any}
                     */
                    PIXI.CompileFragmentShader = function(gl, shaderSrc) {
                        return PIXI._CompileShader(gl, shaderSrc, gl.FRAGMENT_SHADER);
                    };
                    /**
                     * @method _CompileShader
                     * @static
                     * @private
                     * @param gl {WebGLContext} the current WebGL drawing context
                     * @param shaderSrc {Array}
                     * @param shaderType {Number}
                     * @return {Any}
                     */
                    PIXI._CompileShader = function(gl, shaderSrc, shaderType) {
                        var src = shaderSrc.join("\n");
                        var shader = gl.createShader(shaderType); //PIXI.frvrCheckGLError(gl,"_CompileShader/createShader")
                        gl.shaderSource(shader, src);
                        gl.compileShader(shader); //PIXI.frvrCheckGLError(gl,"_CompileShader/compileShader")
                        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
                            window.console.log(gl.getShaderInfoLog(shader));
                            return null;
                        }
                        return shader;
                    };
                    /**
                     * @method compileProgram
                     * @static
                     * @param gl {WebGLContext} the current WebGL drawing context
                     * @param vertexSrc {Array}
                     * @param fragmentSrc {Array}
                     * @return {Any}
                     */
                    PIXI.compileProgram = function(gl, vertexSrc, fragmentSrc) {
                        var fragmentShader = PIXI.CompileFragmentShader(gl, fragmentSrc);
                        var vertexShader = PIXI.CompileVertexShader(gl, vertexSrc);
                        var shaderProgram = gl.createProgram(); //PIXI.frvrCheckGLError(gl,"compileProgram/gl.createProgram")
                        gl.attachShader(shaderProgram, vertexShader);
                        gl.attachShader(shaderProgram, fragmentShader);
                        gl.linkProgram(shaderProgram);
                        if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
                            window.console.log("Could not initialise shaders");
                        }
                        return shaderProgram;
                    };
                    /**
                     * @author Mat Groves http://matgroves.com/ @Doormat23
                     * @author Richard Davey http://www.photonstorm.com @photonstorm
                     */
                    /**
                     * @class PixiShader
                     * @constructor
                     * @param gl {WebGLContext} the current WebGL drawing context
                     */
                    PIXI.PixiShader = function(gl) {
                        /**
                         * @property _UID
                         * @type Number
                         * @private
                         */
                        this._UID = PIXI._UID++;
                        /**
                         * @property gl
                         * @type WebGLContext
                         */
                        this.gl = gl;
                        /**
                         * The WebGL program.
                         * @property program
                         * @type Any
                         */
                        this.program = null;
                        /**
                         * The fragment shader.
                         * @property fragmentSrc
                         * @type Array
                         */
                        this.fragmentSrc = ['precision lowp float;', 'varying vec2 vTextureCoord;', 'varying vec4 vColor;', 'uniform sampler2D uSampler;', 'void main(void) {', '   gl_FragColor = texture2D(uSampler, vTextureCoord) * vColor ;', '}'];
                        /**
                         * A local texture counter for multi-texture shaders.
                         * @property textureCount
                         * @type Number
                         */
                        this.textureCount = 0;
                        /**
                         * A local flag
                         * @property firstRun
                         * @type Boolean
                         * @private
                         */
                        this.firstRun = true;
                        /**
                         * A dirty flag
                         * @property dirty
                         * @type Boolean
                         */
                        this.dirty = true;
                        /**
                         * Uniform attributes cache.
                         * @property attributes
                         * @type Array
                         * @private
                         */
                        this.attributes = [];
                        this.init();
                    };
                    PIXI.PixiShader.prototype.constructor = PIXI.PixiShader;
                    /**
                     * Initialises the shader.
                     *
                     * @method init
                     */
                    PIXI.PixiShader.prototype.init = function() {
                        var gl = this.gl;
                        var program = PIXI.compileProgram(gl, this.vertexSrc || PIXI.PixiShader.defaultVertexSrc, this.fragmentSrc);
                        gl.useProgram(program); // get and store the uniforms for the shader
                        this.uSampler = gl.getUniformLocation(program, 'uSampler');
                        this.projectionVector = gl.getUniformLocation(program, 'projectionVector');
                        this.offsetVector = gl.getUniformLocation(program, 'offsetVector');
                        this.dimensions = gl.getUniformLocation(program, 'dimensions'); // get and store the attributes
                        this.aVertexPosition = gl.getAttribLocation(program, 'aVertexPosition');
                        this.aTextureCoord = gl.getAttribLocation(program, 'aTextureCoord');
                        this.colorAttribute = gl.getAttribLocation(program, 'aColor'); // Begin worst hack eva //
                        // WHY??? ONLY on my chrome pixel the line above returns -1 when using filters?
                        // maybe its something to do with the current state of the gl context.
                        // I'm convinced this is a bug in the chrome browser as there is NO reason why this should be returning -1 especially as it only manifests on my chrome pixel
                        // If theres any webGL people that know why could happen please help :)
                        if (this.colorAttribute === -1) {
                            this.colorAttribute = 2;
                        }
                        this.attributes = [this.aVertexPosition, this.aTextureCoord, this.colorAttribute]; // End worst hack eva //
                        // add those custom shaders!
                        for (var key in this.uniforms) { // get the uniform locations..
                            this.uniforms[key].uniformLocation = gl.getUniformLocation(program, key);
                        }
                        this.initUniforms();
                        this.program = program;
                    };
                    /**
                     * Initialises the shader uniform values.
                     *
                     * Uniforms are specified in the GLSL_ES Specification: http://www.khronos.org/registry/webgl/specs/latest/1.0/
                     * http://www.khronos.org/registry/gles/specs/2.0/GLSL_ES_Specification_1.0.17.pdf
                     *
                     * @method initUniforms
                     */
                    PIXI.PixiShader.prototype.initUniforms = function() {
                        this.textureCount = 1;
                        var gl = this.gl;
                        var uniform;
                        for (var key in this.uniforms) {
                            uniform = this.uniforms[key];
                            var type = uniform.type;
                            if (type === 'sampler2D') {
                                uniform._init = false;
                                if (uniform.value !== null) {
                                    this.initSampler2D(uniform);
                                }
                            } else if (type === 'mat2' || type === 'mat3' || type === 'mat4') { //  These require special handling
                                uniform.glMatrix = true;
                                uniform.glValueLength = 1;
                                if (type === 'mat2') {
                                    uniform.glFunc = gl.uniformMatrix2fv;
                                } else if (type === 'mat3') {
                                    uniform.glFunc = gl.uniformMatrix3fv;
                                } else if (type === 'mat4') {
                                    uniform.glFunc = gl.uniformMatrix4fv;
                                }
                            } else { //  GL function reference
                                uniform.glFunc = gl['uniform' + type];
                                if (type === '2f' || type === '2i') {
                                    uniform.glValueLength = 2;
                                } else if (type === '3f' || type === '3i') {
                                    uniform.glValueLength = 3;
                                } else if (type === '4f' || type === '4i') {
                                    uniform.glValueLength = 4;
                                } else {
                                    uniform.glValueLength = 1;
                                }
                            }
                        }
                    };
                    /**
                     * Initialises a Sampler2D uniform (which may only be available later on after initUniforms once the texture has loaded)
                     *
                     * @method initSampler2D
                     */
                    PIXI.PixiShader.prototype.initSampler2D = function(uniform) {
                        if (!uniform.value || !uniform.value.baseTexture || !uniform.value.baseTexture.hasLoaded) {
                            return;
                        }
                        var gl = this.gl;
                        gl.activeTexture(gl['TEXTURE' + this.textureCount]);
                        gl.bindTexture(gl.TEXTURE_2D, uniform.value.baseTexture._glTextures[gl.id]); //  Extended texture data
                        if (uniform.textureData) {
                            var data = uniform.textureData; // GLTexture = mag linear, min linear_mipmap_linear, wrap repeat + gl.generateMipmap(gl.TEXTURE_2D);
                            // GLTextureLinear = mag/min linear, wrap clamp
                            // GLTextureNearestRepeat = mag/min NEAREST, wrap repeat
                            // GLTextureNearest = mag/min nearest, wrap clamp
                            // AudioTexture = whatever + luminance + width 512, height 2, border 0
                            // KeyTexture = whatever + luminance + width 256, height 2, border 0
                            //  magFilter can be: gl.LINEAR, gl.LINEAR_MIPMAP_LINEAR or gl.NEAREST
                            //  wrapS/T can be: gl.CLAMP_TO_EDGE or gl.REPEAT
                            var magFilter = data.magFilter ? data.magFilter : gl.LINEAR;
                            var minFilter = data.minFilter ? data.minFilter : gl.LINEAR;
                            var wrapS = data.wrapS ? data.wrapS : gl.CLAMP_TO_EDGE;
                            var wrapT = data.wrapT ? data.wrapT : gl.CLAMP_TO_EDGE;
                            var format = data.luminance ? gl.LUMINANCE : gl.RGBA;
                            if (data.repeat) {
                                wrapS = gl.REPEAT;
                                wrapT = gl.REPEAT;
                            }
                            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, !!data.flipY);
                            if (data.width) {
                                var width = data.width ? data.width : 512;
                                var height = data.height ? data.height : 2;
                                var border = data.border ? data.border : 0; // void texImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, ArrayBufferView? pixels);
                                gl.texImage2D(gl.TEXTURE_2D, 0, format, width, height, border, format, gl.UNSIGNED_BYTE, null); //PIXI.frvrCheckGLError(gl,"initSampler2D/1")
                            } else { //  void texImage2D(GLenum target, GLint level, GLenum internalformat, GLenum format, GLenum type, ImageData? pixels);
                                gl.texImage2D(gl.TEXTURE_2D, 0, format, gl.RGBA, gl.UNSIGNED_BYTE, uniform.value.baseTexture.source); //PIXI.frvrCheckGLError(gl,"initSampler2D/2")
                            }
                            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, magFilter);
                            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, minFilter);
                            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrapS);
                            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrapT);
                        }
                        gl.uniform1i(uniform.uniformLocation, this.textureCount);
                        uniform._init = true;
                        this.textureCount++;
                    };
                    /**
                     * Updates the shader uniform values.
                     *
                     * @method syncUniforms
                     */
                    PIXI.PixiShader.prototype.syncUniforms = function() {
                        this.textureCount = 1;
                        var uniform;
                        var gl = this.gl; //  This would probably be faster in an array and it would guarantee key order
                        for (var key in this.uniforms) {
                            uniform = this.uniforms[key];
                            if (uniform.glValueLength === 1) {
                                if (uniform.glMatrix === true) {
                                    uniform.glFunc.call(gl, uniform.uniformLocation, uniform.transpose, uniform.value);
                                } else {
                                    uniform.glFunc.call(gl, uniform.uniformLocation, uniform.value);
                                }
                            } else if (uniform.glValueLength === 2) {
                                uniform.glFunc.call(gl, uniform.uniformLocation, uniform.value.x, uniform.value.y);
                            } else if (uniform.glValueLength === 3) {
                                uniform.glFunc.call(gl, uniform.uniformLocation, uniform.value.x, uniform.value.y, uniform.value.z);
                            } else if (uniform.glValueLength === 4) {
                                uniform.glFunc.call(gl, uniform.uniformLocation, uniform.value.x, uniform.value.y, uniform.value.z, uniform.value.w);
                            } else if (uniform.type === 'sampler2D') {
                                if (uniform._init) {
                                    gl.activeTexture(gl['TEXTURE' + this.textureCount]);
                                    if (uniform.value.baseTexture._dirty[gl.id]) { //console.log("Sampler2d Call")
                                        PIXI.instances[gl.id].updateTexture(uniform.value.baseTexture);
                                    } else { // bind the current texture
                                        gl.bindTexture(gl.TEXTURE_2D, uniform.value.baseTexture._glTextures[gl.id]);
                                    } //   gl.bindTexture(gl.TEXTURE_2D, uniform.value.baseTexture._glTextures[gl.id] || PIXI.createWebGLTexture( uniform.value.baseTexture, gl));
                                    gl.uniform1i(uniform.uniformLocation, this.textureCount);
                                    this.textureCount++;
                                } else {
                                    this.initSampler2D(uniform);
                                }
                            }
                        }
                    };
                    /**
                     * Destroys the shader.
                     *
                     * @method destroy
                     */
                    PIXI.PixiShader.prototype.destroy = function() {
                        this.gl.deleteProgram(this.program);
                        this.uniforms = null;
                        this.gl = null;
                        this.attributes = null;
                    };
                    /**
                     * The Default Vertex shader source.
                     *
                     * @property defaultVertexSrc
                     * @type String
                     */
                    PIXI.PixiShader.defaultVertexSrc = ['attribute vec2 aVertexPosition;', 'attribute vec2 aTextureCoord;', 'attribute vec4 aColor;', 'uniform vec2 projectionVector;', 'uniform vec2 offsetVector;', 'varying vec2 vTextureCoord;', 'varying vec4 vColor;', 'const vec2 center = vec2(-1.0, 1.0);', 'void main(void) {', '   gl_Position = vec4( ((aVertexPosition + offsetVector) / projectionVector) + center , 0.0, 1.0);', '   vTextureCoord = aTextureCoord;', '   vColor = vec4(aColor.rgb * aColor.a, aColor.a);', '}'];
                    /**
                     * @author Mat Groves http://matgroves.com/ @Doormat23
                     */
                    /**
                     * @class PixiFastShader
                     * @constructor
                     * @param gl {WebGLContext} the current WebGL drawing context
                     */
                    PIXI.PixiFastShader = function(gl) {
                        /**
                         * @property _UID
                         * @type Number
                         * @private
                         */
                        this._UID = PIXI._UID++;
                        /**
                         * @property gl
                         * @type WebGLContext
                         */
                        this.gl = gl;
                        /**
                         * The WebGL program.
                         * @property program
                         * @type Any
                         */
                        this.program = null;
                        /**
                         * The fragment shader.
                         * @property fragmentSrc
                         * @type Array
                         */
                        this.fragmentSrc = ['precision lowp float;', 'varying vec2 vTextureCoord;', 'varying float vColor;', 'uniform sampler2D uSampler;', 'void main(void) {', '   gl_FragColor = texture2D(uSampler, vTextureCoord) * vColor ;', '}'];
                        /**
                         * The vertex shader.
                         * @property vertexSrc
                         * @type Array
                         */
                        this.vertexSrc = ['attribute vec2 aVertexPosition;', 'attribute vec2 aPositionCoord;', 'attribute vec2 aScale;', 'attribute float aRotation;', 'attribute vec2 aTextureCoord;', 'attribute float aColor;', 'uniform vec2 projectionVector;', 'uniform vec2 offsetVector;', 'uniform mat3 uMatrix;', 'varying vec2 vTextureCoord;', 'varying float vColor;', 'const vec2 center = vec2(-1.0, 1.0);', 'void main(void) {', '   vec2 v;', '   vec2 sv = aVertexPosition * aScale;', '   v.x = (sv.x) * cos(aRotation) - (sv.y) * sin(aRotation);', '   v.y = (sv.x) * sin(aRotation) + (sv.y) * cos(aRotation);', '   v = ( uMatrix * vec3(v + aPositionCoord , 1.0) ).xy ;', '   gl_Position = vec4( ( v / projectionVector) + center , 0.0, 1.0);', '   vTextureCoord = aTextureCoord;', //  '   vec3 color = mod(vec3(aColor.y/65536.0, aColor.y/256.0, aColor.y), 256.0) / 256.0;',
                            '   vColor = aColor;', '}'
                        ];
                        /**
                         * A local texture counter for multi-texture shaders.
                         * @property textureCount
                         * @type Number
                         */
                        this.textureCount = 0;
                        this.init();
                    };
                    PIXI.PixiFastShader.prototype.constructor = PIXI.PixiFastShader;
                    /**
                     * Initialises the shader.
                     * 
                     * @method init
                     */
                    PIXI.PixiFastShader.prototype.init = function() {
                        var gl = this.gl;
                        var program = PIXI.compileProgram(gl, this.vertexSrc, this.fragmentSrc);
                        gl.useProgram(program); // get and store the uniforms for the shader
                        this.uSampler = gl.getUniformLocation(program, 'uSampler');
                        this.projectionVector = gl.getUniformLocation(program, 'projectionVector');
                        this.offsetVector = gl.getUniformLocation(program, 'offsetVector');
                        this.dimensions = gl.getUniformLocation(program, 'dimensions');
                        this.uMatrix = gl.getUniformLocation(program, 'uMatrix'); // get and store the attributes
                        this.aVertexPosition = gl.getAttribLocation(program, 'aVertexPosition');
                        this.aPositionCoord = gl.getAttribLocation(program, 'aPositionCoord');
                        this.aScale = gl.getAttribLocation(program, 'aScale');
                        this.aRotation = gl.getAttribLocation(program, 'aRotation');
                        this.aTextureCoord = gl.getAttribLocation(program, 'aTextureCoord');
                        this.colorAttribute = gl.getAttribLocation(program, 'aColor'); // Begin worst hack eva //
                        // WHY??? ONLY on my chrome pixel the line above returns -1 when using filters?
                        // maybe its somthing to do with the current state of the gl context.
                        // Im convinced this is a bug in the chrome browser as there is NO reason why this should be returning -1 especially as it only manifests on my chrome pixel
                        // If theres any webGL people that know why could happen please help :)
                        if (this.colorAttribute === -1) {
                            this.colorAttribute = 2;
                        }
                        this.attributes = [this.aVertexPosition, this.aPositionCoord, this.aScale, this.aRotation, this.aTextureCoord, this.colorAttribute]; // End worst hack eva //
                        this.program = program;
                    };
                    /**
                     * Destroys the shader.
                     * 
                     * @method destroy
                     */
                    PIXI.PixiFastShader.prototype.destroy = function() {
                        this.gl.deleteProgram(this.program);
                        this.uniforms = null;
                        this.gl = null;
                        this.attributes = null;
                    };
                    /**
                     * @class PrimitiveShader
                     * @constructor
                     * @param gl {WebGLContext} the current WebGL drawing context
                     */
                    PIXI.PrimitiveShader = function(gl) {
                        /**
                         * @property _UID
                         * @type Number
                         * @private
                         */
                        this._UID = PIXI._UID++;
                        /**
                         * @property gl
                         * @type WebGLContext
                         */
                        this.gl = gl;
                        /**
                         * The WebGL program.
                         * @property program
                         * @type Any
                         */
                        this.program = null;
                        /**
                         * The fragment shader.
                         * @property fragmentSrc
                         * @type Array
                         */
                        this.fragmentSrc = ['precision mediump float;', 'varying vec4 vColor;', 'void main(void) {', '   gl_FragColor = vColor;', '}'];
                        /**
                         * The vertex shader.
                         * @property vertexSrc
                         * @type Array
                         */
                        this.vertexSrc = ['attribute vec2 aVertexPosition;', 'attribute vec4 aColor;', 'uniform mat3 translationMatrix;', 'uniform vec2 projectionVector;', 'uniform vec2 offsetVector;', 'uniform float alpha;', 'uniform float flipY;', 'uniform vec3 tint;', 'varying vec4 vColor;', 'void main(void) {', '   vec3 v = translationMatrix * vec3(aVertexPosition , 1.0);', '   v -= offsetVector.xyx;', '   gl_Position = vec4( v.x / projectionVector.x -1.0, (v.y / projectionVector.y * -flipY) + flipY , 0.0, 1.0);', '   vColor = aColor * vec4(tint * alpha, alpha);', '}'];
                        this.init();
                    };
                    PIXI.PrimitiveShader.prototype.constructor = PIXI.PrimitiveShader;
                    /**
                     * Initialises the shader.
                     * 
                     * @method init
                     */
                    PIXI.PrimitiveShader.prototype.init = function() {
                        var gl = this.gl;
                        var program = PIXI.compileProgram(gl, this.vertexSrc, this.fragmentSrc);
                        gl.useProgram(program); // get and store the uniforms for the shader
                        this.projectionVector = gl.getUniformLocation(program, 'projectionVector');
                        this.offsetVector = gl.getUniformLocation(program, 'offsetVector');
                        this.tintColor = gl.getUniformLocation(program, 'tint');
                        this.flipY = gl.getUniformLocation(program, 'flipY'); // get and store the attributes
                        this.aVertexPosition = gl.getAttribLocation(program, 'aVertexPosition');
                        this.colorAttribute = gl.getAttribLocation(program, 'aColor');
                        this.attributes = [this.aVertexPosition, this.colorAttribute];
                        this.translationMatrix = gl.getUniformLocation(program, 'translationMatrix');
                        this.alpha = gl.getUniformLocation(program, 'alpha');
                        this.program = program;
                    };
                    /**
                     * Destroys the shader.
                     * 
                     * @method destroy
                     */
                    PIXI.PrimitiveShader.prototype.destroy = function() {
                        this.gl.deleteProgram(this.program);
                        this.uniforms = null;
                        this.gl = null;
                        this.attributes = null;
                    };
                    /**
                     * @author Mat Groves http://matgroves.com/ @Doormat23
                     */
                    /**
                     * @class ComplexPrimitiveShader
                     * @constructor
                     * @param gl {WebGLContext} the current WebGL drawing context
                     */
                    PIXI.ComplexPrimitiveShader = function(gl) {
                        /**
                         * @property _UID
                         * @type Number
                         * @private
                         */
                        this._UID = PIXI._UID++;
                        /**
                         * @property gl
                         * @type WebGLContext
                         */
                        this.gl = gl;
                        /**
                         * The WebGL program.
                         * @property program
                         * @type Any
                         */
                        this.program = null;
                        /**
                         * The fragment shader.
                         * @property fragmentSrc
                         * @type Array
                         */
                        this.fragmentSrc = ['precision mediump float;', 'varying vec4 vColor;', 'void main(void) {', '   gl_FragColor = vColor;', '}'];
                        /**
                         * The vertex shader.
                         * @property vertexSrc
                         * @type Array
                         */
                        this.vertexSrc = ['attribute vec2 aVertexPosition;', //'attribute vec4 aColor;',
                            'uniform mat3 translationMatrix;', 'uniform vec2 projectionVector;', 'uniform vec2 offsetVector;', 'uniform vec3 tint;', 'uniform float alpha;', 'uniform vec3 color;', 'uniform float flipY;', 'varying vec4 vColor;', 'void main(void) {', '   vec3 v = translationMatrix * vec3(aVertexPosition , 1.0);', '   v -= offsetVector.xyx;', '   gl_Position = vec4( v.x / projectionVector.x -1.0, (v.y / projectionVector.y * -flipY) + flipY , 0.0, 1.0);', '   vColor = vec4(color * alpha * tint, alpha);', //" * vec4(tint * alpha, alpha);',
                            '}'
                        ];
                        this.init();
                    };
                    PIXI.ComplexPrimitiveShader.prototype.constructor = PIXI.ComplexPrimitiveShader;
                    /**
                     * Initialises the shader.
                     * 
                     * @method init
                     */
                    PIXI.ComplexPrimitiveShader.prototype.init = function() {
                        var gl = this.gl;
                        var program = PIXI.compileProgram(gl, this.vertexSrc, this.fragmentSrc);
                        gl.useProgram(program); // get and store the uniforms for the shader
                        this.projectionVector = gl.getUniformLocation(program, 'projectionVector');
                        this.offsetVector = gl.getUniformLocation(program, 'offsetVector');
                        this.tintColor = gl.getUniformLocation(program, 'tint');
                        this.color = gl.getUniformLocation(program, 'color');
                        this.flipY = gl.getUniformLocation(program, 'flipY'); // get and store the attributes
                        this.aVertexPosition = gl.getAttribLocation(program, 'aVertexPosition'); // this.colorAttribute = gl.getAttribLocation(program, 'aColor');
                        this.attributes = [this.aVertexPosition, this.colorAttribute];
                        this.translationMatrix = gl.getUniformLocation(program, 'translationMatrix');
                        this.alpha = gl.getUniformLocation(program, 'alpha');
                        this.program = program;
                    };
                    /**
                     * Destroys the shader.
                     * 
                     * @method destroy
                     */
                    PIXI.ComplexPrimitiveShader.prototype.destroy = function() {
                        this.gl.deleteProgram(this.program);
                        this.uniforms = null;
                        this.gl = null;
                        this.attribute = null;
                    };
                    /**
                     * @author Mat Groves http://matgroves.com/ @Doormat23
                     */
                    /**
                     * A set of functions used by the webGL renderer to draw the primitive graphics data
                     *
                     * @class WebGLGraphics
                     * @private
                     * @static
                     */
                    PIXI.WebGLGraphics = function() {};
                    /**
                     * Renders the graphics object
                     *
                     * @static
                     * @private
                     * @method renderGraphics
                     * @param graphics {Graphics}
                     * @param renderSession {Object}
                     */
                    PIXI.WebGLGraphics.renderGraphics = function(graphics, renderSession) //projection, offset)
                    {
                        var gl = renderSession.gl;
                        var projection = renderSession.projection,
                            offset = renderSession.offset,
                            shader = renderSession.shaderManager.primitiveShader,
                            webGLData;
                        if (graphics.dirty) {
                            PIXI.WebGLGraphics.updateGraphics(graphics, gl);
                        }
                        var webGL = graphics._webGL[gl.id];
                        if (!(webGL && webGL.data)) {
                            return;
                        } // This  could be speeded up for sure!
                        for (var i = 0; i < webGL.data.length; i++) {
                            if (webGL.data[i].mode === 1) {
                                webGLData = webGL.data[i];
                                renderSession.stencilManager.pushStencil(graphics, webGLData, renderSession); // render quad..
                                gl.drawElements(gl.TRIANGLE_FAN, 4, gl.UNSIGNED_SHORT, (webGLData.indices.length - 4) * 2);
                                renderSession.stencilManager.popStencil(graphics, webGLData, renderSession);
                            } else {
                                webGLData = webGL.data[i];
                                renderSession.shaderManager.setShader(shader); //activatePrimitiveShader();
                                shader = renderSession.shaderManager.primitiveShader;
                                gl.uniformMatrix3fv(shader.translationMatrix, false, graphics.worldTransform.toArray(true));
                                gl.uniform1f(shader.flipY, 1);
                                gl.uniform2f(shader.projectionVector, projection.x, -projection.y);
                                gl.uniform2f(shader.offsetVector, -offset.x, -offset.y);
                                gl.uniform3fv(shader.tintColor, PIXI.hex2rgb(graphics.tint));
                                gl.uniform1f(shader.alpha, graphics.worldAlpha);
                                gl.bindBuffer(gl.ARRAY_BUFFER, webGLData.buffer);
                                gl.vertexAttribPointer(shader.aVertexPosition, 2, gl.FLOAT, false, 4 * 6, 0);
                                gl.vertexAttribPointer(shader.colorAttribute, 4, gl.FLOAT, false, 4 * 6, 2 * 4); // set the index buffer!
                                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, webGLData.indexBuffer);
                                gl.drawElements(gl.TRIANGLE_STRIP, webGLData.indices.length, gl.UNSIGNED_SHORT, 0);
                            }
                        }
                    };
                    /**
                     * Updates the graphics object
                     *
                     * @static
                     * @private
                     * @method updateGraphics
                     * @param graphicsData {Graphics} The graphics object to update
                     * @param gl {WebGLContext} the current WebGL drawing context
                     */
                    PIXI.WebGLGraphics.updateGraphics = function(graphics, gl) { // get the contexts graphics object
                        var webGL = graphics._webGL[gl.id]; // if the graphics object does not exist in the webGL context time to create it!
                        if (!webGL) webGL = graphics._webGL[gl.id] = {
                            lastIndex: 0,
                            data: [],
                            gl: gl
                        }; // flag the graphics as not dirty as we are about to update it...
                        if (graphics.dirty) {
                            graphics.updateLocalBounds();
                            graphics.dirty = false;
                        }
                        var i; // if the user cleared the graphics object we will need to clear every object
                        if (graphics.clearDirty) {
                            graphics.clearDirty = false; // lop through and return all the webGLDatas to the object pool so than can be reused later on
                            for (i = 0; i < webGL.data.length; i++) {
                                var graphicsData = webGL.data[i];
                                graphicsData.reset();
                                PIXI.WebGLGraphics.graphicsDataPool.push(graphicsData);
                            } // clear the array and reset the index.. 
                            webGL.data = [];
                            webGL.lastIndex = 0;
                        }
                        var webGLData; // loop through the graphics datas and construct each one..
                        // if the object is a complex fill then the new stencil buffer technique will be used
                        // other wise graphics objects will be pushed into a batch..
                        for (i = webGL.lastIndex; i < graphics.graphicsData.length; i++) {
                            var data = graphics.graphicsData[i];
                            if (data.type === PIXI.Graphics.POLY) { // need to add the points the the graphics object..
                                data.points = data.shape.points.slice();
                                if (data.shape.closed) { // close the poly if the value is true!
                                    if (data.points[0] !== data.points[data.points.length - 2] || data.points[1] !== data.points[data.points.length - 1]) {
                                        data.points.push(data.points[0], data.points[1]);
                                    }
                                } // MAKE SURE WE HAVE THE CORRECT TYPE..
                                if (data.fill) {
                                    if (data.points.length >= 6) {
                                        if (data.points.length < 6 * 2) {
                                            webGLData = PIXI.WebGLGraphics.switchMode(webGL, 0);
                                            var canDrawUsingSimple = PIXI.WebGLGraphics.buildPoly(data, webGLData); //     console.log(canDrawUsingSimple);
                                            if (!canDrawUsingSimple) { //    console.log("<>>>")
                                                webGLData = PIXI.WebGLGraphics.switchMode(webGL, 1);
                                                PIXI.WebGLGraphics.buildComplexPoly(data, webGLData);
                                            }
                                        } else {
                                            webGLData = PIXI.WebGLGraphics.switchMode(webGL, 1);
                                            PIXI.WebGLGraphics.buildComplexPoly(data, webGLData);
                                        }
                                    }
                                }
                                if (data.lineWidth > 0) {
                                    webGLData = PIXI.WebGLGraphics.switchMode(webGL, 0);
                                    PIXI.WebGLGraphics.buildLine(data, webGLData);
                                }
                            } else {
                                webGLData = PIXI.WebGLGraphics.switchMode(webGL, 0);
                                if (data.type === PIXI.Graphics.RECT) {
                                    PIXI.WebGLGraphics.buildRectangle(data, webGLData);
                                } else if (data.type === PIXI.Graphics.CIRC || data.type === PIXI.Graphics.ELIP) {
                                    PIXI.WebGLGraphics.buildCircle(data, webGLData);
                                } else if (data.type === PIXI.Graphics.RREC) {
                                    PIXI.WebGLGraphics.buildRoundedRectangle(data, webGLData);
                                }
                            }
                            webGL.lastIndex++;
                        } // upload all the dirty data...
                        for (i = 0; i < webGL.data.length; i++) {
                            webGLData = webGL.data[i];
                            if (webGLData.dirty) webGLData.upload();
                        }
                    };
                    /**
                     * @static
                     * @private
                     * @method switchMode
                     * @param webGL {WebGLContext}
                     * @param type {Number}
                     */
                    PIXI.WebGLGraphics.switchMode = function(webGL, type) {
                        var webGLData;
                        if (!webGL.data.length) {
                            webGLData = PIXI.WebGLGraphics.graphicsDataPool.pop() || new PIXI.WebGLGraphicsData(webGL.gl);
                            webGLData.mode = type;
                            webGL.data.push(webGLData);
                        } else {
                            webGLData = webGL.data[webGL.data.length - 1];
                            if (webGLData.mode !== type || type === 1) {
                                webGLData = PIXI.WebGLGraphics.graphicsDataPool.pop() || new PIXI.WebGLGraphicsData(webGL.gl);
                                webGLData.mode = type;
                                webGL.data.push(webGLData);
                            }
                        }
                        webGLData.dirty = true;
                        return webGLData;
                    };
                    /**
                     * Builds a rectangle to draw
                     *
                     * @static
                     * @private
                     * @method buildRectangle
                     * @param graphicsData {Graphics} The graphics object containing all the necessary properties
                     * @param webGLData {Object}
                     */
                    PIXI.WebGLGraphics.buildRectangle = function(graphicsData, webGLData) { // --- //
                        // need to convert points to a nice regular data
                        //
                        var rectData = graphicsData.shape;
                        var x = rectData.x;
                        var y = rectData.y;
                        var width = rectData.width;
                        var height = rectData.height;
                        if (graphicsData.fill) {
                            var color = PIXI.hex2rgb(graphicsData.fillColor);
                            var alpha = graphicsData.fillAlpha;
                            var r = color[0] * alpha;
                            var g = color[1] * alpha;
                            var b = color[2] * alpha;
                            var verts = webGLData.points;
                            var indices = webGLData.indices;
                            var vertPos = verts.length / 6; // start
                            verts.push(x, y);
                            verts.push(r, g, b, alpha);
                            verts.push(x + width, y);
                            verts.push(r, g, b, alpha);
                            verts.push(x, y + height);
                            verts.push(r, g, b, alpha);
                            verts.push(x + width, y + height);
                            verts.push(r, g, b, alpha); // insert 2 dead triangles..
                            indices.push(vertPos, vertPos, vertPos + 1, vertPos + 2, vertPos + 3, vertPos + 3);
                        }
                        if (graphicsData.lineWidth) {
                            var tempPoints = graphicsData.points;
                            graphicsData.points = [x, y, x + width, y, x + width, y + height, x, y + height, x, y];
                            PIXI.WebGLGraphics.buildLine(graphicsData, webGLData);
                            graphicsData.points = tempPoints;
                        }
                    };
                    /**
                     * Builds a rounded rectangle to draw
                     *
                     * @static
                     * @private
                     * @method buildRoundedRectangle
                     * @param graphicsData {Graphics} The graphics object containing all the necessary properties
                     * @param webGLData {Object}
                     */
                    PIXI.WebGLGraphics.buildRoundedRectangle = function(graphicsData, webGLData) {
                        var rrectData = graphicsData.shape;
                        var x = rrectData.x;
                        var y = rrectData.y;
                        var width = rrectData.width;
                        var height = rrectData.height;
                        var radius = rrectData.radius;
                        var recPoints = [];
                        recPoints.push(x, y + radius);
                        recPoints = recPoints.concat(PIXI.WebGLGraphics.quadraticBezierCurve(x, y + height - radius, x, y + height, x + radius, y + height));
                        recPoints = recPoints.concat(PIXI.WebGLGraphics.quadraticBezierCurve(x + width - radius, y + height, x + width, y + height, x + width, y + height - radius));
                        recPoints = recPoints.concat(PIXI.WebGLGraphics.quadraticBezierCurve(x + width, y + radius, x + width, y, x + width - radius, y));
                        recPoints = recPoints.concat(PIXI.WebGLGraphics.quadraticBezierCurve(x + radius, y, x, y, x, y + radius));
                        if (graphicsData.fill) {
                            var color = PIXI.hex2rgb(graphicsData.fillColor);
                            var alpha = graphicsData.fillAlpha;
                            var r = color[0] * alpha;
                            var g = color[1] * alpha;
                            var b = color[2] * alpha;
                            var verts = webGLData.points;
                            var indices = webGLData.indices;
                            var vecPos = verts.length / 6;
                            var triangles = PIXI.PolyK.Triangulate(recPoints);
                            if (!triangles) {
                                graphicsData.shape.height++;
                                PIXI.WebGLGraphics.buildRoundedRectangle(graphicsData, webGLData); //				console.log("SOLVED PIXI RECT ISSUE LIKE CRAP")
                                return;
                            } // 
                            var i = 0;
                            for (i = 0; i < triangles.length; i += 3) {
                                indices.push(triangles[i] + vecPos);
                                indices.push(triangles[i] + vecPos);
                                indices.push(triangles[i + 1] + vecPos);
                                indices.push(triangles[i + 2] + vecPos);
                                indices.push(triangles[i + 2] + vecPos);
                            }
                            for (i = 0; i < recPoints.length; i++) {
                                verts.push(recPoints[i], recPoints[++i], r, g, b, alpha);
                            }
                        }
                        if (graphicsData.lineWidth) {
                            var tempPoints = graphicsData.points;
                            graphicsData.points = recPoints;
                            PIXI.WebGLGraphics.buildLine(graphicsData, webGLData);
                            graphicsData.points = tempPoints;
                        }
                    };
                    /**
                     * Calculate the points for a quadratic bezier curve. (helper function..)
                     * Based on: https://stackoverflow.com/questions/785097/how-do-i-implement-a-bezier-curve-in-c
                     *
                     * @static
                     * @private
                     * @method quadraticBezierCurve
                     * @param fromX {Number} Origin point x
                     * @param fromY {Number} Origin point x
                     * @param cpX {Number} Control point x
                     * @param cpY {Number} Control point y
                     * @param toX {Number} Destination point x
                     * @param toY {Number} Destination point y
                     * @return {Array(Number)}
                     */
                    PIXI.WebGLGraphics.quadraticBezierCurve = function(fromX, fromY, cpX, cpY, toX, toY) {
                        var xa, ya, xb, yb, x, y, n = 20,
                            points = [];

                        function getPt(n1, n2, perc) {
                            var diff = n2 - n1;
                            return n1 + diff * perc;
                        }
                        var j = 0;
                        for (var i = 0; i <= n; i++) {
                            j = i / n; // The Green Line
                            xa = getPt(fromX, cpX, j);
                            ya = getPt(fromY, cpY, j);
                            xb = getPt(cpX, toX, j);
                            yb = getPt(cpY, toY, j); // The Black Dot
                            x = getPt(xa, xb, j);
                            y = getPt(ya, yb, j);
                            points.push(x, y);
                        }
                        return points;
                    };
                    /**
                     * Builds a circle to draw
                     *
                     * @static
                     * @private
                     * @method buildCircle
                     * @param graphicsData {Graphics} The graphics object to draw
                     * @param webGLData {Object}
                     */
                    PIXI.WebGLGraphics.buildCircle = function(graphicsData, webGLData) { // need to convert points to a nice regular data
                        var circleData = graphicsData.shape;
                        var x = circleData.x;
                        var y = circleData.y;
                        var width;
                        var height; // TODO - bit hacky??
                        if (graphicsData.type === PIXI.Graphics.CIRC) {
                            width = circleData.radius;
                            height = circleData.radius;
                        } else {
                            width = circleData.width;
                            height = circleData.height;
                        }
                        var totalSegs = 40;
                        var seg = Math.PI * 2 / totalSegs;
                        var i = 0;
                        if (graphicsData.fill) {
                            var color = PIXI.hex2rgb(graphicsData.fillColor);
                            var alpha = graphicsData.fillAlpha;
                            var r = color[0] * alpha;
                            var g = color[1] * alpha;
                            var b = color[2] * alpha;
                            var verts = webGLData.points;
                            var indices = webGLData.indices;
                            var vecPos = verts.length / 6;
                            indices.push(vecPos);
                            for (i = 0; i < totalSegs + 1; i++) {
                                verts.push(x, y, r, g, b, alpha);
                                verts.push(x + Math.sin(seg * i) * width, y + Math.cos(seg * i) * height, r, g, b, alpha);
                                indices.push(vecPos++, vecPos++);
                            }
                            indices.push(vecPos - 1);
                        }
                        if (graphicsData.lineWidth) {
                            var tempPoints = graphicsData.points;
                            graphicsData.points = [];
                            for (i = 0; i < totalSegs + 1; i++) {
                                graphicsData.points.push(x + Math.sin(seg * i) * width, y + Math.cos(seg * i) * height);
                            }
                            PIXI.WebGLGraphics.buildLine(graphicsData, webGLData);
                            graphicsData.points = tempPoints;
                        }
                    };
                    /**
                     * Builds a line to draw
                     *
                     * @static
                     * @private
                     * @method buildLine
                     * @param graphicsData {Graphics} The graphics object containing all the necessary properties
                     * @param webGLData {Object}
                     */
                    PIXI.WebGLGraphics.buildLine = function(graphicsData, webGLData) { // TODO OPTIMISE!
                        var i = 0;
                        var points = graphicsData.points;
                        if (points.length === 0) return; // if the line width is an odd number add 0.5 to align to a whole pixel
                        if (graphicsData.lineWidth % 2) {
                            for (i = 0; i < points.length; i++) {
                                points[i] += 0.5;
                            }
                        } // get first and last point.. figure out the middle!
                        var firstPoint = new PIXI.Point(points[0], points[1]);
                        var lastPoint = new PIXI.Point(points[points.length - 2], points[points.length - 1]); // if the first point is the last point - gonna have issues :)
                        if (firstPoint.x === lastPoint.x && firstPoint.y === lastPoint.y) { // need to clone as we are going to slightly modify the shape..
                            points = points.slice();
                            points.pop();
                            points.pop();
                            lastPoint = new PIXI.Point(points[points.length - 2], points[points.length - 1]);
                            var midPointX = lastPoint.x + (firstPoint.x - lastPoint.x) * 0.5;
                            var midPointY = lastPoint.y + (firstPoint.y - lastPoint.y) * 0.5;
                            points.unshift(midPointX, midPointY);
                            points.push(midPointX, midPointY);
                        }
                        var verts = webGLData.points;
                        var indices = webGLData.indices;
                        var length = points.length / 2;
                        var indexCount = points.length;
                        var indexStart = verts.length / 6; // DRAW the Line
                        var width = graphicsData.lineWidth / 2; // sort color
                        var color = PIXI.hex2rgb(graphicsData.lineColor);
                        var alpha = graphicsData.lineAlpha;
                        var r = color[0] * alpha;
                        var g = color[1] * alpha;
                        var b = color[2] * alpha;
                        var px, py, p1x, p1y, p2x, p2y, p3x, p3y;
                        var perpx, perpy, perp2x, perp2y, perp3x, perp3y;
                        var a1, b1, c1, a2, b2, c2;
                        var denom, pdist, dist;
                        p1x = points[0];
                        p1y = points[1];
                        p2x = points[2];
                        p2y = points[3];
                        perpx = -(p1y - p2y);
                        perpy = p1x - p2x;
                        dist = Math.sqrt(perpx * perpx + perpy * perpy);
                        perpx /= dist;
                        perpy /= dist;
                        perpx *= width;
                        perpy *= width; // start
                        verts.push(p1x - perpx, p1y - perpy, r, g, b, alpha);
                        verts.push(p1x + perpx, p1y + perpy, r, g, b, alpha);
                        for (i = 1; i < length - 1; i++) {
                            p1x = points[(i - 1) * 2];
                            p1y = points[(i - 1) * 2 + 1];
                            p2x = points[i * 2];
                            p2y = points[i * 2 + 1];
                            p3x = points[(i + 1) * 2];
                            p3y = points[(i + 1) * 2 + 1];
                            perpx = -(p1y - p2y);
                            perpy = p1x - p2x;
                            dist = Math.sqrt(perpx * perpx + perpy * perpy);
                            perpx /= dist;
                            perpy /= dist;
                            perpx *= width;
                            perpy *= width;
                            perp2x = -(p2y - p3y);
                            perp2y = p2x - p3x;
                            dist = Math.sqrt(perp2x * perp2x + perp2y * perp2y);
                            perp2x /= dist;
                            perp2y /= dist;
                            perp2x *= width;
                            perp2y *= width;
                            a1 = -perpy + p1y - (-perpy + p2y);
                            b1 = -perpx + p2x - (-perpx + p1x);
                            c1 = (-perpx + p1x) * (-perpy + p2y) - (-perpx + p2x) * (-perpy + p1y);
                            a2 = -perp2y + p3y - (-perp2y + p2y);
                            b2 = -perp2x + p2x - (-perp2x + p3x);
                            c2 = (-perp2x + p3x) * (-perp2y + p2y) - (-perp2x + p2x) * (-perp2y + p3y);
                            denom = a1 * b2 - a2 * b1;
                            if (Math.abs(denom) < 0.1) {
                                denom += 10.1;
                                verts.push(p2x - perpx, p2y - perpy, r, g, b, alpha);
                                verts.push(p2x + perpx, p2y + perpy, r, g, b, alpha);
                                continue;
                            }
                            px = (b1 * c2 - b2 * c1) / denom;
                            py = (a2 * c1 - a1 * c2) / denom;
                            pdist = (px - p2x) * (px - p2x) + (py - p2y) + (py - p2y);
                            if (pdist > 140 * 140) {
                                perp3x = perpx - perp2x;
                                perp3y = perpy - perp2y;
                                dist = Math.sqrt(perp3x * perp3x + perp3y * perp3y);
                                perp3x /= dist;
                                perp3y /= dist;
                                perp3x *= width;
                                perp3y *= width;
                                verts.push(p2x - perp3x, p2y - perp3y);
                                verts.push(r, g, b, alpha);
                                verts.push(p2x + perp3x, p2y + perp3y);
                                verts.push(r, g, b, alpha);
                                verts.push(p2x - perp3x, p2y - perp3y);
                                verts.push(r, g, b, alpha);
                                indexCount++;
                            } else {
                                verts.push(px, py);
                                verts.push(r, g, b, alpha);
                                verts.push(p2x - (px - p2x), p2y - (py - p2y));
                                verts.push(r, g, b, alpha);
                            }
                        }
                        p1x = points[(length - 2) * 2];
                        p1y = points[(length - 2) * 2 + 1];
                        p2x = points[(length - 1) * 2];
                        p2y = points[(length - 1) * 2 + 1];
                        perpx = -(p1y - p2y);
                        perpy = p1x - p2x;
                        dist = Math.sqrt(perpx * perpx + perpy * perpy);
                        perpx /= dist;
                        perpy /= dist;
                        perpx *= width;
                        perpy *= width;
                        verts.push(p2x - perpx, p2y - perpy);
                        verts.push(r, g, b, alpha);
                        verts.push(p2x + perpx, p2y + perpy);
                        verts.push(r, g, b, alpha);
                        indices.push(indexStart);
                        for (i = 0; i < indexCount; i++) {
                            indices.push(indexStart++);
                        }
                        indices.push(indexStart - 1);
                    };
                    /**
                     * Builds a complex polygon to draw
                     *
                     * @static
                     * @private
                     * @method buildComplexPoly
                     * @param graphicsData {Graphics} The graphics object containing all the necessary properties
                     * @param webGLData {Object}
                     */
                    PIXI.WebGLGraphics.buildComplexPoly = function(graphicsData, webGLData) { //TODO - no need to copy this as it gets turned into a FLoat32Array anyways..
                        var points = graphicsData.points.slice();
                        if (points.length < 6) return; // get first and last point.. figure out the middle!
                        var indices = webGLData.indices;
                        webGLData.points = points;
                        webGLData.alpha = graphicsData.fillAlpha;
                        webGLData.color = PIXI.hex2rgb(graphicsData.fillColor);
                        /*
                                    			calclate the bounds..
                                    		*/
                        var minX = Infinity;
                        var maxX = -Infinity;
                        var minY = Infinity;
                        var maxY = -Infinity;
                        var x, y; // get size..
                        for (var i = 0; i < points.length; i += 2) {
                            x = points[i];
                            y = points[i + 1];
                            minX = x < minX ? x : minX;
                            maxX = x > maxX ? x : maxX;
                            minY = y < minY ? y : minY;
                            maxY = y > maxY ? y : maxY;
                        } // add a quad to the end cos there is no point making another buffer!
                        points.push(minX, minY, maxX, minY, maxX, maxY, minX, maxY); // push a quad onto the end.. 
                        //TODO - this aint needed!
                        var length = points.length / 2;
                        for (i = 0; i < length; i++) {
                            indices.push(i);
                        }
                    };
                    /**
                     * Builds a polygon to draw
                     *
                     * @static
                     * @private
                     * @method buildPoly
                     * @param graphicsData {Graphics} The graphics object containing all the necessary properties
                     * @param webGLData {Object}
                     */
                    PIXI.WebGLGraphics.buildPoly = function(graphicsData, webGLData) {
                        var points = graphicsData.points;
                        if (points.length < 6) return; // get first and last point.. figure out the middle!
                        var verts = webGLData.points;
                        var indices = webGLData.indices;
                        var length = points.length / 2; // sort color
                        var color = PIXI.hex2rgb(graphicsData.fillColor);
                        var alpha = graphicsData.fillAlpha;
                        var r = color[0] * alpha;
                        var g = color[1] * alpha;
                        var b = color[2] * alpha;
                        var triangles = PIXI.PolyK.Triangulate(points);
                        if (!triangles) return false;
                        var vertPos = verts.length / 6;
                        var i = 0;
                        for (i = 0; i < triangles.length; i += 3) {
                            indices.push(triangles[i] + vertPos);
                            indices.push(triangles[i] + vertPos);
                            indices.push(triangles[i + 1] + vertPos);
                            indices.push(triangles[i + 2] + vertPos);
                            indices.push(triangles[i + 2] + vertPos);
                        }
                        for (i = 0; i < length; i++) {
                            verts.push(points[i * 2], points[i * 2 + 1], r, g, b, alpha);
                        }
                        return true;
                    };
                    PIXI.WebGLGraphics.graphicsDataPool = [];
                    /**
                     * @class WebGLGraphicsData
                     * @private
                     * @static
                     */
                    PIXI.WebGLGraphicsData = function(gl) {
                        this.gl = gl; //TODO does this need to be split before uploding??
                        this.color = [0, 0, 0]; // color split!
                        this.points = [];
                        this.indices = [];
                        this.buffer = gl.createBuffer();
                        this.indexBuffer = gl.createBuffer();
                        this.mode = 1;
                        this.alpha = 1;
                        this.dirty = true;
                    };
                    /**
                     * @method reset
                     */
                    PIXI.WebGLGraphicsData.prototype.reset = function() {
                        this.points = [];
                        this.indices = [];
                    };
                    /**
                     * @method upload
                     */
                    PIXI.WebGLGraphicsData.prototype.upload = function() {
                        var gl = this.gl; //    this.lastIndex = graphics.graphicsData.length;
                        this.glPoints = new PIXI.Float32Array(this.points);
                        gl.bindBuffer(gl.ARRAY_BUFFER, this.buffer);
                        gl.bufferData(gl.ARRAY_BUFFER, this.glPoints, gl.STATIC_DRAW);
                        this.glIndicies = new PIXI.Uint16Array(this.indices);
                        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
                        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this.glIndicies, gl.STATIC_DRAW);
                        this.dirty = false;
                    };
                    /**
                     * @author Mat Groves http://matgroves.com/ @Doormat23
                     */
                    PIXI.glContexts = []; // this is where we store the webGL contexts for easy access.
                    PIXI.instances = [];
                    /**
                     * The WebGLRenderer draws the stage and all its content onto a webGL enabled canvas. This renderer
                     * should be used for browsers that support webGL. This Render works by automatically managing webGLBatchs.
                     * So no need for Sprite Batches or Sprite Clouds.
                     * Don't forget to add the view to your DOM or you will not see anything :)
                     *
                     * @class WebGLRenderer
                     * @constructor
                     * @param [width=0] {Number} the width of the canvas view
                     * @param [height=0] {Number} the height of the canvas view
                     * @param [options] {Object} The optional renderer parameters
                     * @param [options.view] {HTMLCanvasElement} the canvas to use as a view, optional
                     * @param [options.transparent=false] {Boolean} If the render view is transparent, default false
                     * @param [options.autoResize=false] {Boolean} If the render view is automatically resized, default false
                     * @param [options.antialias=false] {Boolean} sets antialias (only applicable in chrome at the moment)
                     * @param [options.preserveDrawingBuffer=false] {Boolean} enables drawing buffer preservation, enable this if you need to call toDataUrl on the webgl context
                     */
                    PIXI.WebGLRenderer = function(width, height, options) {
                        if (options) {
                            for (var i in PIXI.defaultRenderOptions) {
                                if (typeof options[i] === 'undefined') options[i] = PIXI.defaultRenderOptions[i];
                            }
                        } else {
                            options = PIXI.defaultRenderOptions;
                        }
                        if (!PIXI.defaultRenderer) { //PIXI.sayHello('webGL');
                            PIXI.defaultRenderer = this;
                        }
                        /**
                         * @property type
                         * @type Number
                         */
                        this.type = PIXI.WEBGL_RENDERER; // do a catch.. only 1 webGL renderer..
                        /**
                         * Whether the render view is transparent
                         *
                         * @property transparent
                         * @type Boolean
                         */
                        this.transparent = options.transparent;
                        /**
                         * Whether the render view should be resized automatically
                         *
                         * @property autoResize
                         * @type Boolean
                         */
                        this.autoResize = options.autoResize || false;
                        /**
                         * The value of the preserveDrawingBuffer flag affects whether or not the contents of the stencil buffer is retained after rendering.
                         *
                         * @property preserveDrawingBuffer
                         * @type Boolean
                         */
                        this.preserveDrawingBuffer = options.preserveDrawingBuffer;
                        /**
                         * This sets if the WebGLRenderer will clear the context texture or not before the new render pass. If true:
                         * If the Stage is NOT transparent, Pixi will clear to alpha (0, 0, 0, 0).
                         * If the Stage is transparent, Pixi will clear to the target Stage's background color.
                         * Disable this by setting this to false. For example: if your game has a canvas filling background image, you often don't need this set.
                         *
                         * @property clearBeforeRender
                         * @type Boolean
                         * @default
                         */
                        this.clearBeforeRender = options.clearBeforeRender;
                        /**
                         * The width of the canvas view
                         *
                         * @property width
                         * @type Number
                         * @default 800
                         */
                        this.width = width || 800;
                        /**
                         * The height of the canvas view
                         *
                         * @property height
                         * @type Number
                         * @default 600
                         */
                        this.height = height || 600;
                        /**
                         * The canvas element that everything is drawn to
                         *
                         * @property view
                         * @type HTMLCanvasElement
                         */
                        this.view = options.view || document.createElement('canvas'); // deal with losing context..
                        /**
                         * @property contextLostBound
                         * @type Function
                         */
                        this.contextLostBound = this.handleContextLost.bind(this);
                        /**
                         * @property contextRestoredBound
                         * @type Function
                         */
                        this.contextRestoredBound = this.handleContextRestored.bind(this);
                        this.view.addEventListener('webglcontextlost', this.contextLostBound, false);
                        this.view.addEventListener('webglcontextrestored', this.contextRestoredBound, false);
                        /**
                         * @property _contextOptions
                         * @type Object
                         * @private
                         */
                        this._contextOptions = {
                            alpha: this.transparent,
                            antialias: options.antialias, // SPEED UP??
                            premultipliedAlpha: this.transparent && this.transparent !== 'notMultiplied',
                            stencil: true,
                            preserveDrawingBuffer: options.preserveDrawingBuffer
                        };
                        /**
                         * @property projection
                         * @type Point
                         */
                        this.projection = new PIXI.Point();
                        /**
                         * @property offset
                         * @type Point
                         */
                        this.offset = new PIXI.Point(0, 0); // time to create the render managers! each one focuses on managing a state in webGL
                        /**
                         * Deals with managing the shader programs and their attribs
                         * @property shaderManager
                         * @type WebGLShaderManager
                         */
                        this.shaderManager = new PIXI.WebGLShaderManager();
                        /**
                         * Manages the rendering of sprites
                         * @property spriteBatch
                         * @type WebGLSpriteBatch
                         */
                        this.spriteBatch = new PIXI.WebGLSpriteBatch();
                        /**
                         * Manages the masks using the stencil buffer
                         * @property maskManager
                         * @type WebGLMaskManager
                         */
                        this.maskManager = new PIXI.WebGLMaskManager();
                        /**
                         * Manages the filters
                         * @property filterManager
                         * @type WebGLFilterManager
                         */
                        this.filterManager = new PIXI.WebGLFilterManager();
                        /**
                         * Manages the stencil buffer
                         * @property stencilManager
                         * @type WebGLStencilManager
                         */
                        this.stencilManager = new PIXI.WebGLStencilManager();
                        /**
                         * Manages the blendModes
                         * @property blendModeManager
                         * @type WebGLBlendModeManager
                         */
                        this.blendModeManager = new PIXI.WebGLBlendModeManager();
                        /**
                         * TODO remove
                         * @property renderSession
                         * @type Object
                         */
                        this.renderSession = {};
                        this.renderSession.gl = this.gl;
                        this.renderSession.drawCount = 0;
                        this.renderSession.shaderManager = this.shaderManager;
                        this.renderSession.maskManager = this.maskManager;
                        this.renderSession.filterManager = this.filterManager;
                        this.renderSession.blendModeManager = this.blendModeManager;
                        this.renderSession.spriteBatch = this.spriteBatch;
                        this.renderSession.stencilManager = this.stencilManager;
                        this.renderSession.renderer = this; // time init the context..
                        this.initContext(); // map some webGL blend modes..
                        this.mapBlendModes();
                    }; // constructor
                    PIXI.WebGLRenderer.prototype.constructor = PIXI.WebGLRenderer;
                    /**
                     * @method initContext
                     */
                    PIXI.WebGLRenderer.prototype.initContext = function() {
                        var gl = this.view.getContext('webgl', this._contextOptions); // || this.view.getContext('experimental-webgl', this._contextOptions);
                        this.gl = gl;
                        if (!gl) { // fail, not able to get a context
                            throw new Error('This browser does not support webGL. Try using the canvas renderer');
                        }
                        this.glContextId = gl.id = PIXI.WebGLRenderer.glContextId++;
                        PIXI.glContexts[this.glContextId] = gl;
                        PIXI.instances[this.glContextId] = this; // set up the default pixi settings..
                        gl.disable(gl.DEPTH_TEST);
                        gl.disable(gl.CULL_FACE);
                        gl.enable(gl.BLEND); // need to set the context for all the managers...
                        this.shaderManager.setContext(gl);
                        this.spriteBatch.setContext(gl);
                        this.maskManager.setContext(gl);
                        this.filterManager.setContext(gl);
                        this.blendModeManager.setContext(gl);
                        this.stencilManager.setContext(gl);
                        this.renderSession.gl = this.gl; // now resize and we are good to go!
                        this.resize(this.width, this.height);
                    };
                    /**
                     * Renders the stage to its webGL view
                     *
                     * @method render
                     * @param stage {Stage} the Stage element to be rendered
                     */
                    PIXI.WebGLRenderer.prototype.render = function(stage) { // no point rendering if our context has been blown up!
                        if (this.contextLost) return; // if rendering a new stage clear the batches..
                        if (this.__stage !== stage) {
                            if (stage.interactive) stage.interactionManager.removeEvents(); // TODO make this work
                            // dont think this is needed any more?
                            this.__stage = stage;
                        } // update the scene graph
                        stage.updateTransform();
                        var gl = this.gl; // interaction
                        //    if(stage._interactive)
                        //  {
                        //need to add some events!
                        if (!stage._interactiveEventsAdded) {
                            stage._interactiveEventsAdded = true;
                            stage.interactionManager.setTarget(this);
                        }
                        /*}
                                    		else
                                    		{
                                    			if(stage._interactiveEventsAdded)
                                    			{
                                    				stage._interactiveEventsAdded = false;
                                    				stage.interactionManager.setTarget(this);
                                    			}
                                    		}*/ // -- Does this need to be set every frame? -- //
                        gl.viewport(0, 0, this.width, this.height); // make sure we are bound to the main frame buffer
                        gl.bindFramebuffer(gl.FRAMEBUFFER, null);
                        /*    if (this.clearBeforeRender)
                                    			{
                                    			if(this.transparent)
                                    			{
                                    				gl.clearColor(0, 0, 0, 0);
                                    			}
                                    			else
                                    			{
                                    				gl.clearColor(stage.backgroundColorSplit[0],stage.backgroundColorSplit[1],stage.backgroundColorSplit[2], 1);
                                    			}

                                    			gl.clear (gl.COLOR_BUFFER_BIT);
                                    		}*/
                        gl.clearColor(stage.backgroundColorSplit[0], stage.backgroundColorSplit[1], stage.backgroundColorSplit[2], 1);
                        gl.clear(gl.COLOR_BUFFER_BIT);
                        this.renderDisplayObject(stage, this.projection);
                    };
                    /**
                     * Renders a Display Object.
                     *
                     * @method renderDisplayObject
                     * @param displayObject {DisplayObject} The DisplayObject to render
                     * @param projection {Point} The projection
                     * @param buffer {Array} a standard WebGL buffer
                     */
                    PIXI.WebGLRenderer.prototype.renderDisplayObject = function(displayObject, projection, buffer) {
                        this.renderSession.blendModeManager.setBlendMode(PIXI.blendModes.NORMAL); // reset the render session data..
                        this.renderSession.drawCount = 0; // make sure to flip the Y if using a render texture..
                        this.renderSession.flipY = buffer ? -1 : 1; // set the default projection
                        this.renderSession.projection = projection; //set the default offset
                        this.renderSession.offset = this.offset; // start the sprite batch
                        this.spriteBatch.begin(this.renderSession); // start the filter manager
                        this.filterManager.begin(this.renderSession, buffer); // render the scene!
                        displayObject._renderWebGL(this.renderSession); // finish the sprite batch
                        this.spriteBatch.end();
                    };
                    /**
                     * Resizes the webGL view to the specified width and height.
                     *
                     * @method resize
                     * @param width {Number} the new width of the webGL view
                     * @param height {Number} the new height of the webGL view
                     */
                    PIXI.WebGLRenderer.prototype.resize = function(width, height) {
                        this.width = width;
                        this.height = height;
                        this.view.width = this.width;
                        this.view.height = this.height;
                        this.gl.viewport(0, 0, this.width, this.height);
                        this.projection.x = this.width / 2;
                        this.projection.y = -this.height / 2;
                    };
                    /**
                     * Updates and Creates a WebGL texture for the renderers context.
                     *
                     * @method updateTexture
                     * @param texture {Texture} the texture to update
                     */
                    PIXI.WebGLRenderer.prototype.updateTexture = function(texture) {
                        if (!texture.hasLoaded || !texture.source || !texture.source.width || !texture.source.height || texture.isMock || texture.source.isMock) return;
                        var gl = this.gl;
                        try { // If we're resizing, rather than initially allocating
                            if (typeof this._lastSize !== 'undefined') {
                                PIXI.frvrTextureMemoryUsage -= 4 * texture._lastSize.w * texture._lastSize.h; // 4 bytes per pixel
                            }
                        } catch (e) {}
                        if (!texture._glTextures[gl.id]) texture._glTextures[gl.id] = gl.createTexture();
                        gl.bindTexture(gl.TEXTURE_2D, texture._glTextures[gl.id]);
                        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultipliedAlpha); //    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, texture.source);
                        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, texture.source); //PIXI.frvrCheckGLError(gl,"ut/texImage2D")
                        try {
                            PIXI.frvrTextureMemoryUsage += 4 * texture.source.width * texture.source.height; // 4 bytes per pixel
                            texture._lastSize = {
                                w: texture.source.width,
                                h: texture.source.height
                            };
                        } catch (e) {}
                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, texture.scaleMode === PIXI.scaleModes.LINEAR ? gl.LINEAR : gl.NEAREST);
                        /*if(texture.mipmap && PIXI.isPowerOfTwo(texture.width, texture.height))
                                    		{
                                    			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, texture.scaleMode === PIXI.scaleModes.LINEAR ? gl.LINEAR_MIPMAP_LINEAR : gl.NEAREST_MIPMAP_NEAREST);
                                    			gl.generateMipmap(gl.TEXTURE_2D);
                                    		}
                                    		else
                                    		{*/
                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, texture.scaleMode === PIXI.scaleModes.LINEAR ? gl.LINEAR : gl.NEAREST); //}
                        // reguler...
                        /* if(!texture._powerOf2)
                        		{*/
                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
                        /*}
                                    		else
                                    		{
                                    			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);
                                    			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);
                                    		}*/
                        texture._dirty[gl.id] = false;
                        return texture._glTextures[gl.id];
                    };
                    /**
                     * Handles a lost webgl context
                     *
                     * @method handleContextLost
                     * @param event {Event}
                     * @private
                     */
                    PIXI.WebGLRenderer.prototype.handleContextLost = function(event) {
                        if (event.cancelable === undefined || event.cancelable) {
                            event.preventDefault();
                        }
                        this.contextLost = true;
                    };
                    /**
                     * Handles a restored webgl context
                     *
                     * @method handleContextRestored
                     * @param event {Event}
                     * @private
                     */
                    PIXI.WebGLRenderer.prototype.handleContextRestored = function() {
                        this.initContext(); // empty all the ol gl textures as they are useless now
                        for (var key in PIXI.TextureCache) {
                            var texture = PIXI.TextureCache[key].baseTexture;
                            texture._glTextures = [];
                        }
                        this.contextLost = false;
                    };
                    /**
                     * Removes everything from the renderer (event listeners, spritebatch, etc...)
                     *
                     * @method destroy
                     */
                    PIXI.WebGLRenderer.prototype.destroy = function() { // remove listeners
                        this.view.removeEventListener('webglcontextlost', this.contextLostBound);
                        this.view.removeEventListener('webglcontextrestored', this.contextRestoredBound);
                        PIXI.glContexts[this.glContextId] = null;
                        this.projection = null;
                        this.offset = null; // time to create the render managers! each one focuses on managine a state in webGL
                        this.shaderManager.destroy();
                        this.spriteBatch.destroy();
                        this.maskManager.destroy();
                        this.filterManager.destroy();
                        this.shaderManager = null;
                        this.spriteBatch = null;
                        this.maskManager = null;
                        this.filterManager = null;
                        this.gl = null;
                        this.renderSession = null;
                    };
                    /**
                     * Maps Pixi blend modes to WebGL blend modes.
                     *
                     * @method mapBlendModes
                     */
                    PIXI.WebGLRenderer.prototype.mapBlendModes = function() {
                        var gl = this.gl;
                        if (!PIXI.blendModesWebGL) {
                            PIXI.blendModesWebGL = [];
                            PIXI.blendModesWebGL[PIXI.blendModes.NORMAL] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
                            PIXI.blendModesWebGL[PIXI.blendModes.ADD] = [gl.SRC_ALPHA, gl.ONE]; // this is for iOS 14 blend mode bug should be change once the bug is fixed in iOS 14
                            PIXI.blendModesWebGL[PIXI.blendModes.MULTIPLY] = [gl.DST_COLOR, gl.ONE_MINUS_SRC_ALPHA];
                            PIXI.blendModesWebGL[PIXI.blendModes.SCREEN] = [gl.SRC_ALPHA, gl.ONE];
                        }
                    };
                    PIXI.WebGLRenderer.glContextId = 0;
                    /**
                     * @author Mat Groves http://matgroves.com/ @Doormat23
                     */
                    /**
                     * @class WebGLBlendModeManager
                     * @constructor
                     * @param gl {WebGLContext} the current WebGL drawing context
                     */
                    PIXI.WebGLBlendModeManager = function() {
                        /**
                         * @property currentBlendMode
                         * @type Number
                         */
                        this.currentBlendMode = 99999;
                    };
                    PIXI.WebGLBlendModeManager.prototype.constructor = PIXI.WebGLBlendModeManager;
                    /**
                     * Sets the WebGL Context.
                     *
                     * @method setContext
                     * @param gl {WebGLContext} the current WebGL drawing context
                     */
                    PIXI.WebGLBlendModeManager.prototype.setContext = function(gl) {
                        this.gl = gl;
                    };
                    /**
                     * Sets-up the given blendMode from WebGL's point of view.
                     * 
                     * @method setBlendMode 
                     * @param blendMode {Number} the blendMode, should be a Pixi const, such as PIXI.BlendModes.ADD
                     */
                    PIXI.WebGLBlendModeManager.prototype.setBlendMode = function(blendMode) {
                        if (this.currentBlendMode === blendMode) return false;
                        this.currentBlendMode = blendMode;
                        var blendModeWebGL = PIXI.blendModesWebGL[this.currentBlendMode];
                        this.gl.blendFunc(blendModeWebGL[0], blendModeWebGL[1]);
                        return true;
                    };
                    /**
                     * Destroys this object.
                     * 
                     * @method destroy
                     */
                    PIXI.WebGLBlendModeManager.prototype.destroy = function() {
                        this.gl = null;
                    };
                    /**
                     * @author Mat Groves http://matgroves.com/ @Doormat23
                     */
                    /**
                     * @class WebGLMaskManager
                     * @constructor
                     * @private
                     */
                    PIXI.WebGLMaskManager = function() {};
                    PIXI.WebGLMaskManager.prototype.constructor = PIXI.WebGLMaskManager;
                    /**
                     * Sets the drawing context to the one given in parameter.
                     * 
                     * @method setContext 
                     * @param gl {WebGLContext} the current WebGL drawing context
                     */
                    PIXI.WebGLMaskManager.prototype.setContext = function(gl) {
                        this.gl = gl;
                    };
                    /**
                     * Applies the Mask and adds it to the current filter stack.
                     * 
                     * @method pushMask
                     * @param maskData {Array}
                     * @param renderSession {Object}
                     */
                    PIXI.WebGLMaskManager.prototype.pushMask = function(maskData, renderSession) {
                        var gl = renderSession.gl;
                        if (maskData.dirty) {
                            PIXI.WebGLGraphics.updateGraphics(maskData, gl);
                        }
                        if (!maskData._webGL[gl.id].data.length) return;
                        renderSession.stencilManager.pushStencil(maskData, maskData._webGL[gl.id].data[0], renderSession);
                    };
                    /**
                     * Removes the last filter from the filter stack and doesn't return it.
                     * 
                     * @method popMask
                     * @param maskData {Array}
                     * @param renderSession {Object} an object containing all the useful parameters
                     */
                    PIXI.WebGLMaskManager.prototype.popMask = function(maskData, renderSession) {
                        var gl = this.gl;
                        renderSession.stencilManager.popStencil(maskData, maskData._webGL[gl.id].data[0], renderSession);
                    };
                    /**
                     * Destroys the mask stack.
                     * 
                     * @method destroy
                     */
                    PIXI.WebGLMaskManager.prototype.destroy = function() {
                        this.gl = null;
                    };
                    /**
                     * @author Mat Groves http://matgroves.com/ @Doormat23
                     */
                    /**
                     * @class WebGLStencilManager
                     * @constructor
                     * @private
                     */
                    PIXI.WebGLStencilManager = function() {
                        this.stencilStack = [];
                        this.reverse = true;
                        this.count = 0;
                    };
                    /**
                     * Sets the drawing context to the one given in parameter.
                     * 
                     * @method setContext 
                     * @param gl {WebGLContext} the current WebGL drawing context
                     */
                    PIXI.WebGLStencilManager.prototype.setContext = function(gl) {
                        this.gl = gl;
                    };
                    /**
                     * Applies the Mask and adds it to the current filter stack.
                     * 
                     * @method pushMask
                     * @param graphics {Graphics}
                     * @param webGLData {Array}
                     * @param renderSession {Object}
                     */
                    PIXI.WebGLStencilManager.prototype.pushStencil = function(graphics, webGLData, renderSession) {
                        var gl = this.gl;
                        this.bindGraphics(graphics, webGLData, renderSession);
                        if (this.stencilStack.length === 0) {
                            gl.enable(gl.STENCIL_TEST);
                            gl.clear(gl.STENCIL_BUFFER_BIT);
                            this.reverse = true;
                            this.count = 0;
                        }
                        this.stencilStack.push(webGLData);
                        var level = this.count;
                        gl.colorMask(false, false, false, false);
                        gl.stencilFunc(gl.ALWAYS, 0, 0xFF);
                        gl.stencilOp(gl.KEEP, gl.KEEP, gl.INVERT); // draw the triangle strip!
                        if (webGLData.mode === 1) {
                            gl.drawElements(gl.TRIANGLE_FAN, webGLData.indices.length - 4, gl.UNSIGNED_SHORT, 0);
                            if (this.reverse) {
                                gl.stencilFunc(gl.EQUAL, 0xFF - level, 0xFF);
                                gl.stencilOp(gl.KEEP, gl.KEEP, gl.DECR);
                            } else {
                                gl.stencilFunc(gl.EQUAL, level, 0xFF);
                                gl.stencilOp(gl.KEEP, gl.KEEP, gl.INCR);
                            } // draw a quad to increment..
                            gl.drawElements(gl.TRIANGLE_FAN, 4, gl.UNSIGNED_SHORT, (webGLData.indices.length - 4) * 2);
                            if (this.reverse) {
                                gl.stencilFunc(gl.EQUAL, 0xFF - (level + 1), 0xFF);
                            } else {
                                gl.stencilFunc(gl.EQUAL, level + 1, 0xFF);
                            }
                            this.reverse = !this.reverse;
                        } else {
                            if (!this.reverse) {
                                gl.stencilFunc(gl.EQUAL, 0xFF - level, 0xFF);
                                gl.stencilOp(gl.KEEP, gl.KEEP, gl.DECR);
                            } else {
                                gl.stencilFunc(gl.EQUAL, level, 0xFF);
                                gl.stencilOp(gl.KEEP, gl.KEEP, gl.INCR);
                            }
                            gl.drawElements(gl.TRIANGLE_STRIP, webGLData.indices.length, gl.UNSIGNED_SHORT, 0);
                            if (!this.reverse) {
                                gl.stencilFunc(gl.EQUAL, 0xFF - (level + 1), 0xFF);
                            } else {
                                gl.stencilFunc(gl.EQUAL, level + 1, 0xFF);
                            }
                        }
                        gl.colorMask(true, true, true, true);
                        gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);
                        this.count++;
                    };
                    /**
                     * TODO this does not belong here!
                     * 
                     * @method bindGraphics
                     * @param graphics {Graphics}
                     * @param webGLData {Array}
                     * @param renderSession {Object}
                     */
                    PIXI.WebGLStencilManager.prototype.bindGraphics = function(graphics, webGLData, renderSession) { //if(this._currentGraphics === graphics)return;
                        this._currentGraphics = graphics;
                        var gl = this.gl; // bind the graphics object..
                        var projection = renderSession.projection,
                            offset = renderSession.offset,
                            shader; // = renderSession.shaderManager.primitiveShader;
                        if (webGLData.mode === 1) {
                            shader = renderSession.shaderManager.complexPrimitiveShader;
                            renderSession.shaderManager.setShader(shader);
                            gl.uniform1f(shader.flipY, renderSession.flipY);
                            gl.uniformMatrix3fv(shader.translationMatrix, false, graphics.worldTransform.toArray(true));
                            gl.uniform2f(shader.projectionVector, projection.x, -projection.y);
                            gl.uniform2f(shader.offsetVector, -offset.x, -offset.y);
                            gl.uniform3fv(shader.tintColor, PIXI.hex2rgb(graphics.tint));
                            gl.uniform3fv(shader.color, webGLData.color);
                            gl.uniform1f(shader.alpha, graphics.worldAlpha * webGLData.alpha);
                            gl.bindBuffer(gl.ARRAY_BUFFER, webGLData.buffer);
                            gl.vertexAttribPointer(shader.aVertexPosition, 2, gl.FLOAT, false, 4 * 2, 0); // now do the rest..
                            // set the index buffer!
                            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, webGLData.indexBuffer);
                        } else { //renderSession.shaderManager.activatePrimitiveShader();
                            shader = renderSession.shaderManager.primitiveShader;
                            renderSession.shaderManager.setShader(shader);
                            gl.uniformMatrix3fv(shader.translationMatrix, false, graphics.worldTransform.toArray(true));
                            gl.uniform1f(shader.flipY, renderSession.flipY);
                            gl.uniform2f(shader.projectionVector, projection.x, -projection.y);
                            gl.uniform2f(shader.offsetVector, -offset.x, -offset.y);
                            gl.uniform3fv(shader.tintColor, PIXI.hex2rgb(graphics.tint));
                            gl.uniform1f(shader.alpha, graphics.worldAlpha);
                            gl.bindBuffer(gl.ARRAY_BUFFER, webGLData.buffer);
                            gl.vertexAttribPointer(shader.aVertexPosition, 2, gl.FLOAT, false, 4 * 6, 0);
                            gl.vertexAttribPointer(shader.colorAttribute, 4, gl.FLOAT, false, 4 * 6, 2 * 4); // set the index buffer!
                            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, webGLData.indexBuffer);
                        }
                    };
                    /**
                     * @method popStencil
                     * @param graphics {Graphics}
                     * @param webGLData {Array}
                     * @param renderSession {Object}
                     */
                    PIXI.WebGLStencilManager.prototype.popStencil = function(graphics, webGLData, renderSession) {
                        var gl = this.gl;
                        this.stencilStack.pop();
                        this.count--;
                        if (this.stencilStack.length === 0) { // the stack is empty!
                            gl.disable(gl.STENCIL_TEST);
                        } else {
                            var level = this.count;
                            this.bindGraphics(graphics, webGLData, renderSession);
                            gl.colorMask(false, false, false, false);
                            if (webGLData.mode === 1) {
                                this.reverse = !this.reverse;
                                if (this.reverse) {
                                    gl.stencilFunc(gl.EQUAL, 0xFF - (level + 1), 0xFF);
                                    gl.stencilOp(gl.KEEP, gl.KEEP, gl.INCR);
                                } else {
                                    gl.stencilFunc(gl.EQUAL, level + 1, 0xFF);
                                    gl.stencilOp(gl.KEEP, gl.KEEP, gl.DECR);
                                } // draw a quad to increment..
                                gl.drawElements(gl.TRIANGLE_FAN, 4, gl.UNSIGNED_SHORT, (webGLData.indices.length - 4) * 2);
                                gl.stencilFunc(gl.ALWAYS, 0, 0xFF);
                                gl.stencilOp(gl.KEEP, gl.KEEP, gl.INVERT); // draw the triangle strip!
                                gl.drawElements(gl.TRIANGLE_FAN, webGLData.indices.length - 4, gl.UNSIGNED_SHORT, 0);
                                if (!this.reverse) {
                                    gl.stencilFunc(gl.EQUAL, 0xFF - level, 0xFF);
                                } else {
                                    gl.stencilFunc(gl.EQUAL, level, 0xFF);
                                }
                            } else { //  console.log("<<>>")
                                if (!this.reverse) {
                                    gl.stencilFunc(gl.EQUAL, 0xFF - (level + 1), 0xFF);
                                    gl.stencilOp(gl.KEEP, gl.KEEP, gl.INCR);
                                } else {
                                    gl.stencilFunc(gl.EQUAL, level + 1, 0xFF);
                                    gl.stencilOp(gl.KEEP, gl.KEEP, gl.DECR);
                                }
                                gl.drawElements(gl.TRIANGLE_STRIP, webGLData.indices.length, gl.UNSIGNED_SHORT, 0);
                                if (!this.reverse) {
                                    gl.stencilFunc(gl.EQUAL, 0xFF - level, 0xFF);
                                } else {
                                    gl.stencilFunc(gl.EQUAL, level, 0xFF);
                                }
                            }
                            gl.colorMask(true, true, true, true);
                            gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);
                        }
                    };
                    /**
                     * Destroys the mask stack.
                     * 
                     * @method destroy
                     */
                    PIXI.WebGLStencilManager.prototype.destroy = function() {
                        this.stencilStack = null;
                        this.gl = null;
                    };
                    /**
                     * @author Mat Groves http://matgroves.com/ @Doormat23
                     */
                    /**
                     * @class WebGLShaderManager
                     * @constructor
                     * @private
                     */
                    PIXI.WebGLShaderManager = function() {
                        /**
                         * @property maxAttibs
                         * @type Number
                         */
                        this.maxAttibs = 10;
                        /**
                         * @property attribState
                         * @type Array
                         */
                        this.attribState = [];
                        /**
                         * @property tempAttribState
                         * @type Array
                         */
                        this.tempAttribState = [];
                        for (var i = 0; i < this.maxAttibs; i++) {
                            this.attribState[i] = false;
                        }
                        /**
                         * @property stack
                         * @type Array
                         */
                        this.stack = [];
                    };
                    PIXI.WebGLShaderManager.prototype.constructor = PIXI.WebGLShaderManager;
                    /**
                     * Initialises the context and the properties.
                     * 
                     * @method setContext 
                     * @param gl {WebGLContext} the current WebGL drawing context
                     */
                    PIXI.WebGLShaderManager.prototype.setContext = function(gl) {
                        this.gl = gl; // the next one is used for rendering primitives
                        this.primitiveShader = new PIXI.PrimitiveShader(gl); // the next one is used for rendering triangle strips
                        this.complexPrimitiveShader = new PIXI.ComplexPrimitiveShader(gl); // this shader is used for the default sprite rendering
                        this.defaultShader = new PIXI.PixiShader(gl); // this shader is used for the fast sprite rendering
                        this.fastShader = new PIXI.PixiFastShader(gl); // the next one is used for rendering triangle strips
                        this.setShader(this.defaultShader);
                    };
                    /**$
                     * Takes the attributes given in parameters.
                     * 
                     * @method setAttribs
                     * @param attribs {Array} attribs 
                     */
                    PIXI.WebGLShaderManager.prototype.setAttribs = function(attribs) { // reset temp state
                        var i;
                        for (i = 0; i < this.tempAttribState.length; i++) {
                            this.tempAttribState[i] = false;
                        } // set the new attribs
                        for (i = 0; i < attribs.length; i++) {
                            var attribId = attribs[i];
                            this.tempAttribState[attribId] = true;
                        }
                        var gl = this.gl;
                        for (i = 0; i < this.attribState.length; i++) {
                            if (this.attribState[i] !== this.tempAttribState[i]) {
                                this.attribState[i] = this.tempAttribState[i];
                                if (this.tempAttribState[i]) {
                                    gl.enableVertexAttribArray(i);
                                } else {
                                    gl.disableVertexAttribArray(i);
                                }
                            }
                        }
                    };
                    /**
                     * Sets the current shader.
                     * 
                     * @method setShader
                     * @param shader {Any}
                     */
                    PIXI.WebGLShaderManager.prototype.setShader = function(shader) {
                        if (this._currentId === shader._UID) return false;
                        this._currentId = shader._UID;
                        this.currentShader = shader;
                        this.gl.useProgram(shader.program);
                        this.setAttribs(shader.attributes);
                        return true;
                    };
                    /**
                     * Destroys this object.
                     * 
                     * @method destroy
                     */
                    PIXI.WebGLShaderManager.prototype.destroy = function() {
                        this.attribState = null;
                        this.tempAttribState = null;
                        this.primitiveShader.destroy();
                        this.complexPrimitiveShader.destroy();
                        this.defaultShader.destroy();
                        this.fastShader.destroy();
                        this.gl = null;
                    };
                    /**
                     * @author Mat Groves
                     * 
                     * Big thanks to the very clever Matt DesLauriers <mattdesl> https://github.com/mattdesl/
                     * for creating the original pixi version!
                     * Also a thanks to https://github.com/bchevalier for tweaking the tint and alpha so that they now share 4 bytes on the vertex buffer
                     * 
                     * Heavily inspired by LibGDX's WebGLSpriteBatch:
                     * https://github.com/libgdx/libgdx/blob/master/gdx/src/com/badlogic/gdx/graphics/g2d/WebGLSpriteBatch.java
                     */
                    /**
                     *
                     * @class WebGLSpriteBatch
                     * @private
                     * @constructor
                     */
                    PIXI.WebGLSpriteBatch = function() {
                        /**
                         * @property vertSize
                         * @type Number
                         */
                        this.vertSize = 5;
                        /**
                         * The number of images in the SpriteBatch before it flushes
                         * @property size
                         * @type Number
                         */
                        this.size = 2000; //Math.pow(2, 16) /  this.vertSize;
                        //the total number of bytes in our batch
                        var numVerts = this.size * 4 * 4 * this.vertSize; //the total number of indices in our batch
                        var numIndices = this.size * 6;
                        /**
                         * Holds the vertices
                         *
                         * @property vertices
                         * @type ArrayBuffer
                         */
                        this.vertices = new PIXI.ArrayBuffer(numVerts);
                        /**
                         * View on the vertices as a Float32Array
                         *
                         * @property positions
                         * @type Float32Array
                         */
                        this.positions = new PIXI.Float32Array(this.vertices);
                        /**
                         * View on the vertices as a Uint32Array
                         *
                         * @property colors
                         * @type Uint32Array
                         */
                        this.colors = new PIXI.Uint32Array(this.vertices);
                        /**
                         * Holds the indices
                         *
                         * @property indices
                         * @type Uint16Array
                         */
                        this.indices = new PIXI.Uint16Array(numIndices);
                        /**
                         * @property lastIndexCount
                         * @type Number
                         */
                        this.lastIndexCount = 0;
                        for (var i = 0, j = 0; i < numIndices; i += 6, j += 4) {
                            this.indices[i + 0] = j + 0;
                            this.indices[i + 1] = j + 1;
                            this.indices[i + 2] = j + 2;
                            this.indices[i + 3] = j + 0;
                            this.indices[i + 4] = j + 2;
                            this.indices[i + 5] = j + 3;
                        }
                        /**
                         * @property drawing
                         * @type Boolean
                         */
                        this.drawing = false;
                        /**
                         * @property currentBatchSize
                         * @type Number
                         */
                        this.currentBatchSize = 0;
                        /**
                         * @property currentBaseTexture
                         * @type BaseTexture
                         */
                        this.currentBaseTexture = null;
                        /**
                         * @property dirty
                         * @type Boolean
                         */
                        this.dirty = true;
                        /**
                         * @property textures
                         * @type Array
                         */
                        this.textures = [];
                        /**
                         * @property blendModes
                         * @type Array
                         */
                        this.blendModes = [];
                        /**
                         * @property shaders
                         * @type Array
                         */
                        this.shaders = [];
                        /**
                         * @property sprites
                         * @type Array
                         */
                        this.sprites = [];
                        /**
                         * @property defaultShader
                         * @type AbstractFilter
                         */
                        this.defaultShader = new PIXI.AbstractFilter(['precision lowp float;', 'varying vec2 vTextureCoord;', 'varying vec4 vColor;', 'uniform sampler2D uSampler;', 'void main(void) {', '   gl_FragColor = texture2D(uSampler, vTextureCoord) * vColor ;', '}']);
                    };
                    /**
                     * @method setContext
                     * @param gl {WebGLContext} the current WebGL drawing context
                     */
                    PIXI.WebGLSpriteBatch.prototype.setContext = function(gl) {
                        this.gl = gl; // create a couple of buffers
                        this.vertexBuffer = gl.createBuffer();
                        this.indexBuffer = gl.createBuffer(); // 65535 is max index, so 65535 / 6 = 10922.
                        //upload the index data
                        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
                        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this.indices, gl.STATIC_DRAW);
                        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);
                        gl.bufferData(gl.ARRAY_BUFFER, this.vertices, gl.DYNAMIC_DRAW);
                        this.currentBlendMode = 99999;
                        var shader = new PIXI.PixiShader(gl);
                        shader.fragmentSrc = this.defaultShader.fragmentSrc;
                        shader.uniforms = {};
                        shader.init();
                        this.defaultShader.shaders[gl.id] = shader;
                    };
                    /**
                     * @method begin
                     * @param renderSession {Object} The RenderSession object
                     */
                    PIXI.WebGLSpriteBatch.prototype.begin = function(renderSession) {
                        this.renderSession = renderSession;
                        this.shader = this.renderSession.shaderManager.defaultShader;
                        this.start();
                    };
                    /**
                     * @method end
                     */
                    PIXI.WebGLSpriteBatch.prototype.end = function() {
                        this.flush();
                    };
                    /**
                     * @method render
                     * @param sprite {Sprite} the sprite to render when using this spritebatch
                     */
                    PIXI.WebGLSpriteBatch.prototype.render = function(sprite) {
                        var texture = sprite.texture; //TODO set blend modes.. 
                        // check texture..
                        if (this.currentBatchSize >= this.size) {
                            this.flush();
                            this.currentBaseTexture = texture.baseTexture;
                        }
                        texture.resolution || 1; // get the uvs for the texture
                        var uvs = texture._uvs; // if the uvs have not updated then no point rendering just yet!
                        if (!uvs) return; // TODO trim??
                        var aX = sprite.anchor.x;
                        var aY = sprite.anchor.y;
                        var w0, w1, h0, h1;
                        if (texture.trim) { // if the sprite is trimmed then we need to add the extra space before transforming the sprite coords..
                            var trim = texture.trim;
                            w1 = trim.x - aX * trim.width;
                            w0 = w1 + texture.frame.width;
                            h1 = trim.y - aY * trim.height;
                            h0 = h1 + texture.frame.height;
                        } else {
                            w0 = texture.frame.width * (1 - aX);
                            w1 = texture.frame.width * -aX;
                            h0 = texture.frame.height * (1 - aY);
                            h1 = texture.frame.height * -aY;
                        }
                        var index = this.currentBatchSize * 4 * this.vertSize;
                        var worldTransform = sprite.worldTransform;
                        var a = worldTransform.a;
                        var b = worldTransform.b;
                        var c = worldTransform.c;
                        var d = worldTransform.d;
                        var tx = worldTransform.tx;
                        var ty = worldTransform.ty;
                        var colors = this.colors;
                        var positions = this.positions;
                        if (sprite.bitmapPolygon) {
                            var cords = sprite.bitmapPolygonCords; // xy
                            positions[index] = cords[0] + tx | 0;
                            positions[index + 1] = cords[1] + ty | 0; // xy
                            positions[index + 5] = cords[2] + tx | 0;
                            positions[index + 6] = cords[3] + ty | 0; // xy
                            positions[index + 10] = cords[4] + tx | 0;
                            positions[index + 11] = cords[5] + ty | 0; // xy
                            positions[index + 15] = cords[6] + tx | 0;
                            positions[index + 16] = cords[7] + ty | 0;
                        } else if (texture.floorCoordinates) { // xy
                            positions[index] = a * w1 + c * h1 + tx | 0;
                            positions[index + 1] = d * h1 + b * w1 + ty | 0; // xy
                            positions[index + 5] = a * w0 + c * h1 + tx | 0;
                            positions[index + 6] = d * h1 + b * w0 + ty | 0; // xy
                            positions[index + 10] = a * w0 + c * h0 + tx | 0;
                            positions[index + 11] = d * h0 + b * w0 + ty | 0; // xy
                            positions[index + 15] = a * w1 + c * h0 + tx | 0;
                            positions[index + 16] = d * h0 + b * w1 + ty | 0;
                        } else { // xy
                            positions[index] = a * w1 + c * h1 + tx;
                            positions[index + 1] = d * h1 + b * w1 + ty; // xy
                            positions[index + 5] = a * w0 + c * h1 + tx;
                            positions[index + 6] = d * h1 + b * w0 + ty; // xy
                            positions[index + 10] = a * w0 + c * h0 + tx;
                            positions[index + 11] = d * h0 + b * w0 + ty; // xy
                            positions[index + 15] = a * w1 + c * h0 + tx;
                            positions[index + 16] = d * h0 + b * w1 + ty;
                        } // uv
                        positions[index + 2] = uvs.x0;
                        positions[index + 3] = uvs.y0; // uv
                        positions[index + 7] = uvs.x1;
                        positions[index + 8] = uvs.y1; // uv
                        positions[index + 12] = uvs.x2;
                        positions[index + 13] = uvs.y2; // uv
                        positions[index + 17] = uvs.x3;
                        positions[index + 18] = uvs.y3; // color and alpha
                        var tint = sprite.tint;
                        colors[index + 4] = colors[index + 9] = colors[index + 14] = colors[index + 19] = (tint >> 16) + (tint & 0xff00) + ((tint & 0xff) << 16) + (sprite.worldAlpha * 255 << 24); // increment the batchsize
                        this.sprites[this.currentBatchSize++] = sprite;
                    };
                    /**
                     * Renders a TilingSprite using the spriteBatch.
                     * 
                     * @method renderTilingSprite
                     * @param sprite {TilingSprite} the tilingSprite to render
                     */
                    PIXI.WebGLSpriteBatch.prototype.renderTilingSprite = function(tilingSprite) {
                        var texture = tilingSprite.tilingTexture; // check texture..
                        if (this.currentBatchSize >= this.size) { //return;
                            this.flush();
                            this.currentBaseTexture = texture.baseTexture;
                        } // set the textures uvs temporarily
                        // TODO create a separate texture so that we can tile part of a texture
                        if (!tilingSprite._uvs) tilingSprite._uvs = new PIXI.TextureUvs();
                        var uvs = tilingSprite._uvs;
                        tilingSprite.tilePosition.x %= texture.baseTexture.width * tilingSprite.tileScaleOffset.x;
                        tilingSprite.tilePosition.y %= texture.baseTexture.height * tilingSprite.tileScaleOffset.y;
                        var offsetX = tilingSprite.tilePosition.x / (texture.baseTexture.width * tilingSprite.tileScaleOffset.x);
                        var offsetY = tilingSprite.tilePosition.y / (texture.baseTexture.height * tilingSprite.tileScaleOffset.y);
                        var scaleX = tilingSprite.width / texture.baseTexture.width / (tilingSprite.tileScale.x * tilingSprite.tileScaleOffset.x);
                        var scaleY = tilingSprite.height / texture.baseTexture.height / (tilingSprite.tileScale.y * tilingSprite.tileScaleOffset.y);
                        uvs.x0 = 0 - offsetX;
                        uvs.y0 = 0 - offsetY;
                        uvs.x1 = 1 * scaleX - offsetX;
                        uvs.y1 = 0 - offsetY;
                        uvs.x2 = 1 * scaleX - offsetX;
                        uvs.y2 = 1 * scaleY - offsetY;
                        uvs.x3 = 0 - offsetX;
                        uvs.y3 = 1 * scaleY - offsetY; // get the tilingSprites current alpha and tint and combining them into a single color
                        var tint = tilingSprite.tint;
                        var color = (tint >> 16) + (tint & 0xff00) + ((tint & 0xff) << 16) + (tilingSprite.alpha * 255 << 24);
                        var positions = this.positions;
                        var colors = this.colors;
                        var width = tilingSprite.width;
                        var height = tilingSprite.height; // TODO trim??
                        var aX = tilingSprite.anchor.x;
                        var aY = tilingSprite.anchor.y;
                        var w0 = width * (1 - aX);
                        var w1 = width * -aX;
                        var h0 = height * (1 - aY);
                        var h1 = height * -aY;
                        var index = this.currentBatchSize * 4 * this.vertSize;
                        var worldTransform = tilingSprite.worldTransform;
                        var a = worldTransform.a;
                        var b = worldTransform.b;
                        var c = worldTransform.c;
                        var d = worldTransform.d;
                        var tx = worldTransform.tx;
                        var ty = worldTransform.ty; // xy
                        positions[index++] = a * w1 + c * h1 + tx;
                        positions[index++] = d * h1 + b * w1 + ty; // uv
                        positions[index++] = uvs.x0;
                        positions[index++] = uvs.y0; // color
                        colors[index++] = color; // xy
                        positions[index++] = a * w0 + c * h1 + tx;
                        positions[index++] = d * h1 + b * w0 + ty; // uv
                        positions[index++] = uvs.x1;
                        positions[index++] = uvs.y1; // color
                        colors[index++] = color; // xy
                        positions[index++] = a * w0 + c * h0 + tx;
                        positions[index++] = d * h0 + b * w0 + ty; // uv
                        positions[index++] = uvs.x2;
                        positions[index++] = uvs.y2; // color
                        colors[index++] = color; // xy
                        positions[index++] = a * w1 + c * h0 + tx;
                        positions[index++] = d * h0 + b * w1 + ty; // uv
                        positions[index++] = uvs.x3;
                        positions[index++] = uvs.y3; // color
                        colors[index++] = color; // increment the batchsize
                        this.sprites[this.currentBatchSize++] = tilingSprite;
                    };
                    /**
                     * Renders the content and empties the current batch.
                     *
                     * @method flush
                     */
                    PIXI.WebGLSpriteBatch.prototype.flush = function() { // If the batch is length 0 then return as there is nothing to draw
                        if (this.currentBatchSize === 0) return;
                        var gl = this.gl;
                        var shader;
                        if (this.dirty) {
                            this.dirty = false; // bind the main texture
                            gl.activeTexture(gl.TEXTURE0); // bind the buffers
                            gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);
                            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
                            shader = this.defaultShader.shaders[gl.id]; // this is the same for each shader?
                            var stride = this.vertSize * 4;
                            gl.vertexAttribPointer(shader.aVertexPosition, 2, gl.FLOAT, false, stride, 0);
                            gl.vertexAttribPointer(shader.aTextureCoord, 2, gl.FLOAT, false, stride, 2 * 4); // color attributes will be interpreted as unsigned bytes and normalized
                            gl.vertexAttribPointer(shader.colorAttribute, 4, gl.UNSIGNED_BYTE, true, stride, 4 * 4);
                        } // upload the verts to the buffer  
                        if (this.currentBatchSize > this.size * 0.5) {
                            gl.bufferSubData(gl.ARRAY_BUFFER, 0, this.vertices);
                        } else {
                            var view = this.positions.subarray(0, this.currentBatchSize * 4 * this.vertSize);
                            gl.bufferSubData(gl.ARRAY_BUFFER, 0, view);
                        }
                        var nextTexture, nextBlendMode, nextShader;
                        var batchSize = 0;
                        var start = 0;
                        var currentBaseTexture = null;
                        var currentBlendMode = this.renderSession.blendModeManager.currentBlendMode;
                        var currentShader = null;
                        var blendSwap = false;
                        var shaderSwap = false;
                        var sprite;
                        for (var i = 0, j = this.currentBatchSize; i < j; i++) {
                            sprite = this.sprites[i];
                            nextTexture = sprite.texture.baseTexture;
                            nextBlendMode = sprite.blendMode;
                            nextShader = sprite.shader || this.defaultShader;
                            blendSwap = currentBlendMode !== nextBlendMode;
                            shaderSwap = currentShader !== nextShader; // should I use _UIDS???
                            if (currentBaseTexture !== nextTexture || blendSwap || shaderSwap) {
                                this.renderBatch(currentBaseTexture, batchSize, start);
                                start = i;
                                batchSize = 0;
                                currentBaseTexture = nextTexture;
                                if (blendSwap) {
                                    currentBlendMode = nextBlendMode;
                                    this.renderSession.blendModeManager.setBlendMode(currentBlendMode);
                                }
                                if (shaderSwap) {
                                    currentShader = nextShader;
                                    shader = currentShader.shaders[gl.id];
                                    if (!shader) {
                                        shader = new PIXI.PixiShader(gl);
                                        shader.fragmentSrc = currentShader.fragmentSrc;
                                        shader.uniforms = currentShader.uniforms;
                                        shader.init();
                                        currentShader.shaders[gl.id] = shader;
                                    } // set shader function???
                                    this.renderSession.shaderManager.setShader(shader);
                                    if (shader.dirty) shader.syncUniforms(); // both thease only need to be set if they are changing..
                                    // set the projection
                                    var projection = this.renderSession.projection;
                                    gl.uniform2f(shader.projectionVector, projection.x, projection.y); // TODO - this is temprorary!
                                    var offsetVector = this.renderSession.offset;
                                    gl.uniform2f(shader.offsetVector, offsetVector.x, offsetVector.y); // set the pointers
                                }
                            }
                            batchSize++;
                        }
                        this.renderBatch(currentBaseTexture, batchSize, start); // then reset the batch!
                        this.currentBatchSize = 0;
                    };
                    /**
                     * @method renderBatch
                     * @param texture {Texture}
                     * @param size {Number}
                     * @param startIndex {Number}
                     */
                    PIXI.WebGLSpriteBatch.prototype.renderBatch = function(texture, size, startIndex) {
                        if (size === 0) return;
                        var gl = this.gl; // check if a texture is dirty..
                        if (texture._dirty[gl.id]) {
                            this.renderSession.renderer.updateTexture(texture);
                        } else { // bind the current texture
                            gl.bindTexture(gl.TEXTURE_2D, texture._glTextures[gl.id]);
                        } // now draw those suckas!
                        gl.drawElements(gl.TRIANGLES, size * 6, gl.UNSIGNED_SHORT, startIndex * 6 * 2); // increment the draw count
                        this.renderSession.drawCount++;
                    };
                    /**
                     * @method stop
                     */
                    PIXI.WebGLSpriteBatch.prototype.stop = function() {
                        this.flush();
                        this.dirty = true;
                    };
                    /**
                     * @method start
                     */
                    PIXI.WebGLSpriteBatch.prototype.start = function() {
                        this.dirty = true;
                    };
                    /**
                     * Destroys the SpriteBatch.
                     * 
                     * @method destroy
                     */
                    PIXI.WebGLSpriteBatch.prototype.destroy = function() {
                        this.vertices = null;
                        this.indices = null;
                        this.gl.deleteBuffer(this.vertexBuffer);
                        this.gl.deleteBuffer(this.indexBuffer);
                        this.currentBaseTexture = null;
                        this.gl = null;
                    };
                    /**
                     * @author Mat Groves
                     * 
                     * Big thanks to the very clever Matt DesLauriers <mattdesl> https://github.com/mattdesl/
                     * for creating the original pixi version!
                     *
                     * Heavily inspired by LibGDX's WebGLSpriteBatch:
                     * https://github.com/libgdx/libgdx/blob/master/gdx/src/com/badlogic/gdx/graphics/g2d/WebGLSpriteBatch.java
                     */
                    /**
                     * @class WebGLFastSpriteBatch
                     * @constructor
                     */
                    PIXI.WebGLFastSpriteBatch = function(gl) {
                        /**
                         * @property vertSize
                         * @type Number
                         */
                        this.vertSize = 10;
                        /**
                         * @property maxSize
                         * @type Number
                         */
                        this.maxSize = 6000; //Math.pow(2, 16) /  this.vertSize;
                        /**
                         * @property size
                         * @type Number
                         */
                        this.size = this.maxSize; //the total number of floats in our batch
                        var numVerts = this.size * 4 * this.vertSize; //the total number of indices in our batch
                        var numIndices = this.maxSize * 6;
                        /**
                         * Vertex data
                         * @property vertices
                         * @type Float32Array
                         */
                        this.vertices = new PIXI.Float32Array(numVerts);
                        /**
                         * Index data
                         * @property indices
                         * @type Uint16Array
                         */
                        this.indices = new PIXI.Uint16Array(numIndices);
                        /**
                         * @property vertexBuffer
                         * @type Object
                         */
                        this.vertexBuffer = null;
                        /**
                         * @property indexBuffer
                         * @type Object
                         */
                        this.indexBuffer = null;
                        /**
                         * @property lastIndexCount
                         * @type Number
                         */
                        this.lastIndexCount = 0;
                        for (var i = 0, j = 0; i < numIndices; i += 6, j += 4) {
                            this.indices[i + 0] = j + 0;
                            this.indices[i + 1] = j + 1;
                            this.indices[i + 2] = j + 2;
                            this.indices[i + 3] = j + 0;
                            this.indices[i + 4] = j + 2;
                            this.indices[i + 5] = j + 3;
                        }
                        /**
                         * @property drawing
                         * @type Boolean
                         */
                        this.drawing = false;
                        /**
                         * @property currentBatchSize
                         * @type Number
                         */
                        this.currentBatchSize = 0;
                        /**
                         * @property currentBaseTexture
                         * @type BaseTexture
                         */
                        this.currentBaseTexture = null;
                        /**
                         * @property currentBlendMode
                         * @type Number
                         */
                        this.currentBlendMode = 0;
                        /**
                         * @property renderSession
                         * @type Object
                         */
                        this.renderSession = null;
                        /**
                         * @property shader
                         * @type Object
                         */
                        this.shader = null;
                        /**
                         * @property matrix
                         * @type Matrix
                         */
                        this.matrix = null;
                        this.setContext(gl);
                    };
                    PIXI.WebGLFastSpriteBatch.prototype.constructor = PIXI.WebGLFastSpriteBatch;
                    /**
                     * Sets the WebGL Context.
                     *
                     * @method setContext
                     * @param gl {WebGLContext} the current WebGL drawing context
                     */
                    PIXI.WebGLFastSpriteBatch.prototype.setContext = function(gl) {
                        this.gl = gl; // create a couple of buffers
                        this.vertexBuffer = gl.createBuffer();
                        this.indexBuffer = gl.createBuffer(); // 65535 is max index, so 65535 / 6 = 10922.
                        //upload the index data
                        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
                        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this.indices, gl.STATIC_DRAW);
                        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);
                        gl.bufferData(gl.ARRAY_BUFFER, this.vertices, gl.DYNAMIC_DRAW);
                    };
                    /**
                     * @method begin
                     * @param spriteBatch {WebGLSpriteBatch}
                     * @param renderSession {Object}
                     */
                    PIXI.WebGLFastSpriteBatch.prototype.begin = function(spriteBatch, renderSession) {
                        this.renderSession = renderSession;
                        this.shader = this.renderSession.shaderManager.fastShader;
                        this.matrix = spriteBatch.worldTransform.toArray(true);
                        this.start();
                    };
                    /**
                     * @method end
                     */
                    PIXI.WebGLFastSpriteBatch.prototype.end = function() {
                        this.flush();
                    };
                    /**
                     * @method render
                     * @param spriteBatch {WebGLSpriteBatch}
                     */
                    PIXI.WebGLFastSpriteBatch.prototype.render = function(spriteBatch) {
                        var children = spriteBatch.children;
                        var sprite = children[0]; // if the uvs have not updated then no point rendering just yet!
                        // check texture.
                        if (!sprite.texture._uvs) return;
                        this.currentBaseTexture = sprite.texture.baseTexture; // check blend mode
                        if (sprite.blendMode !== this.renderSession.blendModeManager.currentBlendMode) {
                            this.flush();
                            this.renderSession.blendModeManager.setBlendMode(sprite.blendMode);
                        }
                        for (var i = 0, j = children.length; i < j; i++) {
                            this.renderSprite(children[i]);
                        }
                        this.flush();
                    };
                    /**
                     * @method renderSprite
                     * @param sprite {Sprite}
                     */
                    PIXI.WebGLFastSpriteBatch.prototype.renderSprite = function(sprite) { //sprite = children[i];
                        if (!sprite.visible) return; // TODO trim??
                        if (sprite.texture.baseTexture !== this.currentBaseTexture) {
                            this.flush();
                            this.currentBaseTexture = sprite.texture.baseTexture;
                            if (!sprite.texture._uvs) return;
                        }
                        var uvs, verticies = this.vertices,
                            w0, w1, h0, h1, index;
                        uvs = sprite.texture._uvs;
                        var resolution = sprite.texture.resolution;
                        sprite.texture.frame.width * resolution;
                        sprite.texture.frame.height * resolution;
                        if (sprite.texture.trim) { // if the sprite is trimmed then we need to add the extra space before transforming the sprite coords..
                            var trim = sprite.texture.trim;
                            w1 = trim.x - sprite.anchor.x * trim.width;
                            w0 = w1 + sprite.texture.frame.width;
                            h1 = trim.y - sprite.anchor.y * trim.height;
                            h0 = h1 + sprite.texture.frame.height;
                        } else {
                            w0 = sprite.texture.frame.width * (1 - sprite.anchor.x);
                            w1 = sprite.texture.frame.width * -sprite.anchor.x;
                            h0 = sprite.texture.frame.height * (1 - sprite.anchor.y);
                            h1 = sprite.texture.frame.height * -sprite.anchor.y;
                        }
                        index = this.currentBatchSize * 4 * this.vertSize; // xy
                        verticies[index++] = w1;
                        verticies[index++] = h1;
                        verticies[index++] = sprite.position.x;
                        verticies[index++] = sprite.position.y; //scale
                        verticies[index++] = sprite.scale.x;
                        verticies[index++] = sprite.scale.y; //rotation
                        verticies[index++] = sprite.rotation; // uv
                        verticies[index++] = uvs.x0;
                        verticies[index++] = uvs.y1; // color
                        verticies[index++] = sprite.alpha; // xy
                        verticies[index++] = w0;
                        verticies[index++] = h1;
                        verticies[index++] = sprite.position.x;
                        verticies[index++] = sprite.position.y; //scale
                        verticies[index++] = sprite.scale.x;
                        verticies[index++] = sprite.scale.y; //rotation
                        verticies[index++] = sprite.rotation; // uv
                        verticies[index++] = uvs.x1;
                        verticies[index++] = uvs.y1; // color
                        verticies[index++] = sprite.alpha; // xy
                        verticies[index++] = w0;
                        verticies[index++] = h0;
                        verticies[index++] = sprite.position.x;
                        verticies[index++] = sprite.position.y; //scale
                        verticies[index++] = sprite.scale.x;
                        verticies[index++] = sprite.scale.y; //rotation
                        verticies[index++] = sprite.rotation; // uv
                        verticies[index++] = uvs.x2;
                        verticies[index++] = uvs.y2; // color
                        verticies[index++] = sprite.alpha; // xy
                        verticies[index++] = w1;
                        verticies[index++] = h0;
                        verticies[index++] = sprite.position.x;
                        verticies[index++] = sprite.position.y; //scale
                        verticies[index++] = sprite.scale.x;
                        verticies[index++] = sprite.scale.y; //rotation
                        verticies[index++] = sprite.rotation; // uv
                        verticies[index++] = uvs.x3;
                        verticies[index++] = uvs.y3; // color
                        verticies[index++] = sprite.alpha; // increment the batchs
                        this.currentBatchSize++;
                        if (this.currentBatchSize >= this.size) {
                            this.flush();
                        }
                    };
                    /**
                     * @method flush
                     */
                    PIXI.WebGLFastSpriteBatch.prototype.flush = function() { // If the batch is length 0 then return as there is nothing to draw
                        if (this.currentBatchSize === 0) return;
                        var gl = this.gl; // bind the current texture
                        //console.log("flush")
                        if (!this.currentBaseTexture._glTextures[gl.id]) this.renderSession.renderer.updateTexture(this.currentBaseTexture, gl);
                        gl.bindTexture(gl.TEXTURE_2D, this.currentBaseTexture._glTextures[gl.id]); // upload the verts to the buffer
                        if (this.currentBatchSize > this.size * 0.5) {
                            gl.bufferSubData(gl.ARRAY_BUFFER, 0, this.vertices);
                        } else {
                            var view = this.vertices.subarray(0, this.currentBatchSize * 4 * this.vertSize);
                            gl.bufferSubData(gl.ARRAY_BUFFER, 0, view);
                        } // now draw those suckas!
                        gl.drawElements(gl.TRIANGLES, this.currentBatchSize * 6, gl.UNSIGNED_SHORT, 0); // then reset the batch!
                        this.currentBatchSize = 0; // increment the draw count
                        this.renderSession.drawCount++;
                    };
                    /**
                     * @method stop
                     */
                    PIXI.WebGLFastSpriteBatch.prototype.stop = function() {
                        this.flush();
                    };
                    /**
                     * @method start
                     */
                    PIXI.WebGLFastSpriteBatch.prototype.start = function() {
                        var gl = this.gl; // bind the main texture
                        gl.activeTexture(gl.TEXTURE0); // bind the buffers
                        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);
                        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer); // set the projection
                        var projection = this.renderSession.projection;
                        gl.uniform2f(this.shader.projectionVector, projection.x, projection.y); // set the matrix
                        gl.uniformMatrix3fv(this.shader.uMatrix, false, this.matrix); // set the pointers
                        var stride = this.vertSize * 4;
                        gl.vertexAttribPointer(this.shader.aVertexPosition, 2, gl.FLOAT, false, stride, 0);
                        gl.vertexAttribPointer(this.shader.aPositionCoord, 2, gl.FLOAT, false, stride, 2 * 4);
                        gl.vertexAttribPointer(this.shader.aScale, 2, gl.FLOAT, false, stride, 4 * 4);
                        gl.vertexAttribPointer(this.shader.aRotation, 1, gl.FLOAT, false, stride, 6 * 4);
                        gl.vertexAttribPointer(this.shader.aTextureCoord, 2, gl.FLOAT, false, stride, 7 * 4);
                        gl.vertexAttribPointer(this.shader.colorAttribute, 1, gl.FLOAT, false, stride, 9 * 4);
                    };
                    /**
                     * @author Mat Groves http://matgroves.com/ @Doormat23
                     */
                    /**
                     * @class WebGLFilterManager
                     * @constructor
                     */
                    PIXI.WebGLFilterManager = function() {
                        /**
                         * @property filterStack
                         * @type Array
                         */
                        this.filterStack = [];
                        /**
                         * @property offsetX
                         * @type Number
                         */
                        this.offsetX = 0;
                        /**
                         * @property offsetY
                         * @type Number
                         */
                        this.offsetY = 0;
                    };
                    PIXI.WebGLFilterManager.prototype.constructor = PIXI.WebGLFilterManager;
                    /**
                     * Initialises the context and the properties.
                     * 
                     * @method setContext 
                     * @param gl {WebGLContext} the current WebGL drawing context
                     */
                    PIXI.WebGLFilterManager.prototype.setContext = function(gl) {
                        this.gl = gl;
                        this.texturePool = [];
                        this.initShaderBuffers();
                    };
                    /**
                     * @method begin
                     * @param renderSession {RenderSession} 
                     * @param buffer {ArrayBuffer} 
                     */
                    PIXI.WebGLFilterManager.prototype.begin = function(renderSession, buffer) {
                        this.renderSession = renderSession;
                        this.defaultShader = renderSession.shaderManager.defaultShader;
                        var projection = this.renderSession.projection;
                        this.width = projection.x * 2;
                        this.height = -projection.y * 2;
                        this.buffer = buffer;
                    };
                    /**
                     * Applies the filter and adds it to the current filter stack.
                     * 
                     * @method pushFilter
                     * @param filterBlock {Object} the filter that will be pushed to the current filter stack
                     */
                    PIXI.WebGLFilterManager.prototype.pushFilter = function(filterBlock) {
                        var gl = this.gl;
                        var projection = this.renderSession.projection;
                        var offset = this.renderSession.offset;
                        filterBlock._filterArea = filterBlock.target.filterArea || filterBlock.target.getBounds(); // filter program
                        // OPTIMISATION - the first filter is free if its a simple color change?
                        this.filterStack.push(filterBlock);
                        var filter = filterBlock.filterPasses[0];
                        this.offsetX += filterBlock._filterArea.x;
                        this.offsetY += filterBlock._filterArea.y;
                        var texture = this.texturePool.pop();
                        if (!texture) {
                            texture = new PIXI.FilterTexture(this.gl, this.width, this.height);
                        } else {
                            texture.resize(this.width, this.height);
                        }
                        gl.bindTexture(gl.TEXTURE_2D, texture.texture);
                        var filterArea = filterBlock._filterArea; // filterBlock.target.getBounds();///filterBlock.target.filterArea;
                        var padding = filter.padding;
                        filterArea.x -= padding;
                        filterArea.y -= padding;
                        filterArea.width += padding * 2;
                        filterArea.height += padding * 2; // cap filter to screen size..
                        if (filterArea.x < 0) filterArea.x = 0;
                        if (filterArea.width > this.width) filterArea.width = this.width;
                        if (filterArea.y < 0) filterArea.y = 0;
                        if (filterArea.height > this.height) filterArea.height = this.height; //gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA,  filterArea.width, filterArea.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
                        gl.bindFramebuffer(gl.FRAMEBUFFER, texture.frameBuffer); // set view port
                        gl.viewport(0, 0, filterArea.width, filterArea.height);
                        projection.x = filterArea.width / 2;
                        projection.y = -filterArea.height / 2;
                        offset.x = -filterArea.x;
                        offset.y = -filterArea.y; // update projection
                        // now restore the regular shader..
                        // this.renderSession.shaderManager.setShader(this.defaultShader);
                        //gl.uniform2f(this.defaultShader.projectionVector, filterArea.width/2, -filterArea.height/2);
                        //gl.uniform2f(this.defaultShader.offsetVector, -filterArea.x, -filterArea.y);
                        gl.colorMask(true, true, true, true);
                        gl.clearColor(0, 0, 0, 0);
                        gl.clear(gl.COLOR_BUFFER_BIT);
                        filterBlock._glFilterTexture = texture;
                    };
                    /**
                     * Removes the last filter from the filter stack and doesn't return it.
                     * 
                     * @method popFilter
                     */
                    PIXI.WebGLFilterManager.prototype.popFilter = function() {
                        var gl = this.gl;
                        var filterBlock = this.filterStack.pop();
                        var filterArea = filterBlock._filterArea;
                        var texture = filterBlock._glFilterTexture;
                        var projection = this.renderSession.projection;
                        var offset = this.renderSession.offset;
                        if (filterBlock.filterPasses.length > 1) {
                            gl.viewport(0, 0, filterArea.width, filterArea.height);
                            gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);
                            this.vertexArray[0] = 0;
                            this.vertexArray[1] = filterArea.height;
                            this.vertexArray[2] = filterArea.width;
                            this.vertexArray[3] = filterArea.height;
                            this.vertexArray[4] = 0;
                            this.vertexArray[5] = 0;
                            this.vertexArray[6] = filterArea.width;
                            this.vertexArray[7] = 0;
                            gl.bufferSubData(gl.ARRAY_BUFFER, 0, this.vertexArray);
                            gl.bindBuffer(gl.ARRAY_BUFFER, this.uvBuffer); // now set the uvs..
                            this.uvArray[2] = filterArea.width / this.width;
                            this.uvArray[5] = filterArea.height / this.height;
                            this.uvArray[6] = filterArea.width / this.width;
                            this.uvArray[7] = filterArea.height / this.height;
                            gl.bufferSubData(gl.ARRAY_BUFFER, 0, this.uvArray);
                            var inputTexture = texture;
                            var outputTexture = this.texturePool.pop();
                            if (!outputTexture) outputTexture = new PIXI.FilterTexture(this.gl, this.width, this.height);
                            outputTexture.resize(this.width, this.height); // need to clear this FBO as it may have some left over elements from a previous filter.
                            gl.bindFramebuffer(gl.FRAMEBUFFER, outputTexture.frameBuffer);
                            gl.clear(gl.COLOR_BUFFER_BIT);
                            gl.disable(gl.BLEND);
                            for (var i = 0; i < filterBlock.filterPasses.length - 1; i++) {
                                var filterPass = filterBlock.filterPasses[i];
                                gl.bindFramebuffer(gl.FRAMEBUFFER, outputTexture.frameBuffer); // set texture
                                gl.activeTexture(gl.TEXTURE0);
                                gl.bindTexture(gl.TEXTURE_2D, inputTexture.texture); // draw texture..
                                //filterPass.applyFilterPass(filterArea.width, filterArea.height);
                                this.applyFilterPass(filterPass, filterArea, filterArea.width, filterArea.height); // swap the textures..
                                var temp = inputTexture;
                                inputTexture = outputTexture;
                                outputTexture = temp;
                            }
                            gl.enable(gl.BLEND);
                            texture = inputTexture;
                            this.texturePool.push(outputTexture);
                        }
                        var filter = filterBlock.filterPasses[filterBlock.filterPasses.length - 1];
                        this.offsetX -= filterArea.x;
                        this.offsetY -= filterArea.y;
                        var sizeX = this.width;
                        var sizeY = this.height;
                        var offsetX = 0;
                        var offsetY = 0;
                        var buffer = this.buffer; // time to render the filters texture to the previous scene
                        if (this.filterStack.length === 0) {
                            gl.colorMask(true, true, true, true); //this.transparent);
                        } else {
                            var currentFilter = this.filterStack[this.filterStack.length - 1];
                            filterArea = currentFilter._filterArea;
                            sizeX = filterArea.width;
                            sizeY = filterArea.height;
                            offsetX = filterArea.x;
                            offsetY = filterArea.y;
                            buffer = currentFilter._glFilterTexture.frameBuffer;
                        } // TODO need to remove these global elements..
                        projection.x = sizeX / 2;
                        projection.y = -sizeY / 2;
                        offset.x = offsetX;
                        offset.y = offsetY;
                        filterArea = filterBlock._filterArea;
                        var x = filterArea.x - offsetX;
                        var y = filterArea.y - offsetY; // update the buffers..
                        // make sure to flip the y!
                        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);
                        this.vertexArray[0] = x;
                        this.vertexArray[1] = y + filterArea.height;
                        this.vertexArray[2] = x + filterArea.width;
                        this.vertexArray[3] = y + filterArea.height;
                        this.vertexArray[4] = x;
                        this.vertexArray[5] = y;
                        this.vertexArray[6] = x + filterArea.width;
                        this.vertexArray[7] = y;
                        gl.bufferSubData(gl.ARRAY_BUFFER, 0, this.vertexArray);
                        gl.bindBuffer(gl.ARRAY_BUFFER, this.uvBuffer);
                        this.uvArray[2] = filterArea.width / this.width;
                        this.uvArray[5] = filterArea.height / this.height;
                        this.uvArray[6] = filterArea.width / this.width;
                        this.uvArray[7] = filterArea.height / this.height;
                        gl.bufferSubData(gl.ARRAY_BUFFER, 0, this.uvArray);
                        gl.viewport(0, 0, sizeX, sizeY); // bind the buffer
                        gl.bindFramebuffer(gl.FRAMEBUFFER, buffer); // set the blend mode! 
                        //gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA)
                        // set texture
                        gl.activeTexture(gl.TEXTURE0);
                        gl.bindTexture(gl.TEXTURE_2D, texture.texture); // apply!
                        this.applyFilterPass(filter, filterArea, sizeX, sizeY); // now restore the regular shader.. should happen automatically now..
                        // this.renderSession.shaderManager.setShader(this.defaultShader);
                        // gl.uniform2f(this.defaultShader.projectionVector, sizeX/2, -sizeY/2);
                        // gl.uniform2f(this.defaultShader.offsetVector, -offsetX, -offsetY);
                        // return the texture to the pool
                        this.texturePool.push(texture);
                        filterBlock._glFilterTexture = null;
                    };
                    /**
                     * Applies the filter to the specified area.
                     * 
                     * @method applyFilterPass
                     * @param filter {AbstractFilter} the filter that needs to be applied
                     * @param filterArea {Texture} TODO - might need an update
                     * @param width {Number} the horizontal range of the filter
                     * @param height {Number} the vertical range of the filter
                     */
                    PIXI.WebGLFilterManager.prototype.applyFilterPass = function(filter, filterArea, width, height) { // use program
                        var gl = this.gl;
                        var shader = filter.shaders[gl.id];
                        if (!shader) {
                            shader = new PIXI.PixiShader(gl);
                            shader.fragmentSrc = filter.fragmentSrc;
                            shader.uniforms = filter.uniforms;
                            shader.init();
                            filter.shaders[gl.id] = shader;
                        } // set the shader
                        this.renderSession.shaderManager.setShader(shader); //    gl.useProgram(shader.program);
                        gl.uniform2f(shader.projectionVector, width / 2, -height / 2);
                        gl.uniform2f(shader.offsetVector, 0, 0);
                        if (filter.uniforms.dimensions) {
                            filter.uniforms.dimensions.value[0] = this.width; //width;
                            filter.uniforms.dimensions.value[1] = this.height; //height;
                            filter.uniforms.dimensions.value[2] = this.vertexArray[0];
                            filter.uniforms.dimensions.value[3] = this.vertexArray[5]; //filterArea.height;
                        }
                        shader.syncUniforms();
                        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);
                        gl.vertexAttribPointer(shader.aVertexPosition, 2, gl.FLOAT, false, 0, 0);
                        gl.bindBuffer(gl.ARRAY_BUFFER, this.uvBuffer);
                        gl.vertexAttribPointer(shader.aTextureCoord, 2, gl.FLOAT, false, 0, 0);
                        gl.bindBuffer(gl.ARRAY_BUFFER, this.colorBuffer);
                        gl.vertexAttribPointer(shader.colorAttribute, 2, gl.FLOAT, false, 0, 0);
                        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer); // draw the filter...
                        gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);
                        this.renderSession.drawCount++;
                    };
                    /**
                     * Initialises the shader buffers.
                     * 
                     * @method initShaderBuffers
                     */
                    PIXI.WebGLFilterManager.prototype.initShaderBuffers = function() {
                        var gl = this.gl; // create some buffers
                        this.vertexBuffer = gl.createBuffer();
                        this.uvBuffer = gl.createBuffer();
                        this.colorBuffer = gl.createBuffer();
                        this.indexBuffer = gl.createBuffer(); // bind and upload the vertexs..
                        // keep a reference to the vertexFloatData..
                        this.vertexArray = new PIXI.Float32Array([0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0]);
                        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);
                        gl.bufferData(gl.ARRAY_BUFFER, this.vertexArray, gl.STATIC_DRAW); // bind and upload the uv buffer
                        this.uvArray = new PIXI.Float32Array([0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0]);
                        gl.bindBuffer(gl.ARRAY_BUFFER, this.uvBuffer);
                        gl.bufferData(gl.ARRAY_BUFFER, this.uvArray, gl.STATIC_DRAW);
                        this.colorArray = new PIXI.Float32Array([1.0, 0xFFFFFF, 1.0, 0xFFFFFF, 1.0, 0xFFFFFF, 1.0, 0xFFFFFF]);
                        gl.bindBuffer(gl.ARRAY_BUFFER, this.colorBuffer);
                        gl.bufferData(gl.ARRAY_BUFFER, this.colorArray, gl.STATIC_DRAW); // bind and upload the index
                        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
                        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array([0, 1, 2, 1, 3, 2]), gl.STATIC_DRAW);
                    };
                    /**
                     * Destroys the filter and removes it from the filter stack.
                     * 
                     * @method destroy
                     */
                    PIXI.WebGLFilterManager.prototype.destroy = function() {
                        var gl = this.gl;
                        this.filterStack = null;
                        this.offsetX = 0;
                        this.offsetY = 0; // destroy textures
                        for (var i = 0; i < this.texturePool.length; i++) {
                            this.texturePool[i].destroy();
                        }
                        this.texturePool = null; //destroy buffers..
                        gl.deleteBuffer(this.vertexBuffer);
                        gl.deleteBuffer(this.uvBuffer);
                        gl.deleteBuffer(this.colorBuffer);
                        gl.deleteBuffer(this.indexBuffer);
                    };
                    /**
                     * @author Mat Groves http://matgroves.com/ @Doormat23
                     */
                    /**
                     * @class FilterTexture
                     * @constructor
                     * @param gl {WebGLContext} the current WebGL drawing context
                     * @param width {Number} the horizontal range of the filter
                     * @param height {Number} the vertical range of the filter
                     * @param scaleMode {Number} See {{#crossLink "PIXI/scaleModes:property"}}PIXI.scaleModes{{/crossLink}} for possible values
                     */
                    PIXI.FilterTexture = function(gl, width, height, scaleMode) {
                        /**
                         * @property gl
                         * @type WebGLContext
                         */
                        this.gl = gl; // next time to create a frame buffer and texture
                        /**
                         * @property frameBuffer
                         * @type Any
                         */
                        this.frameBuffer = gl.createFramebuffer(); //PIXI.frvrCheckGLError(gl,"ft/fb");
                        /**
                         * @property texture
                         * @type Any
                         */
                        this.texture = gl.createTexture(); //PIXI.frvrCheckGLError(gl,"FilterTexture/createTexture")
                        /**
                         * @property scaleMode
                         * @type Number
                         */
                        scaleMode = scaleMode || PIXI.scaleModes.DEFAULT;
                        gl.bindTexture(gl.TEXTURE_2D, this.texture);
                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, scaleMode === PIXI.scaleModes.LINEAR ? gl.LINEAR : gl.NEAREST);
                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, scaleMode === PIXI.scaleModes.LINEAR ? gl.LINEAR : gl.NEAREST);
                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
                        gl.bindFramebuffer(gl.FRAMEBUFFER, this.frameBuffer);
                        gl.bindFramebuffer(gl.FRAMEBUFFER, this.frameBuffer);
                        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture, 0); //PIXI.frvrCheckGLError(gl,"FilterTexture/framebufferTexture2D")
                        // required for masking a mask??
                        this.renderBuffer = gl.createRenderbuffer();
                        gl.bindRenderbuffer(gl.RENDERBUFFER, this.renderBuffer);
                        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, this.renderBuffer); //PIXI.frvrCheckGLError(gl,"FilterTexture/framebufferRenderbuffer")
                        this.resize(width, height);
                    };
                    PIXI.FilterTexture.prototype.constructor = PIXI.FilterTexture;
                    /**
                     * Clears the filter texture.
                     * 
                     * @method clear
                     */
                    PIXI.FilterTexture.prototype.clear = function() {
                        var gl = this.gl;
                        gl.clearColor(0, 0, 0, 0);
                        gl.clear(gl.COLOR_BUFFER_BIT);
                    };
                    /**
                     * Resizes the texture to the specified width and height
                     *
                     * @method resize
                     * @param width {Number} the new width of the texture
                     * @param height {Number} the new height of the texture
                     */
                    PIXI.FilterTexture.prototype.resize = function(width, height) {
                        if (this.width === width && this.height === height) return;
                        try {
                            if (typeof this._lastSize !== 'undefined') {
                                PIXI.frvrTextureMemoryUsage -= 4 * this._lastSize.w * this._lastSize.h;
                            }
                        } catch (e) {}
                        this.width = width;
                        this.height = height;
                        var gl = this.gl;
                        gl.bindTexture(gl.TEXTURE_2D, this.texture);
                        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null); //PIXI.frvrCheckGLError(gl,"ft.resize/1")
                        try {
                            PIXI.frvrTextureMemoryUsage += 4 * width * height; // 4 bytes per pixel on main texture
                            this._lastSize = {
                                w: width,
                                h: height
                            };
                        } catch (e) {} // update the stencil buffer width and height
                        gl.bindRenderbuffer(gl.RENDERBUFFER, this.renderBuffer);
                        gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, width, height); //PIXI.frvrCheckGLError(gl,"ft.resize/2")
                    };
                    /**
                     * Destroys the filter texture.
                     * 
                     * @method destroy
                     */
                    PIXI.FilterTexture.prototype.destroy = function() {
                        var gl = this.gl;
                        gl.deleteFramebuffer(this.frameBuffer);
                        gl.deleteTexture(this.texture);
                        this.frameBuffer = null;
                        this.texture = null;
                    };
                    /**
                     * @author Mat Groves http://matgroves.com/ @Doormat23
                     */
                    /**
                     * Creates a Canvas element of the given size.
                     *
                     * @class CanvasBuffer
                     * @constructor
                     * @param width {Number} the width for the newly created canvas
                     * @param height {Number} the height for the newly created canvas
                     */
                    PIXI.CanvasBuffer = function(width, height) {
                        /**
                         * The width of the Canvas in pixels.
                         *
                         * @property width
                         * @type Number
                         */
                        this.width = width;
                        /**
                         * The height of the Canvas in pixels.
                         *
                         * @property height
                         * @type Number
                         */
                        this.height = height;
                        /**
                         * The Canvas object that belongs to this CanvasBuffer.
                         *
                         * @property canvas
                         * @type HTMLCanvasElement
                         */
                        this.canvas = document.createElement("canvas");
                        /**
                         * A CanvasRenderingContext2D object representing a two-dimensional rendering context.
                         *
                         * @property context
                         * @type CanvasRenderingContext2D
                         */
                        this.context = this.canvas.getContext("2d");
                        this.canvas.width = width;
                        this.canvas.height = height;
                    };
                    PIXI.CanvasBuffer.prototype.constructor = PIXI.CanvasBuffer;
                    /**
                     * Clears the canvas that was created by the CanvasBuffer class.
                     *
                     * @method clear
                     * @private
                     */
                    PIXI.CanvasBuffer.prototype.clear = function() {
                        this.context.setTransform(1, 0, 0, 1, 0, 0);
                        this.context.clearRect(0, 0, this.width, this.height);
                    };
                    /**
                     * Resizes the canvas to the specified width and height.
                     *
                     * @method resize
                     * @param width {Number} the new width of the canvas
                     * @param height {Number} the new height of the canvas
                     */
                    PIXI.CanvasBuffer.prototype.resize = function(width, height) {
                        this.width = this.canvas.width = width;
                        this.height = this.canvas.height = height;
                    };
                    /**
                     * @author Mat Groves http://matgroves.com/ @Doormat23
                     */
                    /**
                     * A set of functions used to handle masking.
                     *
                     * @class CanvasMaskManager
                     * @constructor
                     */
                    PIXI.CanvasMaskManager = function() {};
                    PIXI.CanvasMaskManager.prototype.constructor = PIXI.CanvasMaskManager;
                    /**
                     * This method adds it to the current stack of masks.
                     *
                     * @method pushMask
                     * @param maskData {Object} the maskData that will be pushed
                     * @param renderSession {Object} The renderSession whose context will be used for this mask manager.
                     */
                    PIXI.CanvasMaskManager.prototype.pushMask = function(maskData, renderSession) {
                        var context = renderSession.context;
                        context.save();
                        var cacheAlpha = maskData.alpha;
                        var transform = maskData.worldTransform;
                        context.setTransform(transform.a, transform.b, transform.c, transform.d, transform.tx, transform.ty);
                        PIXI.CanvasGraphics.renderGraphicsMask(maskData, context);
                        context.clip();
                        maskData.worldAlpha = cacheAlpha;
                    };
                    /**
                     * Restores the current drawing context to the state it was before the mask was applied.
                     *
                     * @method popMask
                     * @param renderSession {Object} The renderSession whose context will be used for this mask manager.
                     */
                    PIXI.CanvasMaskManager.prototype.popMask = function(renderSession) {
                        renderSession.context.restore();
                    };
                    /**
                     * @author Mat Groves http://matgroves.com/ @Doormat23
                     */
                    /**
                     * Utility methods for Sprite/Texture tinting.
                     *
                     * @class CanvasTinter
                     * @static
                     */
                    PIXI.CanvasTinter = function() {};
                    /**
                     * Basically this method just needs a sprite and a color and tints the sprite with the given color.
                     * 
                     * @method getTintedTexture 
                     * @static
                     * @param sprite {Sprite} the sprite to tint
                     * @param color {Number} the color to use to tint the sprite with
                     * @return {HTMLCanvasElement} The tinted canvas
                     */
                    PIXI.CanvasTinter.getTintedTexture = function(sprite, color) {
                        var tx = sprite.texture;
                        var frame = tx.frame;
                        color = PIXI.CanvasTinter.roundColor(color);
                        var stringColor = "#" + ("00000" + (color | 0).toString(16)).substr(-6);
                        if (tx.tintCacheFrame) {
                            var tf = tx.tintCacheFrame; // Monitor changes to the texture frame or resolution to invalidate tint caches
                            if (tf.rez != tx.resolution || tf.x != frame.x || tf.y != frame.y || tf.width != frame.width || tf.height != frame.height) {
                                tx.tintCache = {}; //Reset tint cache if texture frame has changed
                                tx.tintCacheFrame = {
                                    rez: tx.resolution,
                                    x: frame.x,
                                    y: frame.y,
                                    width: frame.width,
                                    height: frame.height
                                };
                            }
                        } else {
                            tx.tintCache = {}; // init tintCache
                            tx.tintCacheFrame = {
                                rez: tx.resolution,
                                x: frame.x,
                                y: frame.y,
                                width: frame.width,
                                height: frame.height
                            };
                        }
                        if (tx.tintCache[stringColor]) return tx.tintCache[stringColor]; // clone texture..
                        var canvas = PIXI.CanvasTinter.canvas || document.createElement("canvas");
                        PIXI.CanvasTinter.tintMethod(tx, color, canvas);
                        if (PIXI.CanvasTinter.convertTintToImage) { // is this better?
                            var tintImage = new Image();
                            tintImage.src = canvas.toDataURL();
                            tx.tintCache[stringColor] = tintImage;
                        } else {
                            tx.tintCache[stringColor] = canvas; // if we are not converting the texture to an image then we need to lose the reference to the canvas
                            PIXI.CanvasTinter.canvas = null;
                        }
                        return canvas;
                    };
                    /**
                     * Tint a texture using the "multiply" operation.
                     * 
                     * @method tintWithMultiply
                     * @static
                     * @param texture {Texture} the texture to tint
                     * @param color {Number} the color to use to tint the sprite with
                     * @param canvas {HTMLCanvasElement} the current canvas
                     */
                    PIXI.CanvasTinter.tintWithMultiply = function(texture, color, canvas) {
                        var context = canvas.getContext("2d");
                        var frame = texture.frame;
                        canvas.width = frame.width;
                        canvas.height = frame.height;
                        context.fillStyle = "#" + ("00000" + (color | 0).toString(16)).substr(-6);
                        context.fillRect(0, 0, frame.width, frame.height);
                        context.globalCompositeOperation = "multiply";
                        context.drawImage(texture.baseTexture.source, frame.x, frame.y, frame.width, frame.height, 0, 0, frame.width, frame.height);
                        context.globalCompositeOperation = "destination-atop";
                        context.drawImage(texture.baseTexture.source, frame.x, frame.y, frame.width, frame.height, 0, 0, frame.width, frame.height);
                    };
                    /**
                     * Tint a texture using the "overlay" operation.
                     * 
                     * @method tintWithOverlay
                     * @static
                     * @param texture {Texture} the texture to tint
                     * @param color {Number} the color to use to tint the sprite with
                     * @param canvas {HTMLCanvasElement} the current canvas
                     */
                    PIXI.CanvasTinter.tintWithOverlay = function(texture, color, canvas) {
                        var context = canvas.getContext("2d");
                        var frame = texture.frame;
                        var rez = texture.resolution;
                        texture.baseTexture.source;
                        var x = frame.x * rez << 0;
                        var y = frame.y * rez << 0;
                        var w = frame.width * rez << 0;
                        var h = frame.height * rez << 0;
                        canvas.width = w; //frame.width;
                        canvas.height = h;
                        context.globalCompositeOperation = "copy";
                        context.fillStyle = "#" + ("00000" + (color | 0).toString(16)).substr(-6);
                        context.fillRect(0, 0, w, h);
                        context.globalCompositeOperation = "destination-atop";
                        context.drawImage(texture.baseTexture.source, x, y, w, h, 0, 0, w, h); //context.globalCompositeOperation = "copy";
                    };
                    /**
                     * Tint a texture pixel per pixel.
                     * 
                     * @method tintPerPixel
                     * @static
                     * @param texture {Texture} the texture to tint
                     * @param color {Number} the color to use to tint the sprite with
                     * @param canvas {HTMLCanvasElement} the current canvas
                     */
                    PIXI.CanvasTinter.tintWithPerPixelInner = function(org, target, color, frame) {
                        var context = target.getContext("2d");
                        target.width = frame.width;
                        target.height = frame.height;
                        context.clearRect(0, 0, target.width, target.height);
                        context.globalCompositeOperation = "copy";
                        context.drawImage(org, frame.x, frame.y, frame.width, frame.height, 0, 0, frame.width, frame.height);
                        var rgbValues = PIXI.hex2rgb(color);
                        var r = rgbValues[0],
                            g = rgbValues[1],
                            b = rgbValues[2];
                        var pixelData = context.getImageData(0, 0, frame.width, frame.height);
                        var pixels = pixelData.data;
                        for (var i = 0; i < pixels.length; i += 4) {
                            pixels[i + 0] = pixels[i + 0] * r >> 0;
                            pixels[i + 1] = pixels[i + 1] * g >> 0;
                            pixels[i + 2] = pixels[i + 2] * b >> 0;
                        }
                        context.putImageData(pixelData, 0, 0);
                    };
                    PIXI.CanvasTinter.tintWithPerPixel = function(texture, color, canvas) {
                        PIXI.CanvasTinter.tintWithPerPixelInner(texture.baseTexture.source, canvas, color, texture.frame);
                    };
                    /**
                     * Rounds the specified color according to the PIXI.CanvasTinter.cacheStepsPerColorChannel.
                     * 
                     * @method roundColor
                     * @static
                     * @param color {number} the color to round, should be a hex color
                     */
                    PIXI.CanvasTinter.roundColor = function(color) {
                        var step = PIXI.CanvasTinter.cacheStepsPerColorChannel;
                        var rgbValues = PIXI.hex2rgb(color);
                        rgbValues[0] = Math.min(255, rgbValues[0] / step * step);
                        rgbValues[1] = Math.min(255, rgbValues[1] / step * step);
                        rgbValues[2] = Math.min(255, rgbValues[2] / step * step);
                        return PIXI.rgb2hex(rgbValues);
                    };
                    /**
                     * Number of steps which will be used as a cap when rounding colors.
                     *
                     * @property cacheStepsPerColorChannel 
                     * @type Number
                     * @static
                     */
                    PIXI.CanvasTinter.cacheStepsPerColorChannel = 8;
                    /**
                     * Tint cache boolean flag.
                     *
                     * @property convertTintToImage
                     * @type Boolean
                     * @static
                     */
                    PIXI.CanvasTinter.convertTintToImage = false;
                    /**
                     * Whether or not the Canvas BlendModes are supported, consequently the ability to tint using the multiply method.
                     *
                     * @property canUseMultiply
                     * @type Boolean
                     * @static
                     */
                    PIXI.CanvasTinter.canUseMultiply = PIXI.canUseNewCanvasBlendModes();
                    /**
                     * The tinting method that will be used.
                     * 
                     * @method tintMethod
                     * @static
                     */
                    PIXI.CanvasTinter.tintMethod = PIXI.CanvasTinter.tintWithOverlay;
                    /**
                     * @author Mat Groves http://matgroves.com/ @Doormat23
                     */
                    /**
                     * The CanvasRenderer draws the Stage and all its content onto a 2d canvas. This renderer should be used for browsers that do not support webGL.
                     * Don't forget to add the CanvasRenderer.view to your DOM or you will not see anything :)
                     *
                     * @class CanvasRenderer
                     * @constructor
                     * @param [width=800] {Number} the width of the canvas view
                     * @param [height=600] {Number} the height of the canvas view
                     * @param [options] {Object} The optional renderer parameters
                     * @param [options.view] {HTMLCanvasElement} the canvas to use as a view, optional
                     * @param [options.transparent=false] {Boolean} If the render view is transparent, default false
                     * @param [options.autoResize=false] {Boolean} If the render view is automatically resized, default false
                     * @param [options.clearBeforeRender=true] {Boolean} This sets if the CanvasRenderer will clear the canvas or not before the new render pass.
                     */
                    PIXI.CanvasRenderer = function(width, height, options) {
                        if (options) {
                            for (var i in PIXI.defaultRenderOptions) {
                                if (typeof options[i] === "undefined") options[i] = PIXI.defaultRenderOptions[i];
                            }
                        } else {
                            options = PIXI.defaultRenderOptions;
                        }
                        if (!PIXI.defaultRenderer) { //PIXI.sayHello("Canvas");
                            PIXI.defaultRenderer = this;
                        }
                        /**
                         * The renderer type.
                         *
                         * @property type
                         * @type Number
                         */
                        this.type = PIXI.CANVAS_RENDERER;
                        /**
                         * This sets if the CanvasRenderer will clear the canvas or not before the new render pass.
                         * If the Stage is NOT transparent Pixi will use a canvas sized fillRect operation every frame to set the canvas background color.
                         * If the Stage is transparent Pixi will use clearRect to clear the canvas every frame.
                         * Disable this by setting this to false. For example if your game has a canvas filling background image you often don't need this set.
                         *
                         * @property clearBeforeRender
                         * @type Boolean
                         * @default
                         */
                        this.clearBeforeRender = options.clearBeforeRender;
                        /**
                         * Whether the render view is transparent
                         *
                         * @property transparent
                         * @type Boolean
                         */
                        this.transparent = options.transparent;
                        /**
                         * Whether the render view should be resized automatically
                         *
                         * @property autoResize
                         * @type Boolean
                         */
                        this.autoResize = options.autoResize || false;
                        /**
                         * The width of the canvas view
                         *
                         * @property width
                         * @type Number
                         * @default 800
                         */
                        this.width = width || 800;
                        /**
                         * The height of the canvas view
                         *
                         * @property height
                         * @type Number
                         * @default 600
                         */
                        this.height = height || 600;
                        /**
                         * The canvas element that everything is drawn to.
                         *
                         * @property view
                         * @type HTMLCanvasElement
                         */
                        this.view = options.view || document.createElement("canvas");
                        /**
                         * The canvas 2d context that everything is drawn with
                         * @property context
                         * @type CanvasRenderingContext2D
                         */
                        this.context = this.view.getContext("2d", {
                            alpha: this.transparent
                        });
                        /**
                         * Boolean flag controlling canvas refresh.
                         *
                         * @property refresh
                         * @type Boolean
                         */
                        this.refresh = true;
                        /**
                         * Internal var.
                         *
                         * @property count
                         * @type Number
                         */
                        this.count = 0;
                        /**
                         * Instance of a PIXI.CanvasMaskManager, handles masking when using the canvas renderer
                         * @property CanvasMaskManager
                         * @type CanvasMaskManager
                         */
                        this.maskManager = new PIXI.CanvasMaskManager();
                        /**
                         * The render session is just a bunch of parameter used for rendering
                         * @property renderSession
                         * @type Object
                         */
                        this.renderSession = {
                            context: this.context,
                            maskManager: this.maskManager,
                            scaleMode: null,
                            smoothProperty: null
                        };
                        this.mapBlendModes();
                        this.resize(width, height);
                        if ("imageSmoothingEnabled" in this.context) this.renderSession.smoothProperty = "imageSmoothingEnabled";
                        else if ("webkitImageSmoothingEnabled" in this.context) this.renderSession.smoothProperty = "webkitImageSmoothingEnabled";
                        else if ("mozImageSmoothingEnabled" in this.context) this.renderSession.smoothProperty = "mozImageSmoothingEnabled";
                        else if ("oImageSmoothingEnabled" in this.context) this.renderSession.smoothProperty = "oImageSmoothingEnabled";
                        else if ("msImageSmoothingEnabled" in this.context) this.renderSession.smoothProperty = "msImageSmoothingEnabled";
                    }; // constructor
                    PIXI.CanvasRenderer.prototype.constructor = PIXI.CanvasRenderer;
                    /**
                     * Renders the Stage to this canvas view
                     *
                     * @method render
                     * @param stage {Stage} the Stage element to be rendered
                     */
                    PIXI.CanvasRenderer.prototype.render = function(stage) {
                        stage.updateTransform();
                        this.context.setTransform(1, 0, 0, 1, 0, 0);
                        this.context.globalAlpha = 1;
                        this.renderSession.currentBlendMode = PIXI.blendModes.NORMAL;
                        this.context.globalCompositeOperation = PIXI.blendModesCanvas[PIXI.blendModes.NORMAL];
                        /*if (navigator.isCocoonJS && this.view.screencanvas) {
                                    			this.context.fillStyle = "black";
                                    			this.context.clear();
                                    		}*/ //    this.context.fillStyle = stage.backgroundColorString;
                        //  this.context.fillRect(0, 0, this.width , this.height);
                        /*    if (this.clearBeforeRender)
                        		{
                        			if (this.transparent)
                        			{
                        				this.context.clearRect(0, 0, this.width, this.height);
                        			}
                        			else
                        			{
                        				this.context.fillStyle = stage.backgroundColorString;
                        				this.context.fillRect(0, 0, this.width , this.height);
                        			}
                        		}*/
                        this.renderDisplayObject(stage); // run interaction!
                        if (stage.interactive) { //need to add some events!
                            if (!stage._interactiveEventsAdded) {
                                stage._interactiveEventsAdded = true;
                                stage.interactionManager.setTarget(this);
                            }
                        }
                    };
                    /**
                     * Removes everything from the renderer and optionally removes the Canvas DOM element.
                     *
                     * @method destroy
                     * @param [removeView=true] {boolean} Removes the Canvas element from the DOM.
                     */
                    PIXI.CanvasRenderer.prototype.destroy = function(removeView) {
                        if (typeof removeView === "undefined") {
                            removeView = true;
                        }
                        if (removeView && this.view.parent) {
                            this.view.parent.removeChild(this.view);
                        }
                        this.view = null;
                        this.context = null;
                        this.maskManager = null;
                        this.renderSession = null;
                    };
                    /**
                     * Resizes the canvas view to the specified width and height
                     *
                     * @method resize
                     * @param width {Number} the new width of the canvas view
                     * @param height {Number} the new height of the canvas view
                     */
                    PIXI.CanvasRenderer.prototype.resize = function(width, height) {
                        this.width = width;
                        this.height = height;
                        this.view.width = this.width;
                        this.view.height = this.height;
                    };
                    /**
                     * Renders a display object
                     *
                     * @method renderDisplayObject
                     * @param displayObject {DisplayObject} The displayObject to render
                     * @param context {CanvasRenderingContext2D} the context 2d method of the canvas
                     * @private
                     */
                    PIXI.CanvasRenderer.prototype.renderDisplayObject = function(displayObject, context) {
                        this.renderSession.context = context || this.context;
                        displayObject._renderCanvas(this.renderSession);
                    };
                    /**
                     * Maps Pixi blend modes to canvas blend modes.
                     *
                     * @method mapBlendModes
                     * @private
                     */
                    PIXI.CanvasRenderer.prototype.mapBlendModes = function() {
                        if (!PIXI.blendModesCanvas) {
                            PIXI.blendModesCanvas = [];
                            if (PIXI.canUseNewCanvasBlendModes()) {
                                PIXI.blendModesCanvas[PIXI.blendModes.NORMAL] = "source-over";
                                PIXI.blendModesCanvas[PIXI.blendModes.ADD] = "lighter"; //IS THIS OK???
                                PIXI.blendModesCanvas[PIXI.blendModes.MULTIPLY] = "multiply";
                                PIXI.blendModesCanvas[PIXI.blendModes.SCREEN] = "screen";
                            } else { // this means that the browser does not support the cool new blend modes in canvas "cough" ie "cough"
                                PIXI.blendModesCanvas[PIXI.blendModes.NORMAL] = "source-over";
                                PIXI.blendModesCanvas[PIXI.blendModes.ADD] = "lighter"; //IS THIS OK???
                                PIXI.blendModesCanvas[PIXI.blendModes.MULTIPLY] = "source-over";
                                PIXI.blendModesCanvas[PIXI.blendModes.SCREEN] = "source-over";
                            }
                        }
                    };
                    /**
                     * @author Mat Groves http://matgroves.com/ @Doormat23
                     */
                    /**
                     * A set of functions used by the canvas renderer to draw the primitive graphics data.
                     *
                     * @class CanvasGraphics
                     * @static
                     */
                    PIXI.CanvasGraphics = function() {};
                    /*
                     * Renders a PIXI.Graphics object to a canvas.
                     *
                     * @method renderGraphics
                     * @static
                     * @param graphics {Graphics} the actual graphics object to render
                     * @param context {CanvasRenderingContext2D} the 2d drawing method of the canvas
                     */
                    PIXI.CanvasGraphics.renderGraphics = function(graphics, context) {
                        var worldAlpha = graphics.worldAlpha;
                        if (graphics.dirty) {
                            this.updateGraphicsTint(graphics);
                            graphics.dirty = false;
                        }
                        for (var i = 0; i < graphics.graphicsData.length; i++) {
                            var data = graphics.graphicsData[i];
                            var shape = data.shape;
                            var fillColor = data._fillTint;
                            var lineColor = data._lineTint;
                            context.lineWidth = data.lineWidth;
                            if (data.type === PIXI.Graphics.POLY) {
                                context.beginPath();
                                var points = shape.points;
                                context.moveTo(points[0], points[1]);
                                for (var j = 1; j < points.length / 2; j++) {
                                    context.lineTo(points[j * 2], points[j * 2 + 1]);
                                }
                                if (shape.closed) {
                                    context.lineTo(points[0], points[1]);
                                } // if the first and last point are the same close the path - much neater :)
                                if (points[0] === points[points.length - 2] && points[1] === points[points.length - 1]) {
                                    context.closePath();
                                }
                                if (data.fill) {
                                    context.globalAlpha = data.fillAlpha * worldAlpha;
                                    context.fillStyle = '#' + ('00000' + (fillColor | 0).toString(16)).substr(-6);
                                    context.fill();
                                }
                                if (data.lineWidth) {
                                    context.globalAlpha = data.lineAlpha * worldAlpha;
                                    context.strokeStyle = '#' + ('00000' + (lineColor | 0).toString(16)).substr(-6);
                                    context.stroke();
                                }
                            } else if (data.type === PIXI.Graphics.RECT) {
                                if (data.fillColor || data.fillColor === 0) {
                                    context.globalAlpha = data.fillAlpha * worldAlpha;
                                    context.fillStyle = '#' + ('00000' + (fillColor | 0).toString(16)).substr(-6);
                                    context.fillRect(shape.x, shape.y, shape.width, shape.height);
                                }
                                if (data.lineWidth) {
                                    context.globalAlpha = data.lineAlpha * worldAlpha;
                                    context.strokeStyle = '#' + ('00000' + (lineColor | 0).toString(16)).substr(-6);
                                    context.strokeRect(shape.x, shape.y, shape.width, shape.height);
                                }
                            } else if (data.type === PIXI.Graphics.CIRC) { // TODO - need to be Undefined!
                                context.beginPath();
                                context.arc(shape.x, shape.y, shape.radius, 0, 2 * Math.PI);
                                context.closePath();
                                if (data.fill) {
                                    context.globalAlpha = data.fillAlpha * worldAlpha;
                                    context.fillStyle = '#' + ('00000' + (fillColor | 0).toString(16)).substr(-6);
                                    context.fill();
                                }
                                if (data.lineWidth) {
                                    context.globalAlpha = data.lineAlpha * worldAlpha;
                                    context.strokeStyle = '#' + ('00000' + (lineColor | 0).toString(16)).substr(-6);
                                    context.stroke();
                                }
                            } else if (data.type === PIXI.Graphics.ELIP) { // ellipse code taken from: http://stackoverflow.com/questions/2172798/how-to-draw-an-oval-in-html5-canvas
                                var w = shape.width * 2;
                                var h = shape.height * 2;
                                var x = shape.x - w / 2;
                                var y = shape.y - h / 2;
                                context.beginPath();
                                var kappa = 0.5522848,
                                    ox = w / 2 * kappa, // control point offset horizontal
                                    oy = h / 2 * kappa, // control point offset vertical
                                    xe = x + w, // x-end
                                    ye = y + h, // y-end
                                    xm = x + w / 2, // x-middle
                                    ym = y + h / 2; // y-middle
                                context.moveTo(x, ym);
                                context.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);
                                context.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);
                                context.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);
                                context.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);
                                context.closePath();
                                if (data.fill) {
                                    context.globalAlpha = data.fillAlpha * worldAlpha;
                                    context.fillStyle = '#' + ('00000' + (fillColor | 0).toString(16)).substr(-6);
                                    context.fill();
                                }
                                if (data.lineWidth) {
                                    context.globalAlpha = data.lineAlpha * worldAlpha;
                                    context.strokeStyle = '#' + ('00000' + (lineColor | 0).toString(16)).substr(-6);
                                    context.stroke();
                                }
                            } else if (data.type === PIXI.Graphics.RREC) {
                                var rx = shape.x;
                                var ry = shape.y;
                                var width = shape.width;
                                var height = shape.height;
                                var radius = shape.radius;
                                var maxRadius = Math.min(width, height) / 2 | 0;
                                radius = radius > maxRadius ? maxRadius : radius;
                                context.beginPath();
                                context.moveTo(rx, ry + radius);
                                context.lineTo(rx, ry + height - radius);
                                context.quadraticCurveTo(rx, ry + height, rx + radius, ry + height);
                                context.lineTo(rx + width - radius, ry + height);
                                context.quadraticCurveTo(rx + width, ry + height, rx + width, ry + height - radius);
                                context.lineTo(rx + width, ry + radius);
                                context.quadraticCurveTo(rx + width, ry, rx + width - radius, ry);
                                context.lineTo(rx + radius, ry);
                                context.quadraticCurveTo(rx, ry, rx, ry + radius);
                                context.closePath();
                                if (data.fillColor || data.fillColor === 0) {
                                    context.globalAlpha = data.fillAlpha * worldAlpha;
                                    context.fillStyle = '#' + ('00000' + (fillColor | 0).toString(16)).substr(-6);
                                    context.fill();
                                }
                                if (data.lineWidth) {
                                    context.globalAlpha = data.lineAlpha * worldAlpha;
                                    context.strokeStyle = '#' + ('00000' + (lineColor | 0).toString(16)).substr(-6);
                                    context.stroke();
                                }
                            }
                        }
                    };
                    /*
                     * Renders a graphics mask
                     *
                     * @static
                     * @private
                     * @method renderGraphicsMask
                     * @param graphics {Graphics} the graphics which will be used as a mask
                     * @param context {CanvasRenderingContext2D} the context 2d method of the canvas
                     */
                    PIXI.CanvasGraphics.renderGraphicsMask = function(graphics, context) {
                        var len = graphics.graphicsData.length;
                        if (len === 0) return;
                        if (len > 1) {
                            len = 1;
                            window.console.log('Pixi.js warning: masks in canvas can only mask using the first path in the graphics object');
                        }
                        for (var i = 0; i < 1; i++) {
                            var data = graphics.graphicsData[i];
                            var shape = data.shape;
                            if (data.type === PIXI.Graphics.POLY) {
                                context.beginPath();
                                var points = shape.points;
                                context.moveTo(points[0], points[1]);
                                for (var j = 1; j < points.length / 2; j++) {
                                    context.lineTo(points[j * 2], points[j * 2 + 1]);
                                } // if the first and last point are the same close the path - much neater :)
                                if (points[0] === points[points.length - 2] && points[1] === points[points.length - 1]) {
                                    context.closePath();
                                }
                            } else if (data.type === PIXI.Graphics.RECT) {
                                context.beginPath();
                                context.rect(shape.x, shape.y, shape.width, shape.height);
                                context.closePath();
                            } else if (data.type === PIXI.Graphics.CIRC) { // TODO - need to be Undefined!
                                context.beginPath();
                                context.arc(shape.x, shape.y, shape.radius, 0, 2 * Math.PI);
                                context.closePath();
                            } else if (data.type === PIXI.Graphics.ELIP) { // ellipse code taken from: http://stackoverflow.com/questions/2172798/how-to-draw-an-oval-in-html5-canvas
                                var w = shape.width * 2;
                                var h = shape.height * 2;
                                var x = shape.x - w / 2;
                                var y = shape.y - h / 2;
                                context.beginPath();
                                var kappa = 0.5522848,
                                    ox = w / 2 * kappa, // control point offset horizontal
                                    oy = h / 2 * kappa, // control point offset vertical
                                    xe = x + w, // x-end
                                    ye = y + h, // y-end
                                    xm = x + w / 2, // x-middle
                                    ym = y + h / 2; // y-middle
                                context.moveTo(x, ym);
                                context.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);
                                context.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);
                                context.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);
                                context.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);
                                context.closePath();
                            } else if (data.type === PIXI.Graphics.RREC) {
                                var rx, ry, width, height, radius;
                                var pts = shape.points;
                                if (pts) {
                                    rx = pts[0];
                                    ry = pts[1];
                                    width = pts[2];
                                    height = pts[3];
                                    radius = pts[4];
                                } else {
                                    rx = shape.x;
                                    ry = shape.y;
                                    width = shape.width;
                                    height = shape.height;
                                    radius = shape.radius;
                                }
                                var maxRadius = Math.min(width, height) / 2 | 0;
                                radius = radius > maxRadius ? maxRadius : radius;
                                context.beginPath();
                                context.moveTo(rx, ry + radius);
                                context.lineTo(rx, ry + height - radius);
                                context.quadraticCurveTo(rx, ry + height, rx + radius, ry + height);
                                context.lineTo(rx + width - radius, ry + height);
                                context.quadraticCurveTo(rx + width, ry + height, rx + width, ry + height - radius);
                                context.lineTo(rx + width, ry + radius);
                                context.quadraticCurveTo(rx + width, ry, rx + width - radius, ry);
                                context.lineTo(rx + radius, ry);
                                context.quadraticCurveTo(rx, ry, rx, ry + radius);
                                context.closePath();
                            }
                        }
                    };
                    PIXI.CanvasGraphics.updateGraphicsTint = function(graphics) {
                        if (graphics.tint === 0xFFFFFF) return;
                        var tintR = (graphics.tint >> 16 & 0xFF) / 255;
                        var tintG = (graphics.tint >> 8 & 0xFF) / 255;
                        var tintB = (graphics.tint & 0xFF) / 255;
                        for (var i = 0; i < graphics.graphicsData.length; i++) {
                            var data = graphics.graphicsData[i];
                            var fillColor = data.fillColor | 0;
                            var lineColor = data.lineColor | 0;
                            /*
                                        			var colorR = (fillColor >> 16 & 0xFF) / 255;
                                        			var colorG = (fillColor >> 8 & 0xFF) / 255;
                                        			var colorB = (fillColor & 0xFF) / 255; 

                                        			colorR *= tintR;
                                        			colorG *= tintG;
                                        			colorB *= tintB;

                                        			fillColor = ((colorR*255 << 16) + (colorG*255 << 8) + colorB*255);

                                        			colorR = (lineColor >> 16 & 0xFF) / 255;
                                        			colorG = (lineColor >> 8 & 0xFF) / 255;
                                        			colorB = (lineColor & 0xFF) / 255; 

                                        			colorR *= tintR;
                                        			colorG *= tintG;
                                        			colorB *= tintB;

                                        			lineColor = ((colorR*255 << 16) + (colorG*255 << 8) + colorB*255);   
                                        			*/ // super inline cos im an optimization NAZI :)
                            data._fillTint = ((fillColor >> 16 & 0xFF) / 255 * tintR * 255 << 16) + ((fillColor >> 8 & 0xFF) / 255 * tintG * 255 << 8) + (fillColor & 0xFF) / 255 * tintB * 255;
                            data._lineTint = ((lineColor >> 16 & 0xFF) / 255 * tintR * 255 << 16) + ((lineColor >> 8 & 0xFF) / 255 * tintG * 255 << 8) + (lineColor & 0xFF) / 255 * tintB * 255;
                        }
                    };
                    /**
                     * @author Mat Groves http://matgroves.com/ @Doormat23
                     */
                    /**
                     * The Graphics class contains methods used to draw primitive shapes such as lines, circles and rectangles to the display, and color and fill them.
                     * 
                     * @class Graphics
                     * @extends DisplayObjectContainer
                     * @constructor
                     */
                    PIXI.Graphics = function() {
                        PIXI.DisplayObjectContainer.call(this);
                        this.renderable = true;
                        /**
                         * The alpha value used when filling the Graphics object.
                         *
                         * @property fillAlpha
                         * @type Number
                         */
                        this.fillAlpha = 1;
                        /**
                         * The width (thickness) of any lines drawn.
                         *
                         * @property lineWidth
                         * @type Number
                         */
                        this.lineWidth = 0;
                        /**
                         * The color of any lines drawn.
                         *
                         * @property lineColor
                         * @type String
                         * @default 0
                         */
                        this.lineColor = 0;
                        /**
                         * Graphics data
                         *
                         * @property graphicsData
                         * @type Array
                         * @private
                         */
                        this.graphicsData = [];
                        /**
                         * The tint applied to the graphic shape. This is a hex value. Apply a value of 0xFFFFFF to reset the tint.
                         *
                         * @property tint
                         * @type Number
                         * @default 0xFFFFFF
                         */
                        this.tint = 0xFFFFFF;
                        this.ondTint = 0xFFFFFF;
                        /**
                         * The blend mode to be applied to the graphic shape. Apply a value of PIXI.blendModes.NORMAL to reset the blend mode.
                         *
                         * @property blendMode
                         * @type Number
                         * @default PIXI.blendModes.NORMAL;
                         */
                        this.blendMode = PIXI.blendModes.NORMAL;
                        /**
                         * Current path
                         *
                         * @property currentPath
                         * @type Object
                         * @private
                         */
                        this.currentPath = null;
                        /**
                         * Array containing some WebGL-related properties used by the WebGL renderer.
                         *
                         * @property _webGL
                         * @type Array
                         * @private
                         */
                        this._webGL = [];
                        /**
                         * Whether this shape is being used as a mask.
                         *
                         * @property isMask
                         * @type Boolean
                         */
                        this.isMask = false;
                        /**
                         * The bounds' padding used for bounds calculation.
                         *
                         * @property boundsPadding
                         * @type Number
                         */
                        this.boundsPadding = 0;
                        this._localBounds = new PIXI.Rectangle(0, 0, 1, 1);
                        /**
                         * Used to detect if the graphics object has changed. If this is set to true then the graphics object will be recalculated.
                         * 
                         * @property dirty
                         * @type Boolean
                         * @private
                         */
                        this.dirty = true;
                        /**
                         * Used to detect if the webgl graphics object has changed. If this is set to true then the graphics object will be recalculated.
                         * 
                         * @property webGLDirty
                         * @type Boolean
                         * @private
                         */
                        this.webGLDirty = false;
                        /**
                         * Used to detect if the cached sprite object needs to be updated.
                         * 
                         * @property cachedSpriteDirty
                         * @type Boolean
                         * @private
                         */
                        this.cachedSpriteDirty = false;
                    }; // constructor
                    PIXI.Graphics.prototype = Object.create(PIXI.DisplayObjectContainer.prototype);
                    PIXI.Graphics.prototype.constructor = PIXI.Graphics;
                    /**
                     * When cacheAsBitmap is set to true the graphics object will be rendered as if it was a sprite.
                     * This is useful if your graphics element does not change often, as it will speed up the rendering of the object in exchange for taking up texture memory.
                     * It is also useful if you need the graphics object to be anti-aliased, because it will be rendered using canvas.
                     * This is not recommended if you are constantly redrawing the graphics element.
                     *
                     * @property cacheAsBitmap
                     * @type Boolean
                     * @default false
                     * @private
                     */
                    /*Object.defineProperty(PIXI.Graphics.prototype, "cacheAsBitmap", {
                               		get: function() {
                               			return  this._cacheAsBitmap;
                               		},
                               		set: function(value) {
                               			this._cacheAsBitmap = value;

                               			if(this._cacheAsBitmap)
                               			{

                               				this._generateCachedSprite();
                               			}
                               			else
                               			{
                               				this.destroyCachedSprite();
                               				this.dirty = true;
                               			}

                               		}
                               	});*/
                    /**
                     * Specifies the line style used for subsequent calls to Graphics methods such as the lineTo() method or the drawCircle() method.
                     *
                     * @method lineStyle
                     * @param lineWidth {Number} width of the line to draw, will update the objects stored style
                     * @param color {Number} color of the line to draw, will update the objects stored style
                     * @param alpha {Number} alpha of the line to draw, will update the objects stored style
                     * @return {Graphics}
                     */
                    PIXI.Graphics.prototype.lineStyle = function(lineWidth, color, alpha) {
                        this.lineWidth = lineWidth || 0;
                        this.lineColor = color || 0;
                        this.lineAlpha = arguments.length < 3 ? 1 : alpha;
                        if (this.currentPath) {
                            if (this.currentPath.shape.points.length) { // halfway through a line? start a new one!
                                this.drawShape(new PIXI.Polygon(this.currentPath.shape.points.slice(-2)));
                                return this;
                            } // otherwise its empty so lets just set the line properties
                            this.currentPath.lineWidth = this.lineWidth;
                            this.currentPath.lineColor = this.lineColor;
                            this.currentPath.lineAlpha = this.lineAlpha;
                        }
                        return this;
                    };
                    /**
                     * Moves the current drawing position to x, y.
                     *
                     * @method moveTo
                     * @param x {Number} the X coordinate to move to
                     * @param y {Number} the Y coordinate to move to
                     * @return {Graphics}
                     */
                    PIXI.Graphics.prototype.moveTo = function(x, y) {
                        this.drawShape(new PIXI.Polygon([x, y]));
                        return this;
                    };
                    /**
                     * Draws a line using the current line style from the current drawing position to (x, y);
                     * The current drawing position is then set to (x, y).
                     *
                     * @method lineTo
                     * @param x {Number} the X coordinate to draw to
                     * @param y {Number} the Y coordinate to draw to
                     * @return {Graphics}
                     */
                    PIXI.Graphics.prototype.lineTo = function(x, y) {
                        this.currentPath.shape.points.push(x, y);
                        this.dirty = true;
                        return this;
                    };
                    /**
                     * Calculate the points for a quadratic bezier curve and then draws it.
                     * Based on: https://stackoverflow.com/questions/785097/how-do-i-implement-a-bezier-curve-in-c
                     *
                     * @method quadraticCurveTo
                     * @param cpX {Number} Control point x
                     * @param cpY {Number} Control point y
                     * @param toX {Number} Destination point x
                     * @param toY {Number} Destination point y
                     * @return {Graphics}
                     */
                    PIXI.Graphics.prototype.quadraticCurveTo = function(cpX, cpY, toX, toY) {
                        if (this.currentPath) {
                            if (this.currentPath.shape.points.length === 0) this.currentPath.shape.points = [0, 0];
                        } else {
                            this.moveTo(0, 0);
                        }
                        var xa, ya, n = 20,
                            points = this.currentPath.shape.points;
                        if (points.length === 0) this.moveTo(0, 0);
                        var fromX = points[points.length - 2];
                        var fromY = points[points.length - 1];
                        var j = 0;
                        for (var i = 1; i <= n; i++) {
                            j = i / n;
                            xa = fromX + (cpX - fromX) * j;
                            ya = fromY + (cpY - fromY) * j;
                            points.push(xa + (cpX + (toX - cpX) * j - xa) * j, ya + (cpY + (toY - cpY) * j - ya) * j);
                        }
                        this.dirty = true;
                        return this;
                    };
                    /**
                     * Calculate the points for a bezier curve and then draws it.
                     *
                     * @method bezierCurveTo
                     * @param cpX {Number} Control point x
                     * @param cpY {Number} Control point y
                     * @param cpX2 {Number} Second Control point x
                     * @param cpY2 {Number} Second Control point y
                     * @param toX {Number} Destination point x
                     * @param toY {Number} Destination point y
                     * @return {Graphics}
                     */
                    PIXI.Graphics.prototype.bezierCurveTo = function(cpX, cpY, cpX2, cpY2, toX, toY) {
                        if (this.currentPath) {
                            if (this.currentPath.shape.points.length === 0) this.currentPath.shape.points = [0, 0];
                        } else {
                            this.moveTo(0, 0);
                        }
                        var n = 20,
                            dt, dt2, dt3, t2, t3, points = this.currentPath.shape.points;
                        var fromX = points[points.length - 2];
                        var fromY = points[points.length - 1];
                        var j = 0;
                        for (var i = 1; i <= n; i++) {
                            j = i / n;
                            dt = 1 - j;
                            dt2 = dt * dt;
                            dt3 = dt2 * dt;
                            t2 = j * j;
                            t3 = t2 * j;
                            points.push(dt3 * fromX + 3 * dt2 * j * cpX + 3 * dt * t2 * cpX2 + t3 * toX, dt3 * fromY + 3 * dt2 * j * cpY + 3 * dt * t2 * cpY2 + t3 * toY);
                        }
                        this.dirty = true;
                        return this;
                    };
                    /*
                     * The arcTo() method creates an arc/curve between two tangents on the canvas.
                     * 
                     * "borrowed" from https://code.google.com/p/fxcanvas/ - thanks google!
                     *
                     * @method arcTo
                     * @param x1 {Number} The x-coordinate of the beginning of the arc
                     * @param y1 {Number} The y-coordinate of the beginning of the arc
                     * @param x2 {Number} The x-coordinate of the end of the arc
                     * @param y2 {Number} The y-coordinate of the end of the arc
                     * @param radius {Number} The radius of the arc
                     * @return {Graphics}
                     */
                    PIXI.Graphics.prototype.arcTo = function(x1, y1, x2, y2, radius) {
                        if (this.currentPath) {
                            if (this.currentPath.shape.points.length === 0) {
                                this.currentPath.shape.points.push(x1, y1);
                            }
                        } else {
                            this.moveTo(x1, y1);
                        }
                        var points = this.currentPath.shape.points;
                        var fromX = points[points.length - 2];
                        var fromY = points[points.length - 1];
                        var a1 = fromY - y1;
                        var b1 = fromX - x1;
                        var a2 = y2 - y1;
                        var b2 = x2 - x1;
                        var mm = Math.abs(a1 * b2 - b1 * a2);
                        if (mm < 1.0e-8 || radius === 0) {
                            if (points[points.length - 2] !== x1 || points[points.length - 1] !== y1) { //console.log(">>")
                                points.push(x1, y1);
                            }
                        } else {
                            var dd = a1 * a1 + b1 * b1;
                            var cc = a2 * a2 + b2 * b2;
                            var tt = a1 * a2 + b1 * b2;
                            var k1 = radius * Math.sqrt(dd) / mm;
                            var k2 = radius * Math.sqrt(cc) / mm;
                            var j1 = k1 * tt / dd;
                            var j2 = k2 * tt / cc;
                            var cx = k1 * b2 + k2 * b1;
                            var cy = k1 * a2 + k2 * a1;
                            var px = b1 * (k2 + j1);
                            var py = a1 * (k2 + j1);
                            var qx = b2 * (k1 + j2);
                            var qy = a2 * (k1 + j2);
                            var startAngle = Math.atan2(py - cy, px - cx);
                            var endAngle = Math.atan2(qy - cy, qx - cx);
                            this.arc(cx + x1, cy + y1, radius, startAngle, endAngle, b1 * a2 > b2 * a1);
                        }
                        this.dirty = true;
                        return this;
                    };
                    /**
                     * The arc method creates an arc/curve (used to create circles, or parts of circles).
                     *
                     * @method arc
                     * @param cx {Number} The x-coordinate of the center of the circle
                     * @param cy {Number} The y-coordinate of the center of the circle
                     * @param radius {Number} The radius of the circle
                     * @param startAngle {Number} The starting angle, in radians (0 is at the 3 o'clock position of the arc's circle)
                     * @param endAngle {Number} The ending angle, in radians
                     * @param anticlockwise {Boolean} Optional. Specifies whether the drawing should be counterclockwise or clockwise. False is default, and indicates clockwise, while true indicates counter-clockwise.
                     * @return {Graphics}
                     */
                    PIXI.Graphics.prototype.arc = function(cx, cy, radius, startAngle, endAngle, anticlockwise) {
                        var startX = cx + Math.cos(startAngle) * radius;
                        var startY = cy + Math.sin(startAngle) * radius;
                        var points;
                        if (this.currentPath) {
                            points = this.currentPath.shape.points;
                            if (points.length === 0) {
                                points.push(startX, startY);
                            } else if (points[points.length - 2] !== startX || points[points.length - 1] !== startY) {
                                points.push(startX, startY);
                            }
                        } else {
                            this.moveTo(startX, startY);
                            points = this.currentPath.shape.points;
                        }
                        if (startAngle === endAngle) return this;
                        if (!anticlockwise && endAngle <= startAngle) {
                            endAngle += Math.PI * 2;
                        } else if (anticlockwise && startAngle <= endAngle) {
                            startAngle += Math.PI * 2;
                        }
                        var sweep = anticlockwise ? (startAngle - endAngle) * -1 : endAngle - startAngle;
                        var segs = Math.abs(sweep) / (Math.PI * 2) * 40;
                        if (sweep === 0) return this;
                        var theta = sweep / (segs * 2);
                        var theta2 = theta * 2;
                        var cTheta = Math.cos(theta);
                        var sTheta = Math.sin(theta);
                        var segMinus = segs - 1;
                        var remainder = segMinus % 1 / segMinus;
                        for (var i = 0; i <= segMinus; i++) {
                            var real = i + remainder * i;
                            var angle = theta + startAngle + theta2 * real;
                            var c = Math.cos(angle);
                            var s = -Math.sin(angle);
                            points.push((cTheta * c + sTheta * s) * radius + cx, (cTheta * -s + sTheta * c) * radius + cy);
                        }
                        this.dirty = true;
                        return this;
                    };
                    /**
                     * Specifies a simple one-color fill that subsequent calls to other Graphics methods
                     * (such as lineTo() or drawCircle()) use when drawing.
                     *
                     * @method beginFill
                     * @param color {Number} the color of the fill
                     * @param alpha {Number} the alpha of the fill
                     * @return {Graphics}
                     */
                    PIXI.Graphics.prototype.beginFill = function(color, alpha) {
                        this.filling = true;
                        this.fillColor = color || 0;
                        this.fillAlpha = alpha === undefined ? 1 : alpha;
                        if (this.currentPath) {
                            if (this.currentPath.shape.points.length <= 2) {
                                this.currentPath.fill = this.filling;
                                this.currentPath.fillColor = this.fillColor;
                                this.currentPath.fillAlpha = this.fillAlpha;
                            }
                        }
                        return this;
                    };
                    /**
                     * Applies a fill to the lines and shapes that were added since the last call to the beginFill() method.
                     *
                     * @method endFill
                     * @return {Graphics}
                     */
                    PIXI.Graphics.prototype.endFill = function() {
                        this.filling = false;
                        this.fillColor = null;
                        this.fillAlpha = 1;
                        return this;
                    };
                    /**
                     * @method drawRect
                     *
                     * @param x {Number} The X coord of the top-left of the rectangle
                     * @param y {Number} The Y coord of the top-left of the rectangle
                     * @param width {Number} The width of the rectangle
                     * @param height {Number} The height of the rectangle
                     * @return {Graphics}
                     */
                    PIXI.Graphics.prototype.drawRect = function(x, y, width, height) {
                        this.drawShape(new PIXI.Rectangle(x, y, width, height));
                        return this;
                    };
                    /**
                     * @method drawRoundedRect
                     *
                     * @param x {Number} The X coord of the top-left of the rectangle
                     * @param y {Number} The Y coord of the top-left of the rectangle
                     * @param width {Number} The width of the rectangle
                     * @param height {Number} The height of the rectangle
                     * @param radius {Number} Radius of the rectangle corners
                     */
                    PIXI.Graphics.prototype.drawRoundedRect = function(x, y, width, height, radius) {
                        this.drawShape(new PIXI.RoundedRectangle(x, y, width, height, radius));
                        return this;
                    };
                    /**
                     * Draws a circle.
                     *
                     * @method drawCircle
                     * @param x {Number} The X coordinate of the center of the circle
                     * @param y {Number} The Y coordinate of the center of the circle
                     * @param radius {Number} The radius of the circle
                     * @return {Graphics}
                     */
                    PIXI.Graphics.prototype.drawCircle = function(x, y, radius) {
                        this.drawShape(new PIXI.Circle(x, y, radius));
                        return this;
                    };
                    /**
                     * Draws an ellipse.
                     *
                     * @method drawEllipse
                     * @param x {Number} The X coordinate of the center of the ellipse
                     * @param y {Number} The Y coordinate of the center of the ellipse
                     * @param width {Number} The half width of the ellipse
                     * @param height {Number} The half height of the ellipse
                     * @return {Graphics}
                     */
                    PIXI.Graphics.prototype.drawEllipse = function(x, y, width, height) {
                        this.drawShape(new PIXI.Ellipse(x, y, width, height));
                        return this;
                    };
                    /**
                     * Draws a polygon using the given path.
                     *
                     * @method drawPolygon
                     * @param path {Array} The path data used to construct the polygon.
                     * @return {Graphics}
                     */
                    PIXI.Graphics.prototype.drawPolygon = function(path) {
                        if (!(path instanceof Array)) path = Array.prototype.slice.call(arguments);
                        this.drawShape(new PIXI.Polygon(path));
                        return this;
                    };
                    /**
                     * Clears the graphics that were drawn to this Graphics object, and resets fill and line style settings.
                     *
                     * @method clear
                     * @return {Graphics}
                     */
                    PIXI.Graphics.prototype.clear = function() {
                        this.lineWidth = 0;
                        this.filling = false;
                        this.dirty = true;
                        this.clearDirty = true;
                        this.graphicsData = [];
                        return this;
                    };
                    /**
                     * Renders the object using the WebGL renderer
                     *
                     * @method _renderWebGL
                     * @param renderSession {RenderSession} 
                     * @private
                     */
                    PIXI.Graphics.prototype._renderWebGL = function(renderSession) { // if the sprite is not visible or the alpha is 0 then no need to render this element
                        if (this.visible === false || this.alpha === 0 || this.isMask === true) return;
                        renderSession.spriteBatch.stop();
                        renderSession.blendModeManager.setBlendMode(this.blendMode);
                        if (this._mask) renderSession.maskManager.pushMask(this._mask, renderSession);
                        if (this._filters) renderSession.filterManager.pushFilter(this._filterBlock); // check blend mode
                        if (this.blendMode !== renderSession.spriteBatch.currentBlendMode) {
                            renderSession.spriteBatch.currentBlendMode = this.blendMode;
                            var blendModeWebGL = PIXI.blendModesWebGL[renderSession.spriteBatch.currentBlendMode];
                            renderSession.spriteBatch.gl.blendFunc(blendModeWebGL[0], blendModeWebGL[1]);
                        } // check if the webgl graphic needs to be updated
                        if (this.webGLDirty) {
                            this.dirty = true;
                            this.webGLDirty = false;
                        }
                        PIXI.WebGLGraphics.renderGraphics(this, renderSession); // only render if it has children!
                        if (this.children.length) {
                            renderSession.spriteBatch.start(); // simple render children!
                            for (var i = 0, j = this.children.length; i < j; i++) {
                                this.children[i]._renderWebGL(renderSession);
                            }
                            renderSession.spriteBatch.stop();
                        }
                        if (this._filters) renderSession.filterManager.popFilter();
                        if (this._mask) renderSession.maskManager.popMask(this.mask, renderSession);
                        renderSession.drawCount++;
                        renderSession.spriteBatch.start();
                    };
                    /**
                     * Renders the object using the Canvas renderer
                     *
                     * @method _renderCanvas
                     * @param renderSession {RenderSession} 
                     * @private
                     */
                    PIXI.Graphics.prototype._renderCanvas = function(renderSession) { // if the sprite is not visible or the alpha is 0 then no need to render this element
                        if (this.visible === false || this.alpha === 0 || this.isMask === true) return;
                        var context = renderSession.context;
                        var transform = this.worldTransform;
                        if (this.blendMode !== renderSession.currentBlendMode) {
                            renderSession.currentBlendMode = this.blendMode;
                            context.globalCompositeOperation = PIXI.blendModesCanvas[renderSession.currentBlendMode];
                        }
                        if (this._mask) {
                            renderSession.maskManager.pushMask(this._mask, renderSession);
                        }
                        context.setTransform(transform.a, transform.b, transform.c, transform.d, transform.tx, transform.ty);
                        if (this.tint != this.oldTint) {
                            this.dirty = true;
                            this.oldTint = this.tint;
                        }
                        PIXI.CanvasGraphics.renderGraphics(this, context); // simple render children!
                        for (var i = 0, j = this.children.length; i < j; i++) {
                            this.children[i]._renderCanvas(renderSession);
                        }
                        if (this._mask) {
                            renderSession.maskManager.popMask(renderSession);
                        }
                    };
                    /**
                     * Retrieves the bounds of the graphic shape as a rectangle object
                     *
                     * @method getBounds
                     * @return {Rectangle} the rectangular bounding area
                     */
                    PIXI.Graphics.prototype.getBounds = function(matrix) { // return an empty object if the item is a mask!
                        if (this.isMask) return PIXI.EmptyRectangle;
                        if (this.dirty) {
                            this.updateLocalBounds();
                            this.webGLDirty = true;
                            this.cachedSpriteDirty = true;
                            this.dirty = false;
                        }
                        var bounds = this._localBounds;
                        var w0 = bounds.x;
                        var w1 = bounds.width + bounds.x;
                        var h0 = bounds.y;
                        var h1 = bounds.height + bounds.y;
                        var worldTransform = matrix || this.worldTransform;
                        var a = worldTransform.a;
                        var b = worldTransform.b;
                        var c = worldTransform.c;
                        var d = worldTransform.d;
                        var tx = worldTransform.tx;
                        var ty = worldTransform.ty;
                        var x1 = a * w1 + c * h1 + tx;
                        var y1 = d * h1 + b * w1 + ty;
                        var x2 = a * w0 + c * h1 + tx;
                        var y2 = d * h1 + b * w0 + ty;
                        var x3 = a * w0 + c * h0 + tx;
                        var y3 = d * h0 + b * w0 + ty;
                        var x4 = a * w1 + c * h0 + tx;
                        var y4 = d * h0 + b * w1 + ty;
                        var maxX = x1;
                        var maxY = y1;
                        var minX = x1;
                        var minY = y1;
                        minX = x2 < minX ? x2 : minX;
                        minX = x3 < minX ? x3 : minX;
                        minX = x4 < minX ? x4 : minX;
                        minY = y2 < minY ? y2 : minY;
                        minY = y3 < minY ? y3 : minY;
                        minY = y4 < minY ? y4 : minY;
                        maxX = x2 > maxX ? x2 : maxX;
                        maxX = x3 > maxX ? x3 : maxX;
                        maxX = x4 > maxX ? x4 : maxX;
                        maxY = y2 > maxY ? y2 : maxY;
                        maxY = y3 > maxY ? y3 : maxY;
                        maxY = y4 > maxY ? y4 : maxY;
                        this._bounds.x = minX;
                        this._bounds.width = maxX - minX;
                        this._bounds.y = minY;
                        this._bounds.height = maxY - minY;
                        return this._bounds;
                    };
                    /**
                     * Update the bounds of the object
                     *
                     * @method updateLocalBounds
                     */
                    PIXI.Graphics.prototype.updateLocalBounds = function() {
                        var minX = Infinity;
                        var maxX = -Infinity;
                        var minY = Infinity;
                        var maxY = -Infinity;
                        if (this.graphicsData.length) {
                            var shape, points, x, y, w, h;
                            for (var i = 0; i < this.graphicsData.length; i++) {
                                var data = this.graphicsData[i];
                                var type = data.type;
                                var lineWidth = data.lineWidth;
                                shape = data.shape;
                                if (type === PIXI.Graphics.RECT || type === PIXI.Graphics.RREC) {
                                    x = shape.x - lineWidth / 2;
                                    y = shape.y - lineWidth / 2;
                                    w = shape.width + lineWidth;
                                    h = shape.height + lineWidth;
                                    minX = x < minX ? x : minX;
                                    maxX = x + w > maxX ? x + w : maxX;
                                    minY = y < minY ? y : minY;
                                    maxY = y + h > maxY ? y + h : maxY;
                                } else if (type === PIXI.Graphics.CIRC) {
                                    x = shape.x;
                                    y = shape.y;
                                    w = shape.radius + lineWidth / 2;
                                    h = shape.radius + lineWidth / 2;
                                    minX = x - w < minX ? x - w : minX;
                                    maxX = x + w > maxX ? x + w : maxX;
                                    minY = y - h < minY ? y - h : minY;
                                    maxY = y + h > maxY ? y + h : maxY;
                                } else if (type === PIXI.Graphics.ELIP) {
                                    x = shape.x;
                                    y = shape.y;
                                    w = shape.width + lineWidth / 2;
                                    h = shape.height + lineWidth / 2;
                                    minX = x - w < minX ? x - w : minX;
                                    maxX = x + w > maxX ? x + w : maxX;
                                    minY = y - h < minY ? y - h : minY;
                                    maxY = y + h > maxY ? y + h : maxY;
                                } else { // POLY
                                    points = shape.points;
                                    for (var j = 0; j < points.length; j += 2) {
                                        x = points[j];
                                        y = points[j + 1];
                                        minX = x - lineWidth < minX ? x - lineWidth : minX;
                                        maxX = x + lineWidth > maxX ? x + lineWidth : maxX;
                                        minY = y - lineWidth < minY ? y - lineWidth : minY;
                                        maxY = y + lineWidth > maxY ? y + lineWidth : maxY;
                                    }
                                }
                            }
                        } else {
                            minX = 0;
                            maxX = 0;
                            minY = 0;
                            maxY = 0;
                        }
                        var padding = this.boundsPadding;
                        this._localBounds.x = minX - padding;
                        this._localBounds.width = maxX - minX + padding * 2;
                        this._localBounds.y = minY - padding;
                        this._localBounds.height = maxY - minY + padding * 2;
                    };
                    /**
                     * Draws the given shape to this Graphics object. Can be any of Circle, Rectangle, Ellipse, Line or Polygon.
                     *
                     * @method drawShape
                     * @param {Circle|Rectangle|Ellipse|Line|Polygon} shape The Shape object to draw.
                     * @return {GraphicsData} The generated GraphicsData object.
                     */
                    PIXI.Graphics.prototype.drawShape = function(shape) {
                        if (this.currentPath) { // check current path!
                            if (this.currentPath.shape.points.length <= 2) this.graphicsData.pop();
                        }
                        this.currentPath = null;
                        var data = new PIXI.GraphicsData(this.lineWidth, this.lineColor, this.lineAlpha, this.fillColor, this.fillAlpha, this.filling, shape);
                        this.graphicsData.push(data);
                        if (data.type === PIXI.Graphics.POLY) {
                            data.shape.closed = this.filling;
                            this.currentPath = data;
                        }
                        this.dirty = true;
                        return data;
                    };
                    /**
                     * A GraphicsData object.
                     * 
                     * @class GraphicsData
                     * @constructor
                     */
                    PIXI.GraphicsData = function(lineWidth, lineColor, lineAlpha, fillColor, fillAlpha, fill, shape) {
                        this.lineWidth = lineWidth;
                        this.lineColor = lineColor;
                        this.lineAlpha = lineAlpha;
                        this._lineTint = lineColor;
                        this.fillColor = fillColor;
                        this.fillAlpha = fillAlpha;
                        this._fillTint = fillColor;
                        this.fill = fill;
                        this.shape = shape;
                        this.type = shape.type;
                    }; // SOME TYPES:
                    PIXI.Graphics.POLY = 0;
                    PIXI.Graphics.RECT = 1;
                    PIXI.Graphics.CIRC = 2;
                    PIXI.Graphics.ELIP = 3;
                    PIXI.Graphics.RREC = 4;
                    PIXI.Polygon.prototype.type = PIXI.Graphics.POLY;
                    PIXI.Rectangle.prototype.type = PIXI.Graphics.RECT;
                    PIXI.Circle.prototype.type = PIXI.Graphics.CIRC;
                    PIXI.Ellipse.prototype.type = PIXI.Graphics.ELIP;
                    PIXI.RoundedRectangle.prototype.type = PIXI.Graphics.RREC;
                    /**
                     * @author Mat Groves http://matgroves.com/ @Doormat23
                     */
                    PIXI.BaseTextureCache = {};
                    PIXI.BaseTextureCacheIdGenerator = 0;
                    /**
                     * A texture stores the information that represents an image. All textures have a base texture.
                     *
                     * @class BaseTexture
                     * @uses EventTarget
                     * @constructor
                     * @param source {String} the source object (image or canvas)
                     * @param scaleMode {Number} See {{#crossLink "PIXI/scaleModes:property"}}PIXI.scaleModes{{/crossLink}} for possible values
                     */
                    PIXI.BaseTexture = function(source, scaleMode) {
                        /**
                         * [read-only] The width of the base texture set when the image has loaded
                         *
                         * @property width
                         * @type Number
                         * @readOnly
                         */
                        this.width = 100;
                        /**
                         * [read-only] The height of the base texture set when the image has loaded
                         *
                         * @property height
                         * @type Number
                         * @readOnly
                         */
                        this.height = 100;
                        /**
                         * The scale mode to apply when scaling this texture
                         * 
                         * @property scaleMode
                         * @type {Number}
                         * @default PIXI.scaleModes.LINEAR
                         */
                        this.scaleMode = scaleMode || PIXI.scaleModes.DEFAULT;
                        /**
                         * [read-only] Set to true once the base texture has loaded
                         *
                         * @property hasLoaded
                         * @type Boolean
                         * @readOnly
                         */
                        this.hasLoaded = false;
                        /**
                         * The image source that is used to create the texture.
                         *
                         * @property source
                         * @type Image
                         */
                        this.source = source;
                        if (source && source.packer) source.__atlasBaseTexture = this;
                        this._UID = PIXI._UID++;
                        /**
                         * Controls if RGB channels should be pre-multiplied by Alpha  (WebGL only)
                         *
                         * @property premultipliedAlpha
                         * @type Boolean
                         * @default true
                         */
                        this.premultipliedAlpha = true; // used for webGL
                        /**
                         * @property _glTextures
                         * @type Array
                         * @private
                         */
                        this._glTextures = [];
                        /**
                         *
                         * Set this to true if a mipmap of this texture needs to be generated. This value needs to be set before the texture is used
                         * Also the texture must be a power of two size to work
                         * 
                         * @property mipmap
                         * @type {Boolean}
                         */ //this.mipmap = false;
                        // used for webGL texture updating...
                        // TODO - this needs to be addressed
                        /**
                         * @property _dirty
                         * @type Array
                         * @private
                         */
                        this._dirty = [true, true, true, true];
                        if (!source) return;
                        if ((this.source.complete || this.source.getContext) && this.source.width && this.source.height) {
                            this.hasLoaded = true;
                            this.width = this.source.naturalWidth || this.source.width;
                            this.height = this.source.naturalHeight || this.source.height;
                            this.dirty();
                        } else {
                            var scope = this;
                            this.source.onload = function() { //Check is source still exist as we might have destoryed it already
                                if (scope.source) {
                                    scope.hasLoaded = true;
                                    scope.width = scope.source.naturalWidth || scope.source.width;
                                    scope.height = scope.source.naturalHeight || scope.source.height;
                                    scope.dirty();
                                    window.dirtyOnce = true; // add it to somewhere...
                                    scope.dispatchEvent({
                                        type: 'loaded',
                                        content: scope
                                    });
                                }
                            };
                            this.source.onerror = function() {
                                scope.dispatchEvent({
                                    type: 'error',
                                    content: scope
                                });
                            };
                        }
                        /**
                         * @property imageUrl
                         * @type String
                         */
                        this.imageUrl = null;
                        /**
                         * @property _powerOf2
                         * @type Boolean
                         * @private
                         */ //this._powerOf2 = false;
                    };
                    PIXI.BaseTexture.prototype.constructor = PIXI.BaseTexture;
                    PIXI.EventTarget.mixin(PIXI.BaseTexture.prototype);
                    /**
                     * Destroys this base texture
                     *
                     * @method destroy
                     */
                    PIXI.BaseTexture.prototype.destroy = function() {
                        if (this.imageUrl) {
                            delete PIXI.BaseTextureCache[this.imageUrl];
                            delete PIXI.TextureCache[this.imageUrl];
                            this.imageUrl = null;
                            this.source.src = '';
                        }
                        /*  else if (this.source && this.source._pixiId){
                                    			delete PIXI.BaseTextureCache[this.source._pixiId];
                                    		}*/
                        this.source = null;
                        this.unloadFromGPU();
                    };
                    /**
                     * Sets all glTextures to be dirty.
                     *
                     * @method dirty
                     */
                    PIXI.BaseTexture.prototype.dirty = function() {
                        for (var i = 0; i < this._glTextures.length; i++) {
                            this._dirty[i] = true;
                        }
                    };
                    /**
                     * Removes the base texture from the GPU, useful for managing resources on the GPU.
                     * Atexture is still 100% usable and will simply be reuploaded if there is a sprite on screen that is using it.
                     *
                     * @method unloadFromGPU
                     */
                    PIXI.BaseTexture.prototype.unloadFromGPU = function() {
                        this.dirty(); // delete the webGL textures if any.
                        for (var i = this._glTextures.length - 1; i >= 0; i--) {
                            var glTexture = this._glTextures[i];
                            var gl = PIXI.glContexts[i];
                            if (gl && glTexture) {
                                gl.deleteTexture(glTexture);
                            }
                        }
                        this._glTextures.length = 0;
                        this.dirty();
                    };
                    /**
                     * Helper function that creates a base texture from the given image url.
                     * If the image is not in the base texture cache it will be created and loaded.
                     *
                     * @static
                     * @method fromImage
                     * @param imageUrl {String} The image url of the texture
                     * @param crossorigin {Boolean}
                     * @param scaleMode {Number} See {{#crossLink "PIXI/scaleModes:property"}}PIXI.scaleModes{{/crossLink}} for possible values
                     * @return BaseTexture
                     */
                    PIXI.BaseTexture.fromImage = function(imageUrl, crossorigin, scaleMode) {
                        var baseTexture = PIXI.BaseTextureCache[imageUrl];
                        if (crossorigin === undefined && imageUrl.indexOf('data:') === -1) crossorigin = true;
                        if (!baseTexture) { // new Image() breaks tex loading in some versions of Chrome.
                            // See https://code.google.com/p/chromium/issues/detail?id=238071
                            var image = new Image(); //document.createElement('img');
                            if (crossorigin) {
                                image.crossOrigin = '';
                            }
                            image.src = imageUrl;
                            baseTexture = new PIXI.BaseTexture(image, scaleMode);
                            baseTexture.imageUrl = imageUrl;
                            PIXI.BaseTextureCache[imageUrl] = baseTexture;
                        }
                        return baseTexture;
                    };
                    /**
                     * Helper function that creates a base texture from the given canvas element.
                     *
                     * @static
                     * @method fromCanvas
                     * @param canvas {Canvas} The canvas element source of the texture
                     * @param scaleMode {Number} See {{#crossLink "PIXI/scaleModes:property"}}PIXI.scaleModes{{/crossLink}} for possible values
                     * @return BaseTexture
                     */
                    PIXI.BaseTexture.fromCanvas = function(canvas, scaleMode) {
                        /*if(!canvas._pixiId)
                                    		{
                                    			canvas._pixiId = 'canvas_' + PIXI.TextureCacheIdGenerator++;
                                    		}

                                    		var baseTexture = PIXI.BaseTextureCache[canvas._pixiId];

                                    		if(!baseTexture)
                                    		{
                                    			baseTexture = new PIXI.BaseTexture(canvas, scaleMode);
                                    			PIXI.BaseTextureCache[canvas._pixiId] = baseTexture;
                                    		}*/ //console.log("CREATE" scaleMode)
                        return new PIXI.BaseTexture(canvas, scaleMode);
                    };
                    /**
                     * @author Mat Groves http://matgroves.com/ @Doormat23
                     */
                    PIXI.TextureCache = {};
                    PIXI.FrameCache = {};
                    PIXI.TextureCacheIdGenerator = 0;
                    /**
                     * A texture stores the information that represents an image or part of an image. It cannot be added
                     * to the display list directly. Instead use it as the texture for a PIXI.Sprite. If no frame is provided then the whole image is used.
                     *
                     * @class Texture
                     * @uses EventTarget
                     * @constructor
                     * @param baseTexture {BaseTexture} The base texture source to create the texture from
                     * @param frame {Rectangle} The rectangle frame of the texture to show
                     * @param [trim] {Rectangle} Trimmed texture rectangle
                     * @param [ratio] {float} The ratio between actual resolution and reported pixel size (e.g. width = actualPixels * resolution). Must be non-zero and positive.
                     */
                    PIXI.Texture = function(baseTexture, frame, trim, resolution) {
                        /**
                         * Does this Texture have any frame data assigned to it?
                         *
                         * @property noFrame
                         * @type Boolean
                         */
                        this.noFrame = false;
                        this.resolution = resolution || 1;
                        if (!frame) {
                            this.noFrame = true;
                            frame = new PIXI.Rectangle(0, 0, 1, 1);
                        }
                        if (baseTexture instanceof PIXI.Texture) {
                            baseTexture = baseTexture.baseTexture;
                        }
                        /**
                         * The base texture that this texture uses.
                         *
                         * @property baseTexture
                         * @type BaseTexture
                         */
                        this.baseTexture = baseTexture;
                        this.floorCoordinates = true;
                        /**
                         * The frame specifies the region of the base texture that this texture uses
                         *
                         * @property frame
                         * @type Rectangle
                         */
                        this.frame = frame;
                        /**
                         * The texture trim data.
                         *
                         * @property trim
                         * @type Rectangle
                         */
                        this.trim = trim;
                        /**
                         * This will let the renderer know if the texture is valid. If it's not then it cannot be rendered.
                         *
                         * @property valid
                         * @type Boolean
                         */
                        this.valid = false;
                        /**
                         * This will let a renderer know that a texture has been updated (used mainly for webGL uv updates)
                         *
                         * @property requiresUpdate
                         * @type Boolean
                         */
                        this.requiresUpdate = false;
                        /**
                         * The WebGL UV data cache.
                         *
                         * @property _uvs
                         * @type Object
                         * @private
                         */
                        this._uvs = null;
                        /**
                         * The width of the Texture in pixels.
                         *
                         * @property width
                         * @type Number
                         */
                        this.width = 0;
                        /**
                         * The height of the Texture in pixels.
                         *
                         * @property height
                         * @type Number
                         */
                        this.height = 0;
                        if (baseTexture.hasLoaded) {
                            if (this.noFrame) frame = new PIXI.Rectangle(0, 0, baseTexture.width / this.resolution, baseTexture.height / this.resolution);
                            this.setFrame(frame);
                        } else {
                            baseTexture.addEventListener('loaded', this.onBaseTextureLoaded.bind(this));
                        }
                    };
                    PIXI.Texture.prototype.constructor = PIXI.Texture;
                    PIXI.EventTarget.mixin(PIXI.Texture.prototype);
                    /**
                     * Called when the base texture is loaded
                     *
                     * @method onBaseTextureLoaded
                     * @private
                     */
                    PIXI.Texture.prototype.onBaseTextureLoaded = function() {
                        var baseTexture = this.baseTexture;
                        baseTexture.removeEventListener('loaded', this.onLoaded);
                        if (this.noFrame) this.frame = new PIXI.Rectangle(0, 0, baseTexture.width / this.resolution, baseTexture.height / this.resolution);
                        this.setFrame(this.frame);
                        this.dispatchEvent({
                            type: 'update',
                            content: this
                        });
                    };
                    /**
                     * Destroys this texture
                     *
                     * @method destroy
                     * @param destroyBase {Boolean} Whether to destroy the base texture as well
                     */
                    PIXI.Texture.prototype.destroy = function(destroyBase) {
                        if (destroyBase) this.baseTexture.destroy();
                        this.valid = false;
                    };
                    /**
                     * Specifies the region of the baseTexture that this texture will use.
                     *
                     * @method setFrame
                     * @param frame {Rectangle} The frame of the texture to set it to
                     */
                    PIXI.Texture.prototype.setFrame = function(frame) {
                        this.noFrame = false;
                        this.frame = frame;
                        this.width = frame.width;
                        this.height = frame.height;
                        if (!this.trim && (frame.x + frame.width > this.baseTexture.width / this.resolution || frame.y + frame.height > this.baseTexture.height / this.resolution)) {
                            throw new Error('Texture Error: frame does not fit inside the base Texture dimensions ' + (this.image ? this.image.path : this));
                        }
                        this.valid = frame && frame.width && frame.height && this.baseTexture.source && this.baseTexture.hasLoaded;
                        if (this.trim) {
                            this.width = this.trim.width;
                            this.height = this.trim.height;
                            this.frame.width = this.trim.width;
                            this.frame.height = this.trim.height;
                        }
                        if (this.valid) this._updateUvs();
                    };
                    /**
                     * Updates the internal WebGL UV cache.
                     *
                     * @method _updateUvs
                     * @private
                     */
                    PIXI.Texture.prototype._updateUvs = function() {
                        if (!this._uvs) this._uvs = new PIXI.TextureUvs();
                        var frame = this.frame;
                        var resolution = this.resolution;
                        var tw = this.baseTexture.width / resolution; // normalize the base texture size to texture size coords 
                        var th = this.baseTexture.height / resolution;
                        this._uvs.x0 = frame.x / tw;
                        this._uvs.y0 = frame.y / th;
                        this._uvs.x1 = (frame.x + frame.width) / tw;
                        this._uvs.y1 = frame.y / th;
                        this._uvs.x2 = (frame.x + frame.width) / tw;
                        this._uvs.y2 = (frame.y + frame.height) / th;
                        this._uvs.x3 = frame.x / tw;
                        this._uvs.y3 = (frame.y + frame.height) / th;
                    };
                    /**
                     * Helper function that creates a Texture object from the given image url.
                     * If the image is not in the texture cache it will be  created and loaded.
                     *
                     * @static
                     * @method fromImage
                     * @param imageUrl {String} The image url of the texture
                     * @param crossorigin {Boolean} Whether requests should be treated as crossorigin
                     * @param scaleMode {Number} See {{#crossLink "PIXI/scaleModes:property"}}PIXI.scaleModes{{/crossLink}} for possible values
                     * @return Texture
                     */
                    PIXI.Texture.fromImage = function(imageUrl, crossorigin, scaleMode, resolution) {
                        resolution = resolution || 1;
                        var str = imageUrl;
                        if (resolution != 1) str += ":" + resolution;
                        var texture = PIXI.TextureCache[str];
                        if (!texture) {
                            texture = new PIXI.Texture(PIXI.BaseTexture.fromImage(imageUrl, crossorigin, scaleMode), resolution);
                            PIXI.TextureCache[str] = texture;
                        }
                        return texture;
                    };
                    /**
                     * Helper function that returns a Texture objected based on the given frame id.
                     * If the frame id is not in the texture cache an error will be thrown.
                     *
                     * @static
                     * @method fromFrame
                     * @param frameId {String} The frame id of the texture
                     * @return Texture
                     */
                    PIXI.Texture.fromFrame = function(frameId) {
                        var texture = PIXI.TextureCache[frameId];
                        if (!texture) throw new Error('The frameId "' + frameId + '" does not exist in the texture cache ');
                        return texture;
                    };
                    /**
                     * Helper function that creates a new a Texture based on the given canvas element.
                     *
                     * @static
                     * @method fromCanvas
                     * @param canvas {Canvas} The canvas element source of the texture
                     * @param scaleMode {Number} See {{#crossLink "PIXI/scaleModes:property"}}PIXI.scaleModes{{/crossLink}} for possible values
                     * @return Texture
                     */
                    PIXI.Texture.fromCanvas = function(canvas, scaleMode, resolution) {
                        var baseTexture;
                        if (canvas.__atlasBaseTexture) {
                            baseTexture = canvas.__atlasBaseTexture;
                        } else {
                            baseTexture = PIXI.BaseTexture.fromCanvas(canvas, scaleMode);
                        }
                        return new PIXI.Texture(baseTexture, undefined, undefined, resolution);
                    };
                    /**
                     * Adds a texture to the global PIXI.TextureCache. This cache is shared across the whole PIXI object.
                     *
                     * @static
                     * @method addTextureToCache
                     * @param texture {Texture} The Texture to add to the cache.
                     * @param id {String} The id that the texture will be stored against.
                     */
                    PIXI.Texture.addTextureToCache = function(texture, id) {
                        PIXI.TextureCache[id] = texture;
                    };
                    /**
                     * Remove a texture from the global PIXI.TextureCache.
                     *
                     * @static
                     * @method removeTextureFromCache
                     * @param id {String} The id of the texture to be removed
                     * @return {Texture} The texture that was removed
                     */
                    PIXI.Texture.removeTextureFromCache = function(id) {
                        var texture = PIXI.TextureCache[id];
                        delete PIXI.TextureCache[id];
                        delete PIXI.BaseTextureCache[id];
                        return texture;
                    };
                    PIXI.TextureUvs = function() {
                        this.x0 = 0;
                        this.y0 = 0;
                        this.x1 = 0;
                        this.y1 = 0;
                        this.x2 = 0;
                        this.y2 = 0;
                        this.x3 = 0;
                        this.y3 = 0;
                    };
                    PIXI.Texture.emptyTexture = new PIXI.Texture(new PIXI.BaseTexture());
                    /**
                     * @author Mat Groves http://matgroves.com/ @Doormat23
                     */
                    /**
                     * A RenderTexture is a special texture that allows any Pixi display object to be rendered to it.
                     *
                     * __Hint__: All DisplayObjects (i.e. Sprites) that render to a RenderTexture should be preloaded otherwise black rectangles will be drawn instead.
                     *
                     * A RenderTexture takes a snapshot of any Display Object given to its render method. The position and rotation of the given Display Objects is ignored. For example:
                     *
                     *    var renderTexture = new PIXI.RenderTexture(800, 600);
                     *    var sprite = PIXI.Sprite.fromImage("spinObj_01.png");
                     *    sprite.position.x = 800/2;
                     *    sprite.position.y = 600/2;
                     *    sprite.anchor.x = 0.5;
                     *    sprite.anchor.y = 0.5;
                     *    renderTexture.render(sprite);
                     *
                     * The Sprite in this case will be rendered to a position of 0,0. To render this sprite at its actual position a DisplayObjectContainer should be used:
                     *
                     *    var doc = new PIXI.DisplayObjectContainer();
                     *    doc.addChild(sprite);
                     *    renderTexture.render(doc);  // Renders to center of renderTexture
                     *
                     * @class RenderTexture
                     * @extends Texture
                     * @constructor
                     * @param width {Number} The width of the render texture
                     * @param height {Number} The height of the render texture
                     * @param renderer {CanvasRenderer|WebGLRenderer} The renderer used for this RenderTexture
                     * @param scaleMode {Number} See {{#crossLink "PIXI/scaleModes:property"}}PIXI.scaleModes{{/crossLink}} for possible values
                     */
                    PIXI.RenderTexture = function(width, height, renderer, scaleMode) {
                        /**
                         * The with of the render texture
                         *
                         * @property width
                         * @type Number
                         */
                        this.width = width || 100;
                        /**
                         * The height of the render texture
                         *
                         * @property height
                         * @type Number
                         */
                        this.height = height || 100;
                        /**
                         * The framing rectangle of the render texture
                         *
                         * @property frame
                         * @type Rectangle
                         */
                        this.frame = new PIXI.Rectangle(0, 0, this.width, this.height);
                        /**
                         * The base texture object that this texture uses
                         *
                         * @property baseTexture
                         * @type BaseTexture
                         */
                        this.baseTexture = new PIXI.BaseTexture();
                        this.baseTexture.width = this.width;
                        this.baseTexture.height = this.height;
                        this.baseTexture._glTextures = [];
                        this.baseTexture.scaleMode = scaleMode || PIXI.scaleModes.DEFAULT;
                        this.baseTexture.hasLoaded = true;
                        PIXI.Texture.call(this, this.baseTexture, new PIXI.Rectangle(0, 0, this.width, this.height));
                        /**
                         * The renderer this RenderTexture uses. A RenderTexture can only belong to one renderer at the moment if its webGL.
                         *
                         * @property renderer
                         * @type CanvasRenderer|WebGLRenderer
                         */
                        this.renderer = renderer || PIXI.defaultRenderer;
                        if (this.renderer.type === PIXI.WEBGL_RENDERER) {
                            var gl = this.renderer.gl;
                            this.baseTexture._dirty[gl.id] = false;
                            this.textureBuffer = new PIXI.FilterTexture(gl, this.width, this.height, this.baseTexture.scaleMode);
                            this.baseTexture._glTextures[gl.id] = this.textureBuffer.texture;
                            this.render = this.renderWebGL;
                            this.projection = new PIXI.Point(this.width * 0.5, -this.height * 0.5);
                        } else {
                            this.render = this.renderCanvas;
                            this.textureBuffer = new PIXI.CanvasBuffer(this.width, this.height);
                            this.baseTexture.source = this.textureBuffer.canvas;
                        }
                        /**
                         * @property valid
                         * @type Boolean
                         */
                        this.valid = true;
                        this._updateUvs();
                    };
                    PIXI.RenderTexture.prototype = Object.create(PIXI.Texture.prototype);
                    PIXI.RenderTexture.prototype.constructor = PIXI.RenderTexture;
                    /**
                     * Resizes the RenderTexture.
                     *
                     * @method resize
                     * @param width {Number} The width to resize to.
                     * @param height {Number} The height to resize to.
                     * @param updateBase {Boolean} Should the baseTexture.width and height values be resized as well?
                     */
                    PIXI.RenderTexture.prototype.resize = function(width, height, updateBase) {
                        if (width === this.width && height === this.height) return;
                        this.valid = width > 0 && height > 0;
                        this.width = this.frame.width = width;
                        this.height = this.frame.height = height;
                        if (updateBase) {
                            this.baseTexture.width = this.width;
                            this.baseTexture.height = this.height;
                        }
                        if (this.renderer.type === PIXI.WEBGL_RENDERER) {
                            this.projection.x = this.width / 2;
                            this.projection.y = -this.height / 2;
                        }
                        if (!this.valid) return;
                        this.textureBuffer.resize(this.width, this.height);
                    };
                    /**
                     * Clears the RenderTexture.
                     *
                     * @method clear
                     */
                    PIXI.RenderTexture.prototype.clear = function() {
                        if (!this.valid) return;
                        if (this.renderer.type === PIXI.WEBGL_RENDERER) {
                            this.renderer.gl.bindFramebuffer(this.renderer.gl.FRAMEBUFFER, this.textureBuffer.frameBuffer);
                        }
                        this.textureBuffer.clear();
                    };
                    /**
                     * This function will draw the display object to the texture.
                     *
                     * @method renderWebGL
                     * @param displayObject {DisplayObject} The display object to render this texture on
                     * @param [matrix] {Matrix} Optional matrix to apply to the display object before rendering.
                     * @param [clear] {Boolean} If true the texture will be cleared before the displayObject is drawn
                     * @private
                     */
                    PIXI.RenderTexture.prototype.renderWebGL = function(displayObject, matrix, clear) {
                        if (!this.valid) return; //TOOD replace position with matrix..
                        //Lets create a nice matrix to apply to our display object. Frame buffers come in upside down so we need to flip the matrix 
                        var wt = displayObject.worldTransform;
                        wt.identity();
                        wt.translate(0, this.projection.y * 2);
                        if (matrix) wt.append(matrix);
                        wt.scale(1, -1); // setWorld Alpha to ensure that the object is renderer at full opacity
                        displayObject.worldAlpha = 1; // Time to update all the children of the displayObject with the new matrix..    
                        var children = displayObject.children;
                        for (var i = 0, j = children.length; i < j; i++) {
                            children[i].updateTransform();
                        } // time for the webGL fun stuff!
                        var gl = this.renderer.gl;
                        gl.viewport(0, 0, this.width, this.height);
                        gl.bindFramebuffer(gl.FRAMEBUFFER, this.textureBuffer.frameBuffer);
                        if (clear) this.textureBuffer.clear();
                        this.renderer.spriteBatch.dirty = true;
                        this.renderer.renderDisplayObject(displayObject, this.projection, this.textureBuffer.frameBuffer);
                        this.renderer.spriteBatch.dirty = true;
                    };
                    /**
                     * This function will draw the display object to the texture.
                     *
                     * @method renderCanvas
                     * @param displayObject {DisplayObject} The display object to render this texture on
                     * @param [matrix] {Matrix} Optional matrix to apply to the display object before rendering.
                     * @param [clear] {Boolean} If true the texture will be cleared before the displayObject is drawn
                     * @private
                     */
                    PIXI.RenderTexture.prototype.renderCanvas = function(displayObject, matrix, clear) {
                        if (!this.valid) return;
                        var wt = displayObject.worldTransform;
                        wt.identity();
                        if (matrix) wt.append(matrix); // setWorld Alpha to ensure that the object is renderer at full opacity
                        displayObject.worldAlpha = 1; // Time to update all the children of the displayObject with the new matrix..    
                        var children = displayObject.children;
                        for (var i = 0, j = children.length; i < j; i++) {
                            children[i].updateTransform();
                        }
                        if (clear) this.textureBuffer.clear();
                        var context = this.textureBuffer.context;
                        this.renderer.renderDisplayObject(displayObject, context);
                    };
                    /**
                     * @author Mat Groves http://matgroves.com/ @Doormat23
                     */
                    /**
                     * This is the base class for creating a PIXI filter. Currently only webGL supports filters.
                     * If you want to make a custom filter this should be your base class.
                     * @class AbstractFilter
                     * @constructor
                     * @param fragmentSrc {Array} The fragment source in an array of strings.
                     * @param uniforms {Object} An object containing the uniforms for this filter.
                     */
                    PIXI.AbstractFilter = function(fragmentSrc, uniforms) {
                        /**
                         * An array of passes - some filters contain a few steps this array simply stores the steps in a liniear fashion.
                         * For example the blur filter has two passes blurX and blurY.
                         * @property passes
                         * @type Array(Filter)
                         * @private
                         */
                        this.passes = [this];
                        /**
                         * @property shaders
                         * @type Array(Shader)
                         * @private
                         */
                        this.shaders = [];
                        /**
                         * @property dirty
                         * @type Boolean
                         */
                        this.dirty = true;
                        /**
                         * @property padding
                         * @type Number
                         */
                        this.padding = 0;
                        /**
                         * @property uniforms
                         * @type object
                         * @private
                         */
                        this.uniforms = uniforms || {};
                        /**
                         * @property fragmentSrc
                         * @type Array
                         * @private
                         */
                        this.fragmentSrc = fragmentSrc || [];
                    };
                    PIXI.AbstractFilter.prototype.constructor = PIXI.AbstractFilter;
                    /**
                     * Syncs the uniforms between the class object and the shaders.
                     *
                     * @method syncUniforms
                     */
                    PIXI.AbstractFilter.prototype.syncUniforms = function() {
                        for (var i = 0, j = this.shaders.length; i < j; i++) {
                            this.shaders[i].dirty = true;
                        }
                    };
                    return PIXI;
                };
            })(window);

            (function(scope) { // merge functions object
                var merge = {}; // int/float merge funcs
                merge.higherIsBetter = function(x, y) {
                    if (typeof x === 'undefined') return y;
                    if (typeof y === 'undefined') return x;
                    return Math.max(x || 0, y || 0);
                };
                merge.lowerIsBetter = function(x, y) {
                    if (typeof x === 'undefined') return y;
                    if (typeof y === 'undefined') return x;
                    return Math.min(x || 0, y || 0);
                }; // string merge funcs
                merge.longerIsBetter = function(x, y) {
                    if (typeof x === 'undefined') return y;
                    if (typeof y === 'undefined') return x;
                    return (x || "").length >= (y || "").length ? x : y;
                };
                merge.shorterIsBetter = function(x, y) {
                    if (typeof x === 'undefined') return y;
                    if (typeof y === 'undefined') return x;
                    return (x || "").length <= (y || "").length ? x : y;
                }; // bool merge funcs
                merge.trueIsBetter = function(x, y) {
                    if (typeof x === 'undefined') return y;
                    if (typeof y === 'undefined') return x;
                    return x || false || y || false;
                };
                merge.falseIsBetter = function(x, y) {
                    if (typeof x === 'undefined') return y;
                    if (typeof y === 'undefined') return x;
                    return (x || false) && (y || false);
                }; // object merge funcs
                merge.firstIsBetter = function(x, y) {
                    if (typeof x === 'undefined') return y;
                    if (typeof y === 'undefined') return x;
                    return x;
                };
                merge.secondIsBetter = function(x, y) {
                    if (typeof x === 'undefined') return y;
                    if (typeof y === 'undefined') return x;
                    return y;
                };
                merge.havingMoreWrites = function(x, y) {
                    if (!x || !x._numWrites) return y;
                    if (!y || !y._numWrites) return x;
                    return x._numWrites > y._numWrites ? x : y;
                };
                /**
                 * @function merge.recursive
                 * Generates a merge function, which recurses objects and merges properties with the given merge 
                 * functions for each type of property.
                 *
                 * @param {mergeFuncs} - A hash where the key is typeof(property) (e.g. string, boolean, number), and val is a merge function
                 * for example:
                 * { string: XS.data.merge.longerIsBetter, boolean: XS.data.merge.trueIsBetter, number: XS.data.merge.higherIsBetter, default: XS.data.merge.secondIsBetter }
                 */
                merge.recursive = function(mergeFuncs) { // Iterates through obj properties, does a merge of each property
                    function inner(r, obj, a, b) { // Merge all the properties in obj (obj is a or b)
                        for (var prop in obj) {
                            var func = mergeFuncs[typeof obj[prop]];
                            if (!func) {
                                var msg = "XS.data.merge.recursive: Unsupported merge type (property: " + prop + "): " + typeof obj[prop] + " - defaulting to second arg";
                                console.error(msg);
                                func = mergeFuncs.default || merge.secondIsBetter;
                            }
                            r[prop] = func(a[prop], b[prop]);
                        }
                    }
                    var mainMerge = function mainMerge(x, y) {
                        if (typeof x === 'undefined') return y;
                        if (typeof y === 'undefined') return x;
                        if (typeof x === null) return y; //if y not undefined, use it instead of null
                        if (typeof y === null) return x;
                        var res = {};
                        inner(res, x, x, y);
                        inner(res, y, x, y);
                        return res;
                    };
                    mergeFuncs.object = mergeFuncs.object || mainMerge; // Objects default to recursing
                    return mainMerge;
                }; // Assumes one-level hash with numbers merged with higherIsBetter 
                // and bools with trueIsBetter
                merge.higherAndTrueIsBetter = merge.recursive({
                    number: merge.higherIsBetter,
                    boolean: merge.trueIsBetter
                }); // object type helper functions
                function getObject(key, callback, prefix) {
                    Host.Preferences.GetString(key, function(value, keyFound) {
                        var parsedValue = undefined;
                        try {
                            parsedValue = JSON.parse(value);
                        } catch (error) {
                            parsedValue = {};
                        }
                        callback && callback(parsedValue, keyFound);
                    });
                }

                function setObject(key, value, prefix) {
                    value = JSON.stringify(value);
                    Host.Preferences.SetString(key, value, prefix);
                } // type map object
                var typeMap = {
                    int: {
                        defVal: 0,
                        defMerge: merge.higherIsBetter,
                        localGet: Host.Preferences.GetInt,
                        localSet: Host.Preferences.SetInt
                    },
                    float: {
                        defVal: 0,
                        defMerge: merge.higherIsBetter,
                        localGet: Host.Preferences.GetFloat,
                        localSet: Host.Preferences.SetFloat
                    },
                    string: {
                        defVal: "",
                        defMerge: merge.longerIsBetter,
                        localGet: Host.Preferences.GetString,
                        localSet: Host.Preferences.SetString
                    },
                    bool: {
                        defVal: false,
                        defMerge: merge.trueIsBetter,
                        localGet: Host.Preferences.GetBool,
                        localSet: Host.Preferences.SetBool
                    },
                    object: {
                        defVal: {},
                        defMerge: merge.firstIsBetter,
                        localGet: getObject,
                        localSet: setObject
                    }
                };
                /**
                 * @class XS Data
                 */
                function XSData() {
                    this._elems = {};
                    this._providers = [];
                    this._saveInterval = 5000; // milliseconds, set to 0 or less for manual
                    this._saveIntervalId = undefined;
                    this._boundSaveAll = this.save.bind(this, undefined);
                }
                XSData.prototype._typeMap = typeMap;
                XSData.prototype._keyExists = function(key) {
                    return this._elems.hasOwnProperty(key);
                };
                XSData.prototype._getKey = function(key) {
                    return this._elems[key] && this._elems[key].value;
                };
                XSData.prototype._setKey = function(key, newValue, prefix) {
                    if (!this._keyExists(key)) return;
                    var elem = this._elems[key];
                    var elemValueStr = JSON.stringify(elem.value);
                    var newValueStr = JSON.stringify(newValue);
                    if (elemValueStr != newValueStr) {
                        elem.value = newValue;
                        elem.setLocal(newValue, prefix);
                        elem.dirtyRemote = true;
                    }
                };
                XSData.prototype._remoteKeys = function() {
                    var remoteKeys = [],
                        elems = this._elems;
                    for (var key in elems) {
                        if (elems[key].remote) remoteKeys.push(key);
                    }
                    return remoteKeys;
                };
                XSData.prototype._subscribedRemote = function(remote) {
                    var providers = this._providers;
                    for (var i = 0; i < providers.length; i++) {
                        if (providers[i].remote === remote) return true;
                    }
                    return false;
                };
                XSData.prototype._addRemote = function(remote) {
                    if (!remote || typeof remote !== 'object') {
                        return;
                    } // check if we know already about remote provider
                    if (this._subscribedRemote(remote)) {
                        return;
                    } // new provider; create
                    var provider = {
                        remote: remote,
                        init: false
                    };
                    this._providers.push(provider);
                };
                XSData.prototype._addDefaultRemotes = function() {
                    if (XS.is.facebookInstant) {
                        this._addRemote(window.Social.Instant);
                        if (Config.facebookGamingLogin) {
                            this._addRemote(XC);
                        }
                    } else if (XS.is.snapchat) {
                        this._addRemote(window.Social.Snapchat);
                    } else {
                        this._addRemote(XC);
                    }
                };
                XSData.prototype._initRemote = function(remote) {
                    var providers = this._providers;
                    if (!remote) return;
                    for (var i = 0; i < providers.length; i++) {
                        if (providers[i].remote === remote) return providers[i].init = true;
                    }
                };
                XSData.prototype.mergeData = function(leftData, rightData) {
                    var elems = this._elems;
                    var elemNames = Object.keys(elems);
                    var mergedData = {};
                    for (var i = 0; i < elemNames.length; i++) {
                        var elemName = elemNames[i];
                        var elem = elems[elemName];
                        if (!elem.remote) continue;
                        var leftVal = leftData[elemName];
                        var rightVal = rightData[elemName];
                        if (rightVal !== undefined && leftVal !== undefined) {
                            var mergedVal = elem.merge(leftVal, rightVal);
                            mergedData[elemName] = mergedVal;
                        } else if (rightVal === undefined && leftVal === undefined);
                        else if (rightVal === undefined) {
                            mergedData[elemName] = leftVal;
                        } else if (leftVal === undefined) {
                            mergedData[elemName] = rightVal;
                        }
                    }
                    return mergedData;
                };
                XSData.prototype._mergeRemoteDataElements = function(remoteData) {
                    var elems = this._elems;
                    var elemNames = Object.keys(elems);
                    for (var i = 0; i < elemNames.length; i++) {
                        var elemName = elemNames[i];
                        var elem = elems[elemName];
                        if (!elem.remote) continue;
                        var localVal = elem.value;
                        var localValStr = JSON.stringify(localVal);
                        var remoteVal = remoteData[elemName];
                        if (remoteVal === undefined) {
                            elem.dirtyRemote = true;
                        } else {
                            var mergedVal = elem.merge(localVal, remoteVal);
                            var mergedValStr = JSON.stringify(mergedVal);
                            var remoteValStr = JSON.stringify(remoteVal);
                            if (mergedVal === undefined);
                            else if (localValStr != mergedValStr || remoteValStr != mergedValStr) {
                                elem.value = mergedVal;
                                elem.setLocal(mergedVal);
                                elem.dirtyRemote = true;
                            }
                        }
                    }
                    this.emit('dataloaded', this._generateChangesPayload());
                };
                XSData.prototype._loadRemote = function(remote, remoteData) {
                    if (!this._subscribedRemote(remote)) {
                        return;
                    } //console.error("Remove me")
                    //remoteData = {}
                    this._initRemote(remote);
                    this._mergeRemoteDataElements(remoteData);
                    this.save();
                };
                XSData.prototype._updateSaveLoop = function() {
                    if (this._saveIntervalId !== undefined) {
                        clearInterval(this._saveIntervalId);
                        this._saveIntervalId = undefined;
                    }
                    if (this._saveInterval > 0) { //Changed from XS.setInterval until we have a setInterval method we trust more. DON'T pass in our XS args, as the get forwarded as keys to .save()
                        //this._saveIntervalId = XS.setInterval(this.save.bind(this, undefined), this._saveInterval, [], ENG_FRZ_GRP);
                        this._saveIntervalId = setInterval(this._boundSaveAll, this._saveInterval); // bind undefined to "keys" argument
                    }
                };
                XSData.prototype._init = function() {
                    this._addDefaultRemotes();
                    this._updateSaveLoop();
                };
                XSData.prototype._changes = function(keys) {
                    var elements = {};
                    var remoteFields = [];
                    var elems = this._elems;
                    if (keys === undefined) keys = Object.keys(elems);
                    if (!(keys instanceof Array)) keys = [keys];
                    for (var i = 0; i < keys.length; i++) {
                        var key = keys[i];
                        if (!this._keyExists(key)) continue;
                        var elem = elems[key];
                        if (elem.dirtyRemote) {
                            elements[key] = elem.value;
                            if (elem.remote) remoteFields.push(key);
                        }
                    }
                    return {
                        elements: elements,
                        remoteFields: remoteFields
                    };
                };
                XSData.prototype._generateChangesPayload = function(keys) {
                    var changes = this._changes(keys);
                    var elems = this._elems;
                    var all = {};
                    for (var key in elems) {
                        if (elems.hasOwnProperty(key)) all[key] = elems[key].value;
                    }
                    return {
                        data: all,
                        changedFields: Object.keys(changes.elements),
                        remoteChangedFields: changes.remoteFields
                    };
                };
                XSData.prototype._load = function(key, localKey, type, callback, prefix) {
                    if (this._keyExists(key)) return false;
                    var elem = this._elems[key] = {};
                    var getKey = localKey !== undefined ? localKey : key;
                    type = type.toLowerCase();
                    this._typeMap[type].localGet(getKey, function(value, keyFound) { //console.error("Fix me")
                        elem.localValue = value;
                        elem.localKeyFound = keyFound;
                        callback && callback();
                    }, prefix);
                    return true;
                };
                XSData.prototype._add = function(key, opts, type) {
                    var XSData = this;
                    if (!this._keyExists(key)) return;
                    opts = opts || {};
                    var typeM = this._typeMap[type];
                    var elem = this._elems[key];
                    elem.type = type;
                    elem.remote = opts.remote === true;
                    elem.merge = opts.merge !== undefined ? opts.merge : typeM.defMerge;
                    var prefix = opts.prefix;
                    Object.defineProperty(this, key, {
                        set: function set(newValue) {
                            XSData._setKey(key, newValue, prefix);
                        },
                        get: function get() {
                            return XSData._getKey(key);
                        }
                    });
                    var localKey = opts.localKey || key;
                    var prefix = opts.prefix;
                    elem.setLocal = function(value, prefix) {
                        typeM.localSet(localKey, value, prefix);
                    };
                    elem.default = opts.default !== undefined ? opts.default : typeM.defVal;
                    if (elem.localKeyFound) {
                        elem.value = elem.localValue;
                        elem.dirtyRemote = false;
                    } else {
                        elem.value = opts.default !== undefined ? opts.default : typeM.defVal;
                        elem.setLocal(elem.value, prefix);
                        elem.dirtyRemote = true;
                    }
                    delete elem.localValue;
                    delete elem.localKeyFound;
                };
                XSData.prototype._loadAndAdd = function(key, localKey, opts, type, callback) {
                    var XSData = this;
                    opts = opts || {};
                    if (localKey !== key) opts.localKey = localKey;

                    function addCallback() {
                        XSData._add(key, opts, type);
                        callback && callback(XSData._elems[key].value);
                    }
                    var prefix = opts.prefix;
                    if (this._elems.hasOwnProperty(key)) addCallback();
                    else this._load(key, localKey, type, addCallback, prefix);
                }; // Developer-Facing API
                'Float,Int,String,Bool,Object'.split(',').forEach(function(type) {
                    var typeName = type.toLowerCase();
                    XSData.prototype['add' + type] = function(key, opts, callback) {
                        this._loadAndAdd(key, key, opts, typeName, callback);
                    };
                    XSData.prototype['add' + type + 'WithLocalKey'] = function(key, localKey, opts, callback) {
                        this._loadAndAdd(key, localKey, opts, typeName, callback);
                    };
                });
                XSData.prototype.save = function(keys) {
                    var saveEventPayload = this._generateChangesPayload(keys);
                    var changes = this._changes(keys);
                    var changesCount = Object.keys(changes.elements).length;
                    for (var key in changes.elements) {
                        if (!changes.elements.hasOwnProperty(key)) {
                            continue;
                        }
                        this._elems[key].dirtyRemote = false;
                    }
                    changes.remoteFields.length;
                    if (changes.remoteFields.length > 0) {
                        for (var i = 0; i < this._providers.length; i++) {
                            var provider = this._providers[i];
                            if (provider.init) {
                                for (var j = 0; j < changes.remoteFields.length; j++) {
                                    var fieldName = changes.remoteFields[j];
                                    var value = changes.elements[fieldName];
                                    if (provider.remote.setChange(fieldName, value));
                                }
                                provider.remote.saveChanges(function(dataSaved) {});
                            }
                        }
                    }
                    if (changesCount > 0) {
                        this.emit('datasaved', saveEventPayload);
                    }
                };
                XSData.prototype.setSaveInterval = function(newSaveInterval) {
                    this._saveInterval = newSaveInterval;
                    this._updateSaveLoop();
                };
                XSData.prototype.setDirty = function(key) {
                    if (!this._keyExists(key)) return;
                    var elem = this._elems[key];
                    if (elem.type === 'object' && elem.merge === XS.data.merge.havingMoreWrites) {
                        elem.value._numWrites = elem.value._numWrites ? elem.value._numWrites + 1 : 1;
                    }
                    elem.setLocal(elem.value);
                    elem.dirtyRemote = true;
                };
                XSData.prototype.merge = merge;
                XSData.prototype.constructor = XSData; //Debug
                XSData.prototype.toString = function() {
                    var elemNames = Object.keys(this._elems);
                    var str = "XS.Data elements:";
                    for (var i = 0; i < elemNames.length; i++) {
                        var elemName = elemNames[i];
                        var elem = this._elems[elemName];
                        str += "\n" + elemName + ": " + (typeof elem.value === "object" ? JSON.stringify(elem.value) : elem.value) + " (Is Remote: " + elem.remote + ")";
                    }
                    return str;
                };
                XSData.prototype.resetToDefaults = function() {
                    var elemNames = Object.keys(this._elems);
                    for (var i = 0; i < elemNames.length; i++) {
                        var elemName = elemNames[i];
                        var elem = this._elems[elemName];
                        var typeM = this._typeMap[elem.type];
                        if (!typeM) {
                            console.error('XS.data missing type definition for key:', elemName, ' of type:', elem.type);
                        } else {
                            elem.value = elem.default !== undefined ? elem.default : typeM.defVal;
                            this.setDirty(elemName);
                            elem.dirty = true;
                        }
                    }
                    this.save(elemNames);
                }; // Support loading data per key after initial load
                XSData.prototype.loadRemotes = function XSData_loadRemotes(keys) {
                    this._providers.forEach(function(provider) {
                        if (typeof provider.remote.loadRemote === 'function') {
                            provider.remote.loadRemote(keys);
                        }
                    });
                };
                XSData.prototype.load = function XSData_load(key, opts, loadCallback) {
                    opts = opts || {};
                    var type = opts.type || 'object';
                    var localKey = opts.localKey || key;
                    this.loadRemotes(key);
                    return this._loadAndAdd(key, localKey, opts, type, loadCallback);
                };
                scope.XS = scope.XS || {};
                var XS = scope.XS;
                XS.data = new XSData();
            })(window);

            (function(scope) {
                /**
                 * @class XS Audio
                 */
                function XSAudio() {
                    this._soundIDs = 0;
                    this._sounds = {};
                    this._musics = {};
                    this._userSoundMute = false;
                    this._userMusicMute = false;
                    this._engineMute = false;
                }
                XSAudio.prototype._init = function() {
                    XS.initSound();
                    this._audioPlayer = window.Host && window.Host.Sound ? new HostedAudioPlayer() : new EmbeddedAudioPlayer();
                };
                /**
                 * Preloads the specified sound effect file and associates it with the given label
                 * opts:
                 * - gain: set initial gain, default: 1.0
                 *
                 * @return The preloaded sound object
                 */
                XSAudio.prototype.preloadSound = function(label, path, opts) { // next version could add support for also defining number of instances to preload
                    var gain = 1.0;
                    opts = opts || {};
                    if (opts["gain"]) {
                        gain = opts["gain"];
                    }
                    var sound = new XSSound(label, ++this._soundIDs, gain);
                    this._sounds[label] = sound;
                    opts = opts || {};
                    opts["music"] = false;
                    sound._internalSound = this._audioPlayer.preload(sound._soundID, path, opts);
                    return sound;
                };
                /**
                 * Preloads the specified background music file and associates it with the given label
                 * opts:
                 * - gain: set initial gain, default: 1.0
                 *
                 * @return The preloaded music object
                 */
                XSAudio.prototype.preloadMusic = function(label, path, opts) {
                    if (this._musics[label]) {
                        Host.Log("Error: Trying to preload music with existing label: " + label);
                        return;
                    }
                    var gain = 1.0;
                    opts = opts || {};
                    if (opts["gain"]) {
                        gain = opts["gain"];
                    }
                    var music = new XSMusic(label, gain);
                    this._musics[label] = music;
                    opts = opts || {};
                    opts["music"] = true;
                    music._internalMusic = this._audioPlayer.preload(label, path, opts);
                    return music;
                };
                /** 
                 * Returns the (preloaded) music object associated with the given label, without starting playback or anything else
                 * @return The music object associated with the given label, or undefined if no such label exists
                 */
                XSAudio.prototype.getMusic = function(label) {
                    return this._musics[label];
                };
                /**
                 * Starts playback of the music object associated with the given label (if any) using the specified opts
                 * opts:
                 * - gain (optional): gain value to use for playback. default: 1.0 or what was specified in preloadMusic call
                 *
                 * @return The music object associated with the given label, or undefined if no such label exists
                 */
                XSAudio.prototype.playMusic = function(label, opts) {
                    var music = this.getMusic(label);
                    if (music) {
                        music.play(opts);
                    } else {
                        Host.Log("Error: Music with label '" + label + "' not loaded.");
                    }
                    return music;
                };
                /**
                 * Returns the (preloaded) sound object associated with the given label, without starting playback or anything else
                 * @return The sound object associated with the given label, or undefined if no such label exists
                 */
                XSAudio.prototype.getSound = function(label) {
                    return this._sounds[label];
                };
                /**
                                 * Starts playing the sound associated with the given label applying the specified opts, and returns the sound object
                                 * opts:
                                 * - gain (optional): gain value to use for playback. default: 1.0 or what was specified in preloadSound call
                                                      Value specified here will not override initially specified gain. In other words, calling resetGain() will discard this value
                                 * - loop (optional): should the playback be continuous, looping the sound, default: false
                                 *
                                 * @return The sound object associated with the given label, or undefined if no such label exists
                                 */
                XSAudio.prototype.playSound = function(label, opts) {
                    var sound = this.getSound(label);
                    if (sound) {
                        sound.play(opts);
                    } else {
                        Host.Log("Error: Sound with label '" + label + "' not loaded.");
                    }
                    return sound;
                };
                /**
                 * Starts playing the sound associated with the given label in a loop applying the specified opts, and returns the sound object
                 * opts:
                 * - gain (optional): gain value to use for playback. default: 1.0 or what was specified in preloadSound call
                 *
                 * @return The sound object associated with the given label, or undefined if no such label exists
                 */
                XSAudio.prototype.loopSound = function(label, opts) {
                    var sound = this.getSound(label);
                    if (sound) {
                        sound.loop(opts);
                    } else {
                        Host.Log("Error: Sound with label '" + label + "' not loaded.");
                    }
                    return sound;
                };
                XSAudio.prototype.isSoundMuted = function() {
                    return this._userSoundMute || this._engineMute;
                };
                XSAudio.prototype.isMusicMuted = function() {
                    return this._userMusicMute || this._engineMute;
                };
                XSAudio.prototype.muteSounds = function(mute) {
                    this._userSoundMute = mute;
                    XS.muteSound(mute);
                    return;
                };
                XSAudio.prototype.muteMusics = function(mute) {
                    this._userMusicMute = mute;
                    XS.muteMusic(mute);
                    return;
                };
                XSAudio.prototype.constructor = XSAudio;
                scope.XS = scope.XS || {};
                var XS = scope.XS;
                XS.audio = new XSAudio();
                /**
                 * @class XS Sound
                 */
                function XSSound(label, soundID, initGain) {
                    var self = this;
                    self._label = label;
                    self._soundID = soundID;
                    self._initGain = initGain || 1.0;
                    self._currentUserGain = initGain || 1.0;
                    self._internalSound = null;
                    self.play = function(opts) {
                        opts = opts || {};
                        if (opts["gain"]) {
                            self._currentUserGain = opts["gain"];
                        } // TODO: support delay of playback?
                        if (self._internalSound) {
                            var play = function play() {
                                self._internalSound.play(0, false);
                                self._internalSound.setGain(self._currentUserGain);
                            };
                            if (opts.delay) {
                                setTimeout(play, opts.delay * 1000);
                            } else play();
                            return;
                        }
                        XS.audio._audioPlayer.play(self._soundID, opts);
                    };
                    self.loop = function(opts) {
                        opts = opts || {};
                        if (opts["gain"]) {
                            self._currentUserGain = opts["gain"];
                            if (self._internalSound) {
                                self._internalSound.setGain(self._currentUserGain);
                            }
                        }
                        if (self._internalSound) {
                            self._internalSound.play(0, true);
                            return;
                        }
                        opts["loop"] = true;
                        self.play(self._soundID, opts);
                    };
                    self.setGain = function(gain) {
                        self._currentUserGain = gain;
                        if (self._internalSound) {
                            self._internalSound.setGain(gain);
                            return;
                        }
                        self._currentUserGain = gain;
                        XS.audio._audioPlayer.setGain(self._soundID, gain);
                    };
                    self.resetGain = function() {
                        if (self._internalSound) {
                            self._internalSound.resetGain();
                            return;
                        }
                        self._currentUserGain = self._initGain;
                        XS.audio._audioPlayer.setGain(self._soundID, self._initGain);
                    };
                    self.setNewInitGain = function(gain) {
                        if (self._internalSound) {
                            self._internalSound.updateGain(gain);
                            return;
                        }
                        self._initGain = gain;
                        self.resetGain();
                    };
                    self.pause = function() {
                        if (self._internalSound) {
                            self._internalSound.setMuted(true);
                            return;
                        }
                        XS.audio._audioPlayer.pause(self._soundID);
                    };
                    self.resume = function() {
                        if (self._internalSound) {
                            self._internalSound.setMuted(false);
                            return;
                        }
                        XS.audio._audioPlayer.resume(self._soundID);
                    };
                    self.stop = function() {
                        if (self._internalSound) {
                            self._internalSound.stop();
                            return;
                        }
                        XS.audio._audioPlayer.stop(self._soundID);
                    };
                }
                /**
                 * @class XS Music
                 */
                function XSMusic(label, initGain) {
                    var self = this;
                    this._label = label;
                    this._initGain = initGain || 1.0;
                    this._currentUserGain = initGain || 1.0;
                    this._internalMusic = null;
                    self.play = function(opts) {
                        opts = opts || {};
                        if (opts["gain"]) {
                            this._currentUserGain = opts["gain"];
                        }
                        if (this._internalMusic) {
                            this._internalMusic.play(0, true);
                            this._internalMusic.setGain(this._currentUserGain);
                            return;
                        }
                        opts["loop"] = true;
                        XS.audio._audioPlayer.play(this._label, opts);
                    };
                    self.stop = function() {
                        if (this._internalMusic) {
                            this._internalMusic.stop();
                            return;
                        }
                        XS.audio._audioPlayer.stop(this._label);
                    };
                    self.crossfade = function(opts) {
                        if (opts && opts["toSoundID"] && opts["duration"]) {
                            if (this._internalMusic) { // We don't have this yet
                                return;
                            }
                            opts["fromSoundID"] = this._label;
                            XS.audio._audioPlayer.crossfade(opts);
                        }
                    };
                }

                function EmbeddedAudioPlayer() {
                    var self = this;
                    self.preload = function(soundID, path, opts) { // opts: gain, music -> (true/false)
                        var gain = 1.0;
                        opts = opts || {};
                        gain = opts["gain"] || gain;
                        return opts["music"] ? XS.Music.get(path, gain) : XS.Sound.get(path, gain);
                    };
                    self.play = function(soundID, opts) { // opts: gain, loop
                    };
                    self.setGain = function(soundID, gain) {};
                    self.pause = function(soundID) {};
                    self.resume = function(soundID) {};
                    self.stop = function(soundID) {};
                    self.crossfade = function(opts) { // opts: fromSoundID, duration, toSoundID, toGain, toLoop
                    };
                    self.setGains = function(opts) { // opts: { [soundID1: gain1, soundID2: gain2] }
                    };
                }

                function HostedAudioPlayer() {
                    var self = this;
                    self.preload = function(soundID, path, opts) { // opts: gain, music -> (true/false)
                        var gain = 1.0;
                        opts = opts || {};
                        gain = opts["gain"] || gain;
                        return opts["music"] ? XS.Music.get(path, gain) : XS.Sound.get(path, gain);
                    };
                    self.play = function(soundID, opts) { // opts: gain, loop
                    };
                    self.setGain = function(soundID, gain) {};
                    self.pause = function(soundID) {};
                    self.resume = function(soundID) {};
                    self.stop = function(soundID) {};
                    self.crossfade = function(opts) { // opts: fromSoundID, duration, toSoundID, toGain, toLoop
                    };
                    self.setGains = function(opts) { // opts: { [soundID1: gain1, soundID2: gain2] }
                    };
                }
            })(window);

            (function(scope) { // Referral API integration for XS engine https://docs.google.com/document/d/12YnxnjENb5i7npDZhMOw7JhS9YqY43qaa8L_S-xjCaE
                var REF_URL = "https://production-dot-frvr-chatbot.appspot.com/refer"; /** processRes - Parsing procedures on the response (i.e., parsing data object from the referral entry in datastore) from the request. */
                function processRes(request, isArray) {
                    if (!isArray) isArray = false;
                    var result = JSON.parse(request.response);
                    if (typeof result.data === "string") {
                        result.data = JSON.parse(result.data);
                    }
                    if (isArray) {
                        for (var i = 0; i < result.length; i++) {
                            if (typeof result[i].data === "string") {
                                result[i].data = JSON.parse(result[i].data);
                            }
                        }
                    }
                    return result;
                } /** XSReferral holds functions wrapping Referral API calls. */
                function XSReferral() {
                    return {
                        /**
                         * This creates a referral entry in the datastore.
                         * Example usage in XS: XS.referral.create({ player_id: 12345, game: "BasketBall", data: { ball: 1 }, target: 98765 }, function(err,res){ return res })
                         * 
                         * @param {Object} options - Should contain at least player_id (origin player id), game (game name) and data (object). Optionally, target (target player id) could also be provided. 
                         * @param {function} callback - Function to handle error and response e.g., callback(err, res)
                         * @returns {function} callback(error, response)
                         */
                        create: function create(options, callback) {
                            if (!options.player_id || !options.game || !options.data) {
                                return callback(new Error("create - Incomplete/Invalid options object (e.g., player_id, game, data) field (target field is optional)"));
                            }
                            var req = new XMLHttpRequest();
                            req.onload = function() {
                                if (req.status != 200) return callback(req.status, req.response);
                                var result = processRes(req);
                                return callback(null, result);
                            };
                            req.open("POST", REF_URL, true);
                            req.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
                            req.send(JSON.stringify({
                                player_id: options.player_id,
                                game: options.game,
                                data: options.data,
                                target: options.target
                            }));
                        },
                        /**
                         * This gets the referral entry from the datastore.
                         * Example usage in XS: XS.referral.get("shY21Kl", function(err, res){ return res })
                         * 
                         * @param {string} referralID - The ID of the referral to retrieve.
                         * @param {function} callback - Function to handle error and response e.g., callback(err, res)
                         * @returns {function} callback(error, response)
                         */
                        get: function get(referralID, callback) {
                            if (!referralID) return callback(new Error("get - referralID param missing or invalid"));
                            var req = new XMLHttpRequest();
                            req.onload = function() {
                                if (req.status != 200) return callback(req.status, req.response);
                                var result = processRes(req);
                                return callback(null, result);
                            };
                            req.open("GET", REF_URL + "/" + referralID, true);
                            req.send();
                        },
                        /**
                         * This accepts the referral and updates the referral entry in the datastore with the accepted player's ID.
                         * Example usage in XS: XS.referral.accept("shl33tz", 22334455, function(err, res){ return res })
                         * 
                         * @param {string} referralID - The ID of the referral to accept
                         * @param {*} playerID - The ID of the player accepting the referral 
                         * @param {function} callback - Function to handle error and response e.g., callback(err, res)
                         * @returns {function} callback(error, response)
                         */
                        accept: function accept(referralID, playerID, callback) {
                            if (!referralID) return callback(new Error("accept - referralID param missing or invalid"));
                            if (!playerID) return callback(new Error("accept - playerID param missing or invalid "));
                            var req = new XMLHttpRequest();
                            req.onload = function() {
                                if (req.status != 200) return callback(req.status, req.response);
                                var result = processRes(req);
                                return callback(null, result);
                            };
                            req.open("PATCH", REF_URL + "/" + referralID, true);
                            req.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
                            req.send(JSON.stringify({
                                player_id: playerID,
                                action: "ACCEPT"
                            }));
                        },
                        /**
                         * This updates and replaces the data object of the referral entry in datastore.
                         * Example usage in XS: XS.referral.update("dsa18la", 1223345, { coins: 10 }, function(err,res){ return res })
                         * 
                         * @param {string} referralID - The ID of the referral to update
                         * @param {*} originPlayerID - The ID of the original player who created the referral
                         * @param {Object} data - The object to replace the data object in datastore
                         * @param {function} callback - Function to handle error and response e.g., callback(err, res)
                         * @returns {function} callback(error, response)
                         */
                        update: function update(referralID, originPlayerID, data, callback) {
                            if (!referralID) return callback(new Error("update - referralID param missing or invalid"));
                            if (!originPlayerID) return callback(new Error("update - originPlayerID (player id of the original player who created the referral) param missing or invalid"));
                            if (!data) return callback(new Error("update - data object param missing or invalid"));
                            var req = new XMLHttpRequest();
                            req.onload = function() {
                                if (req.status != 200) return callback(req.status, req.response);
                                var result = processRes(req);
                                return callback(null, result);
                            };
                            req.open("PATCH", REF_URL + "/" + referralID, true);
                            req.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
                            req.send(JSON.stringify({
                                player_id: originPlayerID,
                                action: "UPDATE",
                                data: data
                            }));
                        },
                        /**
                         * This deletes the specified referral entry in datastore.
                         * Example usage in XS: XS.referral.delete("231saFa", function(err,res){ return res })
                         * 
                         * @param {string} referralID - The ID of the referral to delete
                         * @param {function} callback - Optional function to handle error and response e.g., callback(err, res)
                         * @returns {function} callback(error, response)
                         */
                        delete: function _delete(referralID, callback) {
                            if (!referralID) return callback(new Error("delete - referralID param missing or invalid"));
                            var req = new XMLHttpRequest();
                            req.onload = function() {
                                if (req.status != 200) return callback(req.status, req.response);
                                var result = req.response; // result will be a string of "Deleted ${referralID} from Referrals!" if success
                                return callback(null, result);
                            };
                            req.open("DELETE", REF_URL + "/" + referralID, true);
                            req.send();
                        },
                        /**
                         * This checks if the specified player can accept the specified referral. Players who have accepted will return false. 
                         * Example usage in XS: XS.referral.checkCanAccept("le3t4yu", 112233, function(err, res){ return res })
                         * 
                         * @param {string} referralID - The ID of the referral to check
                         * @param {*} playerID - The ID of the player to check
                         * @param {function} callback - Optional function to handle error and response e.g., callback(err, res)
                         * @returns {function} callback(error, response)
                         */
                        checkCanAccept: function checkCanAccept(referralID, playerID, callback) {
                            if (!referralID) return callback(new Error("checkCanAccept - referralID param missing or invalid"));
                            if (!playerID) return callback(new Error("checkCanAccept - playerID param missing or invalid"));
                            var req = new XMLHttpRequest();
                            req.onload = function() {
                                if (req.status != 200) return callback(req.status, req.response);
                                var result = req.response;
                                return callback(null, result);
                            };
                            req.open("GET", REF_URL + "/" + referralID + "/" + playerID, true);
                            req.send();
                        },
                        /**
                         * This retrieves all referrals that was targeted towards specified player.
                         * Example usage in XS: XS.referral.getAllReferrals(112233, function(err, res){ return res })
                         * 
                         * @param {*} playerID - The ID of the player associated to the referrals to be retrived
                         * @param {function} callback - Optional function to handle error and response e.g., callback(err, res)
                         * @returns {function} callback(error, response)
                         */
                        getAllReferrals: function getAllReferrals(playerID, callback) {
                            if (!playerID) return callback(new Error("getAllReferrals - playerID param missing or invalid"));
                            var req = new XMLHttpRequest();
                            req.onload = function() {
                                if (req.status != 200) return callback(req.status, req.response);
                                var result = processRes(req, true);
                                return callback(null, result);
                            };
                            req.open("GET", REF_URL + "/target/" + playerID, true);
                            req.send();
                        },
                        /**
                         * This accepts all the referrals that was targeted towards specified player.
                         * Example usage in XS: XS.referral.acceptAllReferrals(112233, function(err,res){ return res })
                         * 
                         * @param {*} playerID - The ID of the player associated to the referrals to be accepted
                         * @param {function} callback - Optional function to handle error and response e.g., callback(err, res)
                         * @returns {function} callback(error, response)
                         */
                        acceptAllReferrals: function acceptAllReferrals(playerID, callback) {
                            if (!playerID) return callback(new Error("acceptAllReferrals - playerID param missing or invalid"));
                            var req = new XMLHttpRequest();
                            req.onload = function() {
                                if (req.status != 200) return callback(req.status, req.response);
                                var result = processRes(req);
                                for (var i = 0; i < result.accepted.length; i++) {
                                    if (typeof result.accepted[i].data === "string") result.accepted[i].data = JSON.parse(result.accepted[i].data);
                                }
                                return callback(null, result);
                            };
                            req.open("PATCH", REF_URL + "/target/" + playerID, true);
                            req.send();
                        },
                        /**
                         * This deletes all the referral entries in datastore that was associated with the specified player.
                         * Example usage in XS: XS.referral.deleteAllReferrals(112233, function(err, res){ return res })
                         * 
                         * @param {*} playerID - The ID of the player associated to the referrals to be deleted
                         * @param {function} callback - Optional function to handle error and response e.g., callback(err, res)
                         * @returns {function} callback(error, response)
                         */
                        deleteAllReferrals: function deleteAllReferrals(playerID, callback) {
                            if (!playerID) return callback(new Error("deleteAllReferrals - playerID param missing or invalid"));
                            var req = new XMLHttpRequest();
                            req.onload = function() {
                                if (req.status != 200) return callback(req.status, req.response);
                                var result = processRes(req);
                                return callback(null, result);
                            };
                            req.open("DELETE", REF_URL + "/target/" + playerID, true);
                            req.send();
                        }
                    };
                }
                var XS = scope.XS = scope.XS || {};
                XS.referral = new XSReferral();
            })(window);

            function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
                try {
                    var info = gen[key](arg);
                    var value = info.value;
                } catch (error) {
                    reject(error);
                    return;
                }

                if (info.done) {
                    resolve(value);
                } else {
                    Promise.resolve(value).then(_next, _throw);
                }
            }

            function _asyncToGenerator(fn) {
                return function() {
                    var self = this,
                        args = arguments;
                    return new Promise(function(resolve, reject) {
                        var gen = fn.apply(self, args);

                        function _next(value) {
                            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                        }

                        function _throw(err) {
                            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                        }

                        _next(undefined);
                    });
                };
            }

            function _unsupportedIterableToArray(o, minLen) {
                if (!o) return;
                if (typeof o === "string") return _arrayLikeToArray(o, minLen);
                var n = Object.prototype.toString.call(o).slice(8, -1);
                if (n === "Object" && o.constructor) n = o.constructor.name;
                if (n === "Map" || n === "Set") return Array.from(o);
                if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
            }

            function _arrayLikeToArray(arr, len) {
                if (len == null || len > arr.length) len = arr.length;

                for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

                return arr2;
            }

            function _createForOfIteratorHelperLoose(o, allowArrayLike) {
                var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
                if (it) return (it = it.call(o)).next.bind(it);

                if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
                    if (it) o = it;
                    var i = 0;
                    return function() {
                        if (i >= o.length) return {
                            done: true
                        };
                        return {
                            done: false,
                            value: o[i++]
                        };
                    };
                }

                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }

            Host.bootstrapper.load( /*#__PURE__*/ function() {
                var _ref = _asyncToGenerator( /*#__PURE__*/ regeneratorRuntime.mark(function _callee(resolve) {
                    return regeneratorRuntime.wrap(function _callee$(_context) {
                        while (1) {
                            switch (_context.prev = _context.next) {
                                case 0:
                                    if (!Host.bootstrapper.hasPreInitializationPromise) {
                                        _context.next = 3;
                                        break;
                                    }
                                    _context.next = 3;
                                    return Host.bootstrapper.preInitializationPromise;
                                case 3:
                                    Host.GameRemoteDataKeys.push('sound.v1');
                                    Host.Preferences.GetBool('sound.v1', resolve);
                                case 5:
                                case "end":
                                    return _context.stop();
                            }
                        }
                    }, _callee);
                }));
                return function(_x) {
                    return _ref.apply(this, arguments);
                };
            }(), true);

            Host.bootstrapper.load( /*#__PURE__*/ function() {
                var _ref = _asyncToGenerator( /*#__PURE__*/ regeneratorRuntime.mark(function _callee(resolve) {
                    return regeneratorRuntime.wrap(function _callee$(_context) {
                        while (1) {
                            switch (_context.prev = _context.next) {
                                case 0:
                                    if (!Host.bootstrapper.hasPreInitializationPromise) {
                                        _context.next = 3;
                                        break;
                                    }
                                    _context.next = 3;
                                    return Host.bootstrapper.preInitializationPromise;
                                case 3:
                                    Host.GameRemoteDataKeys.push('music.v1');
                                    Host.Preferences.GetBool('music.v1', resolve);
                                case 5:
                                case "end":
                                    return _context.stop();
                            }
                        }
                    }, _callee);
                }));
                return function(_x) {
                    return _ref.apply(this, arguments);
                };
            }(), true);

            Host.bootstrapper.load( /*#__PURE__*/ function() {
                var _ref = _asyncToGenerator( /*#__PURE__*/ regeneratorRuntime.mark(function _callee(resolve) {
                    return regeneratorRuntime.wrap(function _callee$(_context) {
                        while (1) {
                            switch (_context.prev = _context.next) {
                                case 0:
                                    if (!Host.bootstrapper.hasPreInitializationPromise) {
                                        _context.next = 3;
                                        break;
                                    }
                                    _context.next = 3;
                                    return Host.bootstrapper.preInitializationPromise;
                                case 3:
                                    Host.GameRemoteDataKeys.push('xs.muteSound.v4');
                                    Host.Preferences.GetBool('xs.muteSound.v4', resolve);
                                case 5:
                                case "end":
                                    return _context.stop();
                            }
                        }
                    }, _callee);
                }));
                return function(_x) {
                    return _ref.apply(this, arguments);
                };
            }(), true);

            Host.bootstrapper.load( /*#__PURE__*/ function() {
                var _ref = _asyncToGenerator( /*#__PURE__*/ regeneratorRuntime.mark(function _callee(resolve) {
                    return regeneratorRuntime.wrap(function _callee$(_context) {
                        while (1) {
                            switch (_context.prev = _context.next) {
                                case 0:
                                    if (!Host.bootstrapper.hasPreInitializationPromise) {
                                        _context.next = 3;
                                        break;
                                    }
                                    _context.next = 3;
                                    return Host.bootstrapper.preInitializationPromise;
                                case 3:
                                    Host.GameRemoteDataKeys.push('xs.muteMusic.v4');
                                    Host.Preferences.GetBool('xs.muteMusic.v4', resolve);
                                case 5:
                                case "end":
                                    return _context.stop();
                            }
                        }
                    }, _callee);
                }));
                return function(_x) {
                    return _ref.apply(this, arguments);
                };
            }(), true);

            Host.bootstrapper.load( /*#__PURE__*/ function() {
                var _ref = _asyncToGenerator( /*#__PURE__*/ regeneratorRuntime.mark(function _callee(resolve) {
                    return regeneratorRuntime.wrap(function _callee$(_context) {
                        while (1) {
                            switch (_context.prev = _context.next) {
                                case 0:
                                    if (!Host.bootstrapper.hasPreInitializationPromise) {
                                        _context.next = 3;
                                        break;
                                    }
                                    _context.next = 3;
                                    return Host.bootstrapper.preInitializationPromise;
                                case 3:
                                    Host.GameRemoteDataKeys.push('xs.muteStateOverload.v4');
                                    Host.Preferences.GetBool('xs.muteStateOverload.v4', resolve);
                                case 5:
                                case "end":
                                    return _context.stop();
                            }
                        }
                    }, _callee);
                }));
                return function(_x) {
                    return _ref.apply(this, arguments);
                };
            }(), true);

            //Force vpath to not be compiled
            window["vpath"] = window["vpath"] || "./"; // Disables visual - Microsoft
            document.body.addEventListener("MSHoldVisual", function(e) {
                e.preventDefault();
            }, false); // Disables menu - Microsoft
            document.body.addEventListener("contextmenu", function(e) {
                e.preventDefault();
            }, false); //Fixes bug in samsung game launcher
            document.body.ontouchmove = function() {};
            window.__safeCallback_noop = function() {};
            __safeCallback_noop.__isSafeCallback = true;
            window.safeCallback = function(callback) {
                if (typeof callback !== 'function') return __safeCallback_noop;
                if (callback.__isSafeCallback === true) return callback;

                function __safeCallback() {
                    try {
                        return callback.apply(this, arguments);
                    } catch (err) {
                        window.onerror && window.onerror('Error in safeCallback: ' + err.message, err);
                        throw err;
                    }
                }
                __safeCallback.__isSafeCallback = true;
                return __safeCallback;
            };
            if (document.addEventListener) { // IE9, Chrome, Safari, Opera
                document.addEventListener("ontouchmove", function(event) {
                    if (event) {
                        event.preventDefault();
                    }
                }, false);
            } //Array.from prototype to fix facebook fuckup
            if (!Array.from) {
                Array.from = function(object) {
                    return [].slice.call(object);
                };
            }
            if (!Math.hypot) {
                Math.hypot = function() {
                    var y = 0,
                        i = arguments.length;
                    while (i--) {
                        y += arguments[i] * arguments[i];
                    }
                    return Math.sqrt(y);
                };
            }
            /**
             * requestAnimationFrame Polyfill
             * Put in global scope as this is a general fix to JavaScript not related to XS engine
             * @ignore
             */
            var requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function(f) {
                return setTimeout(f, 1000 / 60);
            };
            (function(scope) {
                scope.XS = scope.XS || {};
                var XS = scope.XS;
                XS.LOG_SPAM_EVENT_EXCLUDE = XS.LOG_SPAM_EVENT_EXCLUDE || [];
                XS.LOG_SPAM_EVENT_EXCLUDE.push('resize'); //Create PIXI and destroy method
                var PIXI = getRenderer();
                getRenderer = undefined;
                var ATLUtil = scope.ATLUtil;
                scope.width = 150;
                scope.height = 150;
                /**
                 * @class Freeze Group
                 * @desc Internal class which is used to create, contain and maintain Freeze Groups
                 * A Freeze Group contains a number of handlers (Tweens/Timeouts) which are frozen/unfrozen depending on the state of the former.
                 * A Global Freeze State exists as well which freezes/unfreezes all of the Tweens/Timeouts of the Freeze State Groups.
                 * @ignore
                 */
                /**
                 * FreezeGroup constructor function
                 * @ignore
                 */
                function FreezeGroup(name) {
                    this.name = name;
                    this.frc = 0;
                    this.handlers = {};
                }
                /**
                 * FreezeGroup next handler identifier
                 * Used to assign a unique identifier for every handler (Tween/Timeout)
                 * @memberof FreezeGroup
                 * @ignore
                 */
                FreezeGroup.nextHandlerId = 1;
                /**
                 * FreezeGroup groups
                 * Groups are added here and reused when a tween/timeout is assigned as making part of a group
                 * @memberof FreezeGroup
                 * @ignore
                 */
                FreezeGroup.groups = {};
                /**
                 * Cached Events
                 * Array for objects whose events fired when their group was frozen
                 * @memberof FreezeGroup
                 * @ignore
                 */
                FreezeGroup.cachedEvents = [];
                /**
                 * Default freeze group name used for the engine
                 * @memberof FreezeGroup
                 * @ignore
                 */
                FreezeGroup.ENG_GRP_NAME = "___e";
                scope.ENG_FRZ_GRP = FreezeGroup.ENG_GRP_NAME;
                /**
                 * Default freeze group name used for cases when a specific group is not supplied on Tween/Timeout/Interval creation and on isFrozen/freeze/unfreeze
                 * @memberof FreezeGroup
                 * @ignore
                 */
                FreezeGroup.DEF_GRP_NAME = "___d";
                /**
                 * @property Object._defFrzGrp
                 * @desc Default freeze group for all event handlers
                 */
                Object.defineProperty(Object.prototype, '_defFrzGrp', {
                    enumerable: false,
                    value: FreezeGroup.DEF_GRP_NAME
                });
                /**
                 * Stand-in freeze group name used to refer to the global group
                 * @memberof FreezeGroup
                 * @ignore
                 */
                FreezeGroup.GLB_GRP_NAME = "___g"; // Initialize global freeze group
                FreezeGroup.groups[FreezeGroup.GLB_GRP_NAME] = new FreezeGroup(FreezeGroup.GLB_GRP_NAME);
                FreezeGroup.get = function(grpName) {
                    FreezeGroup.groups[grpName] = FreezeGroup.groups[grpName] || new FreezeGroup(grpName);
                    return FreezeGroup.groups[grpName];
                };
                /**
                 * Freezes/unfreezes a group
                 * @param {string} grpName group name of group to lookup for
                 * @param {boolean} freeze whether to freeze or unfreeze the group
                 * @memberof FreezeGroup
                 * @ignore
                 */
                FreezeGroup.freezeUnfreezeGroup = function(grpName, freeze) {
                    var freezeInc = freeze ? 1 : -1;
                    var grp = FreezeGroup.get(grpName);
                    grp.frc = Math.max(0, grp.frc + freezeInc);
                    for (var id in grp.handlers) {
                        grp.handlers[id].frc = Math.max(0, grp.handlers[id].frc + freezeInc);
                    }
                };
                /**
                 * Adds a Tween/Timeout to one or more groups
                 * @param {Tween|Timeout} handler to add
                 * @param {string[]} grpNames group names of groups to lookup for
                 * @memberof FreezeGroup
                 * @ignore
                 */
                FreezeGroup.addHandler = function(handler, grpNames) {
                    for (var i = 0; i < grpNames.length; i++) {
                        var grp = FreezeGroup.get(grpNames[i]);
                        grp.handlers[handler.id] = handler;
                        if (grp.frc > 0) {
                            handler.frc++;
                        }
                    }
                };
                /**
                 * Remove a Tween/Timeout from its containing groups
                 * @param {Tween|Timeout} handler to remove
                 * @memberof FreezeGroup
                 * @ignore
                 */
                FreezeGroup.removeHandler = function(handler) {
                    for (var grpName in FreezeGroup.groups) {
                        var grp = FreezeGroup.get(grpName);
                        delete grp.handlers[handler.id];
                        if (grp.frc > 0) {
                            handler.frc--;
                        }
                    }
                };
                /**
                 * Cache a frozen event target to fire after the next corresponding freeze group unfreeze
                 * @param {object} target which has had its event frozen
                 * @param {string} eventName event which was frozen
                 * @param {string} grpName of freeze group where the event was frozen
                 * @param {object} cbData the data to supply the emit once we unfreeze
                 */
                FreezeGroup.cacheEvent = function(target, eventName, grpName, cbData, callback) {
                    FreezeGroup.cachedEvents.push({
                        target: target,
                        eventName: eventName,
                        grpName: grpName,
                        cbData: cbData,
                        callback: callback
                    });
                };
                /**
                 * Fire cached event targets belonging to a freeze group once it is unfrozen
                 * @param {string} grpName of freeze group where the event was frozen
                 */
                FreezeGroup.fireCachedEvents = function(grpName) {
                    for (var i = 0; i < FreezeGroup.cachedEvents.length; i++) {
                        var event = FreezeGroup.cachedEvents[i];
                        if (event.grpName === grpName) {
                            event.callback.call(event.target, event.cbData); //event.target.emit(event.eventName, event.cbData)
                            FreezeGroup.cachedEvents.splice(i--, 1);
                        }
                    }
                };
                XS.LOG_SPAM_EVENT_EXCLUDE = XS.LOG_SPAM_EVENT_EXCLUDE || [];
                /**
                 * @function Object._freezeEmit
                 * @desc Checks whether an emit event is frozen and should not fire
                 */
                Object.defineProperty(Object.prototype, '_freezeEmit', {
                    enumerable: false,
                    value: function value(event) {
                        if (event.type === eventTypes.forced.name) {
                            return false;
                        }
                        if (isGlobalFrozen() || XS.isFrozen(event.frzGrp)) {
                            if (event.type === eventTypes.transient.name);
                            else {
                                FreezeGroup.cacheEvent(event.callFrom, event.name, event.frzGrp, event.cbData, event.callback);
                            }
                            return true;
                        }
                        return false;
                    }
                });
                FreezeGroup.prototype.constructor = FreezeGroup; // This pops up a box with information about WebGL error stats (if any occurs)
                XS.on("gameLoaded", function() {
                    drawBackground(true);
                    if (XS.is.facebookInstant) { // This reports WebGL errors on Facebook Instant
                        //try {
                        if (typeof FBInstant !== 'undefined' && FBInstant.logEvent) {
                            if (PIXI.frvrGLErrors.TOTAL_ERRORS > 0) {
                                FBInstant.logEvent("webgl_errors", 1, {
                                    OUT_OF_MEMORY: PIXI.frvrGLErrors.OUT_OF_MEMORY,
                                    INVALID_ENUM: PIXI.frvrGLErrors.INVALID_ENUM,
                                    INVALID_VALUE: PIXI.frvrGLErrors.INVALID_VALUE,
                                    INVALID_OPERATION: PIXI.frvrGLErrors.INVALID_OPERATION,
                                    INVALID_FRAMEBUFFER_OPERATION: PIXI.frvrGLErrors.INVALID_FRAMEBUFFER_OPERATION,
                                    CONTEXT_LOST_WEBGL: PIXI.frvrGLErrors.CONTEXT_LOST_WEBGL
                                });
                            }
                            FBInstant.logEvent("pixi_renderer", 1, {
                                renderer: XS.is.usingCanvasRenderer ? "canvas" : XS.is.usingWebGLRenderer ? "webgl" : "unknown"
                            });
                        }
                    }
                }, {
                    freezeGroup: ENG_FRZ_GRP
                }); //Prepare for preloading of modules
                XS.modulesToPreload = [];
                XS.ignoreCursorChanges = false;
                XS.dirty = false;
                Host.Log("User Agent: " + navigator.userAgent);
                XS.assets = {};
                /** Consult preloadCache and fetchCache for an asset.
                 *
                 *  @param{string} path - actual path to asset (_not the mnemonic_)
                 *  @return{ATLImage|Canvas|Image|undefined} */
                XS.assets.__lookupFetchCache = function(path) {
                    var remap = Host.bootstrapper && Host.bootstrapper.mnemonicMap[path];
                    var probe = remap && (fetchCache[remap] || preloadCache[remap]) || fetchCache[path] || preloadCache[path];
                    return probe;
                };
                /** Same as loadNonEmbeddedImage() but returns a Promise
                 *  that resolves to the Image build from 'src'.
                 *
                 *  Additionally, the resolution guarantees that 'preloadCache' is
                 *  written to under 'mnemonic'.  If 'mnemonic' is not provided,
                 *  'Host.bootstrapper.mnemonicMap' is looked up, and finally we
                 *  fall back to 'src' itself as the mnemonic.
                 *
                 *  @param{string} src is the file system path.
                 *  @param{string} mnemonic is optional simple i/g/* mnemonic.
                 *  @return{Promise}*/
                XS.assets.__loadFromNetwork = function(src, mnemonic) {
                    if (!mnemonic) {
                        mnemonic = Host.bootstrapper.mnemonicMap[src] || src;
                    }
                    return new Promise(function(resolve, reject) {
                        if (!XS.is.facebookInstant) {
                            new POGImage(mnemonic, resolve, window.__resolvePath(src), reject, {
                                crossOrigin: "anonymous"
                            });
                            return;
                        }
                        /**
                         * This XHR is used as a workaround for FB CORS error.
                         * We download image as blob and convert it to base64
                         * to use it as image data for POGImage
                         */
                        var xhr = new XMLHttpRequest();
                        xhr.open('GET', window.__resolvePath(src), true);
                        xhr.responseType = 'blob';
                        xhr.onload = function() {
                            if (!xhr.status === 200) {
                                reject(xhr.statusText);
                                return;
                            }
                            var reader = new FileReader();
                            reader.readAsDataURL(xhr.response);
                            reader.onloadend = function() {
                                var base64Data = reader.result;
                                new POGImage(mnemonic, resolve, base64Data, reject);
                            };
                        };
                        xhr.onerror = reject;
                        xhr.ontimeout = reject;
                        xhr.send();
                    });
                };
                /** Make an ATLImage from JSG data
                 *
                 *  This id used _instead_ of {@link loadEmbeddedJSG} or {@link
                 *  fetchLoad}, but is designed to have the same effects.
                 *
                 *  @param {string} path - mnemonic path to asset
                 *  @param {string} cmds - JSG commands
                 *  @param {string} data - JSG data
                 *  @param {Boolean} ignoreStageResolution - set in the ATLImage
                 *  @return {ATLImage|Canvas|Image} - as explained above*/
                XS.assets.__importJSG = function(path, cmds, data, ignoreStageResolution) {
                    var jsg = new ATLImage(path, {
                        jsgData: [cmds, data],
                        ignoreStageResolution: ignoreStageResolution
                    });
                    fetchCache[path] = jsg;
                    return jsg;
                };
                var _disableAtlasFromURL = /disableAtlas=?(\d+)/.exec(window.location.search);
                _disableAtlasFromURL = _disableAtlasFromURL && _disableAtlasFromURL[1] == '1';
                /** Make an ATLImage from any type image data
                 *
                 *  @param{string} path - mnemonic path to asset
                 *  @param{object} imageData - image data
                 *  @return{Promise<POGImage>} */
                XS.assets.__importATL = function(path, imageData) { // NEXT LINE DISABLES ATLAS IMAGES AND FALLS BACK TO Plain Old Graphics
                    // XS-107: on iOS15 and WebKit browsers affected by the GPU Canvas
                    // Rendering bug, better not use atlas.
                    if (XS.is.badWebkit || _disableAtlasFromURL) {
                        return XS.assets.__importPOG(path, imageData);
                    }
                    var atl = new ATLImage(path, imageData);
                    fetchCache[path] = atl;
                    return atl;
                };
                /** Make an POGImage from any type image data
                 *
                 *  @param{string} path - mnemonic path to asset
                 *  @param{object} imageData - image data
                 *  @return{Promise<POGImage>} */
                XS.assets.__importPOG = function(path, imageData) {
                    return new Promise(function(resolve, reject) {
                        var data = imageData.data,
                            mimetype = imageData.mimetype;
                        var b64blob = imageData.b64blob;
                        if (!b64blob) b64blob = btoa(data);
                        var url = "data:image/" + mimetype + ";base64," + b64blob;
                        new POGImage(path, resolve, url, reject);
                    });
                };
                /** Override window.fetch() with an fst-era override.
                 *
                 *  Returns a replacement for window.fetch() that takes single
                 *  param 'path':
                 *
                 *  @param{string} path - actual path to asset (_not the mnemonic_) */
                scope.fetch = function(_super) {
                    return function(path) {
                        var probe = XS.assets.__lookupFetchCache(path);
                        if (probe) return probe;
                        return _super.apply(this, arguments);
                    };
                }(scope.fetch);
                /** A Promise-based implementation for the window.preload() legacy
                 *  thing.  It ensures a given set of things BEFORE are
                 *  accomplished, and only then runs a set of things AFTER.  It's
                 *  basically a very complicated Promise system.
                 *
                 *  @param {Array} lotsastuff can be well, a fair amount of
                 *  stuff. Call each of its elements E.
                 *
                 *  - If E is a string, it is added to the BEFORE set.
                 *
                 *  - If E is an Array, then each of E's items, call it EI, is added
                 *    to the BEFORE set.
                 *
                 *  - If E is a function it is added to the AFTER set.
                 *
                 *  Each element in the BEFORE set, call it BE, will be converted to
                 *  a Promise.
                 *
                 * - A function is converted to a Promise that calls it and
                 *   immediately resolves itself.
                 *
                 * - A string is understood to be an URL, and is converted to a
                 *   Promise via __loadFromNetwork
                 *
                 * - A Promise needs no conversion.
                 *
                 *  As you've probably guessed, the BEFORE set is waited on with
                 *  Promise.all().
                 *
                 *  The set of AFTER function is run in sequence with await().  So
                 *  if one of these functions returns a Promise (for example, if it
                 *  is an async() function) then that Promise is awaited on.
                 *
                 *  When something in the BEFORE set is completed, observers are
                 *  notified.  What are observers, I hear you ask?  Gather round
                 *  kids: this function returns a unary function.  That function,
                 *  when called registers said observers.  Each observer is a binary
                 *  function called sporadically with the total number of things to
                 *  perform and the number of things already performed.  Fun and
                 *  wholesome, isn't it?  You should have been here for the fst
                 *  version, *muac*
                 *
                 *  @return {Function} an observer-registering function.*/
                scope.preload = function() {
                    var before = [],
                        after = [],
                        observers = [];
                    for (var _len = arguments.length, lotsastuff = new Array(_len), _key = 0; _key < _len; _key++) {
                        lotsastuff[_key] = arguments[_key];
                    }
                    for (var _i = 0, _lotsastuff = lotsastuff; _i < _lotsastuff.length; _i++) {
                        var preloadItem = _lotsastuff[_i];
                        if (preloadItem instanceof Function) {
                            after.push(preloadItem);
                        } else if (preloadItem instanceof Array) {
                            for (var _iterator = _createForOfIteratorHelperLoose(preloadItem), _step; !(_step = _iterator()).done;) {
                                var item = _step.value;
                                before.push(item);
                            }
                        } else if (preloadItem) {
                            before.push(preloadItem);
                        } else {
                            console.warn('scope.preload() passed undefined asset! (skipping)');
                        }
                    }
                    var left = before.length;
                    var promises = before.map(function(beforeItem) {
                        if (beforeItem instanceof Promise) {
                            return beforeItem;
                        } else if (beforeItem instanceof Function) {
                            return new Promise(function(resolve) {
                                beforeItem();
                                resolve();
                            });
                        } else {
                            return XS.assets.__loadFromNetwork(beforeItem);
                        }
                    }).map(function(processedBeforeItemList) {
                        return processedBeforeItemList.then(function() {
                            return observers.forEach(function(o) {
                                return o(before.length, --left);
                            });
                        });
                    });
                    Promise.all(promises).then( /*#__PURE__*/ _asyncToGenerator( /*#__PURE__*/ regeneratorRuntime.mark(function _callee() {
                        var _iterator2, _step2, preloadFunction;
                        return regeneratorRuntime.wrap(function _callee$(_context) {
                            while (1) {
                                switch (_context.prev = _context.next) {
                                    case 0:
                                        _iterator2 = _createForOfIteratorHelperLoose(after);
                                    case 1:
                                        if ((_step2 = _iterator2()).done) {
                                            _context.next = 7;
                                            break;
                                        }
                                        preloadFunction = _step2.value;
                                        _context.next = 5;
                                        return preloadFunction();
                                    case 5:
                                        _context.next = 1;
                                        break;
                                    case 7:
                                    case "end":
                                        return _context.stop();
                                }
                            }
                        }, _callee);
                    })));
                    return function(observer) {
                        observers.push(observer);
                    };
                }; /** Variation on window.preload().  Load assets, call cb. */
                XS.assets.loadAsync = function(assets, cb) {
                    scope.preload.apply(null, assets.concat([function() {
                        cb && cb(assets);
                    }]));
                };
                /**
                 * @desc Client Agent Properties - easy way to switch on different context properties at runtime.
                 * @example if(XS.is.android) { console.log("We're running in Android!"); }
                 * @namespace is
                 * @memberof XS
                 */
                XS.is = window.__FRVR.platformIs;
                /**
                 * @desc Client Capabilities
                 * @example if(XS.can.showModalLoginWithFacebook()) { console.log("We can show Login with Facebook button!"); }
                 * @namespace can
                 * @memberof XS
                 */
                XS.can = {
                    loadRemoteConfig: function loadRemoteConfig() {
                        return (XS.is.facebookInstant || XS.is.iOS || XS.is.android) && !(XS.is.youtube || XS.is.twitch || XS.is.yandex || XS.is.jioStb || XS.is.samsungInstantPlay || XS.is.snapchat);
                    },
                    showSidebar: function showSidebar() {
                        return !XS.is.jioStb && Host.supports.showSidebar;
                    },
                    showSidebarSocial: function showSidebarSocial() {
                        return !XS.is.nosoc && !XS.is.okru && !XS.is.rcs && !XS.is.huawei && !XS.is.miniclip && !XS.is.samsungGameLauncher && !XS.is.samsungInstantPlay && !XS.is.tMobile && !XS.is.lgtv && !XS.is.oppoGlobal && !XS.is.facebookInstant && !XS.is.twitch && !XS.is.yandex && !XS.is.spilGamesWrapper && !XS.is.rocketChat && !XS.is.jio && !XS.is.microsoftPwa && Host.supports.showSidebarSocial && !XS.is.youtube;
                    },
                    showSidebarMore: function showSidebarMore() {
                        return !XS.is.facebookInstant && !XS.is.twitch && !XS.is.yandex && !XS.is.spilGamesWrapper && !XS.is.rocketChat && !XS.is.jio && !XS.is.okru && !XS.is.samsungInstantPlay && !XS.is.oppoGlobal && !XS.is.microsoftPwa && Host.supports.showSidebarMore && !XS.is.youtube;
                    },
                    showSidebarLegal: function showSidebarLegal() {
                        return !XS.is.facebookInstant && !XS.is.snapchat && !XS.is.microsoftPwa && !XS.is.youtube;
                    },
                    showSidebarSaveProgressHeader: function showSidebarSaveProgressHeader() {
                        return !XS.is.facebookApp && !XS.is.nosoc && !XS.is.rcs && !XS.is.huawei && !XS.is.miniclip && !XS.is.tMobile && !XS.is.partnerWrapper && !XS.is.microsoftPwa && Host.supports.showSidebarSaveProgressHeader;
                    },
                    showSidebarShare: function showSidebarShare() {
                        return !XS.is.spilGamesWrapper && Config.stage != 'rt' && !XS.is.samsungInstantPlay && !XS.is.lgtv && !XS.is.yandex && !XS.is.rocketChat && !XS.is.jio && !XS.is.facebookRooms && !XS.is.oppoGlobal && Host.supports.showSidebarShare && !XS.is.youtube;
                    },
                    showModalLoginWithFacebook: function showModalLoginWithFacebook() {
                        return window.requestFacebookLogin && window.facebookAuthed === false && Config.facebookAppId && !XS.is.twitter && !XS.is.nosoc && !XS.is.rcs && !XS.is.huawei && !XS.is.miniclip && !XS.is.tMobile && !XS.is.microsoftPwa && Host.supports.showModalLoginWithFacebook && !XS.is.youtube;
                    },
                    showModalShareDialog: function showModalShareDialog() {
                        return window.shareDialogueCallback && !XS.is.nosoc && !XS.is.rcs && !XS.is.huawei && !XS.is.miniclip && !XS.is.tMobile && !XS.is.microsoftPwa && Host.supports.showModalShareDialog && !XS.is.youtube;
                    },
                    showModalCrossPromo: function showModalCrossPromo() {
                        return !XS.is.lgtv && !XS.is.spilGamesWrapper && !XS.is.okru && !XS.is.facebookInstant && !XS.is.rcs && !XS.is.huawei && !XS.is.miniclip && !XS.is.yandex && !XS.is.samsungGameLauncher && !XS.is.samsungInstantPlay && !XS.is.jio && !XS.is.rocketChat && !XS.is.oppoGlobal && !XS.is.tMobile && !XS.is.microsoftPwa && Host.supports.showModalCrossPromo && !XS.is.youtube;
                    },
                    showModalMetaButtonOnGameStart: function showModalMetaButtonOnGameStart() {
                        return XS.is.nosoc && !XS.is.microsoftPwa && Host.supports.showModalMetaButtonOnGameStart;
                    },
                    showModalMetaButtonOnGameEnd: function showModalMetaButtonOnGameEnd() {
                        return XS.is.nosoc && !XS.is.microsoftPwa && Host.supports.showModalMetaButtonOnGameEnd;
                    },
                    showLoginWithFacebook: function showLoginWithFacebook() {
                        return !XS.is.nosoc && !XS.is.rcs && !XS.is.huawei && !XS.is.miniclip && !XS.is.samsungGameLauncher && !XS.is.samsungInstantPlay && !XS.is.tMobile && !XS.is.partnerWrapper && !XS.is.microsoftPwa && !XS.is.aaos && Host.supports.showLoginWithFacebook && !XS.is.youtube;
                    },
                    createWebSocialFrame: function createWebSocialFrame() {
                        return !XS.is.nosoc && !XS.is.rcs && !XS.is.huawei && !XS.is.miniclip && !XS.is.tMobile && !XS.is.lgtv && !XS.is.oppoGlobal && Host.supports.createWebSocialFrame;
                    },
                    showModalPreGame: function showModalPreGame() {
                        return Host.supports.showModalPreGame;
                    },
                    useGamepad: function useGamepad() {
                        return XS.is.jioStb || Host.supports.useGamepad;
                    },
                    showCrossPromoBanner: function showCrossPromoBanner() {
                        return !XS.is.microsoftPwa && Host.supports.showCrossPromoBanner && !XS.is.youtube;
                    },
                    showModalTryAgain: function showModalTryAgain() {
                        return !XS.is.tv && Host.supports.showModalTryAgain;
                    },
                    showSidebarSettings: function showSidebarSettings() {
                        return !XS.is.youtube;
                    },
                    showSidebarSoundButton: function showSidebarSoundButton() {
                        return !XS.is.youtube;
                    },
                    showSidebarMusicButton: function showSidebarMusicButton() {
                        return !XS.is.youtube;
                    }
                };
                if (XS.is.samsungGameLauncher) {
                    window.gaPath += 'app/gamelauncher/';
                } else if (XS.is.samsungInstantPlay) {
                    window.gaPath += 'app/samsunginstantplay/';
                } else if (XS.is.facebookApp) {
                    window.gaPath += 'app/facebook/';
                } else if (XS.is.pwa) {
                    window.gaPath += 'app/pwa/';
                } else if (XS.is.windowsApp) {
                    window.gaPath += 'app/windowsapp/';
                } else if (XS.is.okru) {
                    window.gaPath += 'app/okru/';
                } else if (XS.is.vkru) {
                    window.gaPath += 'app/vk/';
                } else if (XS.is.rcs) {
                    window.gaPath += 'app/rcs/';
                } else if (XS.is.huawei) {
                    window.gaPath += 'app/huawei/';
                } else if (XS.is.miniclip) {
                    window.gaPath += 'app/miniclip/';
                }

                function XSABTest() { //for determinism in automated screenshot tests
                    var bypassABSystem = !!Host.Web.GetQueryString("bypassAB");
                    var self = this;
                    self.initialized = false;
                    self.ready = false;
                    self.forcedCohorts = {}; // cohort overrides
                    self.abTestCohorts = {}; // real cohorts
                    self.validCohorts = {};
                    var setupFuncs = []; // This is used for the ab testing framework - do not modify in any way
                    var _md5 = function() {
                        for (var m = [], l = 0; 64 > l;) {
                            m[l] = 0 | 4294967296 * Math.abs(Math.sin(++l));
                        }
                        return function(c) {
                            var e, g, f, a, h = [];
                            c = unescape(encodeURI(c));
                            for (var b = c.length, k = [e = 1732584193, g = -271733879, ~e, ~g], d = 0; d <= b;) {
                                h[d >> 2] |= (c.charCodeAt(d) || 128) << 8 * (d++ % 4);
                            }
                            h[c = 16 * (b + 8 >> 6) + 14] = 8 * b;
                            for (d = 0; d < c; d += 16) {
                                b = k;
                                for (a = 0; 64 > a;) {
                                    b = [f = b[3], (e = b[1] | 0) + ((f = b[0] + [e & (g = b[2]) | ~e & f, f & e | ~f & g, e ^ g ^ f, g ^ (e | ~f)][b = a >> 4] + (m[a] + (h[[a, 5 * a + 1, 3 * a + 5, 7 * a][b] % 16 + d] | 0))) << (b = [7, 12, 17, 22, 5, 9, 14, 20, 4, 11, 16, 23, 6, 10, 15, 21][4 * b + a++ % 4]) | f >>> 32 - b), e, g];
                                }
                                for (a = 4; a;) {
                                    k[--a] = k[a] + b[a];
                                }
                            }
                            for (c = ""; 32 > a;) {
                                c += (k[a >> 3] >> 4 * (1 ^ a++ & 7) & 15).toString(16);
                            }
                            return c;
                        };
                    }(); // getCohortNumber generates a cohort from user id, name of the test (must be unique!) and group size
                    // Returns a cohort number between 0 and (groupSize-1)
                    // WARNING! If you modify this methods behavior, you will destroy our analytics data integrity
                    function getABCohortNumber(userId, uniqueTestName, numCohorts) {
                        if (bypassABSystem) return 0;
                        var seed = uniqueTestName + ':' + userId;
                        var hash = _md5(seed).substr(-8); // We just need last 8 chars
                        var h = parseInt(hash, 16); // turn into a mod-able number
                        return h % numCohorts;
                    }
                    /**
                     * Pass a callback that gets called when the a/b system is set up
                     */
                    self.setup = function(callback) { //Instantly callback if we are already ready.
                        if (self.ready) {
                            callback();
                        } else { //Otherwise put in processing queue
                            setupFuncs.push(callback);
                        } // If we are not on a supported platform, fall back to the ... fallback
                        return {
                            fallback: function fallback(func) {}
                        };
                    };
                    /**
                     * For debugging - forces your membership into a specific cohort for test purposes
                     * Call it at the very beginning of game.js
                     */
                    self.force = function(testName, cohortName) {
                        console.warn("Forcing cohort: " + cohortName + " for test: " + testName);
                        this.forcedCohorts[testName] = cohortName;
                    };
                    /**
                     * Manually add another ab_test.
                     * Use after ab_test framework has been initialised.
                     * Example: XS.abtest.addTest(12345, ab_icontest, ['group_one', 'group_two'], true, function(testName, cohort) { doSomething() })
                     *
                     * @param {*} uniqueId unique player or user id
                     * @param {string} testName ab_test name
                     * @param {string[]} groups array of cohort group name strings
                     * @param {boolean} sendEvent false/true specification on whether to track on addTest
                     * @returns {object} Object containing test name and cohort e.g., {test: "test_name", cohort: "cohort_group"}
                     */
                    self.addTest = function(uniqueId, testName, groups, sendEvent) {
                        this.validCohorts[testName] = groups;
                        var cohort = this.forcedCohorts[testName]; // Cohorts validation check
                        // Check that we're not forcing an invalid cohort
                        // Get cohort group for the current user for this test; If not forced assign a real cohort
                        if (!cohort) {
                            cohort = groups[getABCohortNumber(uniqueId, testName, groups.length)];
                        }
                        this.abTestCohorts[testName] = cohort; // If sendEvent === true, send tracking with group affiliation for each ab_test in abTestCohorts
                        if (sendEvent) {
                            if (JSON.stringify(this.abTestCohorts) !== '{}') {
                                XS.track.customEvent(testName, 1, this.abTestCohorts);
                            }
                        }
                        return {
                            test: testName,
                            cohort: cohort
                        };
                    };

                    function runSetupFunctions() {
                        for (var i = 0; i < setupFuncs.length; ++i) {
                            setupFuncs[i]();
                        }
                        setupFuncs = [];
                    }
                    /**
                     * Initialize abtest call with unique and persistent ID (such as FBInstant.player.getID()
                     * @param {*} uniqueId unique and persistent ID (such as FBInstant.player.getID()
                     * @param {object} jsonDataOverride optional data object to use instead of the one provided by the json ab_test file in game's meta folder (use with caution)
                     */
                    self.init = function(uniqueId, jsonDataOverride) { //Added this code to prevent XS.abtests being initialized twice
                        if (self.initialized) {
                            throw "XS.abtest cannot be initialized twice";
                        }
                        var payload = {}; // Loop through the active ab tests defined in abtests.json and find the cohort for each test
                        if (window._jsonData && window._jsonData['ab_tests'] || jsonDataOverride) {
                            var abTests = jsonDataOverride || window._jsonData['ab_tests']; // New refactored method; london
                            for (var testName in abTests) {
                                var abTest = this.addTest(uniqueId, testName, abTests[testName]["cohorts"], false);
                                payload[abTest.test] = abTest.cohort;
                            } //<xdebug>
                            console.log("XS.abtest: A/B test cohorts: ", payload); //</xdebug>
                            // Report the ab test rolls as events
                            for (testName in abTests) {
                                XS.track.customEvent(testName, 1, payload); // Report our group affiliation for each ab test (all cohorts reported in each event)
                            }
                        }
                        self.initialized = true;
                        self.emit('abtest-init'); // run setup functions after all modules are loaded (specially ab-override.js)
                        XS.on('modulesLoaded', function() {
                            runSetupFunctions();
                            self.ready = true;
                        });
                    };
                    /**
                     * XS.abtest.cohort("my_ab_test_name")
                     * Returns the cohort name you belong to for the given test name
                     */
                    self.cohort = function(testName) {
                        if (!self.initialized) {
                            console.error("XS.abtest.cohort called before XS.abtest was initialized!");
                        }
                        var cohort = self.abTestCohorts[testName];
                        return cohort;
                    };
                    /**
                     * XS.abtest.when("my_ab_test_name","cohort_a",function() { ... }): calls the callback if you belong to cohort_a in my_ab_test_name
                     */
                    self.when = function(testName, ifCohort, callback) {
                        if (!self.initialized) {
                            console.error("XS.abtest.when called before XS.abtest was initialized!");
                        }
                        var cohort = self.cohort(testName); // when('ab_foo', function() { ... } ) form
                        if (typeof ifCohort == 'string') {
                            if (cohort && ifCohort && cohort == ifCohort && callback) callback();
                        } // when('ab_foo', { cohort_a: function() {}, cohort_b: function() {}) form
                        else if (typeof ifCohort == 'object') {
                            if (cohort && ifCohort[cohort]) ifCohort[cohort]();
                        } else {
                            if (!cohort) console.error("No A/B test cohort defined for test '" + testName + "' - nothing was executed!");
                        }
                        return {
                            fallback: function fallback() {}
                        }; // don't call fallback
                    };
                }
                XS.abtest = new XSABTest(); // Add platform inits here that call XS.abtest.init and pass in a unique ID
                // Add more platforms by adding else-if clauses that init and set abTestEnabled = true
                if (XS.is.facebookInstant) {
                    Host.on('FBInstantStart', function() {
                        XS.abtest.init(FBInstant.player.getID());
                    }, {
                        freezeGroup: ENG_FRZ_GRP
                    });
                } else if (!XS.is.huaweiquickapp) {
                    if (XS.track && XS.track.userId) {
                        XS.abtest.init(XS.track.globalUserId);
                    } else {
                        Host.on('xstrack:InitUserId', function(state) {
                            XS.abtest.init(state.globalUserId);
                        }, {
                            freezeGroup: ENG_FRZ_GRP
                        });
                    }
                }
                /**
                 * loadEmbedData gets data that was embedded by the build process using builder.embed_data, and falls back to loading it on the fly
                 * NB! Do not use from games!
                 */
                XS.loadEmbedData = function(relative_url, callback, mimetype) {
                    if (window.embeddedFiles && window.embeddedFiles[relative_url]) {
                        console.log("Loading embedded data: " + relative_url);
                        callback(window.embeddedFiles[relative_url]);
                    } else { //console.error("File not embedded: " + relative_url)
                        //throw "File not embedded" + relative_url
                        console.warn("Loading data (not embedded!): " + relative_url);
                        var xobj = new XMLHttpRequest();
                        xobj.crossOrigin = 'anonymous';
                        if (mimetype && xobj.overrideMimeType) {
                            xobj.overrideMimeType(mimetype);
                        } //Try catch block for IE9
                        try {
                            xobj.open('GET', relative_url, true);
                            xobj.onreadystatechange = function() {
                                if (xobj.readyState == 4) {
                                    if (xobj.status == "200") { //Success
                                        callback(xobj.responseText);
                                    } else {
                                        xobj = xobj.onreadystatechange = null; //Bit of inline GC to prevent onreadystatechange from triggering multipe times.
                                        console.error("XS.loadData: Error loading data: ", xobj);
                                    }
                                }
                            };
                            xobj.send();
                        } catch (e) {
                            console.error("loadEmbedData: Error loading data (2): ", e);
                        }
                    }
                };
                window.insertButton = function(offset, text, callback) {
                    console.warn("window.insertButton needs to be overwritten before releasing this game.");
                    Host.WrapperLog("window.insertButton is not defined");
                };
                /**
                 * Freeze/Unfreeze API
                 */
                /**
                 * Checks whether a group with a given group name is frozen. If no group name is supplied, default is assumed.
                 * @param {string} grpName group name of group to lookup for
                 * @returns {boolean} Whether a group is frozen or otherwise
                 * @memberof XS
                 */
                XS.isFrozen = function(grpName) {
                    grpName = grpName || FreezeGroup.DEF_GRP_NAME; // Check if we know about the group, assume unfrozen if we don't know about it
                    if (!(grpName in FreezeGroup.groups)) {
                        return false;
                    }
                    return FreezeGroup.get(grpName).frc > 0;
                };
                /**
                 * Freeze a group with a given group name. If no group name is supplied, default is assumed.
                 * @param {string} grpName group name of group to lookup for
                 * @memberof XS
                 */
                XS.freeze = function(grpName) {
                    grpName = grpName || FreezeGroup.DEF_GRP_NAME;
                    FreezeGroup.freezeUnfreezeGroup(grpName, true);
                };
                /**
                 * Unfreeze a group with a given group name. If no group name is supplied, default is assumed.
                 * @param {string} grpName group name of group to lookup for
                 * @memberof XS
                 */
                XS.unfreeze = function(grpName) {
                    grpName = grpName || FreezeGroup.DEF_GRP_NAME;
                    FreezeGroup.freezeUnfreezeGroup(grpName, false);
                    FreezeGroup.fireCachedEvents(grpName);
                };
                /**
                 * Freeze/Unfreeze Internal API
                 */
                /**
                 * Checks whether the global group is frozen.
                 * @returns {boolean} Whether the global group is frozen
                 */
                function isGlobalFrozen() {
                    return XS.isFrozen(FreezeGroup.GLB_GRP_NAME);
                }
                /*
                 * XS public properties.
                 */
                /**
                 * XS Main Canvas object (HTMLCanvasElement).<br>NB! Do not use directly, as it hurts portability.
                 */
                XS.canvas = document.getElementById("gameCanvas");
                /**
                 * Stage Container - top level container for stage object.
                 * Do not use directly unless you know what you're doing.
                 */
                XS.stageContainer = new PIXI.Stage(0x202020);
                lazyAttachEvents(XS.stageContainer); //Stageup is a wrapper event for otherwise uncatcbable button presses. Please only use for .once events
                //E.g. do not use it unless you are playing around with XS, Modal or another core compontent
                XS.stageContainer.on('up', function(data) {
                    XS.stageContainer.emit('stageup', data);
                }, {
                    freezeGroup: ENG_FRZ_GRP
                });
                XS.stageContainer.on('down', function(data) {
                    if (XS.currentInputField && XS.currentInputField.blur) {
                        XS.currentInputField.blur();
                    }
                    window.focus && window.focus();
                }, {
                    freezeGroup: ENG_FRZ_GRP
                });
                XS.httpPrefix = 'https://'; //Scaling WebGL canvas is not faster than just showing native resolution on Android (Confirmed in test)
                /**
                 * The devices current ratio between screen coordinates and actual pixels.<br>Typically 1 on low DPI displays, and 2 and up on high DPI displays.<br>
                 * This parameter is only relevant when working in screen space coordinates, outside XS.stage!<br>
                 * Note that this value can change at runtime!
                 * @memberof XS
                 */
                XS.devicePixelRatio = Math.min(2, window.devicePixelRatio || 1);
                /**
                 * Polls and waits for a certain condition to be met. This function will 
                 * continue polling until the validate function returns true, or the maximum 
                 * number of attempts is reached.
                 * 
                 * @function
                 * @memberof XS
                 * @async
                 *
                 * @param {function} validate - An async function that checks the condition 
                 *                              to be met. Should return true when the condition 
                 *                              is satisfied.
                 * @param {number} [timeout=500] - The number of milliseconds between each 
                 *                                 polling attempt.
                 * @param {number} [maxAttempts=10] - The maximum number of polling attempts 
                 *                                    before the function gives up and rejects the promise.
                 *
                 * @returns {Promise} - A Promise that resolves when the validate function returns true, 
                 *                      and rejects if the maxAttempts limit is reached without the 
                 *                      validate function returning true.
                 *
                 * @example
                 * const validateFunc = async () => {
                 *   // check some condition and return true if it's met
                 * };
                 * XS.pollAndWait(validateFunc, 1000, 20)
                 *   .then(() => console.log('Condition met!'))
                 *   .catch(() => console.log('Failed to meet condition within max attempts'));
                 */
                XS.pollAndWait = /*#__PURE__*/ function() {
                    var _ref2 = _asyncToGenerator( /*#__PURE__*/ regeneratorRuntime.mark(function _callee3(validate, timeout, maxAttempts) {
                        var attempts, executePoll;
                        return regeneratorRuntime.wrap(function _callee3$(_context3) {
                            while (1) {
                                switch (_context3.prev = _context3.next) {
                                    case 0:
                                        if (timeout === void 0) {
                                            timeout = 500;
                                        }
                                        if (maxAttempts === void 0) {
                                            maxAttempts = 10;
                                        }
                                        attempts = 0;
                                        executePoll = /*#__PURE__*/ function() {
                                            var _ref3 = _asyncToGenerator( /*#__PURE__*/ regeneratorRuntime.mark(function _callee2(resolve, reject) {
                                                var isValid;
                                                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                                                    while (1) {
                                                        switch (_context2.prev = _context2.next) {
                                                            case 0:
                                                                _context2.next = 2;
                                                                return validate();
                                                            case 2:
                                                                isValid = _context2.sent;
                                                                attempts++;
                                                                if (!isValid) {
                                                                    _context2.next = 8;
                                                                    break;
                                                                }
                                                                return _context2.abrupt("return", resolve());
                                                            case 8:
                                                                if (!(maxAttempts && attempts >= maxAttempts)) {
                                                                    _context2.next = 12;
                                                                    break;
                                                                }
                                                                return _context2.abrupt("return", reject());
                                                            case 12:
                                                                setTimeout(executePoll, timeout, resolve, reject);
                                                            case 13:
                                                            case "end":
                                                                return _context2.stop();
                                                        }
                                                    }
                                                }, _callee2);
                                            }));
                                            return function executePoll(_x4, _x5) {
                                                return _ref3.apply(this, arguments);
                                            };
                                        }();
                                        return _context3.abrupt("return", new Promise(executePoll));
                                    case 5:
                                    case "end":
                                        return _context3.stop();
                                }
                            }
                        }, _callee3);
                    }));
                    return function(_x, _x2, _x3) {
                        return _ref2.apply(this, arguments);
                    };
                }();
                /**
                 * XS style properties.
                 * @namespace styles
                 * @memberof XS
                 */
                XS.styles = {
                    /** @desc Defines margins for for main page - adjusted according to platforms.<br>Members are margins.top and margins.bottom */
                    margins: {
                        top: (XS.is.iOSWrapper || XS.is.standalone) && XS.is.iOS ? XS.is.iPhoneXOrLater ? 0 : 20 : 0,
                        bottom: 0,
                        left: 0,
                        right: 0
                    }, //Added spacing, not sure bottom works yet!
                    spacing: {
                        top: 0,
                        bottom: 0,
                        left: 0,
                        right: 0
                    },
                    window: {
                        padding: {
                            top: 0,
                            bottom: 0
                        }
                    }
                }; /** Called when game is over to (potentially) show ad */
                XS.showGameOverAd = function() {}; /** Called to hide game over ads */
                XS.hideGameOverAd = function() {}; /** Called to (potentially) show interstitial ad - should be called at beginning of new round */
                XS.showInterstitialAd = function(callback) {
                    callback && callback();
                };
                XS.resizeAd = function() {};
                XS.showRateGame = function() {};
                XS.submitHighscore = function(score) {};
                XS.submitLowscore = function(score) {};
                XS.configLoadCallback = function() {};
                XS.insertRemoveAdsButton = function() {};
                XS.removeAdsButton = function() {};
                /*
                 * Debounced window.onresize handler.
                 * Avoids unnecessary re-paints.
                 */
                var onResizeTimer = false;
                var forceResizeTimer;
                XS.skipResizing = false;
                window.onresize = function(e) {
                    if (XS.skipResizing) {
                        return;
                    }
                    var resizeInterval = 5;
                    clearTimeout(onResizeTimer);
                    clearInterval(forceResizeTimer);
                    clearTimeout(handleForcedResizeTimer);
                    onResizeTimer = setTimeout(function() {
                        handleResize({
                            instant: false,
                            event: e
                        });
                        forceResizeTimer = setInterval(function() {
                            TestAndTriggerForcedResize(false);
                        }, 250);
                    }, resizeInterval);
                };
                if (!XS.is.youtube) {
                    window.onfocus = function(e) { //		Host.Log("ON FOCUS")
                        XS.emit('focus', {
                            id: 'window_focus'
                        });
                    };
                    window.onblur = function(e) { //		Host.Log("ON BLUR")
                        XS.emit('blur', {
                            id: 'window_focus'
                        });
                    }; //Added event handlers allowing for detection of WebView visible state on Android
                    document.addEventListener("visibilitychange", function(e) {
                        if (document.visibilityState == "hidden") {
                            XS.emit('blur', {
                                id: 'window_focus'
                            });
                        }
                        if (document.visibilityState == "visible") {
                            XS.emit('focus', {
                                id: 'window_focus'
                            });
                        }
                    });
                }
                /*
                 * AUDIO
                 */
                var soundUnlockQueue = [];

                function unlockAllSounds() {
                    while (soundUnlockQueue.length) {
                        soundUnlockQueue.pop()();
                    }
                }
                /**
                 * @class SoundPlayer
                 * @classdesc Host audio interface
                 */
                { // Updates the music state if the system has been initialized
                    var updateMusicState = function updateMusicState(mutedState) {
                        XS.Music.setMuted(mutedState);
                        if (XS.backgroundMusic && XS.soundSettings) {
                            if (!mutedState) {
                                XS.backgroundMusic.play(0, true);
                            } else {
                                XS.backgroundMusic.stop(0);
                            }
                        }
                    }; // Sets background music and volume
                    var SoundPlayer = function() {
                        var channelId = 0;

                        function getVolumeMultiplier() {
                            var isIOS = XS.is.iOS ? 1 : .25;
                            return XS.is.facebookRooms ? isIOS : 1;
                        }
                        if (window.Host && window.Host.Sound) {
                            Host.Log("Using SoundPlayer!");
                            return function(isBackgroundMusic) {
                                isBackgroundMusic = isBackgroundMusic ? true : false;
                                var that = this;
                                this.muted = false;
                                this.setMuted = function(muted) {
                                    that.muted = muted;
                                    Host.Sound.PauseAll(muted, isBackgroundMusic);
                                };
                                this.soundNodes = [];
                                this.get = function(path, gain) {
                                    var id = path + "_" + channelId++;
                                    Host.Sound.Preload(id, path, isBackgroundMusic);
                                    var node = new sound(id, path, gain); //this.soundNodes.push(node)
                                    return node;
                                };

                                function sound(id, path, initGain) {
                                    var self = this; // actually means "should be playing", or "was told to play".
                                    self.playing = false;
                                    var currentGain = initGain;
                                    self.resetGain = function() {
                                        self.setGain(initGain);
                                    };
                                    self.setGain = function(newGain) {
                                        currentGain = newGain;
                                        Host.Sound.SetVolume(id, newGain * getVolumeMultiplier());
                                    };
                                    self.updateGain = function(newGain) {
                                        initGain = newGain;
                                        self.setGain(newGain);
                                    };
                                    self.currentGain = function() {
                                        return self.currentGain;
                                    };
                                    self.setMuted = function(state) {
                                        if (Host.Sound.Pause) {
                                            if (self.playing) Host.Sound.Pause(id, state);
                                        }
                                    };
                                    self.play = function(time, loop) { //Host.Log("Play > " + path + " > " + that.muted + " > " + (isBackgroundMusic&&self.playing))
                                        if (that.muted || isBackgroundMusic && self.playing) return;
                                        self.playing = true; //channel, file, loop, isBackgroundMusic
                                        function play() {
                                            Host.Sound.Play(id, path, loop, currentGain, isBackgroundMusic);
                                        }
                                        time ? setTimeout(play, time * 1000) : play();
                                    };
                                    self.stop = function(time) {
                                        self.playing = false;
                                        Host.Sound.Stop(id);
                                    };
                                } // method object
                            }; // object
                        } // host if
                        // Custom audio.
                        else {
                            return function(singleton) {
                                var that = this;
                                var context = SoundPlayer.context;
                                var AudioContext = window.AudioContext || window.webkitAudioContext; // XS-205, XS-237: Many browsers have autoplay restrictions
                                // but Safari is the most difficult one.  Strategically
                                // adding an event listener for interactions at key points
                                // seems to fix it.
                                function watchSneakyContext() {
                                    if (context.state === 'running' || that.muted) return;
                                    var interaction = ['touchstart', 'mousedown'];
                                    for (var i = 0; i < interaction.length; i++) {
                                        window.addEventListener(interaction[i], function() {
                                            context.resume();
                                        }, {
                                            once: true
                                        });
                                    }
                                }
                                if (context === undefined && AudioContext !== undefined) {
                                    context = new AudioContext();
                                    context.onstatechange = watchSneakyContext;
                                }
                                this.context = context;
                                this.debug = function() {
                                    console.log(context);
                                };
                                var cache = [];
                                this.soundNodes = [];
                                this.muted = false;
                                this.setMuted = function(muted) {
                                    that.muted = muted;
                                    if (!muted) {
                                        context.resume();
                                        watchSneakyContext();
                                        unlockAllSounds();
                                    } else context.suspend(); // save battery?
                                    try {
                                        for (var i = 0; i < this.soundNodes.length; ++i) {
                                            if (this.soundNodes[i]) this.soundNodes[i].setMuted(muted);
                                        }
                                    } catch (e) {}
                                };
                                this.get = function(path, g) {
                                    var node = cache[path] || create(path, g);
                                    node.updateGain(g);
                                    this.soundNodes.push(node);
                                    return node;
                                };
                                var queue = [];
                                var loadStarted = false;

                                function next() {
                                    loadStarted = true;
                                    if (queue.length) {
                                        queue.shift()();
                                    } else loadStarted = false;
                                }
                                this.currentTrack = null;

                                function sound(path, initGain) {
                                    this.id = path + '_' + channelId++;
                                    var self = this;
                                    var buffer; //audio buffer
                                    var autostart;
                                    self.loaded = false;
                                    self.playing = false;
                                    var gainNode = {
                                        gain: {
                                            value: initGain
                                        }
                                    };
                                    if (context) {
                                        var innerSoundLoadRequest = function innerSoundLoadRequest() {
                                            var req = new XMLHttpRequest();
                                            req.open("GET", window.__resolvePath(path), true);
                                            req.responseType = "arraybuffer";

                                            function handleLoadError(err) {
                                                console.error('Error loading sound "%s":', path, err);
                                                next();
                                            }
                                            req.onerror = handleLoadError;
                                            req.onload = function() {
                                                if (req.status !== 200) handleLoadError(req.status + '/' + req.statusText); //decode the loaded data
                                                context.decodeAudioData(req.response, function(b) {
                                                    buffer = b;
                                                    self.loaded = true;
                                                    if (autostart) {
                                                        autostart();
                                                    }
                                                    req = null;
                                                    next();
                                                }, handleLoadError);
                                            };
                                            queue.push(function() {
                                                req.send();
                                            });
                                            if (!loadStarted) { //Load up to two sounds at the same time. (If not singleton)
                                                next();
                                                if (!singleton) next();
                                            }
                                        };
                                        soundUnlockQueue.push(innerSoundLoadRequest);
                                        if (context.createGain) {
                                            gainNode = context.createGain();
                                        } else {
                                            gainNode = {
                                                gain: {
                                                    value: initGain
                                                }
                                            };
                                        }
                                    }
                                    this.gain = gainNode.gain;
                                    var paused = {};
                                    var pauseValue = 0;
                                    this.setGain = function(newGain, force) {
                                        if (!force && isPaused()) {
                                            pauseValue = newGain;
                                            return;
                                        }
                                        this.gain.value = newGain * getVolumeMultiplier();
                                    };
                                    this.updateGain = function(newGain, force) {
                                        if (!force && isPaused()) {
                                            pauseValue = initGain = newGain;
                                            return;
                                        }
                                        initGain = newGain;
                                        this.gain.value = initGain * getVolumeMultiplier();
                                    };
                                    this.resetGain = function(force) {
                                        if (!force && isPaused()) {
                                            pauseValue = initGain;
                                            return;
                                        }
                                        this.gain.value = initGain * getVolumeMultiplier();
                                    };
                                    self.currentGain = function() {
                                        return this.gain.value / getVolumeMultiplier();
                                    };

                                    function isPaused() {
                                        for (var x in paused) {
                                            return true;
                                        }
                                        return false;
                                    }

                                    function pause(id) {
                                        var wasPaused = isPaused();
                                        paused[id] = true;
                                        var shouldPause = !wasPaused && isPaused();
                                        if (shouldPause) {
                                            pauseValue = self.currentGain();
                                            self.setGain(0, true);
                                        }
                                    }

                                    function resume(id) {
                                        var wasPaused = isPaused();
                                        delete paused[id];
                                        var shouldResume = wasPaused && !isPaused();
                                        if (shouldResume) {
                                            self.setGain(pauseValue, true);
                                        }
                                    }
                                    this.getCurrentTime = function() {
                                        if (context) {
                                            return context.currentTime;
                                        } else return 0;
                                    };
                                    var src = undefined;

                                    function play(time, loop) {
                                        if (that.muted) return;
                                        if (!self.loaded) {
                                            return;
                                        } //MAGIC: Fixes potential issues around sound in old browsers.
                                        src = {
                                            stop: function stop() {}
                                        };
                                        try {
                                            self.playing = true;
                                            src = context.createBufferSource();
                                            src.buffer = buffer;
                                            src.loop = loop || false;
                                            self.resetGain(); // Why? This is a problem if gain is deliberatly set and gets reset without dev control
                                            src.connect(gainNode);
                                            gainNode.connect(context.destination);
                                            src.start(context.currentTime + (time || 0));
                                        } catch (e) { //MAGIC: Fixes potential issues around sound in old browsers.
                                            //Do nothing here.
                                        }
                                        return src;
                                    }
                                    this.play = function(time, loop, force) {
                                        if (self.loaded) {
                                            if (singleton) {
                                                if (self.playing && !force) return;
                                            } else self.stop(0);
                                            play(time, loop);
                                        } else {
                                            if (singleton) {
                                                autostart = function autostart() {
                                                    var targetGain = self.currentGain();
                                                    self.play(time, loop);
                                                    self.setGain(targetGain);
                                                };
                                            }
                                        }
                                    };
                                    this.stop = function(time) {
                                        time = time || 0;
                                        if (src && self.playing) {
                                            try {
                                                src.stop(time);
                                            } catch (e) { //MAGIC: Fixes potentil issues around sound in old browsers.
                                                //Do nothing here.
                                            }
                                        }
                                        self.playing = false;
                                    };
                                    this.setMuted = function(state) {
                                        if (state) pause("mute");
                                        else resume("mute");
                                    };
                                    XS.on('blur', function(event) {
                                        var id = (event ? event.id : null) || "__default";
                                        pause(id);
                                    }, {
                                        freezeGroup: ENG_FRZ_GRP
                                    });
                                    XS.on('focus', function(event) {
                                        var id = (event ? event.id : null) || "__default";
                                        resume(id);
                                    }, {
                                        freezeGroup: ENG_FRZ_GRP
                                    });
                                    if (window.stage) { //Hack to handle iframe embeds, such as Facebook
                                        stage.on('down', function(event) {
                                            resume('window_focus');
                                        }, {
                                            freezeGroup: ENG_FRZ_GRP
                                        });
                                    }
                                }

                                function create(path, gain) {
                                    return cache[path] = new sound(path, gain);
                                }
                            }; // object
                        } // host if
                    }();
                    /**
                     * SoundPlayer instance to play sounds
                     * @memberof XS
                     */
                    XS.Sound = new SoundPlayer();
                    /**
                     * SoundPlayer instance to play music
                     * @memberof XS
                     */
                    XS.Music = new SoundPlayer(true);
                    XS.backgroundMusic = null;
                    XS.muteMusic = function(state) {
                        if (XS.soundSettings) {
                            XS.soundSettings.muteMusic.set(state);
                        }
                        updateMusicState(state);
                        XS.emit('mutemusic', state);
                    };
                    XS.muteSound = function(state) {
                        if (XS.soundSettings) {
                            XS.soundSettings.muteSound.set(state);
                        }
                        XS.Sound.setMuted(state);
                        XS.emit('mutesound', state);
                    };
                    XS.setBackgroundMusic = function(filename, vol) {
                        var gameMusic = null;
                        if (typeof filename == 'string') {
                            gameMusic = XS.Music.get(filename, vol || 1.0);
                        } else {
                            gameMusic = filename;
                            if (vol) gameMusic.setGain(vol);
                            else {
                                gameMusic.resetGain();
                            }
                        }
                        XS.backgroundMusic = gameMusic;
                        updateMusicState(XS.soundSettings.muteMusic.get());
                        return gameMusic;
                    }; // Initializes sound and music states right before game is called
                    XS.initSound = function() {
                        XS.soundSettings = {
                            legacyMuteSounds: Host.Preferences.QuickBool("sound.v1"),
                            legacyMuteMusic: Host.Preferences.QuickBool("music.v1"),
                            muteSound: Host.Preferences.QuickBool("xs.muteSound.v4"),
                            muteMusic: Host.Preferences.QuickBool("xs.muteMusic.v4"),
                            muteStateOverload: Host.Preferences.QuickBool("xs.muteStateOverload.v4")
                        }; // Music should be disabled by default on FB Rooms.
                        if (XS.is.facebookRooms && !XS.soundSettings.muteStateOverload.get()) {
                            XS.soundSettings.muteStateOverload.set(true);
                            XS.soundSettings.legacyMuteSounds.set(false);
                            XS.soundSettings.legacyMuteMusic.set(true);
                            XS.soundSettings.muteSound.set(false);
                            XS.soundSettings.muteMusic.set(true);
                        } //This disabels sounds per default in contexts where PWA is enabled. E.g. everything that is web based (excl Samsung Instant Play and snapchat)
                        if (XS.is.progressiveWebAppEnabled && !XS.soundSettings.muteStateOverload.get() && !XS.is.samsungInstantPlay && !XS.is.snapchat) {
                            XS.soundSettings.muteStateOverload.set(true);
                            XS.soundSettings.legacyMuteSounds.set(!XS.soundSettings.legacyMuteSounds.get());
                            XS.soundSettings.legacyMuteMusic.set(!XS.soundSettings.legacyMuteMusic.get());
                            XS.soundSettings.muteSound.set(!XS.soundSettings.muteSound.get());
                            XS.soundSettings.muteMusic.set(!XS.soundSettings.muteMusic.get());
                        }
                        if (XS.Music) updateMusicState(XS.soundSettings.muteMusic.get());
                        if (XS.Sound) XS.Sound.setMuted(XS.soundSettings.muteSound.get());
                    };
                }
                var globalMuteState;
                var soundMuteStateOld;
                var musicMuteStateOld;
                XS.muteAll = function() {
                    if (window.Host && window.Host.Sound) {
                        window.Host.Sound.MuteAll();
                    } else {
                        var _XS$soundSettings, _XS$soundSettings2;
                        if (globalMuteState) {
                            return;
                        }
                        globalMuteState = true;
                        soundMuteStateOld = (_XS$soundSettings = XS.soundSettings) == null ? void 0 : _XS$soundSettings.muteSound.get();
                        musicMuteStateOld = (_XS$soundSettings2 = XS.soundSettings) == null ? void 0 : _XS$soundSettings2.muteMusic.get();
                        if (XS.backgroundMusic) {
                            if (XS.backgroundMusic.__preMuteGain === undefined) {
                                XS.backgroundMusic.__preMuteGain = XS.backgroundMusic.currentGain();
                            }
                        }
                        XS.muteMusic(true);
                        XS.muteSound(true);
                    }
                };
                XS.unmuteAll = function() {
                    if (window.Host && window.Host.Sound) {
                        window.Host.Sound.UnmuteAll();
                    } else {
                        if (!globalMuteState) {
                            return;
                        }
                        globalMuteState = false;
                        XS.muteMusic(musicMuteStateOld);
                        XS.muteSound(soundMuteStateOld);
                        if (XS.backgroundMusic) {
                            if (XS.backgroundMusic.__preMuteGain !== undefined) {
                                XS.backgroundMusic.setGain(XS.backgroundMusic.__preMuteGain);
                                delete XS.backgroundMusic.__preMuteGain;
                            }
                        }
                    }
                };
                /*
                 * Utilities
                 */
                /**
                 * Load script by inserting async script node into DOM.<br>
                 * @param {string} path URL to script (relative or absolute)
                 * @param {Object} options Valid options are: options.charset
                 * @name loadScript
                 * @memberof XS
                 */
                XS.loadScript = function(path, options, cb) {
                    (function(d, s) {
                        var js, fjs = d.getElementsByTagName(s)[0];
                        options = options || {};
                        js = d.createElement(s);
                        js.src = path;
                        js.async = "async";
                        js.defer = "defer";
                        if (options.charset) {
                            js.charset = options.charset;
                        }
                        if (cb) {
                            js.onload = cb;
                        }
                        fjs.parentNode.insertBefore(js, fjs);
                    })(document, 'script');
                };
                /**
                 * Check if an SDK has properly loaded in to window
                 * @param {string} obj SDK Object name
                 * @param {function} callback callback function
                 * @name waitForSDK
                 * @memberof XS
                 */
                XS.waitForSDK = function(obj, callback) {
                    var checker = setInterval(function() {
                        if (window[obj]) {
                            clearInterval(checker);
                            return callback();
                        }
                    }, 100);
                };
                XS.util = {};
                /**
                 * Encodes a key=val pair for use in a URL
                 */
                XS.util.urlKeyVal = function(key, val) {
                    return encodeURIComponent(key) + "=" + encodeURIComponent(val);
                };
                /**
                 * Encodes object properties as a key=val&foo=bar url safe string
                 */
                XS.util.urlEncode = function(obj) {
                    var parts = [];
                    for (key in obj) {
                        parts.push(XS.util.urlKeyVal(key, obj[key]));
                    }
                    return parts.join('&');
                };
                /**
                 *
                 * @deprecated
                 * Remote configuration object.<br>Populated by load during load of game using XS.loadConfig().
                 * @memberof XS
                 */
                XS.remoteConfig = {};
                /**
                 * @deprecated Use XS.loadAndOverlapGameConfig
                 * Loads remote config for game.<br>Does not do anyhting if the games stage (in config.js) is set below "beta"
                 * @param {string} game The id of the game (e.g. rocketpope)
                 * @memberof XS
                 */
                var configLoaded = false;
                XS.loadConfig = function(game) {
                    if (configLoaded) return;
                    if (!XS.can.loadRemoteConfig()) return;
                    var targetConfig = Config.remoteConfigVersion;
                    targetConfig += ".instant"; // Hardcore anti caching variable here.
                    if (typeof Config != 'undefined' && Config.stage && Config.stage != 'live' && Config.stage != 'gold' && Config.stage != 'beta' && Config.stage != 'rc') { // Do nothing
                        Host.WrapperLog("Skipping ad config loading, because of Config.stage");
                        console.warn("Skipping ad config loading, because of Config.stage");
                    } else {
                        var url = XS.httpPrefix + 'cdn.frvr.com/config/' + game + '.' + targetConfig + '.json'; //?r=' + new Date().getTime()
                        Host.Tools.LoadJSON(url, function(json) {
                            Host.WrapperLog("Loading Config URL: " + url);
                            for (var x in json) {
                                XS.remoteConfig[x] = json[x];
                            }
                            XS.configLoadCallback();
                        }, function() { // On failure, retry in 60 seconds
                            Host.WrapperLog("Failed to load config: " + url);
                            setTimeout(function() {
                                XS.loadConfig(game);
                            }, 60000);
                        }); //url = 'https://crucible.frvr.com/v1/storage/game/GPTY856/gameConfig?r=' + new Date().getTime();
                        // url = 'https://crucible.frvr.com/v1/storage/game/GPTY856/gameConfig';
                        // Host.Tools.LoadJSON(url, function(json){
                        // 	Host.WrapperLog("Loading admin panel config URL: "+url)
                        // 	console.log("Admin Panel config:",json);
                        // 	XS.emit( 'adminPanelConfig', json );
                        // }, function(){
                        // 	console.log("Admin Panel config faild to load");
                        // 	XS.emit( 'adminPanelConfig', {} );
                        // })
                    }
                    Host.Log(XS.httpPrefix + 'cdn.frvr.com/config/' + game + '.' + targetConfig + '.json');
                    configLoaded = true;
                };
                /**
                 * Loads remote config for game and overlap local config with new data
                 * @param {string} gameRemoteId The id of the game (e.g. rocketpope)
                 * @memberof XS
                 */
                var isRemoteGameConfigLoaded = false;
                XS.loadAndOverlapGameConfig = /*#__PURE__*/ _asyncToGenerator( /*#__PURE__*/ regeneratorRuntime.mark(function _callee4() {
                    var REMOTE_CONFIG_ID, mergeConfigs, remoteConfig, url;
                    return regeneratorRuntime.wrap(function _callee4$(_context4) {
                        while (1) {
                            switch (_context4.prev = _context4.next) {
                                case 0:
                                    mergeConfigs = function _mergeConfigs(remoteConfigData) {
                                        var configData = JSON.parse(remoteConfigData.data);
                                        Config.deepMerge(configData);
                                    };
                                    REMOTE_CONFIG_ID = 'remoteConfig_' + Config.build;
                                    if (!isRemoteGameConfigLoaded) {
                                        _context4.next = 4;
                                        break;
                                    }
                                    return _context4.abrupt("return");
                                case 4:
                                    if (Config.gameId) {
                                        _context4.next = 7;
                                        break;
                                    }
                                    Host.WrapperLog("Failed to get remote config id");
                                    return _context4.abrupt("return");
                                case 7:
                                    if (XS.can.loadRemoteConfig()) {
                                        _context4.next = 9;
                                        break;
                                    }
                                    return _context4.abrupt("return");
                                case 9: // load remote config from localstorage to use it asap
                                    // if the there is updated version of remote config, it will be updated after request
                                    if (window.localStorage[REMOTE_CONFIG_ID]) {
                                        try {
                                            remoteConfig = JSON.parse(window.localStorage[REMOTE_CONFIG_ID]);
                                            mergeConfigs(remoteConfig);
                                        } catch (err) {
                                            console.warn('localstorage is not supported');
                                        }
                                    }
                                    url = 'https://crucible.frvr.com/v1/storage/game/' + Config.gameId + '/gameConfig';
                                    return _context4.abrupt("return", new Promise(function(resolve, reject) {
                                        Host.Tools.LoadJSON(url, resolve, reject);
                                    }).then(function(json) {
                                        Host.WrapperLog("Loading Game Remote Config URL: " + url);
                                        try {
                                            window.localStorage[REMOTE_CONFIG_ID] = JSON.stringify(json);
                                        } catch (err) {
                                            console.warn('localstorage is not supported');
                                        }
                                        mergeConfigs(json);
                                        isRemoteGameConfigLoaded = true;
                                        XS.emit('remoteConfigLoaded');
                                    }).catch(function(err) { // On failure, retry in 10 seconds
                                        Host.WrapperLog("Failed to load config: " + url);
                                        setTimeout(function() {
                                            XS.loadAndOverlapGameConfig();
                                        }, 30 * 1000);
                                    }));
                                case 12:
                                case "end":
                                    return _context4.stop();
                            }
                        }
                    }, _callee4);
                }));
                /**
                 * Navigates to a path with an optional target, much like window.open, but works in whatever context the game is running in.
                 * @memberof XS
                 * @param {string} path The URL to navigate to
                 * @param {string} target (Optional) The target of the link open (default is "_blank")
                 */
                XS.navigate = function(path, target) {
                    if (window.Host && window.Host.IOS && window.Host.IOS.OpenURL) {
                        Host.IOS.OpenURL(path);
                    }
                    if (window.Host && window.Host.Android && window.Host.Android.OpenURL) {
                        window.Host.Android.OpenURL(path);
                    } else if (XS.is.clay) {
                        window.open(path, target || "_blank");
                        if (navigator.app && navigator.app.loadUrl) {
                            navigator.app.loadUrl(path, {
                                openExternal: true
                            });
                        }
                    } else {
                        window.open(path, target || "_blank");
                    }
                }; // Shared clipping cache
                /**
                 * Utility methods for XS
                 * @namespace utils
                 * @memberof XS
                 */
                XS.utils = {};
                /**
                 * Opens current channel's app store
                 * @memberof XS.utils
                 */
                XS.utils.openChannelAppStore = function() {
                    if (XS.is.iOS) {
                        XS.navigate("https://apps.apple.com/app/id" + Config.iosAppId + "?mt=1", '_self');
                    } else if (XS.is.android) {
                        XS.navigate("https://play.google.com/store/apps/details?id=com.frvr." + Config.id, '_self');
                    } else {
                        XS.navigate("https://" + Config.id + ".frvr.com", '_self');
                    }
                };
                /**
                 * Asynchronously loads an image from a URL
                 * @param {string} path The URL (relative or absolute) for the image
                 * @memberof XS.utils
                 */
                XS.utils.asynchLoadImageFromPath = function(path) {
                    var img = PIXI.Sprite.fromImage(path);
                    lazyAttachEvents(img);
                    return img;
                };
                /**
                 * Compose typical 68x68 Sidebaresque button
                 * @param {ATLImage | POGImage} asset
                 * @param {string} label
                 * @return {Spritelike}
                 * @memberof XS.utils
                 */
                XS.utils.composeButton = function(asset, label) {
                    var BUTTON_HEIGHT = 68;
                    var LABEL_Y = 47;
                    var inner, label, button = new Container();
                    button.addChild(inner = new Sprite(asset));
                    button.addChild(label = new Text2(Host.Localize.Translate(label), {
                        fill: "#FFFFFF",
                        size: 26,
                        weight: 400
                    }));
                    label.y = LABEL_Y;
                    Object.defineProperty(button, 'anchor', {
                        get: function get() {
                            return {
                                set: function set(x, y) {
                                    inner.anchor.set(x, y * BUTTON_HEIGHT / LABEL_Y);
                                    label.anchor.set(x, y * LABEL_Y / (BUTTON_HEIGHT - LABEL_Y));
                                }
                            };
                        }
                    });
                    return button;
                };
                var ignoreMouseEvents = false;
                /************************
                            	       Touch Start
                            	************************/
                function touchstart_action(target, event, isMouseEvent) {
                    window.dirty = true;
                    target.emit('down', {
                        event: event,
                        isMouseEvent: isMouseEvent
                    });
                }

                function touchstart(event) {
                    if (!XS.is.chromeOSDevice) {
                        ignoreMouseEvents = true;
                        this.mousedown = undefined;
                    }
                    touchstart_action(this, event, false);
                }

                function mousedown(event) {
                    if (!ignoreMouseEvents) {
                        touchstart_action(this, event, true);
                    }
                }

                function enableTouchStart(target) {
                    target.interactive = true;
                    if (target.__touchStartEnabled) return;
                    target.__touchStartEnabled = true;
                    target.touchstart = touchstart;
                    target.mousedown = mousedown;
                }

                function enableRightDown(target) {
                    target.interactive = true;
                    if (target.__rightDownEnabled) return;
                    target.__rightDownEnabled = true;
                    target.rightdown = function(event) {
                        this.emit('rightdown', {
                            event: event,
                            isMouseEvent: true
                        });
                    };
                }

                function enableRightUp(target) {
                    target.interactive = true;
                    if (target.__rightUpEnabled) return;
                    target.__rightUpEnabled = true;
                    target.rightup = function(event) {
                        this.emit('rightup', {
                            event: event,
                            isMouseEvent: true
                        });
                    };
                }
                /************************
                            	       Touch End
                            	************************/
                function touchend_action(target, event, isMouseEvent) { //Stop being dirty when mouse / touch is down
                    window.dirty = false;
                    target.emit('up', {
                        event: event,
                        isMouseEvent: isMouseEvent
                    });
                }

                function touchend(event) {
                    if (!XS.is.chromeOSDevice) {
                        ignoreMouseEvents = true;
                        this.mouseup = undefined;
                    }
                    touchend_action(this, event, false);
                }

                function mouseup(event) {
                    if (!ignoreMouseEvents) {
                        touchend_action(this, event, true);
                    }
                }

                function enableTouchEnd(target) { //Make element interactive. Done before enabled check to ensure that interactive is triggered
                    target.interactive = true;
                    if (target.__touchEndEnabled) return;
                    target.__touchEndEnabled = true; //Overwrite start handlers to ensure events triggers;
                    target.mousedown = target.mousedown || function() {};
                    target.touchstart = target.touchstart || function() {};
                    target.touchendoutside = target.touchend = touchend;
                    target.mouseupoutside = target.mouseup = mouseup;
                }
                /************************
                            	       Touch Move
                            	************************/
                function touchmove_action(target, event, isMouseEvent) {
                    target.emit('move', {
                        event: event,
                        isMouseEvent: isMouseEvent
                    });
                }

                function touchmove(event) {
                    if (!XS.is.chromeOSDevice) {
                        ignoreMouseEvents = true;
                        this.mouseup = undefined;
                    }
                    touchmove_action(this, event, false);
                }

                function mousemove(event) {
                    if (!ignoreMouseEvents) {
                        touchmove_action(this, event, true);
                    }
                } // Memory singleton for action, touchmove and mus
                function enableTouchMove(target) {
                    target.interactive = true;
                    if (target.__touchMoveEneabled) return;
                    target.__touchMoveEneabled = true;
                    target.touchmove = touchmove;
                    target.mousemove = mousemove;
                }

                function lazyAttachEvents(target) {
                    target.on('eventAttached', function(data) {
                        switch (data.eventName) {
                            case "down": {
                                enableTouchStart(target);
                                break;
                            }
                            case "up": {
                                enableTouchEnd(target);
                                break;
                            }
                            case "move": {
                                enableTouchMove(target);
                                break;
                            }
                            case "rightdown": {
                                enableRightDown(target);
                                break;
                            }
                            case "rightup": {
                                enableRightUp(target);
                                break;
                            }
                        }
                    }, {
                        freezeGroup: ENG_FRZ_GRP
                    });
                }

                function cleanTextureLoadEvents(target) {
                    if (target) {
                        target.removeEventListener('load', handleTextureLoaderLoad);
                        target.removeEventListener('error', handleTextureLoaderError);
                    }
                }

                function handleTextureLoaderLoad(e) {
                    cleanTextureLoadEvents(e.target);
                    window.dirtyOnce = true;
                }

                function handleTextureLoaderError(e) {
                    cleanTextureLoadEvents(e.target);
                    window.dirtyOnce = true;
                    window.onerror && window.onerror("Failure to load generated asset image: " + this.path + " > " + e.message, e.sourceURL, e.line);
                }

                function setContainerPrototypes(container, isSprite) {
                    container.prototype.inside = function(event, x, y) {
                        return false;
                    };
                }
                /**
                 * This is useful for transforming sizes with toLocal/toGlobal
                 */
                Object.defineProperty(PIXI.DisplayObjectContainer.prototype, 'dimensions', {
                    get: function get() {
                        return new Point(this.width, this.height);
                    },
                    set: function set(p) {
                        this.width = p.x;
                        this.height = p.y;
                    }
                });
                PIXI.DisplayObjectContainer.prototype.applyResolutionRecursive = function() {
                    console.warn('OBSOLETE: Don\'t use applyResolutionRecursive()');
                };
                Object.defineProperty(PIXI.DisplayObjectContainer.prototype, 'resolution', {
                    get: function get() {
                        return this._resolution !== undefined ? this._resolution : 1;
                    },
                    set: function set(value) {
                        this._resolution = value;
                    }
                });
                Object.defineProperty(PIXI.Texture.prototype, 'resolution', {
                    get: function get() {
                        return this._resolution !== undefined ? this._resolution : 1;
                    },
                    set: function set(value) {
                        var changed = (this._resolution || 1) != value;
                        this._resolution = value;
                        if (changed && this.valid) this._updateUvs();
                    }
                });
                /**
                 * @class Container
                 */
                var Container = PIXI.DisplayObjectContainer.expand(function() {
                    PIXI.DisplayObjectContainer.call(this);
                    lazyAttachEvents(this);
                    return this;
                });
                setContainerPrototypes(Container);
                scope.Container = Container;
                /**
                 * ContainerFixedSize
                 * A container that always returns the fixed with and height it was given
                 * Actual with/height can still be found with getBounds
                 */
                var ContainerFixedSize = Container.expand(function(width, height) {
                    Container.call(this);
                    this._width = width || 0;
                    this._height = height || 0;
                    Object.defineProperty(this, 'width', {
                        get: function get() {
                            return this._width * this.scale.x;
                        },
                        set: function set(w) {
                            this._width = w / this.scale.x;
                        }
                    });
                    Object.defineProperty(this, 'height', {
                        get: function get() {
                            return this._height * this.scale.y;
                        },
                        set: function set(h) {
                            this._height = h / this.scale.y;
                        }
                    });
                    return this;
                });
                scope.ContainerFixedSize = ContainerFixedSize;
                /**
                 * Scale down SVG's before drawing them onto HTMLCanvasElement objects.
                 *
                 * Return a floating point number between 0 and 1.
                 *
                 * Consult Config.svgScaleMassaging to decide on the controlling
                 * parameter value.  If Config.svgScaleMassaging isn't set by the
                 * game, use the value 'true'.  A game can still "opt out" of this
                 * feature by explicitly setting the Config.svgScaleMassaging to
                 * "false".
                 *
                 * After the parameter is determined, proceed according to its
                 * value.  If it is:
                 *
                 * - The boolean 'true', then scale down any SVGs as little as
                 *   possible, just so that they fit into an canvas rectangle
                 *   dimensions window.ATLAS_SIZE.
                 *
                 * - An object {maxDim, factor} (where 'factor' is a number greater
                 *   than 1.1), then iteratively scale down SVGs by 'factor' until
                 *   the the largest of the SVG's dimensions is less than maxDim;
                 *
                 * - A number smaller than 1, scale down every SVG by that factor,
                 *   unless 'deviceSpecificResolution' is lower.  Make sure that the
                 *   SVG still fits into the canvas rectangle.
                 *
                 * - The boolean 'false' do nothing (return 1, don't scale).
                 *
                 * @param {Number} deviceSpecificResolution is the device-specific
                 * resolution multiplier known as 'rez'.
                 * @param {ATLImage} atlImage
                 * @return {Number} a scale
                 */
                function getAtlasMassagingScale(deviceSpecificResolution, atlImage) {
                    var smallestSide = Math.min(ATLUtil.ATLAS_SIZE.w, ATLUtil.ATLAS_SIZE.h) - 4;
                    var v = Config.svgScaleMassaging || ATLUtil.svgScaleMassaging;
                    if (v === undefined) v = true;
                    if (!v) return 1;
                    var upperBound = deviceSpecificResolution * Math.max(atlImage.width, atlImage.height);
                    if (v === true) return Math.min(1, smallestSide / upperBound);
                    if (!isNaN(v)) return Math.min(1, v / deviceSpecificResolution, smallestSide / upperBound);
                    var factor = v.factor;
                    if (factor < 1.1) return 1;
                    var limit = Math.min(v.maxDim || smallestSide, smallestSide);
                    var scale = 1;
                    while (upperBound > limit) {
                        scale /= factor;
                        upperBound /= factor;
                    }
                    return scale;
                }
                var ATLImage = function ATLImage(path, imageData) {
                    var probe = ATLImage.cache[path];
                    if (probe) {
                        return probe;
                    }
                    ATLImage.cache[path] = this;
                    this.imageData = imageData;
                    this.path = path;
                    this.renderer = ATLUtil.ATLImageRenderer.load(path, imageData);
                    this.drawScale = undefined;
                    this.isJSG = true;
                    this.isATL = true;
                    this.width = this.renderer.assetWidth;
                    this.height = this.renderer.assetHeight;
                    this.texture = undefined;
                };
                ATLImage.cache = {};
                ATLImage.prototype.toString = function() {
                    return "ATLImage(" + this.path + ", { width: " + this.width + ", height: " + this.height + " })";
                };
                ATLImage.prototype.ensureTexture = function() {
                    return this.texture || this.draw().texture;
                };
                /** Draw an ATLImage onto a HTMLCanvasElement object, which might
                 *  very well be a shared one.
                 *
                 *  If needed, make a new PIXI.Texture connected to a new PIXI.BaseTexture
                 *  connected to that drawing.  That PIXI.BaseTexture is scheduled
                 *  to be uploaded to the GPU. The ATLImage gains a 'texture' property.
                 *
                 *  If the ATLImage already had such a 'texture' property, just
                 *  update its parameters.  This is important since likely some
                 *  Sprite instances are already linked to this ATLImage -- maybe
                 *  even on the stage -- and we want them to reflect the new
                 *  drawings./
                 *
                 *  Emits the 'redrawn-image' event.
                 *
                 *  @param {object} options recognized:
                 *
                 *  - options.resolution: the 'rez' value to do the drawing at.  The
                 *    image's 'drawScale' is computed from this value together with
                 *    the "massaging" given by 'getAtlasMassagingScale'.
                 *
                 *  @returns {ATLImage} */
                ATLImage.prototype.draw = function(options) {
                    var drawScale = 1;
                    options = options || {};
                    if (!this.imageData.ignoreStageResolution) {
                        var rez = options.resolution || XS.baseResolution || 1;
                        drawScale = getAtlasMassagingScale(rez, this) * rez;
                    }
                    var width = Math.ceil(this.width * drawScale);
                    var height = Math.ceil(this.height * drawScale);
                    var fit = ATLUtil.getAtlasFit(width, height);
                    this.canvas = this.renderer.draw(fit.canvas, {
                        scale: drawScale,
                        offset: fit,
                        autoSizeCanvas: true
                    });
                    var frame = new Rectangle(fit.x / drawScale, fit.y / drawScale, width / drawScale, height / drawScale);
                    var btexture = this.canvas.__atlasBaseTexture || new PIXI.BaseTexture(this.canvas);
                    if (this.texture) { // We can't reassign 'this.texture', since existing Sprite
                        // instances may be pointing to it.  They need to use the new
                        // parameters.
                        this.texture.resolution = drawScale;
                        this.texture.baseTexture = btexture;
                        this.texture.setFrame(frame);
                    } else {
                        this.texture = new PIXI.Texture(btexture, frame, undefined, drawScale);
                    } // console.log('Draw', this.path, 'with frame', this.texture.frame, 'to',
                    //             this.canvas.id, '@', drawScale, options)
                    this.drawScale = drawScale;
                    this.emit('redrawn-image');
                    return this;
                };
                ATLImage.prototype.constructor = ATLImage;
                scope.ATLImage = ATLImage;
                /**
                 * Make a POGImage, a XS-able wrapper to HTMLImageElement.
                 *
                 * @param {string} path probably the mnemonic i/g/foo.svg
                 * @param {function} onload called when the image is actually loaded
                 * @param {string} url URL to file, or base64 URL in case of embedded assets
                 * @param {function} onerror called when image loading failed
                 * @param {object} imgAttributes extra props given to HTMLImageElement.
                 * */
                var POGImage = function POGImage(path, onload, url, onerror, imgAttributes) {
                    this.path = path;
                    this.isPOG = true;
                    this.texture = undefined;
                    var img = new Image();
                    img.path = path;
                    if (imgAttributes) {
                        for (var key in imgAttributes) {
                            if (imgAttributes.hasOwnProperty(key)) img[key] = imgAttributes[key];
                        }
                    }
                    var self = this;
                    img.onload = function() {
                        preloadCache[path] = self;
                        self.width = img.width;
                        self.height = img.height;
                        onload && onload(self);
                    };
                    img.onerror = onerror; //
                    // The legacy 'fst build' logic relies on having the
                    // image data be put into embeddedAssets by the build
                    // whereas the new 'fsx build' logic just passes that
                    // data as a parameter.
                    //
                    img.src = url || embeddedAssets[path];
                    self.img = img;
                };
                POGImage.prototype.toString = function() {
                    return "POGImage(" + this.path + ", { width: " + this.width + ", height: " + this.height + " })";
                };
                POGImage.prototype.ensureTexture = function() {
                    return this.texture || this.draw().texture;
                }; /** Like ATLImage.prototype.draw, but even simpler */
                POGImage.prototype.draw = function() {
                    if (!this.texture) {
                        this.texture = new PIXI.Texture(PIXI.Texture.fromCanvas(this.img), new Rectangle(0, 0, this.width, this.height));
                    }
                    this.emit('redrawn-image');
                    return this;
                };
                POGImage.prototype.constructor = POGImage;
                scope.POGImage = POGImage;
                /**************
                            		  Sprite
                            	**************/
                var dynamicSpriteCounter = 0;
                /** Helper for associating an image with a Sprite.  (Used to be
                 *  called "getScaled" if you're archeology).
                 *
                 *  Ensures that the 'image' argument has a 'texture' property which
                 *  is a PIXI.Texture and is shared by 'sprite' and, crucially, all
                 *  the other Sprite instances created with the same object as the
                 *  'image' argument.
                 *
                 *  Also note that this function does not need the 'image' and it's
                 *  'texture' are actually drawn onto a canvas: the links between
                 *  objects merely have to be setup correctly as explained above.
                 *
                 *  @param {ATLImage | POGImage | Canvas | PIXI.Texture} the image
                 *
                 */
                function __texhelper(image, sprite) { // "getScaled" in the old days
                    var texture;
                    if (image.isATL) {
                        image.fetched = true;
                        if ((!XS.initComplete || XS.bulkCreateSpritesON) && !image.texture) { // 'image' doesn't have a texture and we haven't finished
                            // loading.  So give the image an empty -- not dummy --
                            // texture.  The PIXI.BaseTexture involved can't be completely
                            // empty, though, as for some obscure reason (likely a PIXI
                            // bug), that will influence the bounds calculation. So we
                            // make a slightly more convolute PIXI.BaseTexture:
                            //
                            var mockBaseTexture = new PIXI.BaseTexture({
                                width: image.width,
                                height: image.height,
                                complete: true,
                                isMock: true
                            }); // The properties of image.texture (including a proper base
                            // texture) will be updated later when
                            // ATLImage.prototype.draw() is called on 'image'.  That will
                            // likely triggered by resizeTextureAtlases().
                            //
                            image.texture = new PIXI.Texture(mockBaseTexture);
                        } else image.ensureTexture();
                        texture = image.texture;
                    } else if (image.isPOG) {
                        texture = image.ensureTexture();
                    } else if (image.baseTexture) {
                        texture = image;
                    } else {
                        texture = PIXI.Texture.fromCanvas(image, undefined, 1);
                        image.texture = texture;
                    }
                    texture.floorCoordinates = sprite.floorCoordinates;
                    return texture;
                }
                /**
                 * @class Sprite and its 'image' property
                 */
                var Sprite = PIXI.Sprite.expand(function(image) {
                    if (!image) throw new Error('A Sprite needs an image');
                    this.image = image;
                    if (image.path === undefined) {
                        image.path = "DynamicSprite:" + dynamicSpriteCounter++;
                    }
                    this.texture = __texhelper(image, this);
                    PIXI.Sprite.call(this, this.texture);
                    lazyAttachEvents(this); // XS-183: Support some deprecated, legacy and questionable use of
                    // the Sprite constructor using scaling options.
                    if (arguments[2]) {
                        this.scale.set(arguments[1]);
                    }
                    return this;
                });
                Object.defineProperty(Sprite.prototype, 'image', {
                    get: function get() {
                        return this._image;
                    },
                    set: function set(img) {
                        if ( // JT@2021-10-29: XS-107: Why this silly condition
                            // you ask?  Because some games like Volleyball are keen to
                            // do 'mySprite.image = mySprite', and actually somehow rely
                            // on that.
                            img !== this) {
                            this.texture = __texhelper(img, this);
                        }
                        this._image = img;
                    }
                });
                Sprite.prototype.applyResolution = function() {
                    console.warn('OBSOLETE: Don\'t use applyResolution()');
                }; /** Helper for Sprite.prototype.width prop */
                function safeDim(sprite, dim) {
                    if (sprite.texture.baseTexture.hasLoaded || !sprite.texture.noFrame) {
                        return sprite.texture.frame[dim];
                    } else if (sprite !== sprite.image) {
                        return sprite.image[dim] || 1;
                    } else return 1;
                }
                /**
                 * FRVR Sprite.width
                 * This fixed untrustable width/height during the fraction of a second
                 * where the scaled texture made from the preloaded texture hasn't fired
                 * it's onload.
                 *
                 * Since we on longer change dimensions on (but rather resolution) when resizing
                 * we can trust image.width/.height of loaded images
                 *
                 * @property height
                 * @type Number
                 */
                Object.defineProperty(Sprite.prototype, 'width', {
                    get: function get() {
                        return this.scale.x * safeDim(this, 'width');
                    },
                    set: function set(value) {
                        this.scale.x = value / safeDim(this, 'width');
                        this._width = value;
                    }
                });
                /**
                 * FRVR Sprite.height
                 * This fixed untrustable width/height during the fraction of a second
                 * where the scaled texture made from the preloaded texture hasn't fired
                 * it's onload.
                 *
                 * Since we on longer change dimensions on (but rather resolution) when resizing
                 * we can trust image.width/.height of loaded images
                 *
                 * @property height
                 * @type Number
                 */
                Object.defineProperty(Sprite.prototype, 'height', {
                    get: function get() {
                        return this.scale.y * safeDim(this, 'height');
                    },
                    set: function set(value) {
                        this.scale.y = value / safeDim(this, 'height');
                        this._height = value;
                    }
                });
                Sprite.prototype.floorCoordinates = true;
                Sprite.prototype.cleanTextureCache = function(value) {};
                /**
                 * This will either:
                 *  - unload the texture used by this sprite
                 *  - remove it from the re-draw list of it's atlas. It will free it's space on atlas's next re-draw i.e.: calling 'XS.bulkSpriteLoad'. Note that explicitly calling redraw after deletion adds little, or even negative, benefit to performance hence why a redrawAtlases method isn't provided in the API.
                 *
                 * WARNING: This will make other Sprites using this texture/image fail.
                 */
                Sprite.prototype.destroyAssociatedTexture = function() {
                    if (this.image.isPOG) {
                        this.texture.destroy(true);
                        this._image.texture = undefined;
                    } else if (this.image.isATL) {
                        this._image.fetched = false;
                        this.texture.destroy();
                        this._image.texture = undefined;
                    } else {
                        this.texture.destroy(true);
                    }
                    this._image = undefined;
                };
                /**
                 * @param {Sheet} sheet the original sheet, obtained via 'new Sheet'
                 * @param {number | Rectangle} where says how to clip the sheet.
                 *
                 * If 'where' is an integer number, it is taken to reference the
                 * "whereth" frame in the array of frames in Sheet.  If it is a
                 * PIXI.Rectangle (or simply an object with 'x', 'y', 'width' and
                 * 'height') it clips the sheet using those coordinates.
                 *
                 * @returns {Sprite} */
                Sprite.fromSheet = function(sheet, where) { // JT@2021-09-15: This used to return a Sprite, but now returns a
                    // Sheet, which is a subclass of Sprite, so all good.
                    if (!sheet.frames || !sheet.frames[0]) {
                        throw new Error('Can\'t make Sprite from frameless Sheet');
                    }
                    var retval;
                    if (typeof where === 'object') { // assume it is a rectangle
                        retval = new Sheet(sheet.image);
                        retval.texture.setFrame(where);
                        retval.texture.resolution = sheet.image.drawScale || 1;
                    } else {
                        retval = new Sheet(sheet.image, sheet.frames[0].width, sheet.frames[0].height);
                        retval.setFrame(where);
                    }
                    return retval;
                }; //Create global reference for async loaded js code.
                setContainerPrototypes(Sprite);
                scope.Sprite = Sprite;
                /**
                 * @class Sheet
                 * @param {number} perFrameWidth is optional, defaults to image.width
                 * @param {number} perFrameHeight is optional, defaults to image.height
                 */
                var Sheet = Sprite.expand(function(image, perFrameWidth, perFrameHeight) {
                    Sprite.call(this, image);
                    this._width = perFrameWidth || this.texture.width;
                    this._height = perFrameHeight || this.texture.height;

                    function computeFrames(sheet) {
                        var nColumns = sheet.image.texture.width / sheet._width >> 0;
                        var nRows = sheet.image.texture.height / sheet._height >> 0;
                        var length = nColumns * nRows;
                        sheet.frames = [];
                        if (!length) return;
                        for (var a = 0; a < length; a++) {
                            var fx = a % nColumns >> 0;
                            var fy = a / nColumns >> 0;
                            var frame = {
                                x: fx * sheet._width,
                                y: fy * sheet._height,
                                width: sheet._width,
                                height: sheet._height
                            };
                            sheet.frames.push(frame);
                        } // Yes, 'sheet.texture' already existed by virtue of Sheet being
                        // a Sprite: that texture is shared with the image's. But we
                        // need a new one, a clone, so that we can change the apperance
                        // of a single Sheet object without affecting all the other
                        // Sheet objects of the same image.
                        sheet.texture = new PIXI.Texture(image.texture.baseTexture, image.texture.frame, undefined, image.drawScale);
                        sheet.setFrame(sheet._frame || 0, true);
                    }
                    var sheet = this;
                    computeFrames(sheet);
                    this.image.on('redrawn-image', function() {
                        computeFrames(sheet);
                    });
                });
                Object.defineProperty(Sheet.prototype, 'width', {
                    get: function get() {
                        return this._width * this.scale.x;
                    },
                    set: function set(w) {
                        this.scale.x = w / this._width;
                    }
                });
                Object.defineProperty(Sheet.prototype, 'height', {
                    get: function get() {
                        return this._height * this.scale.y;
                    },
                    set: function set(h) {
                        this.scale.y = h / this._height;
                    }
                });
                Sheet.prototype.setFrame = function(frameIdx, force) {
                    if (this.frames.length == 0) return this._frame = frameIdx;
                    if (frameIdx === this._frame && !force) return; // Need to ensure this.texture.resolution matches the
                    // this.image.drawScale, because this.texture is usually a
                    // "clone", different from this.image.texture.  That means it
                    // escapes resizeTextureAtlases() normal texture redrawing logic
                    // (which will calculate this.image.drawScale correctly for us).
                    this.texture.resolution = this.image.drawScale || 1;
                    var rect = this.clippingRectangleFor(frameIdx);
                    this.texture.setFrame(rect);
                    this._frame = frameIdx;
                    window.dirtyOnce = true;
                };
                Sheet.prototype.clippingRectangleFor = function(frameIdx) {
                    frameIdx = Math.floor(frameIdx) % this.frames.length;
                    var f = this.frames[frameIdx];
                    var bf = this.image.texture.frame; // JT@2021-10-19: bf == base frame in the atlas
                    if (bf) {
                        return new Rectangle(f.x + bf.x, f.y + bf.y, f.width, f.height);
                    } else if (f) {
                        return new Rectangle(f.x, f.y, f.width, f.height);
                    }
                };
                Sheet.prototype._frame = 0;
                Object.defineProperty(Sheet.prototype, 'frame', {
                    get: function get() {
                        return this._frame;
                    },
                    set: function set(value) {
                        this.setFrame(value);
                    }
                });
                scope.Sheet = Sheet;
                /**
                 * @class TextureSprite
                 * @ignore
                 */
                var TextureSprite = PIXI.Sprite.expand(function(texture) {
                    PIXI.Sprite.call(this, texture);
                });
                var original_renderWebGL = TextureSprite.prototype._renderWebGL;
                TextureSprite.prototype._renderWebGL = function(renderSession) {
                    if (this._dirtyTexture) {
                        this._dirtyTexture = false;
                        PIXI.updateWebGLTexture(this.texture.baseTexture, renderSession.gl);
                    }
                    original_renderWebGL.call(this, renderSession);
                };
                scope.TextureSprite = TextureSprite;
                XS.reportTextures = function() {
                    console.log("Total Texture Pixels:", PIXI.__totalPixels);
                };
                var cached_texts = {};
                var cachedFontObjects = [];
                /**
                 * @class Text2
                 */
                scope.Text2 = PIXI.Sprite.expand(function(text, config) {
                    var self = this; // Games may pass Host.Localize.LocalizedString, others just pass
                    // a string.
                    var ltext = Host.Localize.Translate(text); //Set defaults
                    config = config || {};
                    config.weight = config.weight || "300";
                    config.size = config.size || 30;
                    config.fill = config.fill || "#000000";
                    var content;
                    var oldPath;
                    var scaleSubtractor = 0;
                    var ratio = 1;

                    function refreshTextNode() {
                        var path = ltext.toString() + ":" + config.size * ratio + ":" + scaleSubtractor + ":" + JSON.stringify(config);
                        if (path === oldPath && content && content.canvas) {
                            return;
                        } //Clean up cache
                        if (!self.__wasGarbageCollected) {
                            self.__recycle();
                        }
                        self.__wasGarbageCollected = false;
                        var node = cached_texts[path]; //Create new node if node does not exit.
                        if (!node) {
                            var textNode = cachedFontObjects.pop();
                            var clone = textNode ? textNode.style : {};
                            for (var x in config) {
                                clone[x] = config[x];
                            } //Tweak dropshadow based on ratio
                            if (config.dropShadow) {
                                clone.dropShadowDistance = (config.dropShadowDistance || 6) * ratio;
                            } else {
                                clone.dropShadowDistance = 0;
                                clone.dropShadow = undefined;
                            } //Ensures that font size is never 0
                            var fontSize = Math.max((config.size - scaleSubtractor) * ratio, .1); //Set font cache
                            clone._font = (config.italic ? "italic " : "") + config.weight + ' ' + fontSize + 'px ' + (config.font || '"Helvetica Neue","Trebuchet MS", Helvetica, sans-serif'); //if(!textNode) console.log("Creating text node", text)
                            node = cached_texts[path] = {
                                text: textNode || new PIXI.Text(ltext.toString(), clone),
                                localizedString: ltext,
                                count: 0,
                                ratio: ratio
                            };
                            if (textNode) {
                                textNode.setText(ltext.toString());
                            }
                        } //Increase referances to object
                        node.count++; //Set internal old path.
                        oldPath = path; //Refresh text
                        node.text.updateText();
                        content = node.text;
                        self.setTexture(content.texture);
                        window.dirtyOnce = true;
                    }
                    self.getContent = function() {
                        refreshTextNode();
                        return content;
                    }; // This is only in case you allocate a huge amount of sprites and remove all of them,
                    // so we don't keep thousands of unused canvases in the pool using our precious memory
                    var TEXT_CANVAS_POOL_SIZE = 1000;
                    self.__recycle = function() {
                        var node = cached_texts[oldPath];
                        if (node && --node.count === 0) {
                            delete cached_texts[oldPath]; // When we have dev-tools open in Safari, it keeps a record of every canvas created
                            // even after they are destroyed, which causes another kind of memory leak.
                            // To mitigate that, we set the canvas size to zero to clear the buffer
                            // source: https://stackoverflow.com/a/58442415/5156597
                            content.canvas.width = 0;
                            content.canvas.height = 0;
                            if (cachedFontObjects.length < TEXT_CANVAS_POOL_SIZE) {
                                cachedFontObjects.push(content);
                            } else {
                                content.destroy();
                            }
                        }
                        content = undefined;
                    };
                    PIXI.Sprite.call(self, Texture.emptyTexture);
                    self.setText = function(newtext) {
                        if (newtext === undefined || newtext === null) {
                            newtext = "";
                        }
                        if (ltext.toString() !== newtext.toString()) {
                            ltext = Host.Localize.Translate(newtext);
                            refreshFont();
                        }
                    };

                    function refreshFont() { //return // Find solution for this as part of POTATO-PERFORMANCE
                        scaleSubtractor = 0; {
                            refreshTextNode();
                            if (config.maxWidth) {
                                var _ratio = 1; // BRIAN-TODO: Use built in maxWidth for ctx.fillText to let canvas do some of the heavy lifting - possibly all of it
                                // BRIAN-TODO: Use built in ctx.measureText (check compatibility) or the 'visibility: none' div trick to avoid drawing and reallocating these texture N times
                                while (content.texture.frame.width > config.maxWidth * _ratio && config.size - scaleSubtractor > 1) {
                                    scaleSubtractor += 2;
                                    if (config.size - scaleSubtractor < 1) {
                                        scaleSubtractor = config.size - 1;
                                    }
                                    refreshTextNode();
                                }
                            }
                        }
                    }
                    self.onLanguageChange = function() {
                        refreshFont();
                    };
                    self.updateStyle = function(style) {
                        var dirty = false;
                        for (var x in style) {
                            if (config[x] != style[x]) {
                                dirty = true;
                                config[x] = style[x];
                            }
                        }
                        if (dirty) {
                            refreshFont();
                        }
                    };
                    self.setStyle = self.updateStyle;
                    refreshTextNode();
                    refreshFont();
                });
                /**
                 * This overrides PIXI.Sprite `stage` property
                 * If for some reason you need to define a custom behavior in the base class,
                 * you will have to change the calls to `this.__stage` to something like:
                 *
                 *	const stage = Object.getOwnPropertyDescriptor(PIXI.Sprite.prototype, 'stage')
                 *	stage.get.call(this)
                 *	stage.set.call(this, value)
                 */
                Object.defineProperty(scope.Text2.prototype, 'stage', {
                    get: function get() {
                        return this.__stage;
                    },
                    set: function set(value) {
                        if (value) {
                            if (this.__needsRefresh) {
                                this.getContent();
                                this.__needsRefresh = false;
                            }
                        } else if (this.__stage) {
                            this.__recycle();
                            this.__needsRefresh = true;
                            this.__wasGarbageCollected = true;
                        }
                        this.__stage = value;
                    }
                });
                /**
                 * @class Graphics
                 */
                scope.Graphics = PIXI.Graphics.expand(function() {
                    lazyAttachEvents(this);
                    PIXI.Graphics.call(this);
                    return this;
                });
                /**
                 * @class Rectangle
                 */
                scope.Rectangle = PIXI.Rectangle;
                scope.Rectangle.prototype.getPosition = function() {
                    return new Point(this.x, this.y);
                };
                scope.Rectangle.prototype.getSize = function() {
                    return new Point(this.width, this.height);
                };
                /**
                 * @class Texture
                 */
                var oldPTfC = PIXI.Texture.fromCanvas; // See XS-20 and XS-17
                PIXI.Texture.fromCanvas = function(thing) {
                    if (thing.isPOG) arguments[0] = thing.img;
                    return oldPTfC.apply(this, arguments);
                };
                scope.Texture = PIXI.Texture;
                /**
                 * @class RenderTexture
                 */
                scope.RenderTexture = PIXI.RenderTexture;
                /**
                 * @class Point
                 */
                scope.Point = PIXI.Point;
                /**
                 * @class BlendModes
                 */
                scope.BlendModes = PIXI.blendModes;
                var TICK_RATE = 1000 / 60;
                var CATCHUP_RATE = TICK_RATE * 1.7;
                var FORCE_CATCHUP_RATE = TICK_RATE * 3.1;
                /**
                 * @class Timeout
                 * @desc Creates a timeout handler (can also represent an interval if it is repeated)
                 * @param {Function} cb Function to call at end of timeout or interval loop
                 * @param {number} delaySec Delay in seconds before the function is called, and in case of an interval, before the timeout restarts
                 * @param {boolean} repeats Whether this timeout repeats, i.e. is an interval
                 * @param {object[]} cbParams Function parameters to be passed in on function call
                 * @param {string[]} grpNames Group names this timeout makes part of
                 */
                function Timeout(cb, delaySec, repeats, cbParams, grpNames) {
                    if (!(cb instanceof Function)) {
                        throw "timeout callback must be a function";
                    }
                    delaySec = delaySec || 0;
                    repeats = repeats || false;
                    cbParams = cbParams && cbParams.constructor === Array ? cbParams : [];
                    if (grpNames && grpNames.constructor === Array) {
                        if (grpNames.length == 0) {
                            grpNames = [FreezeGroup.DEF_GRP_NAME];
                        }
                    } else if (grpNames && typeof grpNames === "string") {
                        grpNames = [grpNames];
                    } else {
                        grpNames = [FreezeGroup.DEF_GRP_NAME];
                    }
                    this.cb = cb;
                    this.cbParams = cbParams;
                    this.delayMS = delaySec * 1000;
                    this.originalDelayMS = this.delayMS;
                    this.repeats = repeats;
                    this.id = FreezeGroup.nextHandlerId++;
                    this.frc = 0;
                    Timeout.timeouts[this.id] = this;
                    FreezeGroup.addHandler(this, grpNames);
                }
                /**
                 * Timeouts container: timeouts are added to and removed from here
                 * @memberof Timeout
                 * @ignore
                 */
                Timeout.timeouts = {};
                /**
                 * Clears a timeout by its id
                 * @param {number} id Id of timeout (or interval) to clear
                 * @memberof Timeout
                 */
                Timeout.clear = function(id) {
                    var idIsValidInteger = typeof id === 'number' && isFinite(id) && Math.round(id) === id;
                    if (!idIsValidInteger) {
                        return;
                    }
                    var timeout = null;
                    if (id in Timeout.timeouts) {
                        timeout = Timeout.timeouts[id];
                        delete Timeout.timeouts[id];
                        FreezeGroup.removeHandler(timeout);
                    }
                };
                /**
                 * Ticks all unfrozen timeouts
                 * @memberof Timeout
                 * @ignore
                 */
                Timeout.tick = function(delta) { // Tick all active timeouts
                    var completedIds = [];
                    for (var id in Timeout.timeouts) {
                        var timeout = Timeout.timeouts[id];
                        if (timeout.frc > 0) {
                            continue;
                        } else {
                            if (timeout.tick(delta)) {
                                completedIds.push(id);
                            }
                        }
                    } // Remove any completed timeouts
                    for (var i = 0; i < completedIds.length; i++) {
                        var id = completedIds[i];
                        var timeout = Timeout.timeouts[id];
                        if (timeout) {
                            if (!timeout.repeats) {
                                Timeout.clear(parseInt(id));
                            } // Move callback outside clear to ensure clear still happens on error
                            if (timeout.cb !== undefined) {
                                try {
                                    timeout.cb.apply(window, timeout.cbParams);
                                } catch (e) {
                                    window.onerror && window.onerror("Timeout.tick error: " + e.message, e.sourceURL, e.line, undefined, e);
                                }
                            }
                        }
                    }
                }; //XS.on('tick', Timeout.tick, { freezeGroup: ENG_FRZ_GRP })
                /**
                 * Ticks a timeout
                 * @memberof Timeout
                 * @ignore
                 */
                Timeout.prototype.tick = function(delta) {
                    this.delayMS -= delta;
                    if (this.delayMS <= 0) {
                        if (this.repeats) {
                            this.delayMS = this.originalDelayMS + this.delayMS;
                        }
                        return true;
                    }
                    return false;
                };
                Timeout.prototype.constructor = Timeout;
                /**
                 * Timeout/Interval API
                 */
                /**
                 * Creates a timeout
                 * @param {Function} cb Function to call at end of timeout
                 * @param {number} delayMS Delay in milliseconds before function is called
                 * @param {object[]} cbParams Function parameters to be passed in on function call
                 * @param {string[]} grpNames Group names this timeout makes part of
                 * @memberof XS
                 */
                XS.setTimeout = function(cb, delayMS, cbParams, grpNames) {
                    var timeout = new Timeout(cb, delayMS / 1000, false, cbParams, grpNames);
                    return timeout.id;
                };
                /**
                 * Clears a timeout
                 * @param {number} id Id of timeout to clear
                 * @memberof XS
                 */
                XS.clearTimeout = function(id) {
                    Timeout.clear(id);
                };
                /**
                 * Creates a interval
                 * @param {Function} cb Function to call at every interval loop
                 * @param {number} delayMS Delay in milliseconds before function is called and interval restarts
                 * @param {object[]} cbParams Function parameters to be passed in on function call
                 * @param {string[]} grpNames Group names this interval makes part of
                 * @memberof XS
                 */
                XS.setInterval = function(cb, delayMS, cbParams, grpNames) {
                    var interval = new Timeout(cb, delayMS / 1000, true, cbParams, grpNames);
                    return interval.id;
                };
                /**
                 * Clears an interval
                 * @param {number} id Id of interval to clear
                 * @memberof XS
                 */
                XS.clearInterval = function(id) {
                    Timeout.clear(id);
                };
                /**
                 * @class Tween
                 */
                var Tween = function Tween(target, args, time, method, grpNames) {
                    time = time == undefined ? 1 : time;
                    if (Tween.multiplier != 1) {
                        time *= Tween.multiplier;
                    }
                    this.id = FreezeGroup.nextHandlerId++;
                    this.frc = 0;
                    this.tweenedProps = {};
                    this.offset = 1;
                    this.method = method || Tween.easeout;
                    this.length = time * 1000 / TICK_RATE;
                    this.target = target;
                    for (var x in args) {
                        this.tweenedProps[x] = {
                            start: target[x],
                            end: args[x]
                        };
                    }
                    Tween.tweens[this.id] = this;
                    if (grpNames && grpNames.constructor === Array) {
                        if (grpNames.length == 0) {
                            grpNames = [FreezeGroup.DEF_GRP_NAME];
                        }
                    } else if (grpNames && typeof grpNames === "string") {
                        grpNames = [grpNames];
                    } else {
                        grpNames = [FreezeGroup.DEF_GRP_NAME];
                    }
                    FreezeGroup.addHandler(this, grpNames);
                };
                Tween.multiplier = 1;
                Tween.nextId = 1;
                /**
                 * Sets a callback to be called when the Tween completes.
                 * @name call
                 * @memberof Tween
                 * @param {Function} Callback function to be triggered
                 * @param {Object} Parameters to be passed to callback function
                 * @returns {Tween} The tween object itself (for chaining)
                 * @example
                 * var t = new Tween( obj, {x:100}, 1.0 ).call( function(args) { console.log( "Tween Done!",args.name); }, { name: 'Tween 1' });
                 */
                Tween.prototype.call = function(callback, callbackParams) {
                    this.callback = callback;
                    this.callbackParams = callbackParams;
                    return this;
                };
                /**
                 * Delays the tween by {time} seconds
                 * @name wait
                 * @memberof Tween
                 * @param {float} time Time in seconds
                 * @returns {Tween} the tween object itself (for chaining)
                 * @example new Tween(obj,{x:100}, 1).wait(10) // Waits 10 seconds, then tweens obj.x to 100 in 1 second
                 */
                Tween.prototype.wait = function(time) {
                    this.delay = (time || 0) * 1000 / TICK_RATE;
                    return this;
                };
                /**
                 * @ignore
                 */
                Tween.prototype.tick = function(delta) {
                    if (!delta) { // console.warn("Got invalied tween count", delta)
                        delta = 1;
                    }
                    if (this.delay > 0) {
                        this.delay -= delta;
                        if (this.delay >= 1) {
                            return false;
                        }
                    }
                    this.offset += delta;
                    if (this.offset > this.length) {
                        this.offset = this.length;
                    } // TODO: Verify further that this next line is indeed no longer relevant
                    //this.target.dirty = true;
                    for (var x in this.tweenedProps) {
                        var tween = this.tweenedProps[x];
                        this.target[x] = this.method(tween.start, tween.end instanceof Function ? tween.end() : tween.end, this.offset / this.length);
                    }
                    if (this.offset >= this.length) {
                        return true;
                    }
                };
                /**
                 * @ignore
                 */
                Tween.prototype.__complete = function() {
                    for (var x in this.tweenedProps) {
                        this.target[x] = this.tweenedProps[x].end instanceof Function ? this.tweenedProps[x].end() : this.tweenedProps[x].end;
                    }
                    if (this.callback) {
                        var that = this; //Bug introduced here!?
                        if (that.callback) {
                            XS.once('animate', function() {
                                that.callback.apply(that.target, that.callbackParams || null);
                            }, {
                                freezeGroup: ENG_FRZ_GRP
                            });
                        }
                    }
                };
                /**
                 * Force the tween to complete (move to end position and end tween)
                 * @name complete
                 * @memberof Tween
                 */
                Tween.prototype.complete = function() {
                    Tween.complete(this);
                };
                /**
                 * Remove the tween and do not trigger any completion callbacks
                 * @name clear
                 * @memberof Tween
                 */
                Tween.prototype.clear = function() {
                    Tween.clear(this);
                };
                Tween.tweens = {};
                /**
                 * Linear tweening function.<br>Use as "method" argument in new Tween.
                 * @name linear
                 * @memberof Tween
                 */
                Tween.linear = Tween.linary = function(start, end, offset) {
                    return start + (end - start) * offset;
                };
                /**
                 * Ease In tweening function.<br>Use as "method" argument in new Tween.
                 * @name easein
                 * @memberof Tween
                 */
                Tween.easein = function(start, end, offset) {
                    var r = 1 - Math.sin(offset * Math.PI / 2 + Math.PI / 2);
                    return start + (end - start) * r;
                };
                /**
                 * Ease Out tweening function.<br>Use as "method" argument in new Tween.
                 * @name easeout
                 * @memberof Tween
                 */
                Tween.easeout = function(start, end, offset) {
                    var r = Math.sin(offset * Math.PI / 2);
                    return start + (end - start) * r;
                };
                /**
                 * Ease In/Out tweening function.<br>Use as "method" argument in new Tween.
                 * @name easeinout
                 * @memberof Tween
                 */
                Tween.easeinout = function(start, end, offset) {
                    var r = (Math.sin(offset * Math.PI - Math.PI / 2) + 1) / 2;
                    return start + (end - start) * r;
                };
                /**
                 * Bounce tweening function.<br>Use as "method" argument in new Tween.
                 * @name bounce
                 * @memberof Tween
                 */
                Tween.bounce = function(start, end, offset) {
                    var r = Math.sin(offset * Math.PI);
                    return start + (end - start) * r;
                };
                Tween.tick = function(delta) { // Tick all active tweens
                    var completedIds = [];
                    for (var id in Tween.tweens) {
                        var tween = Tween.tweens[id];
                        if (tween.frc > 0) {
                            continue; // skip
                        } else {
                            if (tween.tick(delta)) {
                                completedIds.push(id);
                            }
                        }
                    } // Remove any completed tweens
                    for (var i = 0; i < completedIds.length; i++) {
                        var id = completedIds[i];
                        if (!(id in Tween.tweens)) {
                            continue; // skip
                        }
                        var tween = Tween.tweens[id];
                        window.dirtyOnce = true;
                        delete Tween.tweens[id];
                        FreezeGroup.removeHandler(tween);
                        tween.__complete();
                    }
                }; //XS.on('animate', Tween.tick, { freezeGroup: ENG_FRZ_GRP })
                Tween.complete = function() {
                    for (var b = 0; b < arguments.length; b++) {
                        var target = arguments[b];
                        for (var tweenId in Tween.tweens) {
                            if (!(tweenId in Tween.tweens)) {
                                continue; // skip
                            }
                            var tween = Tween.tweens[tweenId];
                            if (tween.target == target || tween == target) {
                                window.dirtyOnce = true;
                                delete Tween.tweens[tween.id];
                                FreezeGroup.removeHandler(tween); //Complete is executed after removal to ensure order of exection
                                tween.__complete();
                            }
                        }
                    }
                };
                Tween.clear = function() {
                    for (var b = 0; b < arguments.length; b++) {
                        var target = arguments[b];
                        for (var tweenId in Tween.tweens) {
                            if (!(tweenId in Tween.tweens)) {
                                continue; // skip
                            }
                            var tween = Tween.tweens[tweenId];
                            if (tween.target == target || tween == target) {
                                tween.callback = undefined;
                                delete Tween.tweens[tween.id];
                                FreezeGroup.removeHandler(tween);
                            }
                        }
                    }
                };
                Tween.activeTweensCount = function() {
                    var count = 0;
                    for (var id in Tween.tweens) {
                        var tween = Tween.tweens[id];
                        if (tween.frc > 0) {
                            continue;
                        } else {
                            count++;
                        }
                    }
                    return count;
                };
                scope.Tween = Tween; /** An Canvas object marking a load failure */
                var emptyImage = ATLUtil.getNewCanvasObject();
                emptyImage.height = emptyImage.width = 1;
                emptyImage.path = "Image wrapper for load failure"; /** Mapping of mnemonic asset paths to Image or Canvas objects */
                var preloadCache = {};
                /** Mapping of mnemonic asset paths to ATL wrapper objects.
                 *
                 *  POG's are _not_ cached here. */
                var fetchCache = {}; /** Save the built-in window.fetch() since we're going to override it soon */
                var coreFetch = scope.fetch;
                /** Helper for game-time window.embed().  Looks up {@link preloadCache}.
                 *
                 *  If nothing found there, calls native fetch {@link corefetch}.
                 *
                 *  @return {Image|Canvas|Promise} */
                function embedInner(path) {
                    if (!path) {
                        console.warn("You tried to load an image with an empty path");
                        return emptyImage;
                    }
                    if (preloadCache[path] === undefined) {
                        if (coreFetch) {
                            if (typeof path === 'string') console.info('"%s" not found in preloadCache. Calling native fetch().', path);
                            return coreFetch.apply(this, arguments);
                        } else {
                            if (typeof path === 'string') {
                                console.error('You can only use the embed method in conjuction with preload for > "%s"', path);
                            } else {
                                console.error('Native fetch() missing:', arguments);
                            }
                        }
                    }
                    return preloadCache[path];
                }
                /** Game-time embed() calls (i.e. NOT the kind embed ('literal.png')
                 * end up here.  They request an asset that was either previously
                 * placed in preloadCache() or is to be fetch()'ed from the network
                 * (fetch() as in normal sane window.fetch().
                 *
                 * Returns an HTMLImageElement, not a POGImage.
                 *
                 * Don't use this, ever.
                 * */
                scope.embed = function(path) {
                    return embedInner(path).img;
                };
                var before = new Date().getTime();
                /** Indicate to rendering engine that the visual state is dirty and
                 *  that the frame needs to be redrawn.<br> Setting this to true
                 *  will force every frame to be redrawn, regardless of whether the
                 *  scene has changed.<br> Tween and others uses this internally.
                 *
                 *  @name window.dirty
                 */
                window.dirty = false;
                /** Indicate to rendering engine that the visual state is dirty and
                 *  that the frame needs to be redrawn.<br> Will clear automatically,
                 *  once the engine has redrawn the frame.
                 *
                 *  @name window.dirtyOnce
                 */
                window.dirtyOnce = false;
                var before_tween = new Date().getTime();

                function animate() {
                    var current = new Date().getTime();
                    if (XS.clampTickToAnimate) {
                        current = before + TICK_RATE;
                    }
                    if (isGlobalFrozen()) {
                        before = current;
                        requestAnimationFrame(animate);
                        return;
                    } //30 ticks skipped and we jump
                    if (current - before > 5000) {
                        before = current - TICK_RATE;
                    } //Then anything else
                    if (current - before >= TICK_RATE) {
                        XS.emit('animate');
                        before += TICK_RATE; //Moved inside tick handler, to ensure we only run this if a tick happens. This makes Android phones less warm.
                        //Timer first to match previous tick based behavior
                        Timeout.tick(current - before_tween); //Then Tweens
                        Tween.tick((current - before_tween) / TICK_RATE);
                        before_tween = current;
                        XS.emit('tick'); //This little bit of magic adjuts out of synch VSYNCH rate
                        if (current - before > CATCHUP_RATE) {
                            before += TICK_RATE;
                            XS.emit('tick'); //console.log("Catchup")
                            while (current - before > FORCE_CATCHUP_RATE) { //console.log("Force Catchup")
                                before += TICK_RATE;
                                XS.emit('tick');
                            }
                        }
                        if (XS.dirty || window.dirty || window.dirtyOnce || Tween.activeTweensCount() !== 0) {
                            XS.emit('render');
                            window.dirtyOnce = false;
                            XS.renderer.render(XS.stageContainer);
                            XS.emit('afterRender'); // used on qa-tool
                        }
                    }
                    requestAnimationFrame(animate);
                }
                /**
                 * @desc Rendering interface - currently using PIXI, but this will probably change. Should not be used directly, unless you're working on the XS engine.
                 * @name renderer
                 * @memberof XS
                 */
                XS.renderer = null;
                /**
                 * @desc Sets the renderer type and initiates the rendering/animate loop
                 *
                 */
                XS.initRenderer = function() {
                    var aliasing = window.__antialias; //XS.is.mobile&&!XS.is.iOS?false:true
                    //Force canvas for all games where android < 5
                    var isProblematicAndroid = XS.is.android && XS.is.androidVersion < 5 && !XS.is.firefoxMobile;
                    var disableWebGLFromURL = Host.Web.GetQueryString("disableWebGL") === "1";
                    var disableWebGL = disableWebGLFromURL || isProblematicAndroid || Config.disableWebGL || XS.is.badWebkit && Config.disableWebGLonBadWebkit;
                    if (disableWebGL) {
                        XS.renderer = new PIXI.CanvasRenderer(width, height, {
                            view: XS.canvas,
                            antialiasing: false,
                            antialias: false,
                            transparent: false,
                            clearBeforeRender: true
                        });
                    } else {
                        XS.renderer = PIXI.autoDetectRenderer(width, height, {
                            view: XS.canvas,
                            antialiasing: aliasing,
                            antialias: aliasing,
                            transparent: false,
                            clearBeforeRender: true
                        });
                    }
                    XS.is.usingCanvasRenderer = XS.renderer.type === PIXI.CANVAS_RENDERER;
                    XS.is.usingWebGLRenderer = XS.renderer.type === PIXI.WEBGL_RENDERER;
                    handleResize({
                        forced: true,
                        load: true
                    });
                    animate(); //Start rendering
                    delete XS.initRenderer; // This should only be used once, so lets clean XS up
                };
                window.performanceTest = function() {
                    var before = new Date().getTime();
                    for (var a = 0; a < 1000; a++) {
                        XS.renderer.render(XS.stageContainer);
                    }
                    console.log(new Date().getTime() - before);
                };
                /*
                            		New Frametracking code (Independent from Game Render code) & scope isolated for better GC
                            	*/
                setTimeout(function() {
                    var _Config$sampleFpsPerc; // only sample 5% of sessions (or as configured)
                    var sampleFpsPercent = (_Config$sampleFpsPerc = Config.sampleFpsPercent) != null ? _Config$sampleFpsPerc : 0.05;
                    if (sampleFpsPercent === 0 || Math.random() > sampleFpsPercent) return;
                    var sampling = 15000;
                    var first = new Date().getTime();
                    var frameCount = 0; // reset on focus
                    XS.on('focus', function() {
                        first = new Date().getTime();
                        frameCount = 0;
                    }, {
                        freezeGroup: ENG_FRZ_GRP
                    });

                    function trackFrameSpeed() {
                        var now = new Date().getTime();
                        frameCount++;
                        if (now - first >= sampling) {
                            var average = Math.round(frameCount / ((now - first) / 1000));
                            first = now;
                            frameCount = 0;
                            XS.track.customEvent('fps', average);
                        }
                        requestAnimationFrame(trackFrameSpeed);
                    }
                    requestAnimationFrame(trackFrameSpeed);
                }, 2000);
                scope.gameHeight = height;
                scope.gameWidth = width;
                scope.stage = new ContainerFixedSize();
                XS.stage = scope.stage;
                lazyAttachEvents(scope.stage); // Hack to ensure touch events are always trigged.
                stage.hitArea = new PIXI.Rectangle(0, -10000, 100000, 100000);
                stage.interactive = true;
                stage.touchstart = function() {};
                XS.stageContainer.addChild(stage); // New orientation adders
                stage.orientation = "landscape";
                stage.orientationMode = "dynamic";
                /* ** ** ** ** ** ** ** **
                            	Background drawing interface
                            	** ** ** ** ** ** ** ** **/
                var backgroundCanvas = ATLUtil.getNewCanvasObject();
                var backgroundCanvasCTX = backgroundCanvas.getContext("2d");
                var background = new TextureSprite(Texture.emptyTexture);
                var backgroundGraphics = new PIXI.Graphics();
                stage.addChild(background);
                stage.addChild(backgroundGraphics);
                var backgroundWidth = 0;
                var backgroundHeight = 0;
                var oldMargins = {
                    top: 0,
                    bottom: 0,
                    left: 0,
                    right: 0
                };
                stage.background = {
                    color: "#000000",
                    gradient: undefined,
                    texture: undefined,
                    callback: undefined,
                    disabled: false
                };

                function toAbsolute(value, scope, multiplier) {
                    if (value === undefined) return value;
                    if (value.toString() === value) {
                        if (value[value.length - 1] == "%") {
                            return scope * (parseInt(value.substring(0, value.length - 1)) / 100);
                        }
                    }
                    return value * multiplier;
                }
                var embellishmentConfig = {};
                stage.background.embellish = function(config) { // Do nothing if the same config is passed again
                    if (embellishmentConfig == config) {
                        return;
                    }
                    embellishmentConfig = config;
                    var images = [];
                    for (var a = 0; a < config.length; a++) {
                        images.push(config[a].path);
                    }

                    function onload() {
                        stage.background.callback = function(canvas, ctx) {
                            for (var a = 0; a < config.length; a++) {
                                var node = config[a];
                                if (!node.path) {
                                    continue;
                                }
                                var ret = Math.min(XS.stage.height / targetHeight, XS.stage.width / targetWidth);
                                var w = node.pogimage.width * ret;
                                var h = node.pogimage.height * ret;
                                var x = 0;
                                var y = 0;
                                var left = toAbsolute(node.left, canvas.width, ret);
                                var right = toAbsolute(node.right, canvas.width, ret);
                                var top = toAbsolute(node.top, canvas.width, ret);
                                var bottom = toAbsolute(node.bottom, canvas.width, ret);
                                if (left !== undefined && right !== undefined) {
                                    w = canvas.width - 5 - left - right;
                                }
                                if (left !== undefined) {
                                    x = left;
                                }
                                if (right !== undefined) {
                                    x = canvas.width - right - w;
                                }
                                if (top !== undefined && bottom !== undefined) {
                                    h = canvas.height - 5 - top - bottom;
                                }
                                if (top !== undefined) {
                                    y = top;
                                }
                                if (bottom !== undefined) {
                                    y = canvas.height - 5 - bottom - h;
                                } //Offsets
                                x += toAbsolute(node.offsetX, w, 1) || 0;
                                y += toAbsolute(node.offsetY, h, 1) || 0;
                                ctx.drawImage(node.pogimage.img, x, y, w, h);
                            }
                        };
                        for (var a = 0; a < config.length; a++) {
                            if (!config[a].path) {
                                continue;
                            } // Call `__lookupFetchCache` since in this callback we know it
                            // to have been populated by the 'window.preload' call below.
                            // IOW, we are relying on the fact that POGImage instances
                            // have been created because of fetch ("i/g/literal.png")
                            // calls.  Note that this doesn't work -- or has ever worked
                            // -- with ATLImage.
                            config[a].pogimage = XS.assets.__lookupFetchCache(config[a].path);
                        }
                        drawBackground(true);
                    }
                    window.preload.apply(null, images.concat([onload]));
                };
                /**
                 * Creates a screenshot of the current game state
                 * @returns {HTMLCanvasElement} A canvas element with the screenshot
                 * @memberof XS
                 * @name getScreenshot
                 */
                XS.getScreenshot = function() {
                    stage.updateTransform();
                    var output = ATLUtil.getNewCanvasObject();
                    output.style.width = (output.width = width * XS.devicePixelRatio) / XS.devicePixelRatio + "px";
                    output.style.height = (output.height = height * XS.devicePixelRatio) / XS.devicePixelRatio + "px";
                    var outputCTX = output.getContext('2d');
                    var renderSession = {
                        context: outputCTX,
                        maskManager: null,
                        scaleMode: null,
                        smoothProperty: null,
                        currentBlendMode: 0
                    };
                    stage._renderCanvas(renderSession);
                    return output;
                };
                /**
                 * Creates a tinted version of the given texture. Wraps PIXI.getTintedTexture (see http://pixijs.download/dev/docs/PIXI.CanvasTinter.html#.getTintedTexture).
                 * @returns {HTMLCanvasElement} A canvas element with the tinted texture
                 * @memberof XS
                 * @name getTintedTexture
                 * @param {Sprite} The sprite object to tint
                 * @param {Integer} The color (in 0xff00ff00 form)
                 * @returns {HTMLCanvasElement} Canvas element with the tinted texture
                 */
                XS.getTintedTexture = PIXI.CanvasTinter.getTintedTexture;
                stage.background.drawBackground = function(ctx, width, height, gradient, texture, callback) { //Always full fill background as some phones does not support gradients.
                    ctx.fillStyle = stage.background.color;
                    ctx.fillRect(0, 0, width, height); //Draw gradient.
                    if (gradient) {
                        var grd;
                        switch (gradient.type) {
                            case 'radial': {
                                var multiplier = gradient.multiplier == undefined ? 1 : gradient.multiplier;
                                var verticalOffset = gradient.verticalOffset == undefined ? .5 : gradient.verticalOffset;
                                grd = ctx.createRadialGradient(width / 2, height * verticalOffset, 0.000, width / 2, height * verticalOffset, Math.max(width / 2, height / 2) * multiplier);
                                break;
                            }
                            case 'linear': {
                                grd = ctx.createLinearGradient(width * (gradient.width || 0), height, 0, 0.000);
                                break;
                            }
                            default: {
                                throw "Unsupported radial format";
                            }
                        }
                        for (var a = 0; a < gradient.stops.length; a++) {
                            grd.addColorStop.apply(grd, gradient.stops[a]);
                        }
                        ctx.fillStyle = grd;
                        ctx.fillRect(0, 0, width, height);
                    }
                    if (callback) {
                        callback(backgroundCanvas, ctx);
                    } //Draw overlay texture.
                    if (texture) { //Resize and cache current scalemode.
                        if (!texture.scaled) {
                            var canvas = texture.scaled = ATLUtil.getNewCanvasObject();
                            if (texture.isATL) {
                                var frame = texture.texture.frame; //'texture.texture' because racecar
                                var textureImage = texture.draw({
                                    resolution: 1
                                }).canvas;
                                canvas.width = Math.ceil(frame.width * XS.devicePixelRatio);
                                canvas.height = Math.ceil(frame.height * XS.devicePixelRatio);
                                canvas.getContext('2d').drawImage(textureImage, frame.x, frame.y, frame.width, image.frame.height, 0, 0, canvas.width, canvas.height);
                            } else if (texture.isPOG) {
                                canvas.width = Math.ceil(texture.width * XS.devicePixelRatio / 2);
                                canvas.height = Math.ceil(texture.height * XS.devicePixelRatio / 2);
                                canvas.getContext('2d').drawImage(texture.img, 0, 0, texture.width, texture.height, 0, 0, canvas.width, canvas.height);
                            } else {
                                canvas.width = Math.ceil(texture.width * XS.devicePixelRatio / 2);
                                canvas.height = Math.ceil(texture.height * XS.devicePixelRatio / 2);
                                canvas.getContext('2d').drawImage(texture, 0, 0, texture.width, texture.height, 0, 0, canvas.width, canvas.height);
                            }
                        } // CHECK: Hex-FRVR-3.0 merge guess
                        var ptrn = ctx.createPattern(texture.scaled, 'repeat');
                        ctx.fillStyle = ptrn;
                        ctx.fillRect(0, 0, width, height);
                    }
                    XS.emit('backgroundredraw', {
                        context: ctx
                    });
                };

                function handleBackgroundLoaderLoad(e) {
                    background.texture.destroy(true);
                    if (e.target) {
                        var tex = new Texture.fromCanvas(e.target);
                        background.setTexture(tex);
                        background.width = XS.stage.width + 5;
                        background.height = XS.stage.height + 5;
                    }
                    window.dirtyOnce = true;
                    cleanTextureLoadEvents(e.target);
                }

                function handleBackgroundLoaderError(event) {
                    var err = event.error || event;
                    window.dirtyOnce = true;
                    window.onerror && window.onerror('Failure to generate background: ' + err.message, err);
                    cleanTextureLoadEvents(event.target);
                }
                var backgroundImage = new Image();

                function drawBackground(force) {
                    if ((force || backgroundWidth != width || backgroundHeight != height || oldMargins.top != (XS.styles.margins.top || 0) || oldMargins.bottom != (XS.styles.margins.bottom || 0) || oldMargins.left != (XS.styles.margins.left || 0) || oldMargins.right != (XS.styles.margins.right || 0)) && XS.initComplete) {
                        backgroundWidth = width;
                        backgroundHeight = height;
                        oldMargins.top = XS.styles.margins.top || 0;
                        oldMargins.bottom = XS.styles.margins.bottom || 0;
                        oldMargins.left = XS.styles.margins.left || 0;
                        oldMargins.right = XS.styles.margins.right || 0;
                        if (!stage.background.disabled) {
                            backgroundGraphics.parent && stage.removeChild(backgroundGraphics); //Fix right pixel issue
                            if (XS.stage.width > XS.stage.height && XS.stage.width > 2048) {
                                var ratio = XS.stage.height / XS.stage.width;
                                backgroundCanvas.width = 2048 + 5;
                                backgroundCanvas.height = 2048 * ratio + 5;
                            } else if (XS.stage.height > XS.stage.width && XS.stage.height > 2048) {
                                var ratio = XS.stage.width / XS.stage.height;
                                backgroundCanvas.width = 2048 * ratio + 5;
                                backgroundCanvas.height = 2048 + 5;
                            } else {
                                backgroundCanvas.width = XS.stage.width + 5;
                                backgroundCanvas.height = XS.stage.height + 5;
                            }
                            stage.background.drawBackground(backgroundCanvasCTX, backgroundCanvas.width, backgroundCanvas.height, stage.background.gradient, stage.background.texture, stage.background.callback);
                            if (Host.dataUrlsSupported) {
                                backgroundImage = new Image();
                                backgroundImage.onload = handleBackgroundLoaderLoad;
                                backgroundImage.onerror = handleBackgroundLoaderError;
                                backgroundImage.src = backgroundCanvas.toDataURL();
                                backgroundCanvas.width = backgroundCanvas.height = 1;
                            } else {
                                background.texture.destroy(true);
                                background.setTexture(new Texture.fromCanvas(backgroundCanvas));
                                background.width = XS.stage.width + 5;
                                background.height = XS.stage.height + 5;
                            }
                            window.dirtyOnce = true;
                        } else {
                            background.parent && stage.removeChild(background);
                            backgroundGraphics.clear();
                            backgroundGraphics.beginFill(XS.stageContainer.backgroundColor, 1);
                            backgroundGraphics.drawRect(0, 0, XS.stage.width, XS.stage.height);
                            backgroundGraphics.endFill();
                        }
                    }
                }
                stage.background.refresh = drawBackground; //Native size up to iPad pro resolution
                window.targetWidth = 2732;
                window.targetHeight = 2048;
                window.forceRatio = false;
                var resizeTimer = 0;

                function getHeight() {
                    var size = document.documentElement.clientHeight;
                    if (XS.is.iOS && !XS.is.facebookInstant) {
                        size = window.innerHeight || size;
                    }
                    size -= XS.styles.window.padding.bottom + XS.styles.window.padding.top;
                    return Math.max(size, 100);
                }
                XS.getWindowHeight = getHeight;

                function getWidth() {
                    return Math.max(document.documentElement.clientWidth, 100);
                }
                XS.initComplete = false;
                var lastWidth = 0;
                var lastHeight = 0;
                var lastGameHeight = 0;
                var lastGameWidth = 0;
                var handleForcedResizeTimer = 0;
                var resizeTextureAtlasesTimer = 0;
                var focusHandlerTimer = 0; // topLeft        top      topRight
                // left	   	     center     right
                // bottomLeft    bottom    bottomRight
                var GUIContainer = scope.GUIContainer = ContainerFixedSize.expand(function(w, h) {
                    var self = ContainerFixedSize.call(this, w, h);
                    self.topLeft = self.addChild(new Container());
                    self.top = self.addChild(new Container());
                    self.topRight = self.addChild(new Container());
                    self.bottomLeft = self.addChild(new Container());
                    self.bottom = self.addChild(new Container());
                    self.bottomRight = self.addChild(new Container());
                    self.left = self.addChild(new Container());
                    self.right = self.addChild(new Container()); // Center goes last, so centered stuff is always on top of corner/side stuff
                    self.center = self.addChild(new Container());
                    self.groups = [self.topLeft, self.top, self.topRight, self.left, self.center, self.right, self.bottomLeft, self.bottom, self.bottomRight];
                    self.margins = {
                        top: 10,
                        right: 10,
                        bottom: 10,
                        left: 10
                    };
                    XS.on('resize', function() {
                        var width = XS.gui.width;
                        var height = XS.gui.height;
                        self.topLeft.x = self.margins.left;
                        self.topLeft.y = self.margins.top;
                        self.top.x = width / 2;
                        self.top.y = self.margins.top;
                        self.topRight.x = width - self.margins.right;
                        self.topRight.y = self.margins.top;
                        self.left.x = self.margins.left;
                        self.left.y = height / 2;
                        self.center.x = width / 2;
                        self.center.y = height / 2;
                        self.right.x = width - self.margins.right;
                        self.right.y = height / 2;
                        self.bottomLeft.x = self.margins.left;
                        self.bottomLeft.y = height - self.margins.bottom;
                        self.bottom.x = width / 2;
                        self.bottom.y = height - self.margins.bottom;
                        self.bottomRight.x = width - self.margins.right;
                        self.bottomRight.y = height - self.margins.bottom;
                    }, {
                        freezeGroup: ENG_FRZ_GRP
                    });
                });
                XS.gui = new GUIContainer();
                XS.stageContainer.addChild(XS.gui);
                XS.currentInputField = false;

                function resizeTextureAtlases(rez, force) {
                    if (resizeTextureAtlases.lastRez == rez && !force) {
                        console.log('resizeTextureAtlases() skipping because lastRez=', resizeTextureAtlases.lastRez, 'rez=', rez);
                        return;
                    }
                    if (!ATLUtil._textureAtlases.length && !force) return;
                    resizeTextureAtlases.lastRez = rez; // Clear the atlasses
                    for (var i = 0; i < ATLUtil._textureAtlases.length; ++i) {
                        var atlas = ATLUtil._textureAtlases[i];
                        atlas.reset();
                    }
                    var queue = [];
                    for (var path in ATLImage.cache) {
                        var atl = ATLImage.cache[path]; // If ATLImage is "fetched" it's either been used by a Sprite or
                        // explicitly marked as such.  Either way, it's up for atlas
                        // redrawing.
                        if (atl.fetched) queue.push(atl);
                    } //TODO: add POGImage to atlases
                    // Order the textures by tallest first, so we get better bin packing
                    queue.sort(function(a, b) {
                        if (a.height > b.height) return -1;
                        if (a.height < b.height) return 1;
                        return 0;
                    }); // Run through the queue and re-render all the textures to the blank textureatlas
                    for (var i = 0; i < queue.length; ++i) {
                        var atl = queue[i];
                        atl.draw({
                            resolution: rez
                        });
                    }
                }

                function handleResize(data) {
                    if (!XS.renderer) return; //This shouldn't happen but let's play it safe
                    clearTimeout(handleForcedResizeTimer);
                    if (XS.currentInputField) return;
                    data = data || {};
                    var instant = data.instant;
                    var newWidth = getWidth();
                    var newHeight = getHeight();
                    if (data.forced_width !== undefined) {
                        newWidth = data.forced_width;
                    }
                    if (data.forced_height !== undefined) {
                        newHeight = data.forced_height;
                    } //Calculate potential new game height & width
                    var gameHeight = Math.max(newHeight - XS.styles.margins.top - XS.styles.spacing.top - XS.styles.spacing.bottom - XS.styles.margins.bottom, 10); // WTF - why 2x spacing?
                    var gameWidth = Math.max(newWidth - XS.styles.margins.left - XS.styles.spacing.left - XS.styles.spacing.right - XS.styles.margins.right, 10);
                    if (!data.forced && lastGameHeight == gameHeight && lastGameWidth == gameWidth && lastWidth == newWidth && lastHeight == newHeight) return; //No need to fire focus handler if we already resized.
                    clearTimeout(focusHandlerTimer);
                    lastWidth = scope.width = newWidth;
                    lastHeight = scope.height = newHeight;
                    lastGameHeight = gameHeight;
                    lastGameWidth = gameWidth;
                    var effectiveWidth = Math.ceil(scope.width / 2) * 2 * XS.devicePixelRatio >> 0;
                    var effectiveHeight = Math.ceil(scope.height / 2) * 2 * XS.devicePixelRatio >> 0; //Fixes iOS bug when creating a new tab in Safari browser.
                    if (XS.is.iOS) {
                        window.scrollTo && window.scrollTo(0, -1);
                        if (!instant) { //Hacky hacky, fixing WebGL render bugs in Safari (Mobile)
                            document.body.style.height = XS.renderer.view.style.height = (effectiveHeight / XS.devicePixelRatio >> 0) + 1 + 'px';
                        }
                    }

                    function trigger() {
                        XS.renderer.resize(effectiveWidth, effectiveHeight);
                        XS.renderer.view.style.width = (effectiveWidth / XS.devicePixelRatio >> 0) + 'px';
                        XS.renderer.view.style.height = (effectiveHeight / XS.devicePixelRatio >> 0) + 'px'; //This is needed to ensure the social share buttons follow resizeing around on Android
                        if (XS.is.android) {
                            document.body.style.width = Math.ceil(scope.width) + 'px';
                            document.body.style.height = Math.ceil(scope.height) + 'px';
                        }
                        window.dirtyOnce = true;
                        window.scrollTo && window.scrollTo(0, 0);
                        XS.renderer.render(XS.stageContainer);
                    }
                    if (XS.is.iOS) { //If we are resizing fast, clean up old timer
                        clearTimeout(resizeTimer);
                        if (instant) {
                            trigger();
                        } else resizeTimer = setTimeout(trigger, 500); //Timeout fixes WebGL resize issue on iOS
                    } else trigger();
                    var tw = targetWidth;
                    var th = targetHeight;
                    var orientation = stage.orientation;
                    if (stage.orientationMode == "dynamic") {
                        orientation = scope.width <= gameHeight ? "portrait" : "landscape";
                    }
                    if (orientation == "portrait") {
                        th = targetWidth;
                        tw = targetHeight;
                    } //Code related to stage :)
                    // This finds the axis that is the biggest vs the target size, so the scaling
                    // factor makes sure the entire target width/height fits inside the actual viewport
                    var ret = window.forceRatio ? window.forceRatio : Math.min(Math.min(effectiveWidth / tw, effectiveHeight / th), 1);
                    if (data.forced || stage.resolution != ret || stage.orientation != orientation) {
                        stage.scale.set(ret, ret);
                        XS.gui.scale.set(0.5 * XS.devicePixelRatio, 0.5 * XS.devicePixelRatio);
                        XS.stageContainer.resolution = 1;
                        XS.baseResolution = ret;
                    } //These should always be called regardless if ratio or orientation changed.
                    scope.gameHeight = gameHeight;
                    scope.gameWidth = gameWidth;
                    XS.resizeAd(); // Set the sizes correctly for all the top level dimensions
                    var dims;
                    XS.stageContainer.dimensions = dims = new Point(width * XS.devicePixelRatio, height * XS.devicePixelRatio);
                    stage.dimensions = stage.toLocalSize(dims);
                    XS.gui.dimensions = XS.gui.toLocalSize(dims);
                    clearTimeout(resizeTextureAtlasesTimer);
                    if (data.forced) {
                        resizeTextureAtlases(XS.baseResolution, data.load);
                    } else {
                        resizeTextureAtlasesTimer = setTimeout(function() {
                            resizeTextureAtlases(XS.baseResolution);
                        }, 300);
                    }
                    stage.orientation = orientation;
                    XS.size = {
                        game: {
                            width: gameWidth,
                            height: gameHeight
                        },
                        target: {
                            width: tw,
                            height: th
                        },
                        canvas: {
                            width: width * XS.devicePixelRatio,
                            height: height * XS.devicePixelRatio
                        },
                        canvasSafe: {
                            width: width - XS.styles.spacing.left - XS.styles.spacing.right,
                            height: height - XS.styles.spacing.top - XS.styles.spacing.bottom
                        },
                        stage: {
                            width: width / (stage.scale.x / XS.stageContainer.scale.x),
                            height: height / (stage.scale.y / XS.stageContainer.scale.y)
                        } // The size of the actual canvas in stage coordinates
                    };
                    XS.emit('resize', data);
                    XS.emit('late-resize', data);
                }
                /**
                 * Use this function when you want to instanciate several Sprite objects with ATLImages i.e.:'fetch(something.svg)'
                 * It will optimize atlas packing, by removing destroyed images and sorting images by size.
                 *
                 * WARNING: Do not use for non-atlas image! Will redraw atlas with no benefit.
                 * @param {function} createSpritesCb function where 'new Sprite(' or 'sprite.image =' is called
                 */
                XS.bulkSpriteLoad = function(createSpritesCb) {
                    if (typeof createSpritesCb !== 'function') {
                        console.warn('No callback passed to bulkSpriteLoad, ignoring the call!');
                        return;
                    }
                    XS.bulkCreateSpritesON = true;
                    createSpritesCb();
                    XS.bulkCreateSpritesON = false;
                    resizeTextureAtlases(XS.resolution, true);
                }; //Pre game load resize (Fixes preloader renderer)
                XS.on('late-resize', drawBackground, {
                    freezeGroup: ENG_FRZ_GRP
                });
                XS.on('force-resize', handleResize, {
                    freezeGroup: ENG_FRZ_GRP
                }); //Part of solution to solve WebGL bug in iOS
                function TestAndTriggerForcedResize(execute) { //We do not apply fixing of size if we are currently taking screenshots
                    if (window.inScreenshotMode) return;
                    if (height != getHeight() || width != getWidth()) {
                        if (execute) {
                            if (XS.initComplete) { // BRIAN-TODO: QA this properly on iOS devices to make sure it didn't invalidate the fix
                                window.onresize();
                            }
                        } else { //Executed in a timer to solve race conditions where this is called before a window.onresize
                            handleForcedResizeTimer = setTimeout(function() {
                                TestAndTriggerForcedResize(true);
                            }, 1);
                        }
                    }
                } //This solves an issue on FB Instant where mahjong does not resize to the right aspect ratio on iOS
                //This only happnes on secound load
                setInterval(function() {
                    TestAndTriggerForcedResize(false);
                }, 500); //We do not apply fixing of size if we are currently taking screenshots
                if (!window.inScreenshotMode) { //Hack to force resize to call on back button
                    if (window.onunload) {
                        window.onunload = function() { //Timer is part of solution to solve WebGL bug in iOS
                            setTimeout(function() {
                                window.onresize();
                            }, 1);
                        };
                    }
                    XS.on('focus', function() { //Part of solution to solve WebGL bug in iOS
                        clearTimeout(focusHandlerTimer);
                        focusHandlerTimer = setTimeout(function() { //We are forcing resize on iOS to handle the case where people create a new tab in the browser (Apple does not resize the webview for this case)
                            handleResize({
                                forced: XS.is.iOS
                            });
                        }, XS.is.iOS ? 500 : 1);
                    }, {
                        freezeGroup: ENG_FRZ_GRP
                    });
                }(function() { // If url param deterministicRand is present
                    // replace XS.rand and Math.random with a deterministic random.
                    // Each caller gets attributed a new random instance to address loading
                    // differences between runs causing the callers order to also be different
                    var m = /deterministicRand=?(\d*)/.exec(window.location.href);
                    if (m) {
                        var randWrapper = function randWrapper() {
                            var stack = new Error().stack;
                            var callerName = !stack ? '' : stack.split("\n")[2].trim().split(" ")[1];
                            if (!instancesByCaller[callerName]) {
                                instancesByCaller[callerName] = Math.seed(startSeed);
                            }
                            return instancesByCaller[callerName]();
                        };
                        var startSeed = m[1] ? +m[1] : 42; //use url param converted to int or default 42
                        var instancesByCaller = {};
                        Math.random = XS.rand = randWrapper;
                    } else {
                        XS.rand = Math.random;
                    }
                })();
                XS.clampTickToAnimate = Host.Web.GetQueryString("clampTicks") === "1"; // Override Date.now to make games that rely on Date.now for animations to behave deterministically
                if (XS.clampTickToAnimate) {
                    (function() {
                        var ticksCount = 0;
                        XS.on('animate', function() {
                            ticksCount++;
                        });
                        Date.now = function() {
                            return ticksCount * 6;
                        };
                    })();
                }
            })(window);
            (XS || {}).VERSION = '1.4.0';

            (function(scope) {
                var reTrimWS = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
                var reNeg = /^\s*\-\s*/; // Helpers
                function padNN(number) {
                    return (number < 10 ? '0' : '') + number;
                }

                function uuid() {
                    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                        var r = Math.random() * 16 | 0,
                            v = c == 'x' ? r : r & 0x3 | 0x8;
                        return v.toString(16);
                    });
                }
                var reCaseSnakeToCamel = /[-_]([a-z])/ig;
                var reCaseCamelToSnake = /([a-z])([A-Z])|([A-Z])([A-Z])[a-z]/g;

                function caseSnakeToCamel(s) {
                    return s.replace(reCaseSnakeToCamel, function(m) {
                        return m[1].toUpperCase();
                    });
                }

                function caseCamelToSnake(s) {
                    return s.replace(reCaseCamelToSnake, function(m) {
                        return m[0] + '_' + m.substr(1);
                    }).toLowerCase();
                } // parseArgs(input, context);
                // @deprecated this code should be deprecated, but it we properly understando how it works it can really be usefull
                // for event schema validation, that will force game devs to properly comply with the events naming and values ...
                // This code, is a parser with a gramar, and executes actions on the context based on the str (rules).
                // This code parser is a kind of schema validator that also has some actions that performs schema transformation on the events.
                function parseArgs(str, context) {
                    var rules, pos = 0,
                        parsed;

                    function getLen(a) {
                        return a.length;
                    }

                    function doRule(rule) {
                        return (rules[rule] || rule)();
                    }

                    function makeParser(parser) {
                        return function() {
                            var curr = pos,
                                res = parser();
                            if (res === null) pos = curr;
                            return res;
                        };
                    }

                    function token(re) {
                        return makeParser(function() {
                            var m = re.exec(str.substr(pos));
                            if (m === null || m.index !== 0) return null;
                            pos += getLen(m[0]);
                            return m[1];
                        });
                    }

                    function sequence(rs) {
                        return makeParser(function() {
                            var res = [],
                                i;
                            for (var i = 0; i < getLen(rs); i++) {
                                if ((parsed = doRule(rs[i])) === null) return parsed;
                                res.push(parsed);
                            }
                            return res;
                        });
                    }

                    function or(rs) {
                        return makeParser(function() {
                            for (var i = 0; i < getLen(rs); i++) {
                                if ((parsed = doRule(rs[i])) !== null) return parsed;
                            }
                            return null;
                        });
                    }

                    function list(rItem, rSep, keepSep) {
                        return makeParser(function() {
                            var res = [];
                            while (true) {
                                if ((parsed = doRule(rItem)) === null) break;
                                res.push(parsed);
                                if ((parsed = doRule(rSep)) === null) break;
                                if (keepSep === true) res.push(parsed);
                            }
                            return res;
                        });
                    }

                    function concat(rule, glue) {
                        return makeParser(function() {
                            if ((parsed = doRule(rule)) === null) return parsed;
                            return getLen(parsed) > 1 ? parsed.join(glue || '') : parsed[0];
                        });
                    }

                    function evaluate(rule) {
                        return makeParser(function() {
                            return (parsed = doRule(rule)) !== null ? context[parsed] : null;
                        });
                    }

                    function toNumber(rule) {
                        return makeParser(function() {
                            return (parsed = doRule(rule)) !== null ? parseFloat(parsed) : null;
                        });
                    }

                    function toObject(rule) {
                        return makeParser(function() {
                            if ((parsed = doRule(rule)) === null) return null;
                            var obj = {},
                                ps = parsed[1],
                                prop, val;
                            for (var i = 0; i < getLen(ps); i++) {
                                if (typeof ps[i] === 'string') {
                                    prop = ps[i];
                                    val = context[prop];
                                } else {
                                    prop = ps[i][0];
                                    val = ps[i][2];
                                }
                                if (prop === '_merge')
                                    for (var key in val) {
                                        obj[key] = val[key];
                                    } else if (val !== undefined) obj[prop] = val;
                            }
                            return obj;
                        });
                    }
                    rules = {
                        ident: token(/([a-zA-Z_][a-zA-Z0-9_]*)/),
                        argSep: token(/(\s*,\s*)/),
                        expSep: token(/([:./])/),
                        objStart: token(/(\s*{\s*)/),
                        objEnd: token(/(\s*}\s*)/),
                        char: token(/([a-zA-Z0-9_ ]+)/),
                        numStr: token(/([0-9]+(\.[0-9]+)?)/),
                        assign: token(/(\s*\=\s*)/),
                        sQStr: token(/\'([^']*)\'/),
                        dQStr: token(/\"([^"]*)\"/),
                        number: toNumber('numStr'),
                        string: or(['sQStr', 'dQStr']),
                        ref: evaluate('ident'),
                        objProp: or([sequence(['ident', 'assign', 'exp']), 'ident']),
                        objProps: list('objProp', 'argSep'),
                        object: toObject(sequence(['objStart', 'objProps', 'objEnd'])),
                        exp: or(['ref', 'number', 'string', 'object']),
                        argDef: list('exp', 'expSep', true),
                        arg: concat('argDef'),
                        args: list('arg', 'argSep')
                    }; //for(var rule in rules) rules[rule] = makeParser(rule);
                    str = str || '';
                    var res = doRule('args');
                    if (pos < getLen(str)) throw new Error('Left over tokens at ' + pos + ', "' + str.substr(pos) + '"');
                    return res;
                } // Source at end of file
                var generateUID = function generateUID(separator) {
                    var delim = separator || "-";

                    function S4() {
                        return ((1 + Math.random()) * 0x10000 | 0).toString(16).substring(1);
                    }
                    var st = new Date().getTime().toString(16).slice(0, 11) + ((1 + Math.random()) * 0x10000 | 0).toString(16).substring(1, 2);
                    return S4() + S4() + delim + S4() + delim + S4() + delim + S4() + delim + st;
                }; //TODO: this needs some refactoring we should have a lib to generate ids and reuse it in different providers and other places in the code.
                //This id is generated and used for ads only, so when sending ads if the user gave no permission for ad analytics all the ids will be different
                // from the other events
                var nonConsentingUserId = generateUID(); // XSTrack
                // Constructor
                function XSTrack() {
                    var t = this;
                    t.timeStart = scope && scope.__FRVR && scope.__FRVR.startTime || Date.now();
                    t.timeLoaded = undefined;
                    t.handleGameLoaded = t.handleGameLoaded.bind(this);
                    t.handleFBInstantStart = t.handleFBInstantStart.bind(this);
                    t.handleFBInstantPreloadComplete = t.handleFBInstantPreloadComplete.bind(this);
                    t.handleRefreshPersistentData = t.handleRefreshPersistentData.bind(this);
                    t.handlePlaySession = t.handlePlaySession.bind(this);
                    t.isSessionTimedOut = t.isSessionTimedOut.bind(this);
                    t.extendSession = t.extendSession.bind(this);
                    t.data = {};
                    t.dataStore = {};
                    t.dataIsDirty = true;
                    t.providers = {};
                    t.DEBUG = false; // Facebook instant environment data
                    // entrypoint = [feed, in_game_menu, notification, facebook_gaming_tab, admin_message]
                    // context_type = [post, thread, group, solo, unspecified, link]
                    this.facebook_entrypoint = this.facebook_context_type = this.facebook_campaign = null;
                    this.events = [];
                }
                var XST = XSTrack.prototype; // Setup
                XST.init = function() {
                    this.initData(function() { // track on start preload before actual gameloaded
                        this.send('device_info');
                        XS.on('gameLoaded', this.handleGameLoaded);
                        Host.on('FBInstantPreloadComplete', this.handleFBInstantPreloadComplete);
                        Host.on('FBInstantStart', this.handleFBInstantStart); // Fire tracking event after 1 minute
                        var customEvent = this.customEvent.bind(this);
                        setTimeout(function() {
                            customEvent('session_engage_low');
                        }, 60 * 1000); // Fire tracking event after 10 minutes
                        setTimeout(function() {
                            customEvent('session_engage_high');
                        }, 10 * 60 * 1000); // Track all window errors
                        var errorHandler = window.onerror;
                        var errorEvent = this.send.bind(this);
                        window.onerror = function(msg, url, line, col, error) {
                            if (url instanceof Error) { // Enable optional parameters
                                error = url;
                                url = undefined;
                            }
                            error = error || new Error(msg);
                            if (errorHandler) {
                                try {
                                    errorHandler(msg, url, line, col, error);
                                } catch (e) {}
                            } // Track this error once
                            if (!error.xsTracked) {
                                try {
                                    errorEvent('error', {
                                        msg: msg,
                                        line: line,
                                        col: col,
                                        label: error.stack || JSON.stringify(error)
                                    });
                                    error.xsTracked = true;
                                } catch (e) {}
                            }
                            return false;
                        }; // Track all promise unhandled rejections
                        var unhandledRejrectionHandler = window.onunhandledrejection;
                        window.onunhandledrejection = function(rejection) {
                            if (unhandledRejrectionHandler) {
                                try {
                                    unhandledRejrectionHandler(rejection);
                                } catch (e) {}
                            }
                            try {
                                var error = rejection && rejection.reason || {};
                                errorEvent('error', {
                                    msg: error.message,
                                    line: 0,
                                    col: 0,
                                    label: 'unhandled_rejection: ' + (error.stack || JSON.stringify(error))
                                });
                            } catch (e) {}
                        };
                    }.bind(this));
                };
                XST.initUserId = function() { // Allways choose Host.userId when available
                    if (Host.userId) {
                        this.userId = Host.userId;
                        this.globalUserId = Host.userId;
                    } else {
                        var defaultNewUserId = generateUID();
                        XS.data.addString('__frvr_user_id', {
                            default: defaultNewUserId,
                            remote: true,
                            merge: function mergeFRVRUserIdKeepRemote(prev, next) {
                                return next;
                            }, // Use a global scope when possible. Certain host (e.g. samsung-instant-play) types supports this.
                            prefix: 'global'
                        }); // Some users have mistakenly been given 'undefined' as __frvr_user_id
                        this.userId = XS.data.__frvr_user_id = XS.data.__frvr_user_id === 'undefined' || typeof XS.data.__frvr_user_id === 'undefined' ? defaultNewUserId : XS.data.__frvr_user_id;
                        this.globalUserId = window.__FRVR.globalUserId();
                    }
                    Host.emit('xstrack:InitUserId', {
                        globalUserId: this.globalUserId
                    });
                };
                XST.initData = function(callback) {
                    function getFstEngineVersion() {
                        try { // TODO: this only supports branch name right now,
                            // ideally it would account for git tag or other configs
                            // as well.
                            // NB: does not support fsx-style releases yet
                            // JT@2021-12-12: But that's OK, as fsx-style releases have a
                            // __FRVR.XSEngineVersion set early, so kill this function asap.
                            var branch = JSON.parse(Config.frvr_repo_statuses)['frvr-tools'].branch;
                            if (branch.indexOf('release/') === 0) { // take version number after release/
                                return branch.slice(8);
                            }
                        } catch (ex) {
                            console.warn('[xs.data]', 'failed to parse Config.frvr_repo_statuses');
                            return null;
                        }
                    }
                    var DATAKEY = XSTrack.DATAKEY,
                        PERSISTENT_DATA = XSTrack.PERSISTENT_DATA;
                    var xsTrack = this;
                    var dataStore = this.dataStore = {
                        app_id: 'com.frvr.' + Config.id,
                        app_name: Config.id,
                        app_version: Config.version,
                        app_build: Config.build,
                        development: false,
                        engine_version: __FRVR.XSEngineVersion || getFstEngineVersion(),
                        play_session_count: 0, // play sessions
                        cohort: this.getDate(),
                        days_elapsed: 0,
                        last_day_played: this.getDate(),
                        days_played: 0,
                        channel: this.getChannel(),
                        utm_source: this.getUTMField('source'),
                        utm_medium: this.getUTMField('medium'),
                        utm_campaign: this.getUTMField('campaign'),
                        utm_term: this.getUTMField('term'),
                        utm_content: this.getUTMField('content'),
                        play_session_id: uuid(),
                        play_session_id_time: Date.now(),
                        screen: 'init', // dev provided label
                        facebook_referral_player_id: undefined,
                        ad_id: undefined,
                        ad_segment: undefined,
                        currency_amount: 0,
                        missions_completed: 0,
                        progression: 0,
                        games_played: 0,
                        game_start_time: -1,
                        remote_user_id: undefined,
                        device_width: window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth,
                        device_height: window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight,
                        script_version: '1.1.0'
                    };
                    this.initUserId();
                    this.initDeviceId();
                    var persistentDataDefaults = {};

                    function createDataProp(key) {
                        return {
                            get: function get() {
                                return dataStore[key];
                            },
                            set: function set(val) {
                                if (dataStore[key] !== val) {
                                    dataStore[key] = val;
                                    if (XSTrack.DATA_EXCLUDE_DIRTY.indexOf(key) === -1) xsTrack.dataIsDirty = true;
                                    if (PERSISTENT_DATA.indexOf(key) !== -1) xsTrack.savePersistentData();
                                }
                                return dataStore[key];
                            }
                        };
                    }
                    for (var key in dataStore) {
                        Object.defineProperty(xsTrack.data, key, createDataProp(key));
                        if (PERSISTENT_DATA.indexOf(key) !== -1) persistentDataDefaults[key] = dataStore[key];
                    }
                    XS.data.on('dataloaded', this.handleRefreshPersistentData);
                    XS.data.addObject(DATAKEY, {
                        remote: true,
                        default: persistentDataDefaults,
                        merge: function mergeSessions(prev, next) {
                            if (prev.cohort && next.cohort && next.cohort >= prev.cohort) return next;
                            return prev;
                        }
                    }, function() {
                        try {
                            xsTrack.loadPersistentData();
                        } catch (e) {}
                        callback();
                    });
                };
                XST.initDeviceId = function() {
                    var dataStore = this.dataStore;
                    if (Host.idfa) {
                        dataStore.deviceId = Host.idfa;
                        this.send('idfa');
                    } else {
                        var handleGetIDFA = function handleGetIDFA(res) {
                            if (res) {
                                dataStore.deviceId = res.result;
                                setTimeout(function() {
                                    self.send('idfa');
                                });
                            }
                        };
                        var self = this;
                        if (XS.is.iOS && Host.IOS && Host.IOS.GetIDFA) Host.IOS.GetIDFA(handleGetIDFA);
                        if (XS.is.android && Host.GoogleAds && Host.GoogleAds.GetIDFA) Host.GoogleAds.GetIDFA(handleGetIDFA);
                    }
                }; // Internal
                XST.loadPersistentData = function() {
                    var DATAKEY = XSTrack.DATAKEY,
                        PERSISTENT_DATA = XSTrack.PERSISTENT_DATA;
                    var dataStore = this.dataStore;
                    var nextData = XS.data[DATAKEY] || {};
                    for (var k = 0; k < PERSISTENT_DATA.length; k++) {
                        var key = PERSISTENT_DATA[k];
                        if (dataStore[key] !== nextData[key]) {
                            dataStore[key] = nextData[key];
                            this.dataIsDirty = true;
                        }
                    }
                    if (XS.is.development != null && dataStore['development'] != XS.is.development) {
                        dataStore['development'] = XS.is.development;
                        this.dataIsDirty = true;
                    }
                    dataStore.days_elapsed = Math.floor((Date.parse(this.getDate()) - Date.parse(dataStore.cohort)) / (24 * 60 * 60 * 1000));
                };
                XST.savePersistentData = function() {
                    var DATAKEY = XSTrack.DATAKEY,
                        PERSISTENT_DATA = XSTrack.PERSISTENT_DATA;
                    var dataStore = this.dataStore;
                    var prevData = XS.data[DATAKEY];
                    var changed = false;
                    for (var k = 0; k < PERSISTENT_DATA.length; k++) {
                        var key = PERSISTENT_DATA[k];
                        if (dataStore[key] !== prevData[key]) {
                            changed = true;
                            prevData[key] = dataStore[key];
                        }
                    }
                    if (changed) {
                        XS.data.setDirty(DATAKEY);
                    }
                };
                XST.buildEventContext = function(name, value, params) {
                    var globals = this.dataStore;
                    var context = {
                        name: name,
                        value: value,
                        _params: params,
                        _globals: globals
                    }; // FIXME: ? why does the context contains the _globals and then merges the globals into context?
                    for (var p in globals) {
                        context[p] = globals[p];
                    }
                    for (var p in this) {
                        context[p] = this[p];
                    } //FIXME: this, "this" seems like its doing some dark magic possibly exposing uncontrolled attributes.
                    for (var p in params) {
                        context[p] = params[p];
                    } //FIXME: this also seems to be duplicated in parseArgs functionlity
                    var start = this.data.game_start_time;
                    context.game_duration = start === -1 ? 0 : Date.now() - start; //TODO: check if this needs to be ported to the SDK.
                    context.loading_time = this.timeLoaded - this.timeStart; //TODO: check if this needs to be ported to the SDK.
                    return context;
                }; // @deprecated
                XST.parseArgs = function(input, context) {
                    try {
                        return parseArgs(input, context);
                    } catch (err) {
                        console.error('Parse error for event mapping: "' + input + '"');
                        throw err;
                    }
                }; // Helpers
                XST.getDevelopmentFlag = function() {
                    return this.dataStore.development;
                };
                XST.setDevelopmentFlag = function(devFlag) {
                    this.dataStore.development = devFlag;
                    this.savePersistentData();
                };
                XST.getDate = function() {
                    var date = new Date();
                    return date.getUTCFullYear() + '-' + padNN(date.getUTCMonth() + 1) + '-' + padNN(date.getUTCDate());
                };
                XST.getDeviceID = function() {
                    return this.dataStore.deviceId;
                };
                XST.getUtmString = function() {
                    if (document && document.location && document.location.search) {
                        var queryString = document.location.search || '';
                        queryString = queryString.replace(/^\?/, '');
                        return [queryString.replace(/^(?:.*utm_source=([^&]*)|).*$/, '$1') || 'none', queryString.replace(/^(?:.*utm_medium=([^&]*)|).*$/, '$1') || 'none', queryString.replace(/^(?:.*utm_campaign=([^&]*)|).*$/, '$1') || 'none'].join('_');
                    }
                };
                XST.getUTMField = function(fieldName) {
                    var queryString = document && document.location && document.location.search || '';
                    queryString = queryString.replace(/^\?/, '');
                    var matches = queryString.match('^(?:.*utm_' + fieldName + '=([^&]*)|).*$');
                    return matches.length > 1 ? matches[1] : undefined;
                };
                XST.getChannel = window.__FRVR.getChannel; // Handlers
                XST.handleFBInstantPreloadComplete = function() {};
                XST.handleFBInstantStart = function() {
                    this.facebook_player_id = FBInstant.player.getID();
                    if (FBInstant.getEntryPointAsync) {
                        FBInstant.getEntryPointAsync().then(this.handleEntryPointAsync.bind(this));
                    }
                    var type = (FBInstant.context.getType() || 'unspecified').toLowerCase();
                    this.facebook_context_type = type;
                    if (FBInstant && FBInstant.getTournamentAsync) {
                        FBInstant.getTournamentAsync().then(function() {
                            type = 'viralleaderboard';
                            this.facebook_context_type = type;
                            XS.track.customEvent("context", undefined, {
                                context_type: type
                            });
                        }.bind(this)).catch(function(err) {
                            XS.track.customEvent("context", undefined, {
                                context_type: type
                            });
                        });
                    } else {
                        XS.track.customEvent("context", undefined, {
                            context_type: type
                        });
                    }
                };
                XST.handleCanSubscribeBotAsync = function(can_subscribe) {
                    this.facebook_chatbot_subscribed = false;
                    this.event('entry_point');
                };
                XST.handleCanSubscribeBotAsyncError = function(error) {
                    this.facebook_chatbot_subscribed = error.code == "INVALID_OPERATION";
                    this.event('entry_point');
                };
                XST.handleEntryPointAsync = function(entryPoint) {
                    var data = FBInstant.getEntryPointData() || {}; // Handle convention based params
                    this.facebook_referral_player_id = data.previous_player_id;
                    this.utm_source = data.utm_source || (data.fb_instant_game_ad_id ? 'instant' : null);
                    this.utm_medium = data.utm_medium || (data.fb_instant_game_ad_id ? 'paid' : null);
                    this.utm_campaign = data.utm_campaign || (data.fb_instant_game_ad_id ? data.fb_instant_game_ad_id : null);
                    if (data.utm) {
                        var utm = data.utm || {};
                        this.utm_string = [utm.utm_source || 'none', utm.utm_medium || 'none', utm.utm_campaign || 'none'].join('_');
                        this.utm_source = utm.utm_source;
                        this.utm_medium = utm.utm_medium;
                        this.utm_campaign = utm.utm_campaign;
                    }
                    if (data && data.__logEvent) {
                        this.chatbot_data = {
                            id: data.__logEvent.id,
                            data: data.__logEvent.data
                        };
                    }
                    this.facebook_campaign = data;
                    this.facebook_entrypoint = entryPoint; // this.event('entry_point');
                    if (FBInstant.player.canSubscribeBotAsync) {
                        FBInstant.player.canSubscribeBotAsync().then(this.handleCanSubscribeBotAsync.bind(this)).catch(this.handleCanSubscribeBotAsyncError.bind(this));
                    }
                };
                XST.handleGameLoaded = function() {
                    this.timeLoaded = Date.now();
                    this.send('game_loaded', undefined);
                };
                XST.handleRefreshPersistentData = function(event) {
                    if (event.changedFields.indexOf(XSTrack.DATAKEY) !== -1) this.loadPersistentData();
                };
                XST.isSessionTimedOut = function() {
                    var lastTime = this.data.play_session_id_time;
                    var currentTime = Date.now();
                    return lastTime === undefined || currentTime - lastTime >= XSTrack.PLAYSESSIONID_TIMEOUT;
                };
                XST.extendSession = function() {
                    this.data.play_session_id_time = Date.now();
                };
                XST.handlePlaySession = function(isNoInteractive) {
                    if (this.isSessionTimedOut()) {
                        this.data.play_session_id = uuid();
                        this.data.play_session_id_time = Date.now();
                    } else {
                        this.extendSession();
                    }
                }; // Provider API
                XST.addHandler = function(name, handler) {
                    if (name === 'default') return;
                    if (typeof name === 'object') {
                        'XST.addHandler({' + Object.keys(name).length + ' handlers});';
                        for (var key in name) {
                            this.addHandler(key, name[key]);
                        }
                        return;
                    }
                    var handlerName = caseSnakeToCamel(name);
                    name = caseCamelToSnake(name);
                    if (XST.hasOwnProperty(handlerName)) throw new Error('Invalid event handler name "' + handlerName + '", Please choose a different even name.');
                    if (this.events.indexOf(name) === -1) this.events.push(name);
                    this[handlerName] = handler.bind(this);
                };
                XST.addProvider = function(name, provider) {
                    this.providers[name] = provider;
                    provider.name = provider.name || name;
                    var config = _jsonData['track-' + provider.name];
                    provider.config = config;
                    var initialBlacklist = provider.blacklist || '';
                    provider.blacklist = [];
                    provider.enabled = provider.enabled !== false;
                    this.updateBlacklist(name, initialBlacklist);
                    this.updateBlacklist(name, config.blacklist);
                    if (typeof provider.blacklist === 'string') provider.blacklist = provider.blacklist.split(',');
                    if (typeof provider.parseArgs !== 'function')
                        if (typeof provider.oninit === 'function') provider.oninit(config, this.dataStore); // this.dataStore is not working as intended here as it is still an empty object
                    provider.parseArgs = this.parseArgs;
                    provider.event = this.sendProviderEvent.bind(this, provider);
                    this.addEventMapping(name, config.events);
                };
                XST.addEventMapping = function(pId, name, mapping) {
                    var p = this.providers[pId];
                    if (p === undefined) {
                        console.warn('XSTrack.addEventMapping > analytics provider "' + pId + '" not found.');
                        return;
                    }
                    if (typeof name === 'object') {
                        for (var key in name) {
                            this.addEventMapping(pId, key, name[key]);
                        }
                        return;
                    }
                    if (name.indexOf(',') !== -1) {
                        var names = name.split(',');
                        for (var i = 0; i < names.length; i++) {
                            this.addEventMapping(pId, names[i], mapping);
                        }
                        return;
                    }
                    p.eventMap = p.eventMap || {};
                    var snakeCaseName = caseCamelToSnake(name);
                    name = snakeCaseName;
                    p.eventMap[name] = mapping; // Add default handler
                    if (!this.hasOwnProperty(caseSnakeToCamel(name))) this.addHandler(name, this.send.bind(this, name));
                };
                XST.updateBlacklist = function(pId, update) { // Accepts lists such as "addThisEvent,addThisEvent2,-removeThisOne"
                    var provider = this.providers[pId] || {};
                    if (provider === undefined) {
                        return;
                    }
                    var blacklist = provider.blacklist;
                    var items = (update || '').split(',');
                    for (var i = 0; i < items.length; i++) {
                        var item = items[i].replace(reTrimWS, ''),
                            name = item.replace(reNeg, ''),
                            idx = blacklist.indexOf(name);
                        if (reNeg.test(item)) {
                            if (idx !== -1) blacklist.splice(idx, 1);
                        } else {
                            if (idx === -1) blacklist.push(name);
                        }
                    }
                };
                XST.sendProviderEvent = function(provider, name, value, params, context) {
                    context = context || {}; // Error events for GA and FBI are already sent directly to providers.
                    if (name === 'error' && (provider.name === 'ga' || provider.name === 'fbi')) return;
                    if (provider.enabled === false) return;
                    if (typeof provider.onevent !== 'function') {
                        return;
                    }
                    if (provider.blacklist.indexOf(name) !== -1) {
                        return;
                    }
                    var argMap = provider.eventMap[name] || provider.eventMap['default'];
                    if (argMap === undefined) return;
                    provider.onevent(name, value, params, context, this.parseArgs(argMap, context));
                }; // Developer API
                XST.send = function(name, value, params, anonymizeUser) {
                    if (typeof value === 'object') {
                        params = value;
                        value = undefined;
                    }
                    params = params || {}; // Host.Log('XST.send('+" name:" +  name  +" value:" +value  +" JSON:" + JSON.stringify(params))
                    // Ignore extending playsession length with events that can extend play session unnatural
                    var nonInteractionEvent = XSTrack.NON_INTERACTION_EVENTS.indexOf(name) >= 0;
                    if (!nonInteractionEvent /*&& name.indexOf('ad_') != 0*/ ) this.handlePlaySession(); // Trigger before event to ensure everything is up-to-date
                    // Build user-scope context
                    var context = this.buildEventContext(name, value, params);
                    context._userId = this.userId; // if we don't have access to cookies,
                    // we should use the frvr-analytics.js
                    // global user id which is already a random
                    // guid, thereby ignoring what is in xs.data
                    // NB. this is as xs.data doesn't respect consent
                    if (window.__FRVR && window.__FRVR.consent) {
                        if (!window.__FRVR.consent.hasConsent(window.__FRVR.consent.COOKIES)) {
                            context._userId = this.globalUserId;
                        }
                    }
                    context.global_user_id = this.globalUserId;
                    context.non_interaction = nonInteractionEvent ? 1 : 0;
                    context.facebook_entrypoint = this.facebook_entrypoint;
                    context.facebook_context_type = this.facebook_context_type;
                    context.facebook_player_id = this.facebook_player_id || (XS.is.facebookInstant && FBInstant.player && FBInstant.player.getID ? FBInstant.player.getID() : null);
                    context.social_session_id = XS.is.facebookInstant && FBInstant.context && FBInstant.context.getID ? FBInstant.context.getID() : null;
                    context.page_session_id = window.__FRVR.analytics.getPageSessionId();
                    context.play_session_id = window.__FRVR.analytics.getPlaySessionId(); // if we need to anonymize the user,
                    // we replace all user/session related fields
                    // with a (consistent) random id
                    if (anonymizeUser) {
                        ['_userId', 'global_user_id', 'facebook_player_id', 'social_session_id', 'page_session_id', 'play_session_id'].forEach(function(personalField) {
                            if (context[personalField]) {
                                context[personalField] = nonConsentingUserId;
                            }
                        });
                    } // Add facebook campaign params
                    if (this.facebook_campaign) {
                        for (var p in this.facebook_campaign) {
                            if (p.indexOf("fb_") == 0) context[p] = this.facebook_campaign[p];
                            else context["fb_" + p] = this.facebook_campaign[p];
                        }
                    } // Grab experiment and cohort info when in a A/B test
                    var ab_cohort = window.__FRVR.cohort();
                    if (ab_cohort.experiment) {
                        var weights = ab_cohort.experiment.weights;
                        var totalWeight = weights === 'uniform' ? ab_cohort.cohortWeight * ab_cohort.experiment.numberOfCohorts : weights.reduce(function(acc, v) {
                            return acc + v;
                        }, 0);
                        context.ab_exp = ab_cohort.experiment.name;
                        context.ab_cohort_name = ab_cohort.cohortName;
                        context.ab_cohort_weight = ab_cohort.cohortWeight / totalWeight;
                    } // Dispatch event to all registered providers
                    for (var pId in this.providers) {
                        try {
                            this.providers[pId].event(name, value, params, context);
                        } catch (err) {}
                    }
                };
                XST.set = function(name, val) {
                    this.data[name] = val;
                    return val;
                };
                XST.inc = function(name, val) {
                    this.set(name, (this.data[name] || 0) + (val === undefined ? 1 : val));
                    return this.data[name];
                };
                XST.updateScreen = function(val) {
                    this.set('screen', val);
                };
                XST.updateCurrencyAmount = function(val) {
                    this.set('currency_amount', val);
                };
                XST.updateMissionsCompleted = function(val) {
                    this.set('missions_completed', val);
                };
                XST.updateProgression = function(val) {
                    this.set('progression', val);
                };
                XST.event = XST.customEvent = function(name, value, params) {
                    this.send(name, value, params);
                };
                XST.error = XST.errorEvent = function(message, errorLevel, params) {
                    this.send('error', undefined, {
                        message: message
                    }); //TODO: Directly send to ga for now to replace even window.onerror, if possible
                };
                XSTrack.DATAKEY = 'xstrack';
                XSTrack.PERSISTENT_DATA = ['cohort', 'development', 'play_session_id', 'play_session_id_time', 'play_session_count', 'last_day_played', 'days_played', 'games_played'];
                XSTrack.NON_INTERACTION_EVENTS = ['keepalive', 'session_engage_low', 'session_engage_high'];
                XSTrack.PLAYSESSIONID_TIMEOUT = 30 * 60 * 1000; // 30 minutes
                XSTrack.DATA_EXCLUDE_DIRTY = ['play_session_id_time']; // Legacy
                XST.page = function(page, fields) {
                    throw new Error('DEPRECATED: XS.track.page');
                };
                XST.timing = function(variable, value, label, fields) {
                    throw new Error('DEPRECATED: XS.track.timing');
                };
                XST.exception = function(description, fatal) {
                    throw new Error('DEPRECATED: XS.track.exception');
                };
                XST.loaded = function() {
                    throw new Error('DEPRECATED: XS.track.loaded');
                };
                XST.constructor = XSTrack;
                var XS = scope.XS = scope.XS || {};
                XS.XSTrack = XSTrack;
                XS.track = new XSTrack();
                XS.on('startLoading', function() {
                    XS.track.init();
                }, {
                    freezeGroup: scope.ENG_GRP_NAME
                }); //
                // XS-243: Neither `fst build` nor `fsx build` can sniff the
                // "xstrack" XS.data.addObject up there.  But with `fsx build` being
                // faster this can cause an actual race condition.  So impose
                // preloading here, manually.
                Host.bootstrapper.load(function(resolve) {
                    return XS.data._load(XSTrack.DATAKEY, XSTrack.DATAKEY, 'Object', resolve);
                }); // Helpers
                function argsToParams(opts) {
                    opts = opts || {};
                    var names = opts.names || [],
                        args = Array.prototype.slice.call(opts.args || []),
                        defs = opts.defaults || [],
                        params = opts.params,
                        i, name;
                    if (params === undefined && typeof args[args.length - 1] === 'object') params = args.pop();
                    params = params || {};
                    for (i = 0; i < args.length; i++) {
                        name = names[i] || i;
                        if (params[name] === undefined) params[name] = args[i] || defs[i];
                    }
                    for (i = 0; i < defs.length; i++) {
                        name = names[i] || i;
                        if (params[name] === undefined && defs[i] != undefined) params[name] = defs[i];
                    }
                    return params;
                } // Adding pre-defined event tracking handlers
                XS.track.addHandler({
                    options_change: function options_change(optionName, optionValue, params) {
                        params = argsToParams({
                            names: ['option_name', 'option_value'],
                            args: arguments
                        });
                        if (params.option_name !== undefined) params.option_name = String(params.option_name);
                        this.send('options_change', params);
                    },
                    play_session_start: function play_session_start() {
                        this.send('session_start', this.inc('play_session_count'));
                    },
                    game_end: function game_end(levelId, params) {
                        params = argsToParams({
                            names: ['level_id'],
                            args: arguments
                        });
                        this.send('game_end', params);
                        this.set('game_start_time', -1);
                    },
                    game_play_start: function game_play_start(levelId, params) {
                        params = argsToParams({
                            names: ['level_id'],
                            args: arguments
                        });
                        this.set('game_start_time', Date.now());
                        this.inc('games_played');
                        var currentDate = this.getDate();
                        if (this.data.last_day_played !== currentDate) {
                            this.set('last_day_played', currentDate);
                            this.inc('days_played');
                        }
                        this.send('game_play_start', this.inc('play_session_count'), params);
                    },
                    share: function share(buttonPlacement, params) { // buttonPlacement optional, params optional
                        params = argsToParams({
                            names: ['button_placement'],
                            defaults: ['none'],
                            args: arguments
                        });
                        this.send('share', 1, params);
                    },
                    invite: function invite(buttonPlacement, params) { // buttonPlacement optional, params optional
                        params = argsToParams({
                            names: ['button_placement'],
                            defaults: ['none'],
                            args: arguments
                        });
                        this.send('invite', 1, params);
                    },
                    socialEngage: function socialEngage(engageId, buttonPlacement, params) { // buttonPlacement optional, params optional
                        params = argsToParams({
                            names: ['engage_id', 'button_placement'],
                            defaults: [undefined, 'none'],
                            args: arguments
                        });
                        this.send('engage', 1, params);
                    },
                    crossPromotionShow: function crossPromotionShow(buttonPlacement, params) { // buttonPlacement optional, params optional
                        params = argsToParams({
                            names: ['button_placement'],
                            defaults: ['none'],
                            args: arguments
                        });
                        this.send('cross_promotion_show', 1, params);
                    },
                    crossPromotionSuccess: function crossPromotionSuccess(targetGame, params) { // targetGame optional, params optional
                        params = argsToParams({
                            names: ['target_game'],
                            args: arguments
                        });
                        this.send('cross_promotion_success', 1, params);
                    },
                    deviceInfo: function deviceInfo() {
                        this.send('device_info');
                    }
                }); // Adding ad event tracking  handlers
                (function() {
                    var adFormats = {
                            interstitial: 'mandatory',
                            mandatory: 'mandatory',
                            reward: 'rewarded',
                            rewarded: 'rewarded'
                        },
                        adValues = {
                            mandatory: 1,
                            rewarded: 3
                        },
                        adResults = {
                            response: 'ad_response',
                            finish: 'ad_result',
                            throttled: 'throttle_type'
                        };

                    function adEventName(format, call) {
                        return ['ad', adFormats[format], call].join('_');
                    }
                    XS.track.addHandler('ad', function(format, call, result, adPoint, params) {
                        var anonymizeUser = false;
                        if (window.__FRVR && window.__FRVR.consent) {
                            anonymizeUser = !window.__FRVR.consent.hasConsent(window.__FRVR.consent.AD_ANALYTICS);
                        }
                        var value = undefined,
                            params = params || {},
                            adResult = adResults[call];
                        if (adResult) {
                            params[adResult] = result;
                        } else {
                            params = adPoint || {};
                            adPoint = result;
                            result = undefined;
                        }
                        if (call === 'finish') value = result === 'success' ? adValues[adFormats[format]] : 0;
                        params.ad_point = adPoint || 'engine-triggered';
                        this.send(adEventName(format, call), value, params, anonymizeUser);
                    });
                    var adHandlers = {};
                    ['interstitial', 'reward'].forEach(function(format) {
                        ['request', 'response', 'show', 'finish', 'blocked', 'throttled'].forEach(function(call) {
                            adHandlers[adEventName(format, call)] = XS.track.ad.bind(XS.track, format, call);
                        });
                    });
                    XS.track.addHandler(adHandlers);
                })();
            })(window);

            (function(scope) {
                XS.modulesToPreload.push(function() {
                    XS.data.addBool('__ads_firstTimeView', {
                        remote: false,
                        default: true
                    });
                });
                window.adProviders = window.adProviders || {};
                var _type = {
                    REWARD: 'reward',
                    INTERSTITIAL: 'interstitial'
                }; // add enum to avoid magic strings
                var ERROR_SKIPPED = 'skipped';
                var REMOTE_ADS_CONFIG_URL = 'https://fran-cdn.frvr.com/configs/ads/{GAME}/{PLATFORM}/{CHANNEL}/xs.json';
                var platformIdentifier;
                var waterfalls = {};

                function Waterfall(configuration) {
                    var self = this;
                    var providers = [];
                    var config = configuration || {};
                    for (var providerId in config.providers) {
                        console.warn("Provider", providerId, window.adProviders[providerId]);
                        var provider = window.adProviders[providerId];
                        if (provider) {
                            var providerConfig = config.providers[providerId]; //Only push provider if initalized successfully
                            if (provider.init(providerConfig)) {
                                providers.push({
                                    config: providerConfig,
                                    provider: provider
                                });
                            }
                        }
                    }
                    providers.sort(function(a, b) {
                        if (a.config.priority < b.config.priority) return -1;
                        if (a.config.priority > b.config.priority) return 1;
                        return 0;
                    });
                    config.maxfrequency = typeof config.maxfrequency === 'undefined' ? 300000 : config.maxfrequency;
                    var lastShownAd = new Date().getTime() - (XS.data.__ads_firstTimeView ? config.maxfrequency : config.maxfrequency / 3);
                    XS.data.__ads_firstTimeView = false;
                    var isShowing = false;
                    var isFirstAd = true; // only sets frequency
                    self.setConfig = function setConfig(configuration) {
                        config.maxfrequency = typeof configuration.maxfrequency === 'undefined' ? 300000 : configuration.maxfrequency;
                    };

                    function isThrottled(type) {
                        if (type == _type.REWARD) {
                            return false;
                        }
                        var timeToNextAd = new Date().getTime() - lastShownAd;
                        if (typeof config.firstAdDelay !== 'undefined' && Date.now() - initTime < config.firstAdDelay || config.maxfrequency && timeToNextAd < config.maxfrequency && !(isFirstAd && config.forceFirstAd)) {
                            return true;
                        }
                    }

                    function isBlockedByPlatformRule(type) { // OPPO's Global H5 platform forbids to show ads in the first 2 mins
                        if (XS.is.oppoGlobal && type == "interstitial" && Date.now() - initTime < 120000) {
                            return true;
                        }
                        if (XS.is.nosoc) {
                            return true;
                        }
                    }
                    self.show = function(type, callback) {
                        if (isThrottled(type)) {
                            var timeToNextAd = new Date().getTime() - lastShownAd;
                            console.warn("Rejected ad due to timer:", config.maxfrequency - timeToNextAd);
                            return callback(false);
                        }
                        if (isBlockedByPlatformRule(type)) {
                            console.warn("Ad currently blocked by platform rule.");
                            return callback(false);
                        }
                        if (isShowing) {
                            console.warn("Ad rejected as we are already showing one");
                            return callback(false);
                        }

                        function complete(success, rejectReason) {
                            isShowing = false;
                            callback(success, rejectReason);
                        }
                        isShowing = true;
                        var offset = 0;
                        var lastRejectReason = null;

                        function next() {
                            var node = providers[offset++];
                            if (!node) return complete(false, lastRejectReason);
                            isFirstAd = false;
                            node.provider.show(node.config, function(success, rejectReason) {
                                if (success) {
                                    lastShownAd = new Date().getTime();
                                    return complete(success);
                                } else if (rejectReason === ERROR_SKIPPED) {
                                    return complete(false, rejectReason);
                                }
                                lastRejectReason = rejectReason;
                                node.provider.reject();
                                next();
                            });
                        }
                        next();
                    };
                    self.force = function(callback) {
                        if (isShowing) {
                            console.warn("Ad rejected as we are already showing one");
                            return callback(false);
                        }

                        function complete(success) {
                            isShowing = false;
                            callback(success);
                        }
                        isShowing = true;
                        var offset = 0;

                        function next() {
                            var node = providers[offset++];
                            if (!node) return complete(false);
                            isFirstAd = false;
                            node.provider.force(node.config, function(success) {
                                if (success) {
                                    lastShownAd = new Date().getTime();
                                    return complete(success);
                                }
                                node.provider.reject();
                                next();
                            });
                        }
                        next();
                    };
                    self.ready = function(type, callback) {
                        if (isThrottled(type)) {
                            return false;
                        }
                        for (var a = 0; a < providers.length; a++) {
                            var node = providers[a];
                            if (node.provider.ready(node.config)) return true;
                        }
                        return false;
                    };
                    self.preload = function(callback) {
                        var offset = 0;

                        function next() {
                            var node = providers[offset++];
                            if (!node) return callback(false);
                            node.provider.preload(node.config, function(success) {
                                if (success) return callback(success);
                                next();
                            });
                        }
                        next();
                    };
                    self.forcePreload = function(callback) {
                        var offset = 0;

                        function next() {
                            var node = providers[offset++];
                            if (!node) return callback(false);
                            node.provider.forcePreload(node.config, function(success) {
                                if (success) return callback(success);
                                next();
                            });
                        }
                        next();
                    };
                }
                var disabledTypes = {};
                XS.ads = {
                    ERROR_SKIPPED: ERROR_SKIPPED
                };
                XS.ads.preload = function(type, callback) {
                    callback = safeCallback(callback);
                    if (!XS.ads.enabled(type)) return callback(false);
                    var waterfall = waterfalls[type];
                    if (!waterfall) {
                        window.onerror && window.onerror("XS Ads 2.0: No waterfall defined for type: " + type + " on " + platformIdentifier);
                        return callback(false);
                    }
                    waterfall.preload(callback);
                };
                XS.ads.forcePreload = function(type, callback) {
                    callback = safeCallback(callback);
                    if (!XS.ads.enabled(type)) return callback(false);
                    var waterfall = waterfalls[type];
                    if (!waterfall) {
                        window.onerror && window.onerror("XS Ads 2.0: No waterfall defined for type: " + type + " on " + platformIdentifier);
                        return callback(false);
                    }
                    waterfall.forcePreload(callback);
                };
                XS.ads.show = function(type, callback) {
                    function showAd(shouldShowAd) {
                        callback = safeCallback(callback);
                        if (!shouldShowAd) {
                            return callback(false);
                        }
                        if (!XS.ads.enabled(type)) return callback(false);
                        var waterfall = waterfalls[type];
                        if (!waterfall) {
                            window.onerror && window.onerror("XS Ads 2.0: No waterfall defined for type: " + type + " on " + platformIdentifier);
                            return callback(false);
                        }
                        waterfall.show(type, callback);
                    } // check hooks before calling show ads
                    var beforeShowResult = true;
                    var offset = 0;

                    function next() {
                        var beforeShowHook = XS.ads.beforeShowHooks[offset++];
                        if (!beforeShowHook) {
                            return showAd(beforeShowResult);
                        }
                        beforeShowHook(type, function(result) {
                            beforeShowResult = beforeShowResult && result;
                            next();
                        });
                    }
                    next();
                };
                XS.ads.force = function(type, callback) {
                    callback = safeCallback(callback);
                    if (!XS.ads.enabled(type)) return callback(false);
                    var waterfall = waterfalls[type];
                    if (!waterfall) {
                        window.onerror && window.onerror("XS Ads 2.0: No waterfall defined for type: " + type + " on " + platformIdentifier);
                        return callback(false);
                    }
                    waterfall.force(callback);
                };
                XS.ads.ready = function(type) {
                    if (!XS.ads.enabled(type)) return false;
                    var waterfall = waterfalls[type];
                    if (!waterfall) {
                        window.onerror && window.onerror("XS Ads 2.0: No waterfall defined for type: " + type + " on " + platformIdentifier);
                        return false;
                    }
                    return waterfall.ready(type);
                };
                XS.ads.enabled = function(type) {
                    return waterfalls[type] !== undefined && !disabledTypes[type];
                };
                XS.ads.disable = function(type) {
                    disabledTypes[type] = true;
                    XS.emit('ads:disable_' + type);
                }; //Only supports max frequency
                XS.ads.setConfig = function(config) {
                    if (config) {
                        for (var type in config) {
                            var waterfall = waterfalls[type];
                            if (waterfall) {
                                waterfall.setConfig(config[type]);
                            }
                        }
                    }
                };
                XS.ads.beforeShowHooks = [];

                function getRemoteAdsConfigUrl(platformIdentifier) {
                    var game = Config.id;
                    var channel = __FRVR.getChannel();
                    return REMOTE_ADS_CONFIG_URL.replace('{GAME}', game).replace('{PLATFORM}', platformIdentifier).replace('{CHANNEL}', channel);
                }

                function adsInit(adConfig) {
                    if (adConfig) {
                        for (var x in adConfig) {
                            waterfalls[x] = new Waterfall(adConfig[x]);
                        }
                        XS.emit('ads:init_complete');
                    }
                }
                XS.ads._init = function(pi) {
                    console.warn("INIT", pi);
                    platformIdentifier = pi;
                    if (Config.ads) {
                        Config.platform = pi;
                        var adConfig = Config.ads[platformIdentifier];
                        if (adConfig) {
                            if (!!adConfig.remote) {
                                fetch(getRemoteAdsConfigUrl(platformIdentifier)).then(function(response) {
                                    if (!response.ok) throw Error(response.statusText);
                                    return response.json();
                                }).then(function(json) {
                                    console.debug('loaded remote ads config', json);
                                    Config.ads[platformIdentifier] = json;
                                    adsInit(json);
                                }).catch(function(err) {
                                    console.error('unable to load remote ads config', err);
                                    adsInit(adConfig);
                                });
                            } else {
                                adsInit(adConfig);
                            }
                        }
                    }
                };
            })();

            (function(scope) {
                /** Base URL for remote config location */
                var baseURL = "https://bucket.frvr.com/config/";
                /**
                 * Defines under which conditions crosspromo is active
                 */
                function isActive() {
                    return XS.is.facebookInstant;
                } /** Generate UTM strings */
                function getUTM(gameOriginName, abTestingGroup, channel) {
                    if (!channel) channel = XS.track.getChannel();
                    return "utm_source=" + channel + "&utm_medium=crosspromotion&utm_campaign=" + gameOriginName + "&utm_content=" + abTestingGroup;
                } /** Adds UTM strings to web urls **/
                function addUTMtoWebUrls(game, item) {
                    var utm = getUTM(Config && Config.id ? Config.id : game, item.cohort); // Add UTM parameter values to web related urls
                    if (item.web) {
                        for (var w in item.web) {
                            var res = item.web[w];
                            if (res.webUrl) {
                                var web_base = res.webUrl.split("?");
                                res.webUrl = web_base[0] !== res.webUrl ? res.webUrl + "&" + utm : res.webUrl + "?" + utm;
                            }
                        }
                    }
                }
                /** Get the cohort groups of the current player.
                 * 
                 * @param {object} crossPromoConfig object to replace window._jsonData
                 * @returns {object[]} array of objects containing ab_test name and allocated cohort
                 */
                function getUserCohorts(crossPromoConfig) { // debug
                    // console.log("Initial:", window._jsonData)
                    // Steps to get abtest name and cohort for the user in compliance with the format of XS.abtest framework's abtests.json in game meta folder
                    var data = {
                        ab_tests: {}
                    };
                    var abTests = [];
                    var assignedCohorts = []; // debug
                    // userID = 112233
                    // userID = 232233
                    for (var c in crossPromoConfig) {
                        var testName = crossPromoConfig[c].ab_test_name || "standardCrosspromo";
                        if (!testName || !crossPromoConfig[c].active) continue;
                        if (!data["ab_tests"][testName]) {
                            abTests.push(testName);
                            data["ab_tests"][testName] = {
                                cohorts: []
                            };
                        }
                        data["ab_tests"][testName].cohorts.push(crossPromoConfig[c].cohort);
                    } // If there are no ab_tests then just return out so window._jsonData and XS.abtest won't be mutated unnecessarily
                    if (abTests.length === 0 || abTests[0] === "standardCrosspromo") return; // console.log("abTests:", abTests)
                    // New ab_test method block
                    // Add each ab_tests to the XS.abtest framework
                    for (var abt in abTests) {
                        var test = abTests[abt];
                        XS.abtest.addTest(FBInstant.player.getID(), test, data["ab_tests"][test].cohorts, true); // set to true for tracking
                    }
                    for (var t in abTests) { // console.log("cohorts:", XS.abtest.cohort(abTests[t]))
                        assignedCohorts.push({
                            test_name: abTests[t],
                            cohort: XS.abtest.cohort(abTests[t])
                        });
                    }
                    return assignedCohorts;
                }

                function extractCohortsFromConfig(game, cohortArray) {
                    var cohort = getUserCohorts(cohortArray);
                    var selectedConfigs = [];
                    for (var i in cohortArray) {
                        var item = cohortArray[i];
                        if (!item.active) continue; // If there are no ab_tests, then default the cohort name to be 'standard' which will be used as utm_content value
                        if (!item.cohort) item.cohort = "standard"; // If cohort name of the current element matches designated cohort of current player, push to selectedConfigs
                        for (var c in cohort) {
                            if (item.ab_test_name === cohort[c].test_name && item.cohort === cohort[c].cohort) {
                                addUTMtoWebUrls(game, item);
                                selectedConfigs.push(item);
                                console.log("Remote cross-promo config for cohort [" + cohort[c].cohort + "] fetched!");
                            }
                        }
                    } // Returns the appropriate configs
                    if (selectedConfigs.length == 0) { // If there are no ab_tests, then there should only be one item in the array therefore result[0] is returned
                        console.log("Remote cross promo config with no ab_test fetched!");
                        addUTMtoWebUrls(game, cohortArray[0]);
                        selectedConfigs.push(cohortArray[0]);
                    }
                    return selectedConfigs;
                } /** XSCrosspromo holds functions wrapping cross promo related calls. */
                function XSCrosspromo() {
                    /**
                     * This gets the remote cross promo json file for the specified game.
                     * The success response will be an array of cross promo configs.
                     * Example: XS.crosspromo.getRemoteConfig("basketball", function(e, r) { return r })
                     *
                     * @param {string} fileName - Game name
                     * @param {function} callback - Function to handle request error and reponses
                     * @returns {function} callback(error, response)
                     */
                    function getRemoteConfig(fileName, callback) {
                        var self = window; // because that's what 'this' is
                        if (!fileName) return callback(new Error("Error on arguments provided."));
                        if (self.fetchRequested) {
                            console.log("Remote crosspromo config already fetched, so the fetched config will be used instead.");
                            return callback(null, window.config);
                        }
                        var req = new XMLHttpRequest();
                        req.onload = function() { //Don't process request until AB test is ready.
                            XS.abtest.setup(function() {
                                if (req.status != 200) return callback(new Error(req.status), req.response);
                                self.fetched = true; // Parse the remote JSON config file and get the ab_test cohort group of current player if there is one
                                var result = extractCohortsFromConfig(fileName, JSON.parse(req.response));
                                return callback(null, result);
                            });
                        };
                        req.open("GET", baseURL + fileName + ".json", true);
                        req.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
                        req.send();
                        self.fetchRequested = true;
                    }
                    /**
                     * This gets the local cross promo from Config.ads.crosspromo
                     */
                    function getLocalConfig() {
                        if (Config && Config.ads && Config.ads.crosspromo) {
                            return extractCohortsFromConfig(Config.id + "_local_config", Config.crosspromotion);
                        }
                        return false;
                    }
                    return {
                        config: null,
                        localConfig: null,
                        fetchRequested: false,
                        fetched: false,
                        fileName: null,
                        /** Initialize XSCrosspromo */ init: function init(hostType) {
                            var self = this;
                            var VERSION_SUFFIX = '_v2';
                            var fileSuffix = '_web';
                            if (XS.is.facebookInstant) {
                                if (!(FBInstant && FBInstant.player)) {
                                    Host.on('FBInstantStart', self.init);
                                    return;
                                }
                                fileSuffix = "_instant";
                            }
                            /** This attempts to retrieve game name from Config.id  in intervals then calls callback function.
                             *  Config is an object holding config properties initialised in XS on game load
                             */
                            function getConfigInterval(callback) { //Don't start pulling data until XS.abtest.setup has been triggered.
                                XS.abtest.setup(function() {
                                    var retries = 0;
                                    var intervalID = setInterval(function() {
                                        if (Config) {
                                            clearInterval(intervalID);
                                            callback();
                                        } else if (retries > 4) {
                                            clearInterval(intervalID);
                                            callback(new Error("XS.crosspromo: Could not access Config to get game id. Giving up!"));
                                        }
                                        retries++;
                                    }, 100);
                                });
                            } // Get game name (if none provided on init) then fetches remote cross promo config
                            getConfigInterval(function() {
                                self.fileName = Config.id + fileSuffix + VERSION_SUFFIX;
                                self.localConfig = getLocalConfig();
                                getRemoteConfig(self.fileName, function(err, config) {
                                    if (err) return console.warn(err);
                                    self.config = config;
                                    XS.emit('CrossPromoLoaded');
                                });
                            });
                        },
                        getConfig: function getConfig(type, ignoreLocal) {
                            var cfg = this.config || [];
                            if (!ignoreLocal && this.localConfig) {
                                cfg = cfg.concat(this.localConfig);
                            }
                            if (cfg) {
                                for (var i in cfg) {
                                    if (cfg[i][type]) {
                                        return cfg[i];
                                    }
                                }
                            }
                            return null;
                        },
                        fetchRemoteConfig: function() {
                            var _fetchRemoteConfig = _asyncToGenerator( /*#__PURE__*/ regeneratorRuntime.mark(function _callee(fileName, callback) {
                                var req;
                                return regeneratorRuntime.wrap(function _callee$(_context) {
                                    while (1) {
                                        switch (_context.prev = _context.next) {
                                            case 0:
                                                if (fileName) {
                                                    _context.next = 2;
                                                    break;
                                                }
                                                return _context.abrupt("return", callback(new Error("Error on arguments provided.")));
                                            case 2:
                                                req = new XMLHttpRequest();
                                                req.onload = function() {
                                                    if (req.status != 200) return callback(new Error(req.status), req.response); // Parse the remote JSON config file and get the ab_test cohort group of current player if there is one
                                                    var result = JSON.parse(req.response);
                                                    return callback(null, result);
                                                };
                                                req.open("GET", baseURL + fileName + ".json?" + Date.now(), true);
                                                req.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
                                                req.send();
                                            case 7:
                                            case "end":
                                                return _context.stop();
                                        }
                                    }
                                }, _callee);
                            }));

                            function fetchRemoteConfig(_x, _x2) {
                                return _fetchRemoteConfig.apply(this, arguments);
                            }
                            return fetchRemoteConfig;
                        }()
                    };
                }
                var XS = scope.XS = scope.XS || {};
                XS.crosspromo = new XSCrosspromo();
                if (isActive()) XS.crosspromo.init();
            })(window);

            (function(scope) {
                scope.XC = {}; // To start server locally:
                // bundle exec ruby app.rb -p 8008 -o l.frvr.com
                // Get FRVR uid from cookie
                var c = (document.cookie || '').split('; ');
                for (var i = c.length - 1; i >= 0; i--) {
                    var C = c[i].split('=');
                    if (C[0] == 'frvr_uid') { //XC.frvr_uid = C[1];
                        XC.frvr_uid = C[1];
                        break;
                    }
                } // Debug - you can switch a version to a local dev server by adding ?tsrv=1 to the url 
                if (window.location && window.location.search && window.location.search.indexOf('tsrv=') > -1) XC.server = "http://l.frvr.com:8008/";
                else // Production
                    //XC.server = "https://frvr-backend.appspot.com/" 
                    XC.server = "https://xc.frvr.com/"; // MD5 hash from https://github.com/jbt/js-crypto/blob/master/md5-min.js
                XC.c = function() {
                    for (var m = [], l = 0; 64 > l;) {
                        m[l] = 0 | 4294967296 * Math.abs(Math.sin(++l));
                    }
                    return function(c) {
                        var e, g, f, a, h = [];
                        c = unescape(encodeURI(c));
                        for (var b = c.length, k = [e = 1732584193, g = -271733879, ~e, ~g], d = 0; d <= b;) {
                            h[d >> 2] |= (c.charCodeAt(d) || 128) << 8 * (d++ % 4);
                        }
                        h[c = 16 * (b + 8 >> 6) + 14] = 8 * b;
                        for (d = 0; d < c; d += 16) {
                            b = k;
                            for (a = 0; 64 > a;) {
                                b = [f = b[3], (e = b[1] | 0) + ((f = b[0] + [e & (g = b[2]) | ~e & f, f & e | ~f & g, e ^ g ^ f, g ^ (e | ~f)][b = a >> 4] + (m[a] + (h[[a, 5 * a + 1, 3 * a + 5, 7 * a][b] % 16 + d] | 0))) << (b = [7, 12, 17, 22, 5, 9, 14, 20, 4, 11, 16, 23, 6, 10, 15, 21][4 * b + a++ % 4]) | f >>> 32 - b), e, g];
                            }
                            for (a = 4; a;) {
                                k[--a] = k[a] + b[a];
                            }
                        }
                        for (c = ""; 32 > a;) {
                            c += (k[a >> 3] >> 4 * (1 ^ a++ & 7) & 15).toString(16);
                        }
                        return c;
                    };
                }();
                XC.loggedin = false; // Secret key, disguised as a marketing string
                XC.slt = "I think you'll enjoy playing FRVR Games!";
                XC.user = XC.nouser = {
                    set: function set() {},
                    get: function get() {}
                };
                XC.send = function(url, settings) {
                    if (self._isDeleting) return;
                    var data = settings.data || {};
                    var load = settings.load || function() {};
                    var error = settings.error || function(txt) {
                        console.error("XC.error: ", txt);
                    };
                    var req = new XMLHttpRequest();
                    req.addEventListener('load', function(event) {
                        load(event.target.responseText);
                    });
                    req.addEventListener('error', function(event) {
                        error(event.target.responseText);
                    });
                    var _send = function _send(uid) {
                        var fd = new FormData();
                        var d = JSON.stringify(data);
                        var id = uid || ''; // if id is empty, login creates a new user and assigns us a user id
                        fd.append('id', id);
                        fd.append('c', XC.c(XC.slt + id + d));
                        fd.append('data', d);
                        fd.append('game', Config.id);
                        req.open('POST', url);
                        req.send(fd);
                    }; // Check if we have a cookie uid
                    if (XC.frvr_uid) { //console.log( "Found XC cookie ID" )
                        _send(XC.frvr_uid);
                    } else { // Fall back to local storage, in case someone cleared cookies
                        //console.log( "Dit NOT find XC cookie ID" )
                        if (XC.user && XC.user.id) _send(XC.user.id);
                        else Host.Preferences.GetString('frvr.uid', _send);
                    }
                };
                XC.onFBAuth = function(fbAuth) {
                    XC.login(fbAuth);
                };
                XC.onFBDeauth = function() {
                    XC.logout();
                };
                XC.login = function(fbAuth) { //console.log( "XC Login begin!")
                    if (fbAuth.isUserInteraction) XS.loadSpinner.show();
                    XC.send(XC.server + 'login', {
                        load: function load(txt) {
                            if (fbAuth.isUserInteraction) XS.loadSpinner.hide();
                            var user = JSON.parse(txt);
                            setUser(user);
                        },
                        data: {
                            id: XC.frvr_uid,
                            fb_uid: fbAuth.userID,
                            fb_auth: fbAuth.accessToken
                        },
                        error: function error(txt) { //console.log("Login Error: ",txt)
                            if (fbAuth.isUserInteraction) XS.loadSpinner.hide();
                            Host.Log("Login Error: " + txt);
                            XS.emit('login-error', txt);
                        }
                    });
                }; // XS-Data support
                // TODO: Refactor in appropriate provider
                XC.setChange = function(key, value) {
                    if (!XC.loggedin) {
                        return false;
                    }
                    XC.user.set(key, value);
                    return true;
                };
                XC.saveChanges = function(callback) {
                    if (!XC.loggedin) {
                        callback && callback(false);
                        return;
                    }
                    XC.save();
                    callback && callback(true);
                };
                XC.loginOKRU = function(userID, accessToken) { //console.log( "XC Login begin!")
                    XC.send(XC.server + 'login', {
                        load: function load(txt) {
                            var user = JSON.parse(txt);
                            setUser(user);
                        },
                        data: {
                            id: XC.frvr_uid,
                            fb_uid: userID,
                            fb_auth: accessToken
                        },
                        error: function error(txt) { //console.log("Login Error: ",txt)
                            Host.Log("Login Error: " + txt);
                            XS.emit('login-error', txt);
                        }
                    });
                };
                XC.loginMSPWA = function(userID, accessToken) { //token needs to be sent even if giberish
                    if (!accessToken) accessToken = 'x21YfaKe9A-55tfd25A74MfA'; //console.log( "[XC] MS Login begin!", userID)
                    XC.send(XC.server + 'login', {
                        load: function load(txt) {
                            var user = JSON.parse(txt);
                            setUser(user);
                        },
                        data: {
                            id: XC.frvr_uid,
                            fb_uid: userID,
                            fb_auth: accessToken
                        },
                        error: function error(txt) { //console.log("Login Error: ",txt)
                            Host.Log("[XC] Login response Error: " + txt);
                            XS.emit('login-error', txt);
                        }
                    });
                };

                function setUser(user) {
                    XC.user = new XC.User(user);
                    console.log("[XC] Set logged in - uid: ", XC.user.id);
                    XC.loggedin = true;
                    XS.data._loadRemote(XC, XC.user.data); // Store uid in both cookies and local storage
                    Host.Preferences.SetString('frvr.uid', XC.user.id); // Store FRVR uid in permanent storage
                    XC.frvr_uid = XC.user.id;
                    document.cookie = "frvr_uid=" + XC.user.id + ";path=/ ;max-age= 3153600000;expires=Fri, 01 Jan 2100 00:00:00 GMT"; // Store FRVR uid in frvr.com scope cookie
                    XS.emit('login', XC.user);
                }
                XC.save = function() {
                    if (!XC.user || !XC.user.id) throw "Tried to XC.save without being logged in";
                    XC.send(XC.server, {
                        load: function load(txt) {
                            var res = JSON.parse(txt);
                            Host.Log("game saved: " + JSON.stringify(res));
                            XS.emit('save', XC.user);
                        },
                        data: XC.user.data
                    });
                };
                XC.logout = function() {
                    XC.user = XC.nouser;
                    XC.loggedin = false;
                    XS.emit('logout');
                };
                XC.deleteAccount = function() {
                    XS.loadSpinner.show();
                    XS.freeze();
                    XC.send(XC.server, {
                        load: function load() {
                            XC.logout();
                            XS.data.resetToDefaults(); // make sure all data is cleared at this point
                            setTimeout(function() {
                                return location.reload();
                            }, 1000);
                        },
                        error: function error(txt) {
                            self._isDeleting = false;
                            XS.unfreeze();
                            XS.loadSpinner.hide();
                            console.error("XC.error: ", txt);
                        },
                        data: {
                            _deleted: true
                        }
                    });
                    self._isDeleting = true;
                };
                XC.User = function(user) {
                    var self = this;
                    self.data = user.data || {};
                    if (self.data._deleted) {
                        self.data = {};
                    }
                    self.id = user.id || null;
                    self.get = function(key) {
                        return self.data[key];
                    };
                    self.set = function(key, val) { //if(self.data[key]!=val)
                        //	self.dirty=true
                        self.data[key] = val;
                    };
                };
            })(window);

            var fetch_i_g_s_close_x_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/s/close_x.svg', {
                    "data": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"96\" height=\"96\" xml:space=\"preserve\"><path fill=\"#AAAAAB\" d=\"M96 14 82 0 48 34 14 0 0 14l34 34L0 82l14 14 34-34 34 34 14-14-34-34z\"/></svg>",
                    "width": 96,
                    "height": 96,
                    "mimetype": "svg+xml"
                });
            }, true);

            XS.modulesToPreload.push(function() { // -----------------------------------------------------------------------------
                // -----------------------------------------------------------------------------
                // -----------------------------------------------------------------------------
                // -----------------------------------------------------------------------------
                // -----------------------------------------------------------------------------
                // GUI
                // Most of our games and components solve the same problems again and again (buttons, don't-click-if-drag, etc)
                // Instead of solving these problems in every game or components, we're going to start building a general, minimal, robust and versatile GUI library that works with the new 
                // new coordinate system and PIXI.Graphics, to make stuff that looks good and works with localization and variable content without needs a bunch of manual tweaking in every game
                //
                // Design Goals:
                // - Make it easy to make it look good
                // - Make it flexible and reusable 
                // - Have sane defaults and automatic choices, that can be overridden or changed by the using code
                // - Don't require the user to tweak and tune the layouts for the vast majority of cases (no magical values etc)
                // - Don't try to solve every problem - just extend little by little
                var GUI = function GUI() {};
                GUI.util = {};
                /**
                 * GUI.util.applyDefaults
                 * Merge an "options" hash (whic	h may be undefined) and a "defaults" hash (which may not be undefined) without changing the passed in objects
                 */
                GUI.util.applyDefaults = function(options, defaults) {
                    var result = {};
                    options = options || {};
                    for (var n in defaults) {
                        result[n] = defaults[n];
                    }
                    for (var n in options) {
                        result[n] = options[n];
                    }
                    return result;
                };
                GUI.util.updateTextWithHandler = function(label, text, cb, scope) {
                    if (label.text === text) return; // need to wait next frame to get correct label boundaries
                    label.setText(text);
                    if (cb) {
                        if (scope) cb = cb.bind(scope);
                        XS.once("render", cb);
                    }
                };
                /**
                 * GUI.Button
                 * A flexible button with either text, image or both
                 * Makes sure text is sized to stay inside button, layouts nicely, etc
                 */
                GUI.Button = Container.expand(function(textOrImage, options) {
                    Container.call(this);
                    var self = this;
                    this.options = GUI.util.applyDefaults(options, {
                        radius: 20,
                        hPadding: options && !isNaN(options.hPadding) || options && !isNaN(options.padding) || 25,
                        vPadding: options && isNaN(options.vPadding) || options && !isNaN(options.padding) || 15,
                        imageSpacing: 15,
                        imageScale: 1,
                        fontSize: 40,
                        shadow: false,
                        shadowColor: 0x0079b8,
                        color: '#000000',
                        backgroundColor: 0xffffff,
                        activeColor: 0x000000
                    });
                    this._disable = false;
                    this.foreground = new Graphics();
                    this.foreground.visible = false;
                    this.foreground.alpha = 0.1;
                    if (this.options.shadow) {
                        this.shadow = new Graphics();
                        self.addChild(this.shadow);
                    }
                    this.background = new Graphics();
                    this.background.interactive = true;
                    this.background.buttonMode = true; // TODO: Don't fire the click if there was a drag between up and down
                    this.background.on('down', function(e) {
                        if (self._disable) return;
                        self.foreground.visible = true;
                    });
                    this.background.on('up', function(e) {
                        if (self._disable) return;
                        self.emit('click', e);
                        self.foreground.visible = false;
                    }); // new Text2("1000", {weight:400, fill:"#FFFFFF", size:70,maxWidth:210,dropShadow:true})
                    var image = this.options.image; // Text button
                    if (typeof textOrImage === 'string' || textOrImage instanceof Host.Localize.LocalizedString) {
                        this.text = textOrImage;
                    } else {
                        image = textOrImage;
                    }
                    this.setImage(image);
                    if (this.text) {
                        var maxWidth;
                        if (this.options.width) {
                            if (this.options.imagePosition === undefined || this.options.imagePosition == 'left' || this.options.imagePosition == 'right') {
                                maxWidth = this.options.width - this.image.width - this.options.imageSpacing - 2 * this.options.hPadding;
                            } else {
                                maxWidth = this.options.width - 2 * this.options.hPadding;
                            }
                        }
                        this.label = new Text2(textOrImage, {
                            size: this.options.fontSize,
                            fill: this.options.color,
                            maxWidth: maxWidth,
                            weight: this.options.weight
                        });
                    }
                    this.addChild(this.background);
                    this.addChild(this.foreground);
                    if (this.label) {
                        this.addChild(this.label);
                    }
                    if (this.image) {
                        this.addChild(this.image);
                    }
                    this.onResize();
                });
                Object.defineProperty(GUI.Button.prototype, 'width', {
                    get: function get() {
                        return this.options.width || this.getLocalBounds().width;
                    },
                    set: function set(w) {
                        this.options.width = w;
                        this.onResize();
                    }
                });
                Object.defineProperty(GUI.Button.prototype, 'height', {
                    get: function get() {
                        return this.options.height || this.getLocalBounds().height;
                    },
                    set: function set(h) {
                        this.options.height = h;
                        this.onResize();
                    }
                });
                GUI.Button.prototype.onResize = function() {
                    var labelWidth = this.label ? this.label.width : 0;
                    var labelHeight = this.label ? this.label.height : 0;
                    var imageWidth = this.image ? this.image.width : 0;
                    var imageHeight = this.image ? this.image.height : 0;
                    this._width = this.options.width || imageWidth + this.options.imageSpacing + labelWidth + 2 * this.options.hPadding;
                    this._height = this.options.height || Math.max(labelHeight, imageHeight) + 2 * this.options.vPadding;
                    this.drawBackground(this._width, this._height);
                    if (this.image) {
                        if (this.label) { // Image and label: Complex
                            var imageAndText = {
                                width: this.label.width + this.options.imageSpacing + this.image.width,
                                height: this.label.height + this.options.imageSpacing + this.image.height
                            }; //console.log("size: Both heights", imageAndText)
                            //console.log("size: image", this.image.dimensions)
                            //console.log("size: label", this.label.dimensions)
                            var bg = {
                                width: this.background.width,
                                height: this.background.height
                            };
                            switch (this.options.imagePosition) { // [Image]
                                // My Text 
                                case 'top':
                                    this.image.x = Math.round((bg.width - this.image.width) / 2);
                                    this.image.y = Math.round((bg.height - imageAndText.height) / 2);
                                    this.label.x = Math.round((bg.width - this.label.width) / 2);
                                    this.label.y = this.image.y + this.image.height + this.options.imageSpacing;
                                    break; // My Text 
                                    // [Image]
                                case 'bottom':
                                    this.label.x = Math.round((bg.width - this.label.width) / 2);
                                    this.label.y = Math.round((bg.height - imageAndText.height) / 2);
                                    this.image.x = Math.round((bg.width - this.image.width) / 2);
                                    this.image.y = this.label.y + this.label.height + this.options.imageSpacing;
                                    break; // My Text [Image]
                                case 'right':
                                    this.label.x = Math.round((this.background.width - imageAndText.width) / 2); // Center both in button
                                    this.label.y = Math.round((this.background.height - this.label.height) / 2); // vertical center
                                    this.image.x = this.label.x + this.label.width + this.options.imageSpacing;
                                    this.image.y = Math.round((this.background.height - this.image.height) / 2); // vertical center
                                    break; // [Image] My Text
                                case 'left':
                                default:
                                    this.image.x = Math.round((this.background.width - imageAndText.width) / 2); // Center both in button
                                    this.image.y = Math.round((this.background.height - this.image.height) / 2); // vertical center
                                    this.label.x = this.image.x + this.image.width + this.options.imageSpacing;
                                    this.label.y = Math.round((this.background.height - this.label.height) / 2); // vertical center
                                    break;
                            }
                        } else { // Image, no label: Ignore image position and center the image 
                            this.image.x = (this.background.width - this.image.width) / 2;
                            this.image.y = (this.background.height - this.image.height) / 2;
                        }
                    } else { // Only text
                        if (this.label) {
                            this.label.x = Math.round((this.background.width - this.label.width) / 2);
                            this.label.y = Math.round((this.background.height - this.label.height) / 2);
                        }
                    }
                };
                GUI.Button.prototype.disable = function() {
                    this._disable = true;
                };
                GUI.Button.prototype.enable = function() {
                    this._disable = false;
                };
                GUI.Button.prototype.drawBackground = function(w, h, backgroundColor, activeColor, shadowColor) {
                    this.background.clear();
                    this.background.beginFill(backgroundColor || this.options.backgroundColor);
                    this.background.drawRoundedRect(0, 0, w, h, this.options.radius);
                    this.foreground.clear();
                    this.foreground.beginFill(activeColor || this.options.activeColor);
                    this.foreground.drawRoundedRect(0, 0, w, h, this.options.radius);
                    if (this.shadow) {
                        this.shadow.clear();
                        this.shadow.beginFill(shadowColor || this.options.shadowColor);
                        this.shadow.drawRoundedRect(0, 4, w, h + (this.options.shadowHeight || 4), this.options.radius);
                    }
                };
                GUI.Button.prototype.setText = function(text) {
                    this.label.setText(text);
                    this.onResize();
                };
                GUI.Button.prototype.setImage = function(image) {
                    var changed = false;
                    if (this.image) {
                        this.image.parent.removeChild(image);
                        this.image = null;
                        changed = true;
                    } // Texture, Canvas or Image: Create a Sprite
                    if (image && (image instanceof HTMLImageElement || image instanceof HTMLCanvasElement || image instanceof Texture || image instanceof JSGImage)) {
                        changed = true;
                        this.image = new Sprite(image);
                        if (this.options.imageScale !== 1) {
                            this.image.scale.set(this.options.imageScale);
                        } else if (this.options.width || this.options.height) {
                            this.image.scale.set(1);
                            var scale = Math.min(this.options.height ? (this.options.height - 2 * this.options.vPadding) / this.image.height : 1, this.options.width ? (this.options.width - this.options.hPadding) / this.image.width : 1);
                            if (scale > 0) {
                                this.image.scale.set(scale);
                            }
                        }
                        this.image.resolution = this.image.scale.x;
                        this.image.applyResolution();
                    } // Sprite: Just use Sprite directly
                    if (!this.image && image && image instanceof Sprite) {
                        this.image = image;
                    }
                    if (changed) {
                        this.onResize();
                    }
                };
                /** 
                 * GUI.SpriteDialog
                 */
                GUI.SpriteDialog = ContainerFixedSize.expand(function(backgroundSprite, options) {
                    ContainerFixedSize.call(this, backgroundSprite.width, backgroundSprite.height);
                    var self = this;
                    options = options || {};
                    self.options = GUI.util.applyDefaults(options, {
                        margin: 30,
                        hPadding: options.hPadding || options.padding || 0,
                        vPadding: options.vPadding || options.padding || 0,
                        darkenOpacity: 0.8,
                        fadeInDuration: 0.5,
                        fadeOutDuration: 0.5,
                        showCloseX: false,
                        blurClose: false,
                        blurCancel: false,
                        closeXHPadding: 30,
                        closeXVPadding: 30
                    });
                    var darken = self.darken = new Graphics();
                    darken.beginFill(self.options.darkenColor || 0x000000, self.options.darkenOpacity);
                    darken.drawRect(0, 0, 200, 200); // Preventing clickthrough
                    self.darken.interactive = true;
                    self.darken.buttonMode = false;
                    darken.on('down', function() {});
                    darken.on('click', function() {});
                    darken.on('up', function() {
                        if (self.options.blurClose) {
                            self.close();
                        } else if (self.options.blurCancel) {
                            self.cancel();
                        }
                    });
                    self.background = backgroundSprite;
                    self.addChild(self.background); // Preventing clickthrough
                    self.background.interactive = true;
                    self.background.buttonMode = false;
                    self.background.on('down', function() {});
                    self.background.on('click', function() {});
                    self.background.on('up', function() {}); // Handle close X in upper right hand corner
                    if (self.options.showCloseX) {
                        self.closeX = new Sprite(fetch_i_g_s_close_x_svg()); // TODO: Make sure this gets rolled in
                        self.closeX.scale.set(0.5);
                        self.closeX.anchor.set(1, 0);
                        var closeXAlpha = 0.7;
                        self.closeX.alpha = closeXAlpha;
                        self.addChild(self.closeX);
                        self.closeX.on('down', function() {
                            self.closeX.alpha = 0.5;
                        });
                        self.closeX.on('up', function() {
                            self.closeX.alpha = closeXAlpha;
                            self.cancel();
                        });
                        self.closeX.x = self.innerWidth - self.options.closeXHPadding;
                        self.closeX.y = self.options.closeXVPadding;
                    }
                    self.width = self.background.width;
                    self.height = self.background.height;
                    self.onResize();
                });
                /**
                 * Dialog width, when used by children of the dialog (unaffected by scale)
                 */
                Object.defineProperty(GUI.SpriteDialog.prototype, 'innerWidth', {
                    get: function get() {
                        return this.width / this.scale.x;
                    }
                });
                /**
                 * Dialog height, when used by children of the dialog (unaffected by scale)
                 */
                Object.defineProperty(GUI.SpriteDialog.prototype, 'innerHeight', {
                    get: function get() {
                        return this.height / this.scale.y;
                    }
                });
                GUI.SpriteDialog.prototype.onResize = function() {
                    this.x = -this.width / 2;
                    this.y = -this.height / 2;
                    this.y += this.options.offsetY || 0;
                };
                GUI.SpriteDialog.prototype.resizeHandler = function() {
                    var fitScale = Math.max(0.2, Math.min((XS.gui.width - XS.gui.margins.left - XS.gui.margins.right - this.options.margin - this.options.hPadding) / this.innerWidth, (XS.gui.height - XS.gui.margins.top - XS.gui.margins.bottom - this.options.margin - this.options.vPadding) / this.innerHeight, 1));
                    this.scale.set(fitScale);
                    this.onResize(); // Fit the darken layer to the full screen, even though it's a child of this group
                    if (this.darken) {
                        if (this.parent) {
                            var size = this.parent.toLocalSize(XS.gui.dimensions);
                            this.darken.width = size.x;
                            this.darken.height = size.y;
                            var upperLeft = new Point(0, 0);
                            var p = this.parent.toLocal(upperLeft);
                            this.darken.x = p.x;
                            this.darken.y = p.y;
                        }
                    }
                };
                GUI.SpriteDialog.prototype.addButton = function(text, options) {
                    var button = text instanceof GUI.Button ? text : new GUI.Button(text, options);
                    this.addChild(button);
                    return button;
                };
                GUI.SpriteDialog.prototype.isOpen = function() {
                    return this._open;
                };
                GUI.SpriteDialog.prototype.open = function(callback) {
                    this._open = true;
                    this.onCloseCallback = callback; // TODO: Animate dialog in
                    //console.warn("Open GUI.Dialog!")
                    var self = this;

                    function onOpen() {
                        self.emit('open', self);
                        XS.on('resize', self.resizeHandler.bind(self));
                    }
                    if (self.darken) {
                        XS.gui.center.addChild(self.darken);
                        self.darken.alpha = 0;
                        new Tween(self.darken, {
                            alpha: this.options.darkenOpacity
                        }, this.options.fadeInDuration);
                    }
                    XS.gui.center.addChild(self);
                    self.resizeHandler(); //self.scale.set( 0.8 )
                    //new Tween( self.scale, { x: 1.1, y: 1.1 }, 0.6, Tween.easeout ).call(function() {
                    //	new Tween( self.scale, { x: 1, y: 1 }, 0.1, Tween.easeinout ).call(function() {
                    //		onOpen()
                    //	})
                    //})
                    onOpen();
                };
                /**
                 * Cancels (closes) dialog, without triggering previous callbacks)
                 */
                GUI.SpriteDialog.prototype.cancel = function() {
                    this._open = false;
                    var self = this;
                    XS.off('resize', self.resizeHandler.bind(self));
                    self.emit('close', self);
                    if (self.parent) {
                        self.parent.removeChild(self);
                    }
                    if (self.darken) {
                        self.darken.alpha = 0;
                        new Tween(self.darken, {
                            alpha: 0
                        }, this.options.fadeOutDuration).call(function() {
                            if (self.darken.parent) {
                                self.darken.parent.removeChild(self.darken);
                            }
                        });
                    }
                };
                GUI.SpriteDialog.prototype.close = function(callback) {
                    this._open = false;
                    var self = this;

                    function onClose() {
                        callback && callback();
                        if (!self.options.manualCloseCallback) {
                            self.onCloseCallback && self.onCloseCallback();
                        }
                        self.cancel();
                    } // TODO: Animate dialog out
                    //this.scale.set( 1 )
                    //new Tween( self.scale, { x: 1.1, y: 1.1 }, 0.2 ).call(function() {
                    //	new Tween( self.scale, { x: 1, y: 1 }, 0.2 ).call(function() {
                    //		onClose()
                    //	})
                    //})
                    onClose();
                };
                /** 
                 * GUI.Dialog
                 */
                GUI.Dialog = ContainerFixedSize.expand(function(width, height, options) {
                    ContainerFixedSize.call(this, width, height);
                    var self = this;
                    options = options || {};
                    self.options = GUI.util.applyDefaults(options, {
                        radius: 26,
                        width: width,
                        height: height,
                        margin: 30,
                        backgroundColor: 0xffffff,
                        darkenOpacity: 0.6,
                        fadeInDuration: 0.5,
                        fadeOutDuration: 0.5,
                        showCloseX: false,
                        blurClose: false,
                        blurCancel: false,
                        closeXHPadding: 30,
                        closeXVPadding: 30
                    });
                    var darken = self.darken = new Graphics();
                    darken.beginFill(this.options.darkenColor || 0x000000, this.options.darkenOpacity);
                    darken.drawRect(0, 0, 200, 200); // Preventing clickthrough
                    this.darken.interactive = true;
                    this.darken.buttonMode = false;
                    darken.on('down', function() {});
                    darken.on('click', function() {});
                    darken.on('up', function() {
                        if (self.options.blurClose) {
                            self.close();
                        } else if (self.options.blurCancel) {
                            self.cancel();
                        }
                    });
                    self.background = new Graphics();
                    self.addChild(self.background); // Preventing clickthrough
                    self.background.interactive = true;
                    self.background.buttonMode = false;
                    self.background.on('down', function() {});
                    self.background.on('click', function() {});
                    self.background.on('up', function() {}); // Handle close X in upper right hand corner
                    if (self.options.showCloseX) {
                        self.closeX = new Sprite(fetch_i_g_s_close_x_svg()); // TODO: Make sure this gets rolled in
                        self.closeX.scale.set(0.5);
                        self.closeX.anchor.set(1, 0);
                        var closeXAlpha = 0.7;
                        self.closeX.alpha = closeXAlpha;
                        self.addChild(self.closeX);
                        self.closeX.on('down', function() {
                            self.closeX.alpha = 0.5;
                        });
                        self.closeX.on('up', function() {
                            self.closeX.alpha = closeXAlpha;
                            self.cancel();
                        });
                    }
                    self.setSize(this.options.width, this.options.height);
                });
                /**
                 * Dialog width, when used by children of the dialog (unaffected by scale)
                 */
                Object.defineProperty(GUI.Dialog.prototype, 'innerWidth', {
                    get: function get() {
                        return this.width / this.scale.x;
                    }
                });
                /**
                 * Dialog height, when used by children of the dialog (unaffected by scale)
                 */
                Object.defineProperty(GUI.Dialog.prototype, 'innerHeight', {
                    get: function get() {
                        return this.height / this.scale.y;
                    }
                });
                GUI.Dialog.prototype.setSize = function(w, h) {
                    this.width = w;
                    this.height = h;
                    this.background.clear();
                    this.background.beginFill(this.options.backgroundColor);
                    this.background.drawRoundedRect(0, 0, this.width, this.height, this.options.radius);
                    this.onResize();
                };
                GUI.Dialog.prototype.onResize = function() {
                    this.x = -this.width / 2;
                    this.y = -this.height / 2;
                    if (this.closeX) {
                        this.closeX.x = this.innerWidth - this.options.closeXHPadding;
                        this.closeX.y = this.options.closeXVPadding;
                    }
                    this.y += this.options.offsetY || 0;
                };
                GUI.Dialog.prototype.resizeHandler = function() {
                    var fitScale = Math.min((XS.gui.width - XS.gui.margins.left - XS.gui.margins.right - this.options.margin) / (this.options.width || this.width), (XS.gui.height - XS.gui.margins.top - XS.gui.margins.bottom - this.options.margin) / (this.options.height || this.height), 1);
                    this.scale.set(fitScale);
                    this.onResize(); // Fit the darken layer to the full screen, even though it's a child of this group
                    if (this.darken) {
                        if (this.parent) {
                            var size = this.parent.toLocalSize(XS.gui.dimensions);
                            this.darken.width = size.x;
                            this.darken.height = size.y;
                            var upperLeft = new Point(0, 0);
                            var p = this.parent.toLocal(upperLeft);
                            this.darken.x = p.x;
                            this.darken.y = p.y;
                        }
                    }
                };
                GUI.Dialog.prototype.addButton = function(text, options) {
                    var button = text instanceof GUI.Button ? text : new GUI.Button(text, options);
                    this.addChild(button);
                    return button;
                };
                GUI.Dialog.prototype.isOpen = function() {
                    return this._open;
                };
                GUI.Dialog.prototype.open = function(callback) {
                    this._open = true;
                    this.onCloseCallback = callback; // TODO: Animate dialog in
                    //console.warn("Open GUI.Dialog!")
                    var self = this;

                    function onOpen() {
                        self.emit('open', self);
                        XS.on('resize', self.resizeHandler.bind(self));
                    }
                    if (self.darken) {
                        XS.gui.center.addChild(self.darken);
                        self.darken.alpha = 0;
                        new Tween(self.darken, {
                            alpha: this.options.darkenOpacity
                        }, this.options.fadeInDuration);
                    }
                    XS.gui.center.addChild(self);
                    self.resizeHandler(); //self.scale.set( 0.8 )
                    //new Tween( self.scale, { x: 1.1, y: 1.1 }, 0.6, Tween.easeout ).call(function() {
                    //	new Tween( self.scale, { x: 1, y: 1 }, 0.1, Tween.easeinout ).call(function() {
                    //		onOpen()
                    //	})
                    //})
                    onOpen();
                };
                /**
                 * Cancels (closes) dialog, without triggering previous callbacks)
                 * @param {callback} - Optional callback that is called when dialog has closed
                 */
                GUI.Dialog.prototype.cancel = function(callback) {
                    this._open = false;
                    var self = this;
                    XS.off('resize', self.resizeHandler.bind(self));
                    self.emit('close', self);
                    if (self.parent) {
                        self.parent.removeChild(self);
                    }
                    if (self.darken) {
                        self.darken.alpha = 0;
                        new Tween(self.darken, {
                            alpha: 0
                        }, this.options.fadeOutDuration).call(function() {
                            if (self.darken.parent) {
                                self.darken.parent.removeChild(self.darken);
                            }
                        });
                    }
                };
                GUI.Dialog.prototype.close = function(callback) {
                    this._open = false;
                    var self = this;

                    function onClose() {
                        callback && callback();
                        if (!self.options.manualCloseCallback) {
                            self.onCloseCallback && self.onCloseCallback();
                        }
                        self.cancel();
                    } // TODO: Animate dialog out
                    //this.scale.set( 1 )
                    //new Tween( self.scale, { x: 1.1, y: 1.1 }, 0.2 ).call(function() {
                    //	new Tween( self.scale, { x: 1, y: 1 }, 0.2 ).call(function() {
                    //		onClose()
                    //	})
                    //})
                    onClose();
                };
                GUI.SpeechBubble = Container.expand(function(text, options) {
                    Container.call(this);
                    this.options = GUI.util.applyDefaults(options, {
                        radius: 40,
                        fontSize: 40,
                        padding: 40
                    }); //this.textbox = new Rectangle( this.options.padding, this.options.padding, this.options.width-2*this.options.padding, this.options.height-2*this.options.padding )
                    this.text = new Text2(text, {
                        size: this.options.fontSize
                    }); // Textbox stuff is for flowing in the future - not working yet
                    this.text.x = this.options.padding; // this.textbox.x + (this.textbox.width-this.text.width)/2 
                    this.text.y = this.options.padding; // this.textbox.y
                    if (!this.options.width) {
                        this.options.width = this.text.width + 2 * this.options.padding;
                    }
                    if (!this.options.height) {
                        this.options.height = this.text.height + 2 * this.options.padding;
                    }
                    this.tail = new Graphics();
                    this.background = new Graphics();
                    this.addChild(this.tail);
                    this.addChild(this.background);
                    this.addChild(this.text);
                    this.onResize();
                });
                GUI.SpeechBubble.prototype.onResize = function() {
                    this.drawBackground(this.options.width, this.options.height);
                    this.drawTail(this.options.width, this.options.height);
                };
                GUI.SpeechBubble.prototype.drawBackground = function(w, h) {
                    this.background.clear();
                    this.background.beginFill(0xffffff);
                    this.background.drawRoundedRect(0, 0, w, h, this.options.radius);
                    this.background.endFill();
                };
                GUI.SpeechBubble.prototype.drawTail = function(w, h) {
                    this.tail.x = w - this.options.radius / 2;
                    this.tail.y = h - this.options.radius / 2;
                    var target = new Point(100, 100);
                    var topLeft = new Point(-20, 20);
                    var topRight = new Point(20, -20);
                    this.tail.clear();
                    this.tail.beginFill(0xffffff); // rounded
                    //var cp = new Point( 0, target.y/2 )
                    //var cp2 = new Point( cp.x+50, cp.y+50 )
                    //this.tail.moveTo( topRight.x, topRight.y )
                    //this.tail.quadraticCurveTo( cp.x, cp.y, target.x, target.y)
                    //this.tail.quadraticCurveTo( cp2.x, cp2.y, topLeft.x, topLeft.y)
                    //this.tail.lineTo( topRight.x, topRight.y )
                    // straight
                    this.tail.moveTo(topRight.x, topRight.y);
                    this.tail.lineTo(target.x, target.y);
                    this.tail.lineTo(topLeft.x, topLeft.y);
                    this.tail.lineTo(topRight.x, topRight.y);
                    this.tail.endFill();
                };
                GUI.ProgressBar = Container.expand(function(width, height, options) {
                    Container.call(this);
                    this.options = GUI.util.applyDefaults(options, {
                        width: width,
                        height: height,
                        color: 0x79df60,
                        labelColor: "#ffffff",
                        backgroundColor: 0x316e7d,
                        fontSize: 20,
                        value: 0.7, // value is a progress value between 0 and 1
                        radius: height,
                        padding: 2,
                        weight: 500,
                        caption: ""
                    });
                    this.label = new Text2(this.options.caption, {
                        size: this.options.fontSize,
                        fill: this.options.labelColor,
                        weight: this.options.weight
                    });
                    this.background = new Graphics();
                    this.foreground = new Graphics();
                    this.foregroundMask = new Graphics();
                    this.centerPoint = new Point(this.options.width * 0.5, this.options.height * 0.5);
                    this.fgCont = new Container(); // Containers has more adequate behaviour rather than Graphics
                    this.bgCont = new Container(); // Containers has more adequate behaviour rather than Graphics
                    this.addChild(this.bgCont);
                    this.addChild(this.fgCont);
                    this.bgCont.addChild(this.background);
                    this.fgCont.addChild(this.foreground);
                    this.fgCont.addChild(this.foregroundMask);
                    this.foreground.mask = this.foregroundMask;
                    this.addChild(this.label);
                    this.render();
                    this.updateValue();
                });
                GUI.ProgressBar.prototype.render = function() {
                    var opts = this.options;
                    var x = opts.padding || 0;
                    var y = opts.padding || 0;
                    var w = opts.width - x * 2;
                    var h = opts.height - y * 2; // foreground + mask
                    drawRoundedRect(this.foregroundMask, 0, 0, 0, w, h, opts.radius);
                    drawRoundedRect(this.foreground, opts.color, 0, 0, w, h, opts.radius); // background
                    drawRoundedRect(this.background, opts.backgroundColor, 0, 0, opts.width, opts.height, opts.radius + opts.padding);
                    this.fgCont.x = (this.bgCont.width - this.fgCont.width) * 0.5;
                    this.fgCont.y = (this.bgCont.height - this.fgCont.height) * 0.5;

                    function drawRoundedRect(ctx, color, x, y, width, height, radius) {
                        ctx.clear();
                        ctx.beginFill(color);
                        if (!isNaN(radius) && radius > 0) {
                            ctx.drawRoundedRect(x, y, width, height, radius);
                        } else {
                            ctx.drawRect(x, y, width, height);
                        }
                        ctx.endFill();
                    }
                    this.updateCaption();
                };
                GUI.ProgressBar.prototype.updateCaption = function() {
                    this.label.x = this.centerPoint.x - this.label.width * 0.5;
                    this.label.y = this.centerPoint.y - this.label.height * 0.5;
                };
                GUI.ProgressBar.prototype.updateValue = function() {
                    var percentValue = Math.max(0, Math.min(1, this.options.value));
                    this.foreground.x = percentValue * this.foreground.width - this.foreground.width;
                };
                Object.defineProperty(GUI.ProgressBar.prototype, 'value', {
                    get: function get() {
                        return this.options.value;
                    },
                    set: function set(value) {
                        this.options.value = value;
                        this.updateValue();
                    }
                });
                Object.defineProperty(GUI.ProgressBar.prototype, 'caption', {
                    get: function get() {
                        return this.options.caption;
                    },
                    set: function set(value) {
                        this.options.caption = value;
                        GUI.util.updateTextWithHandler(this.label, value, this.updateCaption, this);
                    }
                });
                XS.gui.baseClasses = GUI; // -----------------------------------------------------------------------------
                // -----------------------------------------------------------------------------
                // -----------------------------------------------------------------------------
                // -----------------------------------------------------------------------------
                // -----------------------------------------------------------------------------
            });

            var fetch_i_g_s_branded_modal_base_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/s/branded-modal-base.svg', {
                    "data": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"620\" height=\"916\"><path data-name=\"Tracciato 923\" d=\"M142.374.005H70.882A71.091 71.091 0 0 0-.001 70.888v31.079h142.452Z\" fill=\"#00bdff\"/><path data-name=\"Tracciato 924\" d=\"M263.059.004h-121.66l-17.481 26.1v75.867h139.141Z\" fill=\"#9b00ff\"/><path data-name=\"Tracciato 925\" d=\"M383.759.004H262.095l-17.481 26.1v75.867H383.76Z\" fill=\"#ff0029\"/><path data-name=\"Tracciato 926\" d=\"M504.338.004H382.673l-17.481 26.1v75.867h139.146Z\" fill=\"#ff9603\"/><path data-name=\"Tracciato 927\" d=\"M620 70.884A71.092 71.092 0 0 0 549.117.001h-45.64l-17.516 26.082v75.88H620Z\" fill=\"#ffc700\"/><path data-name=\"banner bg\" d=\"M620.002 97.995c0-39.553-32.217-71.914-71.591-71.914H71.59C32.215 26.081 0 58.442 0 97.995v653.858h620Z\" fill=\"#fff\"/><g data-name=\"btn play\"><path d=\"M.002 758v86.025C.002 883.612 32.217 916 71.592 916h476.819c39.374 0 71.591-32.388 71.591-71.975V758Z\" fill=\"#1d9d3e\"/><path data-name=\"btn\" d=\"M.002 748v86.025C.002 873.612 32.217 906 71.592 906h476.819c39.374 0 71.591-32.388 71.591-71.975V748Z\" fill=\"#2abb4f\"/></g></svg>",
                    "width": 620,
                    "height": 916,
                    "mimetype": "svg+xml"
                });
            }, true);

            XS.modulesToPreload.push(function() {
                if (!XS.gui.baseClasses) {
                    console.error("XS.gui.baseClasses is not imported. DialogOkNok is not available");
                    return;
                }
                var defaults = {
                    font: 'Helvetica neue, helvetica, Verdana, Arial',
                    backgroundSprite: new Sprite(fetch_i_g_s_branded_modal_base_svg()),
                    confirmText: Host.Localize.Translate("ACCEPT"),
                    hPadding: 5,
                    closeOnAccept: true
                };

                function rect(w, h, color, alpha) {
                    var g = new Graphics();
                    g.beginFill(color, alpha === undefined ? 1 : alpha);
                    g.drawRect(0, 0, w, h);
                    g.endFill();
                    return g;
                }
                /**
                 * Creates a dialog with an accept button on XS.gui.center
                 * 
                 * @param {object} options defaults are provided for dialog background sprite and confirm text
                 * @constructor
                 *
                 * Example usage:
                 *  var acceptDialog = new XS.gui.AcceptDialog({
                 *    vPadding: 300,
                 *    closeOnAccept: false
                 *  });
                 *
                 *  acceptDialog.addHeadline(Host.Localize.Translate("Watch AD", {}, "Headline subtext in retry overlay"));
                 *  var extraVerticalPadding = 60;
                 *  acceptDialog.addRow(new GUI.Button(image: fetch_('i/g/ad.svg')), extraVerticalPadding);
                 *  acceptDialog.addSubheadline(config.subtext.text);
                 *
                 *  acceptDialog.open(function onCloseCallback(){
                 *      console.log('Yes was pressed');
                 *  });
                 */
                var AcceptDialog = XS.gui.baseClasses.SpriteDialog.expand(function(options) {
                    var _options = XS.gui.baseClasses.util.applyDefaults(options, defaults);
                    XS.gui.baseClasses.SpriteDialog.call(this, _options.backgroundSprite, _options);
                    var self = this; // accept button and text
                    var acceptButtonHeightRatio = 0.20;
                    var acceptClickLayer = rect(self.width, acceptButtonHeightRatio * self.height, '#FFFFFF', 0.001);
                    acceptClickLayer.y = (1 - acceptButtonHeightRatio) * self.height;
                    acceptClickLayer.on('up', function() {
                        if (self.options.closeOnAccept) {
                            self.close();
                        } else {
                            self.onCloseCallback && self.onCloseCallback();
                        }
                    });
                    self.addChild(acceptClickLayer);
                    var acceptLabel = new Text2(self.options.confirmText, {
                        align: 'center',
                        size: 110,
                        weight: 400,
                        font: self.options.font,
                        fill: '#FFFFFF',
                        maxWidth: self.innerWidth - 2 * self.options.hPadding
                    });
                    acceptLabel.x = 0.5 * (self.width - acceptLabel.width);
                    acceptLabel.y = self.height - 0.5 * (acceptClickLayer.height + acceptLabel.height);
                    self.addChild(acceptLabel);
                    self.styles = {};
                    self.styles.headline = {
                        align: 'center',
                        size: 90,
                        weight: 400,
                        font: self.options.font,
                        fill: '#0a7cb0',
                        maxWidth: self.innerWidth - 2 * self.options.hPadding
                    };
                    self.styles.subheadline = {
                        align: 'center',
                        size: 48,
                        weight: 330,
                        font: self.options.font,
                        fill: "#888888",
                        maxWidth: self.innerWidth - 2 * self.options.hPadding
                    };
                    self.topOffset = 120;
                });
                /**
                 * Add a headline at topOffset
                 */
                AcceptDialog.prototype.addHeadline = function(text, options) {
                    var style = XS.gui.baseClasses.util.applyDefaults(options, this.styles.headline);
                    var headline = new Text2(text, style);
                    headline.anchor.set(0.5, 0.5);
                    headline.x = this.innerWidth / 2;
                    headline.y = this.topOffset;
                    this.topOffset += 80;
                    this.addChild(headline);
                    return headline;
                };
                /**
                 * Add a section headline at topOffset
                 */
                AcceptDialog.prototype.addSubheadline = function(text, options) {
                    var style = XS.gui.baseClasses.util.applyDefaults(options, this.styles.subheadline);
                    var headline = new Text2(text, style);
                    headline.anchor.set(0.5, 0.5);
                    headline.x = this.innerWidth / 2;
                    headline.y = this.topOffset;
                    this.topOffset += 40;
                    this.addChild(headline);
                    return headline;
                };
                AcceptDialog.prototype.addRow = function(child, extraOffset) {
                    this.addChild(child);
                    child.y = this.topOffset;
                    child.x = (this.width / this.scale.x - child.width) / 2;
                    this.topOffset += child.height + (isNaN(extraOffset) ? 50 : extraOffset);
                };
                AcceptDialog.prototype.setSize = function() { //no
                    throw new Error("No setSize");
                };
                XS.gui.AcceptDialog = AcceptDialog;
            });

            var fetch_i_g_s_crown_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/s/crown.svg', {
                    "data": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"70\" height=\"50\"><g fill=\"#FFF\"><path d=\"M65.449 14.126 47.443 28.965 34.95 5.68 22.516 29.141 4.452 14.067 12 50h46z\"/><circle cx=\"4.982\" cy=\"13.126\" r=\"4.982\"/><circle cx=\"64.982\" cy=\"13.126\" r=\"4.982\"/><circle cx=\"34.982\" cy=\"5.126\" r=\"4.982\"/></g></svg>",
                    "width": 70,
                    "height": 50,
                    "mimetype": "svg+xml"
                });
            }, true);

            var fetch_i_g_s_empty_circlebar_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/s/empty_circlebar.svg', {
                    "data": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"381\" height=\"381\"><g data-name=\"Capa 2\"><path d=\"M190.5 0C85.29 0 0 85.29 0 190.5S85.29 381 190.5 381 381 295.71 381 190.5 295.71 0 190.5 0Zm0 358.18A167.68 167.68 0 1 1 358.18 190.5 167.68 167.68 0 0 1 190.5 358.18Z\" style=\"fill:#231f20;opacity:.15\" data-name=\"Capa 4\"/></g></svg>",
                    "width": 381,
                    "height": 381,
                    "mimetype": "svg+xml"
                });
            }, true);

            var fetch_i_g_s_full_circlebar_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/s/full_circlebar.svg', {
                    "data": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"381\" height=\"381\"><defs><linearGradient id=\"a\" y1=\"190.5\" x2=\"381\" y2=\"190.5\" gradientUnits=\"userSpaceOnUse\"><stop offset=\"0\" stop-color=\"#00bdff\"/><stop offset=\".26\" stop-color=\"#9b00ff\"/><stop offset=\".51\" stop-color=\"#ff0029\"/><stop offset=\".77\" stop-color=\"#ff9603\"/><stop offset=\"1\" stop-color=\"#ffc700\"/></linearGradient></defs><g data-name=\"Capa 2\"><path d=\"M190.5 0C85.29 0 0 85.29 0 190.5S85.29 381 190.5 381 381 295.71 381 190.5 295.71 0 190.5 0Zm0 358.18A167.68 167.68 0 1 1 358.18 190.5 167.68 167.68 0 0 1 190.5 358.18Z\" style=\"fill:url(#a)\" data-name=\"Capa 3\"/></g></svg>",
                    "width": 381,
                    "height": 381,
                    "mimetype": "svg+xml"
                });
            }, true);

            var fetch_i_g_s_play_circlebar_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/s/play_circlebar.svg', {
                    "data": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"174.86\" height=\"183.78\"><g data-name=\"Capa 2\"><path d=\"M161 110.18c18.5-10.11 18.5-26.47 0-36.58L33.57 4.3C15.06-5.82 0 2.58 0 22.59v138.59c0 20 15.06 28.41 33.57 18.3Z\" style=\"opacity:.5\" data-name=\"Capa 4\"/></g></svg>",
                    "width": 174.86,
                    "height": 183.78,
                    "mimetype": "svg+xml"
                });
            }, true);

            XS.modulesToPreload.push(function() {
                if (!XS.can.showModalTryAgain()) {
                    console.log("This platform does not have try again modal enabled.");
                    return;
                }
                if (!XS.gui.baseClasses || !XS.gui.AcceptDialog) {
                    console.error("XS.gui.baseClasses or XS.gui.AcceptDialog is not imported. TryAgain is not available");
                    return;
                }
                var TryAgain = {};
                var _acceptDialog;
                var _noThanksButton;
                var _scoreContainer;
                var _timeTween;
                TryAgain.config = {
                    vPadding: 300
                };
                TryAgain.config.score = {
                    scoreTextConfig: {
                        size: 135,
                        weight: 400,
                        fill: "#FFFFFF",
                        dropShadow: false
                    },
                    highScoreTextConfig: {
                        size: 70,
                        weight: 400,
                        fill: "#9E9E9E",
                        dropShadow: false
                    },
                    YOffset: -50,
                    getCrownImage: function getCrownImage() {
                        var crown = new Sprite(fetch_i_g_s_crown_svg());
                        crown.anchor.set(0.5, 0.5);
                        crown.tint = 0x9E9E9E;
                        return crown;
                    }
                };
                TryAgain.config.headline = {
                    text: Host.Localize.Translate("Continue?", {}, "Headline in retry overlay")
                };
                TryAgain.config.subtext = {
                    text: Host.Localize.Translate("Watch AD", {}, "Headline subtext in retry overlay")
                };
                TryAgain.config.watchAd = {
                    text: Host.Localize.Translate("YES!", {}, "Watch Ad button in retry overlay")
                };
                TryAgain.config.noThanks = {
                    text: Host.Localize.Translate("Cancel"),
                    textConfig: {
                        size: 70,
                        weight: 400,
                        fill: "#9E9E9E",
                        dropShadow: false
                    },
                    YOffset: 80
                };
                TryAgain.show = function(config, showAdsCb, dismissCb, score, highscore) {
                    if (window.Sidebar) window.Sidebar.hideIcon();
                    XS.emit('togglerewardmodal', {
                        visible: true
                    });
                    _acceptDialog = new XS.gui.AcceptDialog({
                        confirmText: TryAgain.config.watchAd.text,
                        vPadding: TryAgain.config.vPadding,
                        closeOnAccept: false
                    }); //adds it self to XS.gui.center
                    _acceptDialog.addHeadline(config.headline.text);
                    var countdownContainer = new Container();
                    var greyCircleSprite = new Sprite(fetch_i_g_s_empty_circlebar_svg());
                    greyCircleSprite.width = 400;
                    greyCircleSprite.height = 400;
                    countdownContainer.addChild(greyCircleSprite);
                    var circleSprite = new Sprite(fetch_i_g_s_full_circlebar_svg());
                    circleSprite.width = 400;
                    circleSprite.height = 400;
                    countdownContainer.addChild(circleSprite);
                    var sprite = new Sprite(fetch_i_g_s_play_circlebar_svg());
                    sprite.anchor.set(0.5, 0.5);
                    sprite.width = 200;
                    sprite.height = 200;
                    sprite.x = 400 / 2 + 16;
                    sprite.y = circleSprite.height / 2;
                    countdownContainer.addChild(sprite);
                    var startingAngle = 1.5; //Starting tween angle 5Pi/2
                    var finalAngle = -0.5; //Ending tween angle Pi/2
                    var circleGraphic = new Graphics();
                    circleGraphic.targetAngle = startingAngle;
                    circleGraphic.x = 200;
                    circleGraphic.y = circleSprite.height / 2;
                    circleSprite.mask = circleGraphic;
                    countdownContainer.addChild(circleGraphic);
                    _timeTween = new Tween(circleGraphic, {
                        targetAngle: finalAngle
                    }, 5, function linear(start, end, offset) {
                        var _targetAngle = start + (end - start) * offset;
                        circleGraphic.currentPath = null;
                        circleGraphic.clear();
                        circleGraphic.lineStyle(28, 0xC2C2C2);
                        circleGraphic.arc(0, 0, 190, finalAngle * Math.PI, _targetAngle * Math.PI, false);
                        return _targetAngle;
                    }, ENG_FRZ_GRP).call(function() {
                        dismissCb(true /*due to timeout*/ );
                    });
                    var showAdButton = new ButtonContainer(countdownContainer, showAdsCb);
                    _acceptDialog.addRow(showAdButton, 60);
                    _acceptDialog.addSubheadline(config.subtext.text);
                    _acceptDialog.open(showAdsCb);
                    var noThanksButtonText = new Text2(config.noThanks.text, config.noThanks.textConfig);
                    _noThanksButton = new ButtonContainer(noThanksButtonText, dismissCb);
                    noThanksButtonText.anchor.set(0.5, 0.5);
                    _noThanksButton.y = XS.gui.center.y - TryAgain.config.noThanks.YOffset;
                    XS.gui.center.addChild(_noThanksButton);
                    if (!isNaN(score)) {
                        var scoreText = new Text2(score, config.score.scoreTextConfig);
                        scoreText.anchor.set(0.5, 0.5);
                        _scoreContainer = new Container();
                        _scoreContainer.addChild(scoreText);
                        if (!isNaN(highscore)) {
                            var highScoreText = new Text2(highscore, config.score.highScoreTextConfig);
                            highScoreText.anchor.set(0.5, 0.5);
                            _scoreContainer.addChild(highScoreText);
                            var crown = _scoreContainer.addChild(config.score.getCrownImage());
                            highScoreText.x = crown.width / 2;
                            highScoreText.y = 120;
                            crown.x = -highScoreText.width / 2 - 6;
                            crown.y = highScoreText.y;
                        }
                        XS.gui.center.addChild(_scoreContainer);
                    }
                    TryAgain.onResize();
                    XS.on('resize', TryAgain.onResize, {
                        freezeGroup: ENG_FRZ_GRP
                    });
                }; //HACK: Delete when freeze is done in all providers
                //This is needed to prevent clicks while ads load
                TryAgain.disableButton = function() {
                    if (_acceptDialog && _noThanksButton) { //1st level disable is enough
                        for (var index = 0; index < _acceptDialog.children.length; index++) {
                            _acceptDialog.getChildAt(index).interactive = false;
                        }
                        _noThanksButton.visible = false;
                    }
                    setTimeout(function() {
                        if (_noThanksButton) {
                            _noThanksButton.visible = true;
                        }
                    }, 3000); //allow 3 sec for ad to be displayed
                };
                TryAgain.onResize = function() { //always runs after _acceptDialog onResize
                    _noThanksButton.y = Math.max(XS.gui.height / 2 - TryAgain.config.noThanks.YOffset, _acceptDialog.y + _acceptDialog.height + _acceptDialog.options.margin * 2);
                    _noThanksButton.getChildAt(0).updateStyle({
                        maxWidth: _acceptDialog.width
                    });
                    if (_scoreContainer) {
                        if (_scoreContainer.width > XS.gui.width - _acceptDialog.options.margin * 2) {
                            _scoreContainer.width = _acceptDialog.width;
                            _scoreContainer.scale.y = _scoreContainer.scale.x;
                        } else {
                            var topSpace = (XS.gui.height - _acceptDialog.height) / 2;
                            var heightMargin = topSpace - _scoreContainer.height / _scoreContainer.scale.y;
                            if (heightMargin < _acceptDialog.options.margin) {
                                _scoreContainer.height = topSpace - _acceptDialog.options.margin;
                                _scoreContainer.scale.x = _scoreContainer.scale.y;
                            } else {
                                _scoreContainer.scale.x = 1;
                                _scoreContainer.scale.y = 1;
                            }
                        }
                        _scoreContainer.y = -XS.gui.height / 2 + (XS.gui.height - _acceptDialog.height) / 4;
                        if (_scoreContainer.children.length > 1) { //Has highscore sub-title
                            _scoreContainer.y += TryAgain.config.score.YOffset * _scoreContainer.scale.y;
                        }
                    }
                };
                TryAgain.destroy = function() {
                    if (window.Sidebar) window.Sidebar.showIcon();
                    XS.emit('togglerewardmodal', {
                        visible: false
                    });
                    XS.off('resize', TryAgain.onResize, {
                        freezeGroup: ENG_FRZ_GRP
                    });
                    XS.gui.center.removeChild(_noThanksButton);
                    XS.gui.center.removeChild(_scoreContainer);
                    if (_acceptDialog) {
                        _acceptDialog.cancel(); //removes from XS.gui.center
                    }
                    if (_timeTween) {
                        _timeTween.clear();
                    }
                    _timeTween = null;
                    _acceptDialog = null;
                    _noThanksButton = null;
                    _scoreContainer = null;
                };
                XS.showTryAgainModal = function(config, callback, score, highscore) {
                    function showAds() {
                        _timeTween.clear();
                        TryAgain.disableButton();
                        XS.track.customEvent('reward-popup-accept', {
                            'reward-type': 'continue_playing'
                        });
                        XS.ads.show('reward', function(result, rejectReason) {
                            TryAgain.destroy();
                            var cb = callback && function() { //store result to callback after an eventual toast
                                callback(result);
                            };
                            if (result) {
                                XS.track.customEvent('reward-popup-finish', {
                                    'reward-type': 'continue_playing'
                                });
                                cb && cb();
                            } else {
                                if (rejectReason === XS.ads.ERROR_SKIPPED) {
                                    XS.track.customEvent('reward-popup-skip', {
                                        'reward-type': 'continue_playing'
                                    });
                                    Modal.showToast(new Modal.Toast(Host.Localize.Translate('Sorry!'), Host.Localize.Translate('Ad was skipped', {}, 'If user skipped ad')), 3000, cb);
                                } else {
                                    XS.track.customEvent('reward-popup-error', {
                                        'reward-type': 'continue_playing'
                                    });
                                    Modal.showToast(new Modal.Toast(Host.Localize.Translate('Sorry!'), Host.Localize.Translate('There are no ads available right now.', {}, 'If user could not try again with ad fail')), 3000, cb);
                                }
                            }
                        });
                    }

                    function dismiss(__dueToTimeout) {
                        if (__dueToTimeout) {
                            XS.track.customEvent('reward-popup-timeout', {
                                'reward-type': 'continue_playing'
                            });
                        } else {
                            XS.track.customEvent('reward-popup-close', {
                                'reward-type': 'continue_playing'
                            });
                        }
                        TryAgain.destroy();
                        callback && callback(false);
                    }
                    XS.track.customEvent('reward-opportunity', {
                        'reward-type': 'continue_playing',
                        fill: XS.ads.ready('reward')
                    });
                    var canShowRewardAds = XS.ads.enabled('reward') && XS.ads.ready('reward');
                    if (!canShowRewardAds) {
                        callback && callback(false);
                        return;
                    }
                    XS.track.customEvent('reward-show-popup', {
                        'reward-type': 'continue_playing'
                    });
                    if (config && config.headline) {
                        TryAgain.config.headline.text = config.headline.toString();
                    }
                    if (config && config.subtext != undefined) {
                        TryAgain.config.subtext.text = config.subtext.toString();
                    }
                    TryAgain.show(TryAgain.config, showAds, dismiss, score, highscore);
                };
            });
            var ButtonContainer = function() {
                var Btn = Container.expand(function(cont, callback) {
                    Container.call(this);
                    this.addChild(cont);

                    function up() {
                        callback && callback();
                        cont.alpha = 1;
                        cont.y = 0;
                    }

                    function down() {
                        cont.alpha = 0.5;
                        cont.y = 2;
                    }
                    this.buttonMode = true;
                    this.on("down", down, {
                        freezeGroup: ENG_FRZ_GRP
                    });
                    this.on("up", up, {
                        freezeGroup: ENG_FRZ_GRP
                    });
                });
                Btn.prototype.removeStageReference = function() {
                    Container.prototype.removeStageReference.call(this);
                    this.off("down", undefined, {
                        freezeGroup: ENG_FRZ_GRP
                    });
                    this.off("up", undefined, {
                        freezeGroup: ENG_FRZ_GRP
                    });
                };
                return Btn;
            }();

            function InitSocial() {
                /**
                 * XS.social: Abstraction layer for social integrations
                 */
                function Social() {}
                /**
                 * XS.events - Game events signalling to the engine, which can be used for integrations
                 */
                function Events() {}
                Events.prototype.onScore = function(score) {
                    XS.emit('std:score', {
                        score: score
                    });
                };
                Events.prototype.onFinalScore = function(score, params) {
                    XS.emit('std:final_score', {
                        score: score,
                        params: params
                    });
                };
                /**
                 * !WARNING! This function has backward compatibility with old game code.
                 * It will be removed in the future.
                 * 
                 * !IMPORTANT! This function is using Config.hasSupportStandardEndGame flag to check 
                 * if the game is using new default game over flow
                 * 
                 * Default end game flow for facebook with tournament popup and social leaderboard
                 * @param {score, skipAd, hideLeaderBoardScreen} cb - can be a callback function for old games
                 * to be called when the game is started again. For games supporting new default game flow it should be replaced with data object
                 * @param {score, skipAd, hideLeaderBoardScreen} data - data for end game events and score
                 * @returns Promise
                 */
                Events.prototype.onEndGame = function(cb, data) { // we use config flag to check if the game is using new default game over flow
                    // to prevent unexpected popup to show up in old games
                    //
                    // this is OLD game flow and will be !!!REMOVED!!!!  in the future
                    if (!Config.hasSupportStandardEndGame) {
                        if (typeof cb === 'object') { // this is for new default game flow only
                            console.error('WARNING! Config.hasSupportStandardEndGame is set to false, but the game sending object to game over flow in first args.');
                        }
                        XS.emit('std:end_game', data);
                        if (cb) {
                            XS.once('std:new_game', cb, {
                                freezeGroup: ENG_FRZ_GRP
                            });
                        }
                        return;
                    } // backward compatibility with old code who send callback as a first argument
                    if (typeof cb === 'object') { // this is for new default game flow to convert first argument to data object
                        data = cb;
                        cb = null;
                    } // reminder to update the game if the config flag is set to true, but first params is a callback.
                    // backward compatibility case: game is using old game over flow for web, but the config flag is set to true
                    if (typeof cb === 'function') {
                        console.error('Config.hasSupportStandardEndGame is set to true, but the game is using old game over flow. Please update the game to use new default game over flow.');
                        cb();
                        return;
                    } // new game over flow starts here
                    var score = data && data.score || 0; // this event will trigger the tournament popup
                    XS.emit('std:final_score', {
                        score: score
                    });
                    return new Promise(function(resolve) { // this event will resolve promise when the tournament popup is closed
                        XS.once('std:final_score_complete', resolve);
                    }).then(function() { // this event will trigger the social leaderboard popup
                        XS.emit('std:end_game', data);
                    }).catch(function(err) {
                        console.error('End game error', err); // if everything failed, the game can be started again.
                        // this will not save, if the error happens in the plugins
                        XS.emit('std:new_game');
                    });
                };
                XS.social = XS.social || new Social();
                XS.events = XS.events || new Events(); // TODO: properly define api
                XS.score = XS.score || {};
                XS.score.submitScore = XS.score.submitScore || Events.prototype.onScore;
                XS.score.submitFinalScore = XS.score.submitFinalScore || Events.prototype.onFinalScore;
                XS.state = XS.state || {};
                XS.state.endGame = XS.state.endGame || Events.prototype.onEndGame;
            }
            XS.modulesToPreload.push(InitSocial);

            XS.modulesToPreload.push(function() {
                var setupCloudStorage = function setupCloudStorage() {
                    var xcProvider = {
                        shouldSave: false,
                        changesToSend: {},
                        loadRemote: function loadRemote() {
                            console.log('loading data');
                            ytgame.game.loadData().then(function(res) {
                                try {
                                    var data = JSON.parse(res || "{}");
                                    console.log('loaded data', data);
                                    XS.data._loadRemote(xcProvider, data); //Support old games using XC code
                                    XC.loggedin = true;
                                    XC.user = new XC.User({
                                        data: data
                                    });
                                    XS.emit('login', XC.user); //Notify games to update their local storage elements
                                } catch (err) {
                                    console.error('loaddata parse err', err);
                                }
                            }).catch(function(err) {
                                console.error('loaddata err', err);
                            });
                        },
                        setChange: function setChange(key, value) {
                            xcProvider.changesToSend[key] = value;
                        },
                        saveChanges: function saveChanges(cb) {
                            var keys = Object.keys(xcProvider.changesToSend);
                            if (keys.length === 0) {
                                return cb && cb(true);
                            } // remove unwanted tracking fields
                            delete xcProvider.changesToSend['xstrack'];
                            delete xcProvider.changesToSend['__frvr_user_id'];
                            var data = JSON.stringify(xcProvider.changesToSend); // ignore failed saves
                            xcProvider.shouldSave = false;
                            ytgame.game.saveData(data, function() {
                                cb && cb(true);
                            }).catch(function(err) {
                                console.error(err);
                                cb && cb(false);
                            });
                        }
                    };
                    var save = function save() {
                        xcProvider.saveChanges();
                    }; //Support old games using XC code
                    //Overwride XC
                    XC.save = function() {
                        for (var key in XC.user.data) {
                            if (Object.hasOwnProperty.call(XC.user.data, key)) {
                                var value = XC.user.data[key];
                                xcProvider.setChange(key, value);
                            }
                        }
                        save();
                    };
                    XS.data._addRemote(xcProvider); //Start loading data from remote
                    xcProvider.loadRemote();
                    return save;
                };
                var saveCloudStorage = setupCloudStorage(); // run immediately
                ytgame.game.firstFrameReady();
                XS.on('gameLoaded', function() {
                    ytgame.game.gameReady();
                });
                ytgame.system.onPause(function() {
                    saveCloudStorage();
                    XS.freeze();
                });
                ytgame.system.onResume(function() {
                    XS.unfreeze();
                });
                XS.on('std:final_score', function(data) {
                    saveCloudStorage();
                    if (data.score > 0) {
                        ytgame.engagement.sendScore({
                            value: data.score
                        });
                    }
                });
                XS.data.on('dataloaded', function() {
                    var highscore = XS.data && XS.data.highscore || 0;
                    if (highscore > 0) {
                        ytgame.engagement.sendScore({
                            value: highscore
                        });
                    }
                });
                ytgame.system.onAudioEnabledChange(function(isAudioEnabled) {
                    if (isAudioEnabled) {
                        XS.unmuteAll();
                    } else {
                        XS.muteAll();
                    }
                });
                window.Social = function() {
                    if (ytgame.system.isAudioEnabled()) {
                        XS.audio.muteSounds(false);
                        XS.audio.muteMusics(false);
                    } else {
                        XS.audio.muteSounds(true);
                        XS.audio.muteMusics(true);
                    }
                };
            });

            var fetch_i_g_s_icon_remove_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/s/icon_remove.svg', {
                    "data": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"50\" height=\"50\" xml:space=\"preserve\"><circle fill=\"none\" stroke=\"#FFF\" stroke-width=\"5\" stroke-miterlimit=\"10\" cx=\"25.159\" cy=\"24.265\" r=\"20.854\"/><path fill=\"none\" stroke=\"#FFF\" stroke-width=\"6\" stroke-miterlimit=\"10\" d=\"M39.413 9.043 9.937 38.521\"/></svg>",
                    "width": 50,
                    "height": 50,
                    "mimetype": "svg+xml",
                    "ignoreStageResolution": true
                });
            }, true);

            Host.bootstrapper.load( /*#__PURE__*/ function() {
                var _ref = _asyncToGenerator( /*#__PURE__*/ regeneratorRuntime.mark(function _callee(resolve) {
                    return regeneratorRuntime.wrap(function _callee$(_context) {
                        while (1) {
                            switch (_context.prev = _context.next) {
                                case 0:
                                    if (!Host.bootstrapper.hasPreInitializationPromise) {
                                        _context.next = 3;
                                        break;
                                    }
                                    _context.next = 3;
                                    return Host.bootstrapper.preInitializationPromise;
                                case 3:
                                    return _context.abrupt("return", XS.data._load('removeAds', 'removeAds', 'Bool', resolve));
                                case 4:
                                case "end":
                                    return _context.stop();
                            }
                        }
                    }, _callee);
                }));
                return function(_x) {
                    return _ref.apply(this, arguments);
                };
            }(), true);

            XS.modulesToPreload.push(function() {
                XS.data.addBool('removeAds', {
                    default: false,
                    remote: true,
                    merge: XS.data.merge.trueIsBetter
                });
                XS.emit('debugOverlayCreateSource', {
                    source: 'Remove Ads'
                });
                var adsDisabled;

                function checkDisableAds() {
                    if (adsDisabled) return;
                    if (XS.data.removeAds) {
                        adsDisabled = true;
                        XS.track.customEvent('removeads', 1);
                        XS.ads.disable('interstitial');
                        XS.ads.disable('banner');
                        XS.removeAdsButton();
                        XS.emit('writeDebug', {
                            source: 'Remove Ads',
                            message: 'Ads Removed'
                        });
                    }
                }

                function validateTransaction(purchaseID, cb) {
                    XS.iap.consumePurchase(purchaseID, function(success) {
                        console.log("Consume item status: ", success);
                        if (success) {
                            Host.Log("[removeads] purchase success: " + JSON.stringify(purchaseID));
                            XS.emit('writeDebug', {
                                source: 'Remove Ads',
                                message: 'Purchase Success'
                            });
                        } else {
                            Host.Log("[removeads] Consume error");
                            XS.emit('writeDebug', {
                                source: 'Remove Ads',
                                message: 'Consume Error'
                            });
                        }
                        cb && cb(null, success);
                        XS.loadSpinner && XS.loadSpinner.hide();
                    });
                } // disable as soon as possible based on localstorage+remotestorage
                checkDisableAds();
                XS.data.on('dataloaded', checkDisableAds);

                function purchaseComplete() {
                    XS.data.removeAds = true; // should be no need for this, but we really really want this saved!
                    XS.data.setDirty('removeAds');
                    XS.data.save(); // farewell ads
                    checkDisableAds();
                }
                XS.on('iapPurchaseRestored', function(purchase) { // TODO: productID should be productId, Instant IAP to provide standardized iap wrappers
                    if (purchase && purchase.productID == 'removeads') {
                        XS.emit('writeDebug', {
                            source: 'Remove Ads',
                            message: 'Purchase Restored'
                        });
                        purchaseComplete();
                        validateTransaction(purchase.productID, null);
                    }
                });
                XS.removeAds = {};
                XS.removeAds.promptPurchase = function(cb) {
                    XS.loadSpinner && XS.loadSpinner.show();
                    XS.iap.requestPayment('removeads', function(err, res) {
                        if (err) {
                            XS.emit('writeDebug', {
                                source: 'Remove Ads',
                                message: 'Purchase Error'
                            });
                            Host.Log("[removeads] payment error: " + JSON.stringify(err));
                            console.error(err);
                            cb && cb(err);
                            XS.loadSpinner && XS.loadSpinner.hide();
                            return;
                        } else {
                            purchaseComplete();
                            validateTransaction(res, cb);
                        }
                    }, false);
                };
                XS.on('iapReady', function() {
                    if (XS.data.removeAds) {
                        return;
                    }
                    var product = XS.iap.getProductById('removeads');
                    if (!product) {
                        return Host.Log('[removeads] missing product "removeads"');
                    }
                    Host.Log("[removeads] found product " + JSON.stringify(product));
                    if (XS.ads.enabled("banner") && !adsDisabled) {
                        XS.ads.force('banner');
                    }
                    if (Config.facebookRemoveAdsSidebarButton || Config.iOSRemoveAdsProductIdentifier || Config.androidRemoveAdsProductIdentifier) {
                        XS.insertRemoveAdsButton(new Sprite(fetch_i_g_s_icon_remove_svg()), Host.Localize.Translate("Remove Ads", {}, "Remove ads on menu item"), function() {
                            Sidebar.hide();
                            XS.removeAds.showRemoveAdsDialog(product);
                        });
                    }
                });
                XS.removeAds.showRemoveAdsDialog = function(product) {
                    function showAdsRemoved() {
                        Modal.showToast(new Modal.Toast(Host.Localize.Translate("Ads Removed!"), Host.Localize.Translate("Thank you so much!")));
                    }

                    function restorePurchases() { // Fire and forget because in iOS there's no way to ensure the callback is fired because it's only called when the user has something to restore if not will never be fired
                        // More Info: https://developer.apple.com/documentation/storekit/skpaymentqueue/1506123-restorecompletedtransactions
                        XS.iap.restorePurchases(function(error) {
                            if (!error) {
                                purchaseComplete();
                                showAdsRemoved();
                            }
                        });
                        Modal.hide();
                    }
                    Modal.show(new Modal.BuyItemModal(Host.Localize.Translate("Remove Ads", {}, "Remove ads on mobile menu item"), Host.Localize.Translate("Remove all 3rd party fullscreen ads.", {}, "Mobile app store description of remove ads in-app purchases"), product.label || "BUY", function() {
                        XS.removeAds.promptPurchase(function(err, success) {
                            if (success) {
                                Modal.hide();
                                showAdsRemoved();
                            }
                        });
                        Modal.hide();
                    }, XS.iap.restorePurchases ? Host.Localize.Translate("Restore") : undefined, XS.iap.restorePurchases ? Host.Localize.Translate("Restore previous purchases.") : undefined, XS.iap.restorePurchases ? restorePurchases : undefined));
                };
            });

            var fetch_i_g_s_socialleaderboards_start_bg_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/s/socialleaderboards/start_bg.svg', {
                    "data": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"392\" height=\"392\" style=\"enable-background:new 0 0 392 392\" xml:space=\"preserve\"><g style=\"opacity:1\"><path d=\"M158.6 61.3 113.4 17l3.6 63.2-57.2-27.1 23.8 58.7-62.7-7.1 41.7 47.8L.9 166.1l54.8 31.6-54.1 33.1 62.2 12.1-40.4 48.8 62.6-9.2-22.3 59.3 56.4-28.7-2 63.3 44.1-45.4 18.8 60.5 27-57.3 37.4 51.2 6.9-63 51.9 36.2-14-61.8 60.9 17.5-33.1-53.9 63.2-3.3-48.9-40.1 58.8-23.6-59.3-22.2 48.1-41.6-63.4-1.6 31.8-54.8-60.4 19 12.4-62.1-50.9 37.7L240.9 5l-36 52.1L176.6.5l-18 60.8z\" style=\"fill:#fff\"/></g></svg>",
                    "width": 392,
                    "height": 392,
                    "mimetype": "svg+xml"
                });
            }, true);

            var fetch_i_g_s_socialleaderboards_vs_shadow_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/s/socialleaderboards/vs_shadow.svg', {
                    "data": "<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0\" y=\"0\" width=\"105\" height=\"70\" style=\"enable-background:new 0 0 105 70\" xml:space=\"preserve\"><style>.st1{fill:#fff}</style><path class=\"st1\" d=\"M62.3 4.4c-.9-1.4-2.5-2.2-4.2-2.2H47.5c-2.1 0-4.1 1.4-4.8 3.4 0 0-10.9 31.4-10.9 31.5l-11-31.5c-.7-2-2.6-3.4-4.7-3.4H5.3c-1.7 0-3.2.8-4.1 2.2C.3 5.8.1 7.5.6 9l21.2 55.9c.7 2 2.6 3.2 4.7 3.2h9.7c2.1 0 3.9-1.3 4.7-3.2L62.8 9c.7-1.5.5-3.3-.5-4.6z\"/><path class=\"st1\" d=\"M86.8 25.9c-7.4-2.8-7.4-3.8-7.4-4.8 0-2.4 3.3-2.6 4.3-2.6 4.4 0 7.6 1.7 8.7 2.5.8.5 1.7.8 2.7.8.6 0 1.1-.1 1.7-.3 1.4-.5 2.6-1.7 3.1-3.1l2.5-7.4c.8-2.3-.1-4.7-2.2-6C95.7 2.4 89.8.8 83.9.8c-14.1 0-24.3 9-24.3 21.4 0 6.4 3.1 15.2 18.1 20.5 7.1 2.6 7.1 4.1 7.1 5.6 0 2.7-3.2 3.3-5.8 3.3-3.9 0-8.3-1.7-10.6-3.2-.8-.5-1.8-.8-2.8-.8-.6 0-1.1.1-1.7.3-1.5.5-2.6 1.7-3.1 3.2l-2.5 7.7c-.7 2.2.2 4.7 2.2 5.9 4.9 2.9 11.5 4.5 18.2 4.5 15.5 0 25.9-8.7 25.9-21.8.1-13.1-10.1-18.6-17.8-21.5z\"/></svg>",
                    "width": 105,
                    "height": 70,
                    "mimetype": "svg+xml"
                });
            }, true);

            var fetch_i_g_s_socialleaderboards_vs_background_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/s/socialleaderboards/vs_background.svg', {
                    "data": "<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0\" y=\"0\" width=\"105\" height=\"70\" style=\"enable-background:new 0 0 105 70\" xml:space=\"preserve\"><style>.st0{fill:#fff}</style><path class=\"st0\" d=\"m16.2 7.2 11 31.4c1.8 5.1 3.3 9.7 4.5 14.3h.3c1.3-4.6 2.9-9.2 4.7-14.3L47.5 7.2h10.6L36.2 63.1h-9.7L5.3 7.2h10.9zM65.7 52.7c3 2 8.3 4 13.4 4 7.4 0 10.8-3.7 10.8-8.3 0-4.8-2.9-7.5-10.4-10.3-10-3.6-14.8-9.1-14.8-15.8 0-9 7.3-16.4 19.3-16.4 5.7 0 10.6 1.6 13.7 3.5l-2.5 7.4c-2.2-1.4-6.2-3.2-11.4-3.2-6 0-9.3 3.5-9.3 7.6 0 4.6 3.3 6.7 10.6 9.5 9.7 3.7 14.7 8.5 14.7 16.9 0 9.8-7.6 16.7-20.9 16.7-6.1 0-11.8-1.5-15.7-3.8l2.5-7.8z\"/><path class=\"st0\" d=\"m16.2 7.2 11 31.4c1.8 5.1 3.3 9.7 4.5 14.3h.3c1.3-4.6 2.9-9.2 4.7-14.3L47.5 7.2h10.6L36.2 63.1h-9.7L5.3 7.2h10.9zM65.7 52.7c3 2 8.3 4 13.4 4 7.4 0 10.8-3.7 10.8-8.3 0-4.8-2.9-7.5-10.4-10.3-10-3.6-14.8-9.1-14.8-15.8 0-9 7.3-16.4 19.3-16.4 5.7 0 10.6 1.6 13.7 3.5l-2.5 7.4c-2.2-1.4-6.2-3.2-11.4-3.2-6 0-9.3 3.5-9.3 7.6 0 4.6 3.3 6.7 10.6 9.5 9.7 3.7 14.7 8.5 14.7 16.9 0 9.8-7.6 16.7-20.9 16.7-6.1 0-11.8-1.5-15.7-3.8l2.5-7.8z\"/></svg>",
                    "width": 105,
                    "height": 70,
                    "mimetype": "svg+xml"
                });
            }, true);

            var fetch_i_g_s_socialleaderboards_crown_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/s/socialleaderboards/crown.svg', {
                    "data": "<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0\" y=\"0\" width=\"315\" height=\"260\" style=\"enable-background:new 0 0 315 260\" xml:space=\"preserve\"><style>.st1{fill:#fff}.st2{fill:#d2a534}.st3{fill:#f8e736}.st4{fill:#ffff65}.st7{fill:#df6016}.st8{fill:#bc4b12}</style><ellipse transform=\"matrix(.00659 -1 1 .00659 -41.74 364.886)\" cx=\"162.8\" cy=\"203.5\" rx=\"34.7\" ry=\"113.7\" style=\"opacity:.5;fill:#181719;enable-background:new\"/><path class=\"st1\" d=\"M50.4 208.9c-7.4 0-14.2-3.3-18.7-9-.2-.3-.4-.4-.5-.8-2.8-3.9-4.4-8.3-4.5-13-.1-6.5 2.7-12.8 7.5-17.1l-.3-9.8-.7-3.8c-2.6-1.8-4.9-3.9-6.8-6.5-.2-.4-.4-.7-.6-1-4.5-6.4-6.1-14.4-4.2-22 .8-3.4 2.3-6.6 4.5-9.5L12.7 45.5c-.9-4.7 1.4-9.3 5.6-11.6 1.5-.9 3.5-1.3 5.3-1.3 3-.1 5.8 1 7.9 3l48.1 43.6c2.3 2.1 3.7 5 3.8 8.1.1 3.6 2 14.3 9.1 18.9.3.2.5.3.8.5 2.8 1.5 5.9 2.3 9.8 2.3 5.5 0 9.9-1.3 13.4-3.8.3-.1.4-.4.7-.5 4.1-3.4 6.1-8.3 7-11.7l-7.9-9.5c-3.3-3.9-3.6-9.6-.5-13.6l32.6-43.5c2.1-2.8 5.5-4.4 9-4.4s7 1.7 9.2 4.5L200.7 70c3.2 4 3.2 9.7.1 13.6l-7.7 9.6c3.2 10.7 10.8 14 14 14.9 2.2.6 4.6 1 7.4.9h.6c1.5 0 3-.1 4.8-.5 5.6-1.3 9.2-4.8 11.6-10.9 1.9-5.3 1.9-10.1 2-10.2-.1-3 1.2-6 3.4-8l46.5-43.7c2-2 4.9-3 7.7-3 1.9 0 3.7.5 5.4 1.3 4.3 2.2 6.9 6.9 6.1 11.6l-10.3 67.1c1.9 2.6 3.3 5.7 4.2 9 2.1 7.8.5 16-4.1 22.2-.2.7-.7 1.2-1.1 1.8-1.4 1.7-2.9 3-4.7 4.4l-1.4 9 .1 8.3c4.3 3.2 7.5 7.6 9 12.7 0 .1.1.1 0 .2.1.4.2.9.4 1.5 0 .2.1.4.1.6.1.4.1.9.2 1.3s.1.9.1 1.4v.6c.3 12.6-10 22.8-23 22.9l-221.7.3z\"/><path class=\"st2\" d=\"M293.1 40.7c-.6-.3-1.1-.5-1.7-.5-.9 0-1.8.4-2.5 1l-46.5 43.7c-.8.7-1.2 1.7-1.1 2.7 0 .1.1 6.1-2.4 12.7-3.1 8.5-8.9 13.7-17 15.5-2.3.5-4.2.7-6.3.7h-.6c-3.5 0-6.6-.4-9.5-1.2C190 111 186 96.2 185 91.4l9.9-12.3c1.1-1.3 1-3.1 0-4.5l-34.1-43.5c-.7-1-1.9-1.5-3.1-1.5-1.2 0-2.3.6-3 1.4l-32.6 43.5c-1 1.4-.9 3.2.2 4.5l10.4 12.4c-.6 3.6-2.8 13.4-10.9 19.6-.2 0-.4.2-.5.4-4.6 3.5-10.7 5.3-17.8 5.3-5.6.1-10.3-1.2-14.4-3.7-.2-.2-.3-.3-.5-.4-11.9-7.8-12.4-24.8-12.4-24.9-.1-1.1-.5-2.1-1.2-2.7L26.8 41.1c-.7-.7-1.7-1-2.6-1.1-.6 0-1.2.1-1.7.5-1.4.8-2.2 2.3-1.9 3.9L42 158.5l.4 21c0 .1-.1.2 0 .4l.3 13.9c.1 1 .4 1.9 1.1 2.7.7.7 1.6 1.1 2.7 1.1l27.7-.1c.1 0 .2.1.4 0l89.2-.1H184.6l90.3-.1c2.1.1 3.7-1.6 3.7-3.6l-.5-35 17.4-114.1c-.2-1.6-1.1-3.2-2.4-3.9z\"/><path class=\"st3\" d=\"M71.9 87.5 23.8 43.9l21.5 114.3.4 21.5c13.2-21.6 27-42.9 40.4-64.3-13.8-8.8-14.2-27.9-14.2-27.9z\"/><path class=\"st4\" d=\"M103.2 120.2c-7.3 0-12.8-1.8-17.1-4.6-13.3 21.3-27.1 42.7-40.4 64.3l.3 13.9 28-.1c16.2-26.5 33.1-52.6 49.3-79.6-4.9 3.6-11.3 6.2-20.1 6.1z\"/><path class=\"st3\" d=\"M204 118.9c-20.9-5.8-23.4-28.5-23.4-28.5l10.9-13.6-34.1-43.5-32.6 43.5 11.4 13.5s-1.1 15.1-12.8 24c-16.2 26.9-33.1 53.1-49.3 79.6l89.2-.1c13.2-25.2 27.4-49.8 40.7-74.9z\"/><path class=\"st4\" d=\"M214.5 120.3c-3.9 0-7.4-.5-10.5-1.3-13.5 25.3-27.5 49.8-40.9 74.9H184c12.8-24.8 25.8-49.3 38.3-74.3-2.3.3-4.8.7-7.8.7z\"/><path class=\"st3\" d=\"M273.8 158.4 291.2 44l-46.5 43.7s.4 26.9-22.3 31.9c-12.4 25-25.6 49.7-38.3 74.3l90.3-.1-.6-35.4z\"/><g style=\"opacity:.75\"><path class=\"st1\" d=\"M72.5 89.6c-.2-1.4-.1-2.1-.1-2.1L24.3 43.9l21.5 114.3.4 21.5c1.8-2.8 3.4-5.5 5.1-8.3l-.1-6.4L29.8 50.7l42.7 38.9zM86.5 115.6c-1.3-.8-2.4-1.7-3.5-2.6.7 1.3 1.8 2.7 2.7 3.9.3-.5.6-.9.8-1.3z\"/><path class=\"st1\" d=\"M103.6 120.2c-7.3 0-12.8-1.8-17.1-4.6-.3.4-.5.8-.8 1.1 1.6 2.1 3.7 4.1 6.2 5.6-.2.2-.3.4-.3.6.2-.2.2-.3.3-.5 4.3 2.8 9.9 4.6 17.1 4.6 2.5 0 4.9-.2 7-.6 2.5-4.1 5-8.1 7.5-12.4-4.7 3.8-11.2 6.3-19.9 6.2zM51.5 186.7l-.3-15.1c-1.8 2.8-3.5 5.5-5.1 8.3l.3 13.9 5.3-.1-.2-7c.1-.1.2-.3.3-.4v-.1c0 .2-.2.3-.3.5z\"/><path class=\"st1\" d=\"M123.7 114.2c-2.5 4.1-5 8.1-7.5 12.4 5.3-1 9.5-2.9 12.8-5.5h.1c11.7-8.8 12.8-24 12.8-24l-5.4-6.5c-.3 2.4-2.2 15.6-12.8 23.6zM157.9 33.1l-32.7 43.6 5.6 6.7 32.5-43.2zM245.1 87.5s.4 26.9-22.3 31.9c-2.4.5-4.9.8-7.8.7-3.9 0-7.4-.5-10.5-1.3-5.5-1.6-9.7-4.2-12.9-7.3 3.4 5.7 9 11.7 18.3 14.2 2.8.8 5.8 1.3 9 1.3.5.1.9 0 1.4 0 2.9 0 5.5-.3 7.8-.7 22.7-5.1 22.3-31.9 22.3-31.9l39-36.6 2.1-14-46.4 43.7zM51.3 171.5c.1-.1.2-.3.3-.3v-.1c-.2.1-.2.2-.3.4zM85.8 116.8s-.1 0 0 0c-.1.1-.2.3-.3.4.2-.1.1-.2.3-.4zM136.6 90.6c.1-.3 0-.4 0-.4l-5.7-6.9-.2.3 5.9 7z\"/></g><ellipse transform=\"rotate(-71.815 158.832 132.793)\" cx=\"158.8\" cy=\"132.8\" rx=\"19.9\" ry=\"20.4\" style=\"fill:#dbc93a\"/><path class=\"st7\" d=\"m42.9 134.5-3.6-19.4c-5 2.5-8.9 7.1-10.2 12.9-1.5 6 .1 12 3.6 16.6 4.5-1.7 7.9-5.5 10.2-10.1z\"/><path class=\"st8\" d=\"m46.2 152.6-3.3-18c-2.2 4.7-5.6 8.4-10.3 10.1 2.7 3.6 6.7 6.4 11.6 7.6.6.1 1.3.2 2 .3zM275.8 127.4l-3.3 20.7c.7-.1 1.3-.2 2-.4 4.5-1.1 8.1-3.5 10.8-6.7-4.8-2.3-7.9-7.8-9.5-13.6z\"/><path class=\"st7\" d=\"M289.1 123.6c-1.6-5.8-5.5-10.4-10.6-13l-2.8 16.8c1.7 5.8 4.7 11.3 9.5 13.5 4-4.5 5.6-10.9 3.9-17.3zM152.3 140.2c9.5 5.3 19 1.8 26.6-4.5.2-.8.6-1.5.7-2.3 2.6-10.7-4.2-21.5-15.2-24.3-9.8-2.4-19.6 2.5-23.4 11.1-.7 7.6 5.2 16.9 11.3 20z\"/><path class=\"st8\" d=\"M152.3 140.2c-6.1-3.3-11.9-12.4-11.3-19.9-.4 1-.8 2.1-1.1 3.2-2.6 10.7 4.2 21.5 15.2 24.3 10.1 2.5 20.3-2.8 23.8-12.1-7.5 6.4-17.1 9.9-26.6 4.5z\"/><ellipse transform=\"rotate(-71.815 161.44 121.967)\" cx=\"161.4\" cy=\"122\" rx=\"8.9\" ry=\"9.1\" style=\"opacity:.26;fill:#fff;enable-background:new\"/><path class=\"st1\" d=\"M170 129.9c.9-12 5.7-15.9 16.2-15-11.4-.9-14.7-5.3-13.9-17.7-.9 13.9-5.5 16.2-16.2 15.3 11.7.8 14.6 6.4 13.9 17.4z\" id=\"Favorite_6_\"/><path class=\"st2\" d=\"m272 201.2-221.7.3c-8.8.1-15.9-6.9-16-15.4-.2-8.5 6.8-15.5 15.5-15.4l221.7-.3c8.8-.1 15.9 6.9 16 15.4.2 8.5-6.7 15.4-15.5 15.4z\"/><path d=\"M276.2 171.1c2 2.6 3.3 5.7 3.5 9.3.2 8.5-6.8 15.5-15.5 15.4l-221.7.3c-1.7 0-3.4-.3-4.9-.8 2.9 3.7 7.6 6.2 12.7 6.1l221.7-.3c8.8-.1 15.7-7 15.5-15.4-.2-6.7-4.9-12.6-11.3-14.6z\" style=\"opacity:.5;fill:#896b1d;enable-background:new\"/><path d=\"m169.5 189.5-118.6.1c-4.6 0-8.5-3.7-8.6-8.2-.1-4.5 3.7-8.3 8.3-8.2l118.7-.2c4.6 0 8.5 3.7 8.6 8.2 0 4.6-3.8 8.3-8.4 8.3z\" style=\"opacity:.6;fill:#f8e736;enable-background:new\"/><path d=\"M136.2 189.6h-50c-4.6 0-8.5-3.7-8.6-8.2-.1-4.5 3.7-8.3 8.3-8.2h50c4.6 0 8.5 3.7 8.6 8.2 0 4.5-3.7 8.2-8.3 8.2z\" style=\"fill:#fbf59c\"/></svg>",
                    "width": 315,
                    "height": 260,
                    "mimetype": "svg+xml"
                });
            }, true);

            var fetch_i_g_s_socialleaderboards_go_star_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/s/socialleaderboards/go-star.svg', {
                    "data": "<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0\" y=\"0\" width=\"337\" height=\"351\" style=\"enable-background:new 0 0 337 351\" xml:space=\"preserve\"><style>.st3{fill:#fbae3f}.st4{fill:#fbff3f}</style><path style=\"opacity:.21;enable-background:new\" d=\"m125 109.3 73.7-76.8 25.6 99.3 92.9 44.8-86.5 57.7-9.6 102.5-80.1-67.3-102.5 22.4 38.4-96.1-54.4-89.7z\"/><path style=\"fill:#fff\" d=\"M136.2 86.9 209.9 10l25.6 99.3 93 44.8-86.6 57.7-9.6 102.5-80.1-67.2-102.5 22.4 38.5-96.1-54.5-89.7z\"/><path style=\"fill:#fbd43b\" d=\"m143.1 103.1 60.6-65.9 17.3 83.5 81.3 35.2-76.3 45.2-4.8 86-65.6-58.3-86 23.2 35.8-81-51.2-76z\"/><path class=\"st3\" d=\"m70.7 251.7 84.9-22.9.3.2 10.9-54.2zM53.9 95.8l52.9 76.1 54.3-14-.1-1.4z\"/><path class=\"st4\" d=\"m220.1 121.4-44.9 28.1 28.1-112.3zM226.4 202l-40-38.5 118-8.4z\"/></svg>",
                    "width": 337,
                    "height": 351,
                    "mimetype": "svg+xml"
                });
            }, true);

            var ref_i_g_s_socialleaderboards_DefaultPlayerSolo_svg = "/assets/DefaultPlayerSolo.9b2a01b6.svg";

            Host.bootstrapper.mnemonicMap[ref_i_g_s_socialleaderboards_DefaultPlayerSolo_svg] = "i/g/s/socialleaderboards/DefaultPlayerSolo.svg";
            XS.modulesToPreload.push(function() {
                function noop() {}

                function noopPromise() {
                    return new Promise(function(resolve) {
                        setTimeout(resolve());
                    });
                }

                function SocialLeaderboards() {
                    var _provider = {
                        me: {},
                        inSolo: true,
                        inGroup: false,
                        playWith: noop,
                        playSolo: noop,
                        playTournament: noop,
                        invite: noop,
                        init: noop,
                        setScore: noop,
                        submitFinalScore: noop,
                        showGameOver: noopPromise,
                        getCurrentOpponent: noop,
                        getRandomOpponent: noop,
                        getEntries: noop,
                        contextPlayers: [],
                        friends: [],
                        _on: noop
                    };

                    function setProvider(provider) { //TODO: do some priority overriding to choose best provider
                        // if there were multiple
                        XS.Social.Leaderboards._provider = _provider = provider;
                    }
                    XS.Social = XS.Social || {};
                    XS.Social.Leaderboards = {
                        _setProvider: setProvider,
                        me: function me() {
                            return _provider.me;
                        },
                        inGroup: function inGroup() {
                            return _provider.inGroup;
                        },
                        inSolo: function inSolo() {
                            return _provider.inSolo;
                        },
                        playWith: function playWith(id) {
                            return _provider.playWith(id);
                        },
                        playSolo: function playSolo() {
                            return _provider.playSolo();
                        },
                        playTournament: function playTournament(id) {
                            return _provider.playTournament(id);
                        },
                        invite: function invite() {
                            return _provider.invite();
                        },
                        init: function init() {
                            return _provider.init();
                        },
                        setScore: function setScore(score) {
                            return _provider.setScore(score);
                        },
                        submitFinalScore: function submitFinalScore(finalScore) {
                            return _provider.submitFinalScore(finalScore);
                        },
                        showGameOver: function showGameOver(hideLeaderBoardScreen) {
                            if (hideLeaderBoardScreen === void 0) {
                                hideLeaderBoardScreen = false;
                            }
                            return _provider.showGameOver(hideLeaderBoardScreen);
                        },
                        _getCurrentOpponent: function _getCurrentOpponent(force) {
                            return _provider.getCurrentOpponent(force);
                        },
                        _getRandomOpponent: function _getRandomOpponent(force) {
                            return _provider.getRandomOpponent(force);
                        },
                        _contextPlayers: function _contextPlayers() {
                            return _provider.contextPlayers;
                        },
                        _friends: function _friends() {
                            return _provider.friends;
                        },
                        _scoreNum: scoreNum,
                        getEntries: function getEntries() {
                            return _provider.getEntries();
                        },
                        on: function on(event, callback) {
                            return _provider.on(event, callback);
                        },
                        UI: {
                            Config: Config.gui.socialleaderboards,
                            LeaderBoardScreen: LeaderBoardScreen,
                            GameOverScreen: GameOverScreen,
                            Opponents: OpponentUI,
                            STATE: {
                                ACCEPTED: 0,
                                CANCELLED: 1,
                                REJECTED: 2,
                                FAILED: -1
                            }
                        }
                    };

                    function emitOpponentsChanged() {
                        var players = [];
                        if (XS.Social.Leaderboards.inSolo());
                        else if (!XS.Social.Leaderboards.inGroup()) { // If one opponent
                            players = [XS.Social.Leaderboards._getCurrentOpponent()];
                        } else { // Playing against several others
                            players = XS.Social.Leaderboards._contextPlayers();
                        } // Remove empty players
                        for (var i = players.length - 1; i >= 0; i--) {
                            if (!players[i] || players[i].id == "unknown") {
                                players.splice(i, 1);
                            }
                        } // Add "me" (local player)
                        if (players.indexOf(XS.Social.Leaderboards.me()) === -1) {
                            players.push(XS.Social.Leaderboards.me());
                        }
                        XS.emit('social:opponents_changed', players);
                    }
                    XS.on('FBContextChange', function() {
                        emitOpponentsChanged();
                    }, {
                        freezeGroup: ENG_FRZ_GRP
                    });
                    XS.on('FBStartContextChange', function() {
                        emitOpponentsChanged();
                    }, {
                        freezeGroup: ENG_FRZ_GRP
                    });
                }

                function guiConfigParam(moduleName, name, defaultValue) {
                    if (moduleName in XS.Social.Leaderboards.UI.Config && name in XS.Social.Leaderboards.UI.Config[moduleName]) {
                        return XS.Social.Leaderboards.UI.Config[moduleName][name];
                    }
                    return defaultValue;
                }

                function makeRoundedRectButton(shadowColor, backgroundColor, width, height, radius, shadowHeight) {
                    var button = new Graphics();
                    button.beginFill(shadowColor).drawRoundedRect(0, shadowHeight || 15, width, height, radius).beginFill(backgroundColor).drawRoundedRect(0, 0, width, height, radius).endFill();
                    return button;
                }

                function makePrimaryButton(shadowColor, backgroundColor) {
                    return makeRoundedRectButton(shadowColor, backgroundColor, 720, 230, 115);
                }

                function makeWideButton(shadowColor, backgroundColor) {
                    return makeRoundedRectButton(shadowColor, backgroundColor, 540, 120, 50);
                }

                function makeCancelButton(shadowColor, backgroundColor) {
                    return makeRoundedRectButton(shadowColor, backgroundColor, 261, 116, 50);
                }

                function makeSmallButton(shadowColor, backgroundColor) {
                    return makeRoundedRectButton(shadowColor, backgroundColor, 275, 120, 50);
                }
                var UIDefaultFont = "'GillSans-Bold',Impact,'Arial Black',Tahoma";
                var utilsPreloadAssets = function utilsPreloadAssets(assets) {
                    return new Promise(function(resolve) {
                        preload.apply(window, assets.concat(resolve));
                    });
                };
                var scoreStr = function scoreStr(u) {
                    return scoreNum(u) + " pts";
                };
                var scoreNum = function scoreNum(u) {
                    var s = 0;
                    if (u) {
                        var firstValidNumber = function firstValidNumber() {
                            for (var i = 0; i < arguments.length; i++) {
                                if (!isNaN(arguments[i])) {
                                    return arguments[i];
                                }
                            }
                            return 0;
                        };
                        if (u === XS.Social.Leaderboards.me()) {
                            if (XS.Social.Leaderboards.inGroup()) { // for group contexts we use our best ever score, so that leaderboard position doesn't
                                // change every round (if we didn't beat our previous best)
                                return Math.max(u.scoreSession || 0, firstValidNumber(u.scoreContext, u.scoreSession));
                            } else { // for a 1v1 match we want to see our current score
                                return Math.max(u.scoreSession || 0, firstValidNumber(u.scoreSession, u.scoreContext));
                            }
                        }
                        if (XS.Social.Leaderboards.inGroup()) {
                            return firstValidNumber(u.scoreContext);
                        } else {
                            if (u.scoreContext) {
                                return firstValidNumber(u.scoreContext);
                            } else {
                                var entries = XS.Social.Leaderboards.getEntries();
                                var score = 0;
                                entries.forEach(function(item) {
                                    if (item.getPlayer().getID() === u.id) {
                                        score = item.getScore();
                                    }
                                });
                                return score;
                            }
                        }
                    }
                    return s;
                };
                var screenShowing;
                var BaseScreen = ContainerFixedSize.expand(function() {
                    var self = this;
                    ContainerFixedSize.call(this, 640, 1000);
                    var bg, _params, _resize, _resolve;
                    var _blackOverlay = new Graphics().beginFill(0, 0.3).drawRect(-50, -50, 100, 100).endFill();
                    var _blackOverlayTween;
                    _blackOverlay.alpha = 0;
                    _blackOverlay.visible = false;
                    this.content = new Container();

                    function showOverlay() {
                        Tween.clear(_blackOverlayTween);
                        _blackOverlay.visible = true;
                        new Tween(_blackOverlay, {
                            alpha: 1
                        }, 0.5);
                    }

                    function hideOverlay() {
                        Tween.clear(_blackOverlayTween);
                        _blackOverlayTween = new Tween(_blackOverlay, {
                            alpha: 0
                        }, 0.5).call(function() {
                            _blackOverlay.visible = false;
                        });
                    }
                    this.init = function(params) {
                        XS.Social.Leaderboards.on("show_overlay", showOverlay);
                        XS.Social.Leaderboards.on("hide_overlay", hideOverlay);
                        bg = new Graphics();
                        bg.beginFill(guiConfigParam("baseScreen", "background"));
                        bg.drawRect(-5, -5, 10, 10);
                        bg.alpha = 0;
                        new Tween(bg, {
                            alpha: 1
                        }, 0.5);
                        var width = params && params.width || 640 * 2;
                        var height = params && params.height || 1136 * 2;
                        this.content.sizeRect = new Graphics().beginFill(0xff0000, 0.2).drawRect(-width * 0.5, -height * 0.5, width, height).endFill();
                        this.content.sizeRect.visible = false; // no need to render this, used for scaling
                        this.content.addChild(this.content.sizeRect);
                        this.addChild(bg);
                        this.addChild(this.content);
                        this.addChild(_blackOverlay);
                        _resize = this.resize.bind(this);
                    };
                    BaseScreen.prototype.preload = function(assets) {
                        var preloadPromise = utilsPreloadAssets;
                        return preloadPromise(assets);
                    };
                    BaseScreen.prototype.show = function(params) {
                        if (screenShowing) {
                            return noopPromise();
                        }
                        screenShowing = true;
                        Sidebar.hideIcon();
                        _params = params;
                        XS.gui.center.addChild(this);
                        XS.on('resize', _resize, {
                            freezeGroup: ENG_FRZ_GRP
                        });
                        _resize();
                        return new Promise(function(resolve) {
                            _resolve = resolve;
                        });
                    };
                    BaseScreen.prototype.close = function() {
                        _resolve && _resolve(_params);
                        Sidebar.showIcon();
                        new Tween(this.content.scale, {
                            x: 0,
                            y: 0
                        }, 0.2, Tween.easeout, ENG_FRZ_GRP);
                        new Tween(bg, {
                            alpha: 0
                        }, 0.3, Tween.easein).call(function() {
                            XS.gui.center.removeChild(self);
                            screenShowing = false;
                        }, null, ENG_FRZ_GRP);
                    };
                    BaseScreen.prototype.resize = function() {
                        var ww = this.content.sizeRect.width;
                        var wh = this.content.sizeRect.height;
                        var fitScale = Math.min(XS.gui.width / ww, XS.gui.height / wh, 1);
                        this.content.scale.set(fitScale);
                        var size = bg.parent.toLocalSize(XS.gui.dimensions);
                        bg.width = _blackOverlay.width = size.x;
                        bg.height = _blackOverlay.height = size.y;
                    };
                    BaseScreen.prototype.removeStageReference = function() {
                        Container.prototype.removeStageReference.call(this);
                        XS.off('resize', _resize, {
                            freezeGroup: ENG_FRZ_GRP
                        });
                        this.destroy();
                    };
                    BaseScreen.prototype.destroy = function() {
                        XS.Social.Leaderboards.off("show_overlay", showOverlay);
                        XS.Social.Leaderboards.off("hide_overlay", hideOverlay); //
                    };
                });
                var GameOverScreen = BaseScreen.expand(function() {
                    BaseScreen.call(this);
                    var self = this;
                    var _onPlayClick, _onPlayAnotherClick;
                    var _playButton;
                    var _playAnotherButton;
                    var _cancelButton;
                    var _innerContent = new Container();
                    var _usrBadge = new UIUserBadge();
                    var _opBadge = new UIUserBadge();
                    var uiState = {
                        opponent: undefined,
                        prevOpponent: undefined,
                        nextOpponent: undefined,
                        suggestingChallenge: false,
                        points: 0,
                        scoreDiff: 0
                    };
                    this.init();
                    this.onPlayHandler = function(evt, opts) {
                        var trackLabel = 'profile_image';
                        var selectedOpponent = uiState.opponent;
                        if (opts && opts.name == 'play') {
                            trackLabel = 'button';
                            selectedOpponent = uiState.nextOpponent || selectedOpponent;
                        }
                        XS.track.event('social_plugin_invite', trackLabel);
                        XS.Social.Leaderboards.playWith(selectedOpponent).then(onChooseOpponent);

                        function onChooseOpponent(status) {
                            switch (status) {
                                case XS.Social.Leaderboards.UI.STATE.FAILED:
                                    break;
                                case XS.Social.Leaderboards.UI.STATE.CANCELLED:
                                    XS.Social.Leaderboards.playSolo();
                                    break;
                            }
                            self.close();
                        }
                    };
                    _onPlayClick = this.onPlayHandler.bind(this);
                    this.onPlayAnotherHandler = function() {
                        XS.track.event('social_plugin_choose_other_player');
                        XS.Social.Leaderboards.invite().then(function(status) {
                            console.log('got status', status);
                            switch (status) {
                                case XS.Social.Leaderboards.UI.STATE.CANCELLED:
                                    break;
                                case XS.Social.Leaderboards.UI.STATE.ACCEPTED:
                                case XS.Social.Leaderboards.UI.STATE.REJECTED:
                                default:
                                    self.close();
                            }
                        }).catch(function(err) {
                            console.error(err);
                        });
                    };
                    _onPlayAnotherClick = this.onPlayAnotherHandler.bind(this);
                    this.buildUI = function() {
                        console.log("#XS.Social.Leaderboards.gameOverScreen.init.buildUI");
                        this.content.addChild(_innerContent);
                        var titleString = function(d) {
                            if (uiState.suggestingChallenge) return Host.Localize.Translate("You scored {points} pts!", {
                                points: XS.Social.Leaderboards.me().scoreSession || 0
                            });
                            var texts = ["That was close!", "Weâre just warming up!", "You almost did it!", "Just try again!", "Almost thereâ¦", "What about another try?", "No worries. Try again?", "It's time for revenge!"];
                            return Host.Localize.Translate(texts[Math.floor(Math.random() * texts.length) % texts.length]);
                        }();
                        var titleCfg = {
                            font: UIDefaultFont,
                            size: 150,
                            weight: 700,
                            fill: guiConfigParam('gameOverScreen', 'textColorTitle')
                        };
                        var title2Cfg = {
                            font: UIDefaultFont,
                            size: 80,
                            weight: 0,
                            fill: uiState.suggestingChallenge ? guiConfigParam('gameOverScreen', 'textColorWin') : guiConfigParam('gameOverScreen', 'textColorLose')
                        };
                        var lightBg = new Graphics().beginFill(guiConfigParam('gameOverScreen', 'background'), guiConfigParam('gameOverScreen', 'backgroundOpacity')).drawRoundedRect(0, 0, 1100, 1200, 100).endFill();
                        lightBg.x -= lightBg.width * 0.5;
                        lightBg.y -= lightBg.height * 0.5;
                        _innerContent.addChild(lightBg);
                        var star = new UIRotatingSprite();
                        star.src = new Sprite(fetch_i_g_s_socialleaderboards_start_bg_svg());
                        star.tint = guiConfigParam('gameOverScreen', 'spinningStarColor');
                        var titleLabel1 = new UIShadowLabel(Host.Localize.Translate("Great!"), titleCfg, null, guiConfigParam('gameOverScreen', 'textColorTitleShadow'));
                        var titleLabel2 = new Text2(titleString, title2Cfg);
                        titleLabel1.x = titleLabel1.width * -0.5;
                        titleLabel2.x = titleLabel2.width * -0.5;
                        titleLabel1.y = lightBg.y - titleLabel1.height - 130;
                        titleLabel2.y = lightBg.y + 60;
                        titleLabel1.visible = star.visible = uiState.suggestingChallenge;
                        _innerContent.addChild(star);
                        _innerContent.addChild(titleLabel1);
                        _innerContent.addChild(titleLabel2);
                        star.y = titleLabel1.y + titleLabel1.height * 0.5;
                        var noScore = XS.Social.Leaderboards.inSolo() || uiState.suggestingChallenge && uiState.opponent != uiState.prevOpponent;
                        _opBadge.init(uiState.opponent, uiState.scoreDiff < 0, noScore);
                        _opBadge.buttonMode = true;
                        _opBadge.once("down", _onPlayClick);
                        _usrBadge.init(XS.Social.Leaderboards.me(), uiState.scoreDiff > 0, noScore);
                        _usrBadge.buttonMode = true;
                        _usrBadge.once("down", function() {
                            XS.track.event("social_plugin_continue_solo");
                            XS.Social.Leaderboards.playSolo();
                            self.close();
                        });
                        var buttonSpr = makePrimaryButton(guiConfigParam("gameOverScreen", "playButtonShadow"), guiConfigParam("gameOverScreen", "playButtonBackground"));
                        _playButton = new UIButton(uiState.suggestingChallenge ? "PLAY" : "PLAY AGAIN", buttonSpr, _onPlayClick, {
                            size: 80,
                            font: UIDefaultFont,
                            weight: 400,
                            fill: guiConfigParam("gameOverScreen", "playButtonTextColor")
                        }, {
                            name: 'play'
                        });
                        if (uiState.prevOpponent && uiState.suggestingChallenge) {
                            uiState.nextOpponent = XS.Social.Leaderboards._getRandomOpponent(true);
                            if (uiState.nextOpponent) {
                                var circlePhotoCont = new Container();
                                var photo = new UIPhoto();
                                photo.shape = "circle";
                                photo.url = uiState.nextOpponent.photo;
                                photo.height = _playButton.height * .7;
                                photo.scale.x = photo.scale.y;
                                photo.x = -photo.width * .5;
                                photo.y = -photo.height * .5;
                                circlePhotoCont.addChild(photo);
                                circlePhotoCont.x = _playButton.width - 24;
                                circlePhotoCont.y = (_playButton.height - 15) * .5;
                                _playButton.addChild(circlePhotoCont);
                                circlePhotoCont.visible = false;
                            }
                        }
                        buttonSpr = makeWideButton(guiConfigParam("gameOverScreen", "playAnotherFriendButtonShadow"), guiConfigParam("gameOverScreen", "playAnotherFriendButtonBackground"));
                        _playAnotherButton = new UIButton("Play another friend", buttonSpr, _onPlayAnotherClick, {
                            size: 50,
                            font: UIDefaultFont,
                            weight: 400,
                            fill: guiConfigParam("gameOverScreen", "playAnotherFriendButtonTextColor")
                        }, {
                            name: 'playAnother'
                        });
                        buttonSpr = makeCancelButton(guiConfigParam("gameOverScreen", "cancelButtonShadow"), guiConfigParam("gameOverScreen", "cancelButtonBackground"));
                        _cancelButton = new UIButton("Cancel", buttonSpr, function() {
                            XS.track.event("social_plugin_cancel");
                            XS.Social.Leaderboards.playSolo();
                            self.close();
                        }, {
                            size: 60,
                            font: UIDefaultFont,
                            weight: 400,
                            fill: guiConfigParam("gameOverScreen", "cancelButtonTextColor")
                        }); // _cancelButton.background.alpha = 0.3;
                        // _cancelButton.visible = !challengeSuggested;
                        var mainButtonCont = new Container();
                        mainButtonCont.addChild(_playButton);
                        mainButtonCont.y = (lightBg.height - _playButton.height) * 0.5 - 80;
                        var secondButtonCont = new Container();
                        secondButtonCont.addChild(_playAnotherButton);
                        _innerContent.addChild(mainButtonCont);
                        _innerContent.addChild(secondButtonCont);
                        _innerContent.addChild(_cancelButton); // when we don't show scores the box has less height and should be aligned slightly higher
                        var usrBadgeShiftY = noScore ? 80 : 90;
                        _opBadge.x = 100;
                        _usrBadge.x = -384 - _opBadge.x;
                        _usrBadge.y = _opBadge.y = -_usrBadge.actualHeight * 0.5 - usrBadgeShiftY;
                        _playButton.x = _playButton.width * -0.5;
                        _playButton.y = _playButton.height * -0.5;
                        _playAnotherButton.x = _playAnotherButton.width * -0.5;
                        _playAnotherButton.y = _playAnotherButton.height * -0.5;
                        secondButtonCont.y = lightBg.y + lightBg.height + 120;
                        _cancelButton.x = -_cancelButton.width * 0.5;
                        _cancelButton.y = this.content.sizeRect.height * 0.5 - _cancelButton.height - 100;
                        var vs = new Container();
                        var vsLabel = new Container();
                        var vsShadow = new Sprite(fetch_i_g_s_socialleaderboards_vs_shadow_svg());
                        var vsBg = new Sprite(fetch_i_g_s_socialleaderboards_vs_background_svg());
                        vsLabel.addChild(vsShadow);
                        vsLabel.addChild(vsBg);
                        vsShadow.tint = guiConfigParam("gameOverScreen", "vsShadow"), vsBg.tint = guiConfigParam("gameOverScreen", "vsBackground"), vsShadow.anchor.set(.5);
                        vsBg.anchor.set(.5);
                        vs.addChild(vsLabel);
                        _innerContent.addChild(vs);
                        _innerContent.addChild(_usrBadge);
                        _innerContent.addChild(_opBadge);
                        var vsSpinnerUri = guiConfigParam("gameOverScreen", "vsSpinnerUri");
                        if (vsSpinnerUri && !XS.is.slow) {
                            XS.assets.loadAsync([vsSpinnerUri], function() {
                                var vsBall = new UIRotatingSprite();
                                vsBall.src = vsSpinnerUri;
                                vsLabel.addChildAt(vsBall, 0);
                            });
                        }
                        vs.y = _usrBadge.y + _usrBadge.actualHeight * 0.5;
                        (function() { // animate
                            var m = 1; // multiplier
                            function _tween(o, p, t, e) {
                                return new Tween(o, p, t * m, e);
                            }

                            function _after(time, and) {
                                setTimeout(and, time * m);
                            }
                            var fx1 = _usrBadge.x;
                            var fx2 = _opBadge.x;
                            _usrBadge.x -= 384;
                            _opBadge.x += 384;
                            _usrBadge.alpha = _opBadge.alpha = 0;
                            _cancelButton.alpha = 0;
                            vs.visible = false;
                            mainButtonCont.visible = false;
                            secondButtonCont.visible = false;
                            star.visible = false;
                            titleLabel1.alpha = 0;
                            titleLabel2.alpha = 0;
                            _innerContent.scale.set(0);

                            function playBtnAnimation() {
                                mainButtonCont.visible = true;
                                new BumpAnimation(mainButtonCont);
                            }

                            function badgesAnimation() {
                                _tween(_usrBadge, {
                                    x: fx1,
                                    alpha: 1
                                }, 0.2, Tween.easeout).call(function() {});
                                _tween(_opBadge, {
                                    x: fx2,
                                    alpha: 1
                                }, 0.2, Tween.easeout);
                            }
                            var showCancelDelay = uiState.suggestingChallenge ? 2000 : 700;
                            _tween(_innerContent.scale, {
                                x: 1,
                                y: 1
                            }, 0.5, Tween.easeout).call(function() {
                                playBtnAnimation();
                                if (circlePhotoCont) {
                                    _after(500, function() {
                                        circlePhotoCont.visible = true;
                                        var label = _playButton.children[1];
                                        var lblOriginX = label.x;
                                        _tween(label, {
                                            x: lblOriginX - photo.width * 0.5
                                        }, 0.15, Tween.easeout);
                                        new BumpAnimation(circlePhotoCont);
                                    });
                                }
                            });
                            _after(200, function() {
                                badgesAnimation();
                                _tween(titleLabel2, {
                                    alpha: 1
                                }, 0.2, Tween.easeout);
                                _after(100, function() {
                                    if (titleLabel1.visible) {
                                        star.visible = true;
                                        new BumpAnimation(star, 1, null, 0.2, 0.5);
                                        _after(200, function() {
                                            _tween(titleLabel1, {
                                                alpha: 1
                                            }, 0.3, Tween.easeout);
                                        });
                                    }
                                    _after(200, function() {
                                        vs.visible = true;
                                        new BumpAnimation(vs, 1, 1.5);
                                        _after(100, function() {
                                            _after(showCancelDelay, function() {
                                                _tween(_cancelButton, {
                                                    alpha: 1
                                                }, 0.5, Tween.easeout);
                                            });
                                            _usrBadge.animate();
                                            _opBadge.animate();
                                            secondButtonCont.visible = true;
                                            new BumpAnimation(secondButtonCont);
                                        });
                                    });
                                });
                            });
                        })();
                    };
                    GameOverScreen.prototype.show = function(params) {
                        var _super = BaseScreen.prototype.show.call(this, params);
                        XS.Social.Leaderboards.init().then(function() {
                            uiState.prevOpponent = XS.Social.Leaderboards._getCurrentOpponent();
                            console.log("#XS.Social.Leaderboards.gameOverScreen.init.preload");
                        }).then(function() {
                            XS.track.event('social_display_show');
                            console.log("#XS.Social.Leaderboards.gameOverScreen.init.preloadComplete");
                            uiState.opponent = XS.Social.Leaderboards._getRandomOpponent() || XS.Social.Leaderboards._getCurrentOpponent(true);
                            XS.emit('writeDebug', {
                                source: 'Social Integration',
                                message: 'Showing ' + uiState.opponent.id
                            });
                            uiState.scoreDiff = scoreNum(XS.Social.Leaderboards.me()) - scoreNum(uiState.prevOpponent || uiState.opponent);
                            uiState.suggestingChallenge = uiState.prevOpponent !== uiState.opponent || uiState.scoreDiff > 0;
                            uiState.winning = // only show GREAT screen if we have a score (don't show on restart game menu button)
                                XS.Social.Leaderboards.me() && typeof XS.Social.Leaderboards.me().scoreSession !== 'undefined' && uiState.scoreDiff > 0;
                            if (uiState.suggestingChallenge && uiState.winning) {
                                var user = XS.Social.Leaderboards.me();
                                var isNewHighScore = user && user.scoreContext && user.scoreSession >= user.scoreContext;
                                if (isNewHighScore) {
                                    XS.emit('social:new_highscore');
                                }
                            }
                            self.buildUI();
                        }).catch(function(err) {
                            console.error(err);
                            self.close();
                        });
                        return _super;
                    };
                    GameOverScreen.prototype.destroy = function() {
                        BaseScreen.prototype.destroy.call(this);
                        _opBadge && _opBadge.off("down");
                        _usrBadge && _usrBadge.off("down");
                    };
                });
                var BoardTable = Container.expand(function(parentPopup) {
                    Container.call(this);
                    var _items = [];
                    var self = this;
                    var BoardItem = Container.expand(function(user, index) {
                        if (!user || !XS.Social.Leaderboards.me()) return console.warn('Missing user or me', {
                            user: user,
                            me: XS.Social.Leaderboards.me()
                        });
                        var isMe = user.id === XS.Social.Leaderboards.me().id;
                        var isWinner = index < 2;
                        Container.call(this);
                        var userPhoto = new UIPhoto();
                        userPhoto.url = user.fb.getPhoto();
                        var photoCont = new Container();
                        photoCont.addChild(userPhoto);
                        userPhoto.scale.set(isWinner ? 0.7 : 0.5); // photo aligned left-bottom
                        userPhoto.x = 0;
                        userPhoto.y = -userPhoto.height * 0.5;
                        var cntrY = function cntrY(obj) {
                            obj.y = bg.y + (bg.height - obj.height) * 0.5;
                        };
                        var bg = new Graphics();
                        var borderColor = guiConfigParam("leaderboardScreen", isWinner ? "rowWinnerBorder" : "rowBorder");
                        var backgroundColor = guiConfigParam("leaderboardScreen", isWinner ? "rowWinnerBackground" : "rowBackground");
                        bg.beginFill(borderColor);
                        bg.drawRoundedRect(0, 0, 950, 190, 50);
                        if (backgroundColor) {
                            bg.beginFill(backgroundColor);
                            bg.drawRoundedRect(8, 8, 950 - 16, 190 - 16, 50 * ((190 - 16) / 190));
                        }
                        var playBtn;
                        if (!isMe && XS.Social.Leaderboards._friends().indexOf(user) !== -1 && user !== XS.Social.Leaderboards._getCurrentOpponent()) {
                            var buttonSpr = makeSmallButton(guiConfigParam("leaderboardScreen", "playFriendButtonShadow") || guiConfigParam("leaderboardScreen", "playButtonShadow"), guiConfigParam("leaderboardScreen", "playFriendButtonBackground") || guiConfigParam("leaderboardScreen", "playButtonBackground"));
                            playBtn = new UIButton("PLAY", buttonSpr, function() {
                                XS.Social.Leaderboards.playWith(user).then(function(status) {
                                    switch (status) {
                                        case XS.Social.Leaderboards.UI.STATE.ACCEPTED:
                                            XS.track.event("social_plugin_confirm_invite");
                                            parentPopup.close();
                                            break;
                                        case XS.Social.Leaderboards.UI.STATE.CANCELLED:
                                            XS.track.event("social_plugin_confirm_cancel");
                                            break;
                                    }
                                }).catch(function(err) {
                                    console.error(err);
                                });
                            }, {
                                size: 60,
                                font: UIDefaultFont,
                                weight: 400,
                                fill: guiConfigParam("leaderboardScreen", "playFriendButtonTextColor") || guiConfigParam("leaderboardScreen", "playButtonTextColor")
                            });
                        }
                        var FONT = UIDefaultFont;
                        var txtConf = {
                            size: 48,
                            font: FONT,
                            weight: 0,
                            fill: "#ffffff"
                        };
                        var txtIndexConf = {
                            size: 64,
                            font: FONT,
                            weight: 400,
                            fill: "#ffffff"
                        };
                        var txtScoreConf = {
                            size: 54,
                            font: FONT,
                            weight: 800,
                            fill: "#ffffff"
                        };
                        var indexLabel = new Text2("" + index, txtIndexConf);
                        var userName = user.fb.getName() || ""; // rough limit for width
                        var charLimit = 16; // first player in list has less room
                        if (isWinner) {
                            charLimit -= 2;
                        }
                        if (playBtn) {
                            charLimit -= 2;
                        }
                        userName = userName.slice(0, charLimit);
                        var nameLabel = new Text2(userName, txtConf);
                        var scoreLabel = new Text2(scoreStr(user), txtScoreConf);
                        var nameScoreCont = new Container();
                        nameLabel.x = -nameLabel.width * 0.5;
                        scoreLabel.x = -scoreLabel.width * 0.5;
                        nameLabel.y = -nameLabel.height;
                        nameScoreCont.addChild(nameLabel);
                        nameScoreCont.addChild(scoreLabel);
                        var shift = userPhoto.x + userPhoto.width;
                        nameScoreCont.x = shift + (bg.width - 360 /* room for play button */ ) * 0.5;
                        nameScoreCont.y = bg.y + bg.height * 0.5;
                        this.addChild(bg);
                        if (isWinner) {
                            var isNewHighScore = user.scoreContext && user.scoreSession >= user.scoreContext;
                            if (isNewHighScore) {
                                XS.emit('social:new_highscore');
                            }
                        }
                        this.addChild(indexLabel);
                        this.addChild(nameScoreCont);
                        this.addChild(photoCont);
                        if (playBtn) {
                            this.addChild(playBtn);
                            cntrY(playBtn);
                            playBtn.x = bg.width - playBtn.width - 20;
                        } // cntrY(inviteBtn)
                        cntrY(indexLabel);
                        photoCont.x = 120 - 1;
                        photoCont.y = bg.y + bg.height * 0.5 + (isWinner ? -30 : 0);
                        indexLabel.x = (120 - indexLabel.width) * 0.5; // inviteBtn.x = bg.width - inviteBtn.width;
                        // bg.visible = !isWinner;
                        if (isWinner) {
                            var crown = new Sprite(fetch_i_g_s_socialleaderboards_crown_svg());
                            crown.anchor.set(0.5, 0.7);
                            crown.scale.set(0.9);
                            crown.rotation = -Math.PI / 10;
                            crown.x = photoCont.x + photoCont.width * 0.5 - 30;
                            crown.y = photoCont.y - photoCont.height * 0.5 + 10;
                            this.addChild(crown);
                        }
                        this.animateAfter = function(after) {
                            this.alpha = 0;
                            var self = this; // if (ball) {
                            //     ball.scale.set(0);
                            // }
                            setTimeout(function() {
                                var ox = self.x;
                                self.x += 100;
                                new Tween(self, {
                                    x: ox,
                                    alpha: 1
                                }, 0.2, Tween.easeinout); // if (ball) {
                                //     new BumpAnimation(ball, 0.7);
                                // }
                            }, after);
                        };
                    });
                    this.fill = function(usersData) {
                        var table = usersData.slice(0);

                        function cut(arr, i, size) {
                            i = i < 0 ? 0 : i;
                            var from = Math.ceil(i - size / 2);
                            if (from > arr.length - size) from = arr.length - size;
                            if (from < 0) from = 0;
                            return arr.slice(from, from + size);
                        }
                        var users = [];
                        if (table.length) {
                            users = cut(table, table.indexOf(XS.Social.Leaderboards.me()), 5);
                            users.splice(0, 1, table[0]); // place the leader first
                        }
                        users.forEach(function(data) {
                            if (!data) return;
                            var item = new BoardItem(data, table.indexOf(data) + 1);
                            self.addChild(item);
                            _items.push(item);
                        });
                        this.align();
                        this.animate();
                    };
                    this.align = function() {
                        _items.forEach(function(item, index) {
                            item.y = index * BoardTable.ITEM_HEIGHT;
                        });
                    };
                    this.animate = function() {
                        var step = 100;
                        var timeShift = 200;
                        _items.forEach(function(item) {
                            item.animateAfter(timeShift);
                            timeShift += step;
                        });
                    };
                });
                BoardTable.ITEM_HEIGHT = 200;
                var LeaderBoardScreen = BaseScreen.expand(function() {
                    BaseScreen.call(this);
                    var self = this;
                    var _cancelButton;
                    var _mainButtonClick, _mainButton;
                    var _innerContent = new Container();
                    this.init();
                    LeaderBoardScreen.prototype.show = function(params) {
                        var _super = BaseScreen.prototype.show.call(this, params);
                        XS.Social.Leaderboards.init().then(function() {
                            self.buildUI();
                        }).catch(function(err) {
                            console.error(err);
                            self.close();
                        });
                        return _super;
                    };
                    this.buildUI = function() {
                        this.content.addChild(_innerContent);
                        var lightBg = new Graphics().beginFill(guiConfigParam('leaderboardScreen', 'background'), guiConfigParam('leaderboardScreen', 'backgroundOpacity')).drawRoundedRect(0, 0, 1060, 1460, 100).endFill();
                        lightBg.x -= lightBg.width * 0.5;
                        lightBg.y -= lightBg.height * 0.5 - 70;
                        _innerContent.addChild(lightBg);
                        var boardMargin = 50;
                        var titleLabel1 = new UIShadowLabel(Host.Localize.Translate("Leaderboard"), {
                            font: UIDefaultFont,
                            size: 150,
                            weight: 700,
                            fill: guiConfigParam('leaderboardScreen', 'textColorTitle')
                        }, 10, guiConfigParam('leaderboardScreen', 'textColorTitleShadow')); // var titleLabel1 = new Text2(Host.Localize.Translate("Leaderboard"), titleCfg);
                        titleLabel1.x = titleLabel1.width * -0.5;
                        titleLabel1.y = lightBg.y - titleLabel1.height - boardMargin * 3;
                        _innerContent.addChild(titleLabel1);
                        var board = new BoardTable(self);
                        board.x = -950 / 2;
                        board.y = -(5 * BoardTable.ITEM_HEIGHT) / 2 - 100;
                        _innerContent.addChild(board);
                        board.fill(XS.Social.Leaderboards._contextPlayers());
                        var buttonSpr = makePrimaryButton(guiConfigParam("leaderboardScreen", "playButtonShadow"), guiConfigParam("leaderboardScreen", "playButtonBackground"));
                        _mainButton = new UIButton("PLAY", buttonSpr, _mainButtonClick, {
                            size: 100,
                            font: UIDefaultFont,
                            fill: guiConfigParam("leaderboardScreen", "playButtonTextColor")
                        });
                        _mainButton.scale.set(1.2);
                        buttonSpr = makeCancelButton(guiConfigParam("leaderboardScreen", "cancelButtonShadow"), guiConfigParam("leaderboardScreen", "cancelButtonBackground"));
                        _cancelButton = new UIButton("Cancel", buttonSpr, function() {
                            XS.track.event("social_plugin_cancel");
                            XS.Social.Leaderboards.playSolo();
                            self.close();
                        }, {
                            size: 60,
                            font: UIDefaultFont,
                            weight: 400,
                            fill: guiConfigParam("leaderboardScreen", "cancelButtonTextColor")
                        }); // _cancelButton.background.alpha = 0.3;
                        var mainButtonPivot = new Container();
                        mainButtonPivot.addChild(_mainButton);
                        _innerContent.addChild(mainButtonPivot);
                        _innerContent.addChild(_cancelButton);
                        _mainButton.x = -_mainButton.width * 0.5;
                        _mainButton.y = -_mainButton.height * 0.5;
                        mainButtonPivot.y = board.y + BoardTable.ITEM_HEIGHT * 5 + boardMargin + _mainButton.height * 0.5;
                        _cancelButton.x = -_cancelButton.width * 0.5;
                        _cancelButton.y = this.content.sizeRect.height * 0.5 - _cancelButton.height - 100;

                        function animate() {
                            _innerContent.scale.set(0);
                            var fy1 = _cancelButton.y;
                            _cancelButton.y += _cancelButton.height;
                            _cancelButton.alpha = 0;
                            setTimeout(function() {
                                new Tween(_cancelButton, {
                                    y: fy1,
                                    alpha: 1
                                }, 0.3, Tween.easeout);
                            }, 800);
                            mainButtonPivot.visible = false;
                            new Tween(_innerContent.scale, {
                                x: 1,
                                y: 1
                            }, 0.5, Tween.easeout).call(function() {
                                mainButtonPivot.visible = true;
                                new BumpAnimation(mainButtonPivot);
                            });
                        }
                        this.resize();
                        animate();
                    };
                    this.onPlayHandler = function(id) {
                        XS.Social.Leaderboards.playWith();
                    };
                    this.replayHandler = function() {
                        self.close();
                    };
                    this.inviteOthersHandler = function() {
                        var self = this;
                        XS.Social.Leaderboards.invite().then(function(success) {
                            if (success) {
                                self.close();
                            }
                        }).catch(function(err) {
                            console.error(err);
                        });
                    };
                    _mainButtonClick = this.replayHandler.bind(this);
                    GameOverScreen.prototype.destroy = function() { // _playButton && _playButton.off("down");
                        // _inviteOthersButton && _inviteOthersButton.off("down");
                        _cancelButton && _cancelButton.off("down");
                    };
                });
                var OpponentBadge = Container.expand(function() {
                    Container.call(this);
                    var _user;
                    var scoreText = new Text2("-", {
                        font: UIDefaultFont,
                        size: 60,
                        fill: guiConfigParam('against-player', 'textColor')
                    });
                    this.label = scoreText; // to have access outside
                    var userPhoto = new UIPhoto();
                    var background = new Graphics();
                    var borderWidth = 15;
                    var borderRadius = 60;
                    var bgContWidth = 400;
                    var bgContHeight = 500;
                    background.beginFill(guiConfigParam('against-player', 'border'));
                    background.drawRoundedRect(0, 0, bgContWidth, bgContHeight, borderRadius);
                    background.beginFill(guiConfigParam('against-player', 'background'));
                    background.drawRoundedRect(borderWidth, borderWidth, bgContWidth - borderWidth * 2, bgContHeight - borderWidth * 2, borderRadius * ((bgContHeight - borderWidth * 2) / bgContHeight));
                    background.beginFill(guiConfigParam('against-player', 'content'));
                    background.drawRoundedRect(borderWidth + 26, borderWidth + 30, bgContWidth - borderWidth * 2 - 54, bgContHeight - borderWidth * 2 - 62, borderRadius * ((bgContHeight - borderWidth * 2 - 60) / bgContHeight));
                    this.addChild(background);
                    this.addChild(userPhoto);
                    this.addChild(scoreText);
                    userPhoto.x = Math.floor((background.width - userPhoto.width) * 0.5) + 1;
                    userPhoto.y = 46;

                    function updateTextWithHandler(label, text, cb, scope) {
                        if (label.text === text) return; // need to wait next frame to get correct label boundaries
                        label.setText(text);
                        if (cb) {
                            if (scope) cb = cb.bind(scope);
                            XS.once("render", cb, {
                                freezeGroup: ENG_FRZ_GRP
                            });
                        }
                    }

                    function onScoreUpdated() {
                        updateTextWithHandler(scoreText, scoreStr(_user), alignScoreLabel);
                    }

                    function alignScoreLabel() {
                        scoreText.x = Math.floor((background.width - scoreText.width) * 0.5);
                        scoreText.y = userPhoto.y + userPhoto.height + 5;
                    }
                    alignScoreLabel();
                    Object.defineProperty(this, "user", {
                        get: function get() {
                            return _user;
                        },
                        set: function set(v) {
                            if (_user) _user.off("score_updated", onScoreUpdated);
                            _user = v;
                            userPhoto.url = _user && _user.photo;
                            if (_user) {
                                _user.on("score_updated", onScoreUpdated);
                                onScoreUpdated();
                            }
                        }
                    });
                });
                var OpponentAnimated = Container.expand(function() {
                    Container.call(this);
                    var _tweenScale;
                    var _tweenPos;
                    var _cont = new Container();
                    this.badge = new OpponentBadge();
                    this.badge.x = this.badge.width * -0.5;
                    this.badge.y = this.badge.height * -0.5;
                    var _bounce = 100;
                    var _startX = this.badge.x * -1;
                    var _endX = this.badge.width * 1.5;
                    var y = this.badge.y * -1;
                    var y2 = this.badge.y * -1 + 15;
                    _cont.x = _startX;
                    _cont.y = y;
                    _cont.addChild(this.badge);
                    this.addChild(_cont);

                    function scaleIn(time) {
                        _cont.scale.set(0.5);
                        _tweenScale && _tweenScale.clear();
                        _tweenScale = new Tween(_cont.scale, {
                            x: 1,
                            y: 1
                        }, time, Tween.easeout);
                    }

                    function scaleOut(time) {
                        _cont.scale.set(1);
                        _tweenScale && _tweenScale.clear();
                        _tweenScale = new Tween(_cont.scale, {
                            x: 0.2,
                            y: 0.2
                        }, time, Tween.easeout);
                    }

                    function moveIn(time) {
                        _cont.x = _endX;
                        _cont.alpha = 1;
                        _tweenPos && _tweenPos.clear();
                        _tweenPos = new Tween(_cont, {
                            x: _startX - _bounce,
                            y: y2,
                            rotation: -Math.PI / 18
                        }, time * 2 / 3, Tween.easeout).call(function() {
                            _tweenPos = new Tween(_cont, {
                                x: _startX,
                                y: y,
                                rotation: 0
                            }, time * 1 / 3, Tween.easein);
                        });
                    }

                    function moveOut(time) {
                        _cont.x = _startX;
                        _cont.alpha = 1;
                        _tweenPos && _tweenPos.clear();
                        _tweenPos = new Tween(_cont, {
                            x: _endX,
                            alpha: 0
                        }, time, Tween.easein);
                    }
                    var _appeared = true;
                    this.appear = function(time) {
                        if (!_appeared) {
                            scaleIn(time);
                            moveIn(time);
                            _appeared = true;
                        }
                    };
                    this.disappear = function(time) {
                        if (_appeared) {
                            scaleOut(time);
                            moveOut(time);
                            _appeared = false;
                        }
                    };
                });
                var BadgeGroup = Container.expand(function() {
                    Container.call(this);
                    var self = this;
                    var badges = [new Badge1on1(), new Badge1on1(), new Badge1on1()];

                    function _after(time, and) {
                        if (time === 0) return and();
                        setTimeout(and, time);
                    }
                    badges.forEach(function(b) {
                        self.addChildAt(b, 0);
                    });
                    badges[1].scale.set(0.75);
                    badges[2].scale.set(0.75);
                    badges[1].x = 0;
                    badges[0].x = badges[1].width * 0.5;
                    badges[2].x = badges[0].x + badges[0].width - badges[2].width * 0.5;
                    badges[1].y = badges[1].height * 0.2;
                    badges[2].y = badges[2].height * 0.2;
                    (function() { // dirty way to hide score labels
                        badges[1].children[0].badge.label.visible = false;
                        badges[1].children[1].badge.label.visible = false;
                        badges[2].children[0].badge.label.visible = false;
                        badges[2].children[1].badge.label.visible = false;
                    })(); // badges[2].showScore = false;
                    this.setUsers = function(users) {
                        var display = users && users.length > 0;
                        if (display) {
                            if (users.length > 3) {
                                users = users.slice(0, 3);
                            } else {
                                while (users.length < 3) {
                                    users.push(XS.Social.Leaderboards.dummyUser);
                                }
                            }
                        }
                        badges.forEach(function(_, i) {
                            if (display) {
                                _after(i * 80, function() {
                                    badges[i].setUser(users[i] || null);
                                });
                            } else {
                                badges[i].setUser(null);
                            }
                        });
                    };
                });
                var Badge1on1 = Container.expand(function() {
                    Container.call(this);
                    var self = this;
                    var view1 = new OpponentAnimated();
                    var view2 = new OpponentAnimated();
                    this.addChild(view1);
                    this.addChild(view2);
                    view1.disappear(0);
                    view2.disappear(0);
                    view1.badge.user = null;
                    view2.badge.user = null;
                    var lastUser, current, previous;
                    lastUser = null;
                    var b = false;
                    this.setUser = function(usr) {
                        if (lastUser !== usr) {
                            b = !b;
                            current = b ? view1 : view2;
                            previous = b ? view2 : view1;
                            self.addChild(current); // put on top
                            previous.disappear(0.3);
                            if (usr !== null) {
                                current.badge.user = usr;
                                current.appear(0.6);
                            }
                            lastUser = usr;
                        }
                    };
                });
                var OpponentUI = Container.expand(function() {
                    Container.call(this);
                    var badge1on1 = new Badge1on1();
                    var badgeGroup = new BadgeGroup();
                    badgeGroup.scale.set(0.8);
                    var _cont = new Container();
                    _cont.scale.set(0.5);
                    _cont.addChild(badge1on1);
                    _cont.addChild(badgeGroup);
                    badge1on1.x = -badge1on1.width;
                    badgeGroup.x = -badgeGroup.width;
                    var myIndex = -1;
                    XS.Social.Leaderboards.init().then(function() {
                        XS.Social.Leaderboards.me().on("score_increased", function() {
                            if (XS.Social.Leaderboards.inGroup()) {
                                var prevIndex = myIndex;
                                myIndex = XS.Social.Leaderboards._contextPlayers().indexOf(XS.Social.Leaderboards.me());
                                if (prevIndex !== myIndex && myIndex <= 3) {
                                    badgeGroup.setUsers(XS.Social.Leaderboards._contextPlayers());
                                }
                            }
                        });
                    }).catch(function(err) {
                        console.error(err);
                    });

                    function onContextChanged(user, newContext) {
                        if (!newContext && XS.Social.Leaderboards.inGroup()) {
                            badge1on1.setUser(null);
                            myIndex = XS.Social.Leaderboards._contextPlayers().indexOf(XS.Social.Leaderboards.me());
                            badgeGroup.setUsers(XS.Social.Leaderboards._contextPlayers());
                            _cont.addChild(badgeGroup);
                        } else {
                            myIndex = -1;
                            badge1on1.setUser(XS.Social.Leaderboards.inSolo() ? null : user);
                            badgeGroup.setUsers(null);
                            _cont.addChild(badge1on1);
                        }
                    }
                    XS.on('FBStartContextChange', function() {
                        onContextChanged(null, true);
                    }, {
                        freezeGroup: ENG_FRZ_GRP
                    });
                    XS.on('FBContextChange', function() {
                        onContextChanged(XS.Social.Leaderboards._getCurrentOpponent());
                    }, {
                        freezeGroup: ENG_FRZ_GRP
                    }); // XS.Social.Leaderboards.on("context_updated", onContextChanged);
                    this.addChild(_cont);
                });
                var UIRotatingSprite = Container.expand(function() {
                    Container.call(this);
                    var self = this;
                    this.speed = 0.1;
                    var _src = undefined;
                    var sprite = undefined;

                    function rotate() {
                        sprite.rotation += 2 * Math.PI * (1 / 60) * self.speed;
                        window.dirtyOnce = true;
                    }
                    this.setStageReference = function(stage) {
                        Container.prototype.setStageReference.call(this, stage);
                        XS.on("tick", rotate, {
                            freezeGroup: ENG_FRZ_GRP
                        });
                    };
                    this.removeStageReference = function() {
                        XS.off("tick", rotate, {
                            freezeGroup: ENG_FRZ_GRP
                        });
                        Container.prototype.removeStageReference.call(this);
                    };
                    Object.defineProperty(this, 'tint', {
                        get: function get() {
                            return sprite && sprite.tint;
                        },
                        set: function set(value) {
                            if (sprite) sprite.tint = value;
                        }
                    });
                    Object.defineProperty(this, 'src', {
                        get: function get() {
                            return _src;
                        },
                        set: function set(value) {
                            _src = value;
                            if (sprite) {
                                self.removeChild(sprite);
                                sprite = undefined;
                            }
                            sprite = typeof _src === "string" ? new Sprite(fetch(_src)) : _src;
                            sprite.anchor.set(0.5);
                            self.addChild(sprite);
                        }
                    });
                });
                var UIButton = function() {
                    var Btn = Container.expand(function(text, pathOrSprite, cb, txtCfg, cbParams) {
                        Container.call(this);
                        var cont = new Container();
                        this.addChild(cont);

                        function up(evt) {
                            cb && cb(evt, cbParams || {});
                            bg.alpha = 1;
                            cont.y = 0;
                        }

                        function down() {
                            bg.alpha = 0.5;
                            cont.y = 2;
                        }
                        var bg = typeof pathOrSprite === "string" ? new Sprite(fetch(pathOrSprite)) : pathOrSprite;
                        cont.addChild(bg);
                        window.bg = bg; // bg.y = bg.height/2
                        if (text) {
                            var label = new Text2(text, txtCfg || {
                                size: 60,
                                font: UIDefaultFont,
                                weight: 400,
                                fill: "#ffffff"
                            });
                            label.anchor.set(.5);
                            var bgWidth = bg.background ? bg.background.width : bg.width;
                            var bgHeight = bg.background ? bg.background.height : bg.height;
                            label.x = bgWidth * .5;
                            label.y = (bgHeight - 15) * .5; // center excluding shadow
                            console.log('height=' + bgHeight + ' oldheight=' + bg.height);
                            cont.addChild(label);
                        }
                        this.buttonMode = true;
                        this.on("down", down);
                        this.on("up", up);
                        this.background = bg;
                    });
                    Btn.prototype.removeStageReference = function() {
                        Container.prototype.removeStageReference.call(this);
                        this.off("down");
                        this.off("up");
                    };
                    return Btn;
                }();
                var UIShadowLabel = function UIShadowLabel(text, config, shift, shadowColor) {
                    var cont = new Container();
                    shift = shift || 10;
                    cont.label = new Text2(text, config);
                    var shadowConf = Object.assign({}, config);
                    shadowConf.fill = shadowColor || "#558093";
                    cont.shadow = new Text2(text, shadowConf);
                    cont.shadow.y += shift;
                    cont.addChild(cont.shadow);
                    cont.addChild(cont.label);
                    return cont;
                }; // TODO: move somewhere else
                var BumpAnimation = function BumpAnimation(obj, dScale, magnification, time1, time2) {
                    dScale = dScale || obj.scale.x;
                    magnification = magnification || 1.1;
                    time1 = time1 || 0.15;
                    time2 = time2 || 0.5;
                    obj.scale.set(0);
                    new Tween(obj.scale, {
                        x: dScale * magnification,
                        y: dScale * magnification
                    }, time1, Tween.easein).call(function() {
                        new Tween(obj.scale, {
                            x: dScale,
                            y: dScale
                        }, time2, Tween.easeout);
                    });
                }; // TODO: bind each component separately
                function drawMask(c, w, h, r, ref) {
                    ref = ref || new Graphics();
                    return r > 0 ? ref.clear().beginFill(c).drawRoundedRect(0, 0, w, h, r) : ref.clear().beginFill(c).drawRect(0, 0, w, h);
                }

                function drawCircle(c, w, h, ref) {
                    return (ref || new Graphics()).clear().beginFill(c).drawCircle(w * .5, h * .5, Math.max(w, h) * .5);
                }
                var UIPhoto = Container.expand(function(url, cb) {
                    Container.call(this);
                    var _shapeType;
                    var mask;
                    var maskBg; // this.shape = "square";
                    drawMasks();
                    maskBg.alpha = 0;
                    var photoMaskCont = new Container();
                    var self = this;
                    var _tween = undefined;
                    this.addChild(maskBg);
                    this.addChild(photoMaskCont);
                    cb && this.once(UIPhoto.ON_LOADED, cb);

                    function fade(obj, b, t) {
                        obj.alpha = b ? 0 : 1;
                        _tween && _tween.clear();
                        _tween = new Tween(photoMaskCont, {
                            alpha: b ? 1 : 0
                        }, t, b ? Tween.easeout : Tween.easein);
                    }
                    this.lastUrl = null;
                    this.redraw = function() {
                        fade(photoMaskCont, false, 0.2);
                        var finalUrl = url || ref_i_g_s_socialleaderboards_DefaultPlayerSolo_svg;
                        preload(finalUrl, function() {
                            while (photoMaskCont.children.length) {
                                photoMaskCont.removeChildAt(0);
                            }
                            var spr = new Sprite(fetch(finalUrl));
                            photoMaskCont.addChild(spr);
                            photoMaskCont.addChild(mask);
                            spr.mask = mask;
                            spr.width = maskBg.width;
                            spr.height = maskBg.height;
                            var maxScale = Math.max(spr.scale.x, spr.scale.y);
                            spr.scale.set(maxScale);
                            fade(photoMaskCont, true, 0.2);
                            self.emit(UIPhoto.ON_LOADED);
                        });
                    };
                    Object.defineProperty(this, "url", {
                        get: function get() {
                            return url;
                        },
                        set: function set(v) {
                            if (url !== v) {
                                url = v;
                                self.redraw();
                            }
                        }
                    });
                    Object.defineProperty(this, "shape", {
                        get: function get() {
                            return url;
                        },
                        set: function set(v) {
                            _shapeType = v;
                            drawMasks();
                        }
                    });

                    function drawMasks() {
                        switch (_shapeType) {
                            case "circle":
                                mask = drawCircle(0, 320, 320, mask);
                                maskBg = drawCircle(0x558094, 320, 320, maskBg);
                                break;
                            case "square":
                            default:
                                mask = drawMask(0, 320, 320, 30, mask);
                                maskBg = drawMask(0x558094, 320, 320, maskBg);
                                break;
                        }
                    } // this.redraw();
                });
                UIPhoto.ON_LOADED = "UIPhoto.ON_LOADED";
                var UIUserBadge = Container.expand(function() {
                    Container.call(this);
                });
                UIUserBadge.prototype.init = function(user, isWinner, hideScore) {
                    var bgCont = new Container();
                    var bg = new Graphics();
                    var borderWidth = 15;
                    var shadowHeight = 15;
                    var borderRadius = 30;
                    var bgContWidth = 384;
                    var bgContHeight = hideScore ? 384 + 15 : 544;
                    this.actualWidth = bgContWidth;
                    this.actualHeight = bgContHeight;
                    bg.beginFill(guiConfigParam('playercard', 'shadow'));
                    bg.drawRoundedRect(0, shadowHeight, bgContWidth, bgContHeight - shadowHeight, borderRadius);
                    bg.beginFill(guiConfigParam('playercard', 'border'));
                    bg.drawRoundedRect(0, 0, bgContWidth, bgContHeight - shadowHeight, borderRadius);
                    bg.beginFill(guiConfigParam('playercard', 'background'));
                    bg.drawRoundedRect(borderWidth, borderWidth, bgContWidth - borderWidth * 2, bgContHeight - shadowHeight - borderWidth * 2, borderRadius * ((bgContHeight - borderWidth * 2) / bgContHeight));
                    bgCont.addChild(bg);
                    this.background = bgCont;
                    this.isWinner = isWinner;
                    this.winnerLabel = undefined;
                    var userPhoto = new UIPhoto();
                    userPhoto.url = user && user.photo;
                    var userScoreStr = scoreStr(user);
                    if (!hideScore) {
                        var scoreText = new Text2(userScoreStr, {
                            font: UIDefaultFont,
                            size: 70,
                            fill: guiConfigParam('playercard', 'textColor'),
                            maxWidth: bgContWidth - 40
                        });
                        scoreText.x = (bgContWidth - scoreText.width) * 0.5;
                        scoreText.y = 50 + userPhoto.height + 30;
                        bgCont.addChild(scoreText);
                    }
                    this.addChild(bgCont);
                    this.addChild(userPhoto);
                    userPhoto.x = Math.floor((bgContWidth - userPhoto.width) * 0.5);
                    userPhoto.y = 34;
                    this.userPhoto = userPhoto;
                    if (isWinner) {
                        this.star = new Sprite(fetch_i_g_s_socialleaderboards_go_star_svg());
                        this.star.anchor.set(0.5);
                        this.star.scale.set(0.6); // ask Carmen instead?
                        this.star.visible = false;
                        this.addChild(this.star);
                        this.star.x = bgContWidth - 34 / 2;
                        this.star.y = 34 / 2; //userPhoto.height;
                        // add one more label
                        var winLabel = new Text2("WINNER", {
                            font: UIDefaultFont,
                            size: 70,
                            fill: "#E8B92C"
                        });
                        winLabel.x = (bgContWidth - winLabel.width) * 0.5;
                        winLabel.y = bgCont.y + bgContHeight + 30;
                        this.addChild(winLabel);
                        this.winnerLabel = winLabel;
                        this.winnerLabel.alpha = 0;
                    }
                };
                UIUserBadge.prototype.animate = function() {
                    if (this.isWinner) {
                        if (this.star) {
                            this.star.visible = true;
                            new Tween(this.star, {
                                alpha: 1
                            }, 0.2);
                            new BumpAnimation(this.star);
                        }
                    }
                };
                SocialLeaderboards();
                Host.on('FBInstantStart', XS.Social.Leaderboards.init);

                function showAd() {
                    return new Promise(function(resolve) { //This is a dirty hack, however it solves FB UI breaking ads if they are triggered in [resolve] method on iOS
                        setTimeout(function() {
                            XS.ads.show('interstitial', resolve);
                        }, 25);
                    });
                }
                XS.on('std:score', function(data) {
                    XS.Social.Leaderboards.setScore(data.score);
                }, {
                    freezeGroup: ENG_FRZ_GRP
                });
                console.warn('add on(final_score) handler');
                XS.on('std:final_score', function(data) {
                    console.warn('events:std:final_score', data);
                    XS.Social.Leaderboards.setScore(data.score);
                    XS.Social.Leaderboards.submitFinalScore(data);
                });
                var showingGameOver;
                XS.on('std:end_game', function(data) {
                    var skipAd = data && data.skipAd;
                    var hideLeaderBoardScreen = data && data.hideLeaderBoardScreen;
                    if (showingGameOver) {
                        console.warn('attempted end game while gameover showing');
                        return;
                    }
                    showingGameOver = true;
                    var context_was_changed = false;

                    function handleContextChange() {
                        context_was_changed = true;
                    }
                    XS.on('FBContextChange', handleContextChange, {
                        freezeGroup: ENG_FRZ_GRP
                    });
                    XS.Social.Leaderboards.showGameOver(hideLeaderBoardScreen).then(function() {
                        if (!skipAd) {
                            return showAd();
                        }
                    }).catch(function(err) {
                        if (err) {
                            window.onerror && window.onerror("Failure in promise XS.Social.Leaderboards.showGameOver > " + err.message, err.sourceURL, err.line);
                            console.error(err);
                        }
                    }).then(function() {
                        showingGameOver = false;
                        XS.off('FBContextChange', handleContextChange, {
                            freezeGroup: ENG_FRZ_GRP
                        });
                        XS.emit('std:new_game', {
                            context_was_changed: context_was_changed
                        });
                    });
                }, {
                    freezeGroup: ENG_FRZ_GRP
                });
            });

            var fetch_i_g_s_sliderbg_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/s/sliderbg.svg', {
                    "data": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"774\" height=\"78\"><linearGradient id=\"a\" gradientUnits=\"userSpaceOnUse\" x1=\"387.5\" y1=\"78\" x2=\"387.5\" y2=\"1\"><stop offset=\"0\" stop-color=\"#fff\"/><stop offset=\".048\" stop-color=\"#e0e0e0\"/><stop offset=\".474\" stop-color=\"#e0e0e0\"/><stop offset=\".952\" stop-color=\"#e0e0e0\"/><stop offset=\"1\" stop-color=\"#a8a8a8\"/></linearGradient><path fill=\"url(#a)\" stroke=\"#494949\" stroke-width=\"2\" stroke-miterlimit=\"10\" d=\"M774 6.583C774 3.553 772.292 1 769.538 1H7.655C4.9 1 1 3.553 1 6.583v65.352C1 74.967 4.9 78 7.655 78h761.883c2.754 0 4.462-3.033 4.462-6.064V6.583z\"/><path fill=\"none\" stroke=\"#ACACAC\" stroke-width=\"2\" stroke-miterlimit=\"10\" d=\"M257 2v75\"/><path fill=\"none\" stroke=\"#F9F9F9\" stroke-width=\"2\" stroke-miterlimit=\"10\" d=\"M259 2v75\"/><path fill=\"none\" stroke=\"#ACACAC\" stroke-width=\"2\" stroke-miterlimit=\"10\" d=\"M515 2v75\"/><path fill=\"none\" stroke=\"#F9F9F9\" stroke-width=\"2\" stroke-miterlimit=\"10\" d=\"M517 2v75\"/></svg>",
                    "width": 774,
                    "height": 78,
                    "mimetype": "svg+xml",
                    "ignoreStageResolution": true
                });
            }, true);

            var fetch_i_g_s_sliderslider_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/s/sliderslider.svg', {
                    "data": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"284\" height=\"96\"><linearGradient id=\"a\" gradientUnits=\"userSpaceOnUse\" x1=\"140\" y1=\"7\" x2=\"140\" y2=\"87.001\"><stop offset=\"0\" stop-color=\"#6cf076\"/><stop offset=\"1\" stop-color=\"#48dd53\"/></linearGradient><linearGradient id=\"b\" gradientUnits=\"userSpaceOnUse\" x1=\"140\" y1=\"6\" x2=\"140\" y2=\"88.001\"><stop offset=\"0\" stop-color=\"#369d3d\"/><stop offset=\"1\" stop-color=\"#36893d\"/></linearGradient><path fill=\"url(#a)\" stroke=\"url(#b)\" stroke-width=\"2\" stroke-miterlimit=\"10\" d=\"M274 81.841c0 2.819-2.258 5.159-5.044 5.159H11.044C8.258 87 6 84.66 6 81.841V12.104C6 9.285 8.258 7 11.044 7h257.912C271.742 7 274 9.285 274 12.104v69.737z\"/></svg>",
                    "width": 284,
                    "height": 96,
                    "mimetype": "svg+xml",
                    "ignoreStageResolution": true
                });
            }, true);

            Host.bootstrapper.load( /*#__PURE__*/ function() {
                var _ref = _asyncToGenerator( /*#__PURE__*/ regeneratorRuntime.mark(function _callee(resolve) {
                    return regeneratorRuntime.wrap(function _callee$(_context) {
                        while (1) {
                            switch (_context.prev = _context.next) {
                                case 0:
                                    if (!Host.bootstrapper.hasPreInitializationPromise) {
                                        _context.next = 3;
                                        break;
                                    }
                                    _context.next = 3;
                                    return Host.bootstrapper.preInitializationPromise;
                                case 3:
                                    return _context.abrupt("return", XS.data._load('modalSliderComplexity', 'modal.slider.complexity.v1', 'Int', resolve));
                                case 4:
                                case "end":
                                    return _context.stop();
                            }
                        }
                    }, _callee);
                }));
                return function(_x) {
                    return _ref.apply(this, arguments);
                };
            }(), true);

            XS.modulesToPreload.push(function() {
                if (window.Modal) return; //already initialized
                XS.data.addIntWithLocalKey("modalSliderComplexity", "modal.slider.complexity.v1", {
                    remote: false
                });
                if (XS.data.modalSliderComplexity == 0) {
                    XS.data.modalSliderComplexity = 2;
                }(function() {
                    var Modal = Container.expand(function() {
                        Container.call(this);
                        var self = this;
                        this.backgroundColor = 0xffffff;
                        this.isShowing = false;
                        var background = new Graphics();
                        background.beginFill(0x000000, .6);
                        background.drawRect(0, 0, 200, 200);
                        this.addChild(background);
                        self.sounds = {
                            button: undefined
                        };
                        background.interactive = true;
                        background.defaultCursor = "pointer";
                        var innerContainer = new Container();
                        this.addChild(innerContainer);
                        var innerBackground = new Graphics();
                        innerContainer.addChild(innerBackground);
                        var dialogueWidth = 800;
                        var dialogueHeight = 800; //background.y =-100;
                        function getY() {
                            return ((XS.gui.height - XS.styles.margins.top - XS.styles.margins.bottom) / self.scale.y - dialogueHeight) / 2 + XS.styles.margins.top / self.scale.y;
                        }
                        this.setHeight = function(h, outline) {
                            dialogueHeight = h;
                            innerBackground.clear();
                            if (!this.hideInnerBackground) {
                                if (outline) {
                                    innerBackground.beginFill(0x000000, .5);
                                    innerBackground.drawRoundedRect(-outline, -outline, dialogueWidth + outline * 2, dialogueHeight + outline * 2, outline * 2 + 5);
                                }
                                innerBackground.beginFill(self.backgroundColor, 1);
                                innerBackground.drawRoundedRect(0, 0, dialogueWidth, dialogueHeight, 35);
                            }
                            if (this.ratio && this.setRatio) {
                                this.setRatio(1);
                            }
                        };
                        this.setHeight(800);
                        this.redraw = function() {
                            innerContainer.x = (XS.gui.width / self.scale.x - dialogueWidth) / 2;
                            background.width = XS.gui.width / self.scale.x;
                            background.height = XS.gui.height / self.scale.y;
                        };
                        this.handleResize = function() {
                            Tween.complete(innerContainer);
                            var additionalHeight = content && content.additionalHeight || 0;
                            var newRatio = Math.min(Math.min((XS.gui.width - XS.styles.margins.left - XS.styles.margins.right) / 900, (XS.gui.height - XS.styles.margins.top - XS.styles.margins.bottom) / (dialogueHeight + 50 + additionalHeight)), 1); // Finds the right scaling ratio for making sure the modal can always fit on the screen, even when it's too small
                            self.scale.set(newRatio);
                            innerContainer.y = getY();
                            self.redraw();
                        };
                        XS.on('resize', this.handleResize, {
                            freezeGroup: ENG_FRZ_GRP
                        });
                        var ignoreUpEvent = false;
                        var content = null;
                        var blurEventTriggered = false;
                        var modalQueue = [];
                        this.show = function(new_content, ignoreBackground, disableInteractive, hideInnerBackground) { // if there are more than one request to show modal popup,
                            // put them in stack and show one by one
                            if (self.isShowing) {
                                modalQueue.push({
                                    new_content: new_content,
                                    ignoreBackground: ignoreBackground,
                                    disableInteractive: disableInteractive,
                                    hideInnerBackground: hideInnerBackground
                                });
                                return;
                            }
                            this.renderModal(new_content, ignoreBackground, disableInteractive, hideInnerBackground);
                        };
                        this.renderModal = function(new_content, ignoreBackground, disableInteractive, hideInnerBackground) {
                            self.isShowing = true;
                            ignoreUpEvent = false;
                            blurEventTriggered = false;
                            this.hideInnerBackground = hideInnerBackground;
                            XS.emit('togglemodal', {
                                visible: true
                            });
                            removeModal();
                            self.isShowing = true;
                            content = new_content;
                            content.off('down', undefined, {
                                freezeGroup: ENG_FRZ_GRP
                            });
                            content.on('down', function() {
                                ignoreUpEvent = true;
                            }, {
                                freezeGroup: ENG_FRZ_GRP
                            });
                            this.interactive = !disableInteractive;
                            background.interactive = !disableInteractive;
                            this.setHeight(content.innerHeight, content.outline);
                            innerContainer.addChild(content);
                            this.handleResize();
                            innerContainer.y = XS.gui.height;
                            background.alpha = 0;
                            new Tween(innerContainer, {
                                y: getY()
                            }, .3, undefined, ENG_FRZ_GRP);
                            if (ignoreBackground !== true) {
                                new Tween(background, {
                                    alpha: 1
                                }, .3, undefined, ENG_FRZ_GRP);
                            }
                            XS.gui.addChild(self);
                            if (content.onShow) {
                                content.onShow();
                            }
                        };
                        var modalQueueTimeout;
                        this.hide = function(callback) {
                            var ANIMATION_DELAY = .3;
                            XS.hideGameOverAd();
                            if (self.isShowing) {
                                new Tween(innerContainer, {
                                    y: -dialogueHeight
                                }, ANIMATION_DELAY, undefined, ENG_FRZ_GRP).call(function() {
                                    removeModal();
                                    if (callback instanceof Function) {
                                        callback();
                                    }
                                });
                                if (modalQueueTimeout) {
                                    XS.clearTimeout(modalQueueTimeout);
                                }
                                modalQueueTimeout = XS.setTimeout(function() { // show modal popup from queue if they are exist#
                                    if (modalQueue.length > 0) {
                                        var modalData = modalQueue.shift();
                                        self.renderModal(modalData.new_content, modalData.ignoreBackground, modalData.disableInteractive, modalData.hideInnerBackground);
                                    } else XS.emit('togglemodal', {
                                        visible: false
                                    }); // convert float to milliseconds and added 100 to delay to finish previous animation
                                }, ANIMATION_DELAY * 1000 + 100, null, ENG_FRZ_GRP);
                            } else if (callback instanceof Function) {
                                callback();
                            }
                        };

                        function removeModal() {
                            self.isShowing = false;
                            if (content && content.destroy) {
                                content.destroy();
                            }
                            innerContainer.removeChild(content);
                            XS.gui.removeChild(self);
                            content = null;
                        }
                        innerBackground.on('down', function() {
                            ignoreUpEvent = true;
                        }, {
                            freezeGroup: ENG_FRZ_GRP
                        }); //	background.interactive = true
                        background.on('up', function() {
                            if (!ignoreUpEvent) {
                                if (content.blurClose) {
                                    if (!blurEventTriggered) {
                                        self.hide();
                                        blurEventTriggered = true;
                                    }
                                } else if (content.blurCallback instanceof Function) {
                                    if (!blurEventTriggered) {
                                        content.blurCallback();
                                        blurEventTriggered = true;
                                    }
                                }
                            }
                            ignoreUpEvent = false;
                        }, {
                            freezeGroup: ENG_FRZ_GRP
                        }); //this.setSize(800,800)
                    });
                    window.Modal = new Modal();
                })(); //Internal modal dialouge
                var Slider = Container.expand(function(config) {
                    var self = Container.call(this);
                    var background = new Sprite(fetch_i_g_s_sliderbg_svg());
                    background.anchor.set(.5, 0);
                    background.x = 400;
                    this.addChild(background);
                    var slider = new Sprite(fetch_i_g_s_sliderslider_svg());
                    slider.anchor.set(.5, 0);
                    slider.y = -8;
                    this.addChild(slider);

                    function addStar(image, text, xOffset) {
                        var margin = 0;
                        if (image) {
                            var star = new Sprite(image);
                            var ratio = 50 / 171;
                            star.scale.set(ratio, ratio);
                            star.y = 39;
                            star.anchor.set(0, .5);
                            margin = 55;
                        }
                        var label = new Text2(text, {
                            weight: 400,
                            size: 34,
                            maxWidth: 190,
                            dropShadowDistance: 2
                        });
                        label.anchor.set(0, .5);
                        var newX = xOffset + (255 - (label.width + margin)) / 2;
                        label.y = 39 + 2;
                        label.x = newX + margin;
                        if (image) {
                            star.x = newX;
                            self.addChild(star);
                        }
                        self.addChild(label);
                        return label;
                    }
                    var challengingLabel = addStar(config.challengingStar, config.challenging, 400 + 127);
                    var normalLabel = addStar(config.normalStar, config.normal, 400 - 127);
                    var casualLabel = addStar(config.casualStar, config.casual, 400 - 127 * 3);
                    var labels = [casualLabel, normalLabel, challengingLabel];
                    var cords = [400 - 252, 400, 400 + 255];
                    var selected = -1;
                    self.setSelected = function(offset, animate, skipMove) {
                        var newX = cords[offset];
                        if (!skipMove) {
                            Tween.clear(slider);
                            if (animate) {
                                new Tween(slider, {
                                    x: newX
                                }, .3, undefined, ENG_FRZ_GRP);
                            } else {
                                slider.x = newX;
                            }
                        }
                        if (offset == selected) return;
                        selected = offset;
                        self.emit('complexity', {
                            selected: selected
                        });
                        for (var a = 0; a < 3; a++) {
                            var label = labels[a];
                            var isCurrent = a == offset;
                            label.updateStyle({
                                fill: isCurrent ? "#FFFFFF" : "#000000",
                                dropShadow: isCurrent
                            });
                        }
                    };
                    var complexity = config.selected != undefined ? config.selected : XS.data.modalSliderComplexity - 1;
                    self.setSelected(complexity, false);
                    background.on('down', function(data) {
                        var pos = data.event.getLocalPosition(background);
                        var offset = Math.max(0, Math.min(2, (pos.x + 127 + 260) / 258 >> 0));
                        self.setSelected(offset, true);
                    }, {
                        freezeGroup: ENG_FRZ_GRP
                    });
                    var dragSet = undefined;
                    var orgX = 0;
                    slider.on('down', function(data) {
                        dragSet = data.event.getLocalPosition(stage);
                        orgX = slider.x;
                        XS.stageContainer.on('stageup', upHandler, {
                            freezeGroup: ENG_FRZ_GRP
                        });
                        XS.stageContainer.on('move', moveHandler, {
                            freezeGroup: ENG_FRZ_GRP
                        });
                    }, {
                        freezeGroup: ENG_FRZ_GRP
                    });

                    function upHandler() {
                        dragSet = undefined; //Clean up after ourself
                        XS.stageContainer.off('stageup', upHandler, {
                            freezeGroup: ENG_FRZ_GRP
                        });
                        XS.stageContainer.off('move', moveHandler, {
                            freezeGroup: ENG_FRZ_GRP
                        });
                        self.setSelected(selected, true);
                    }

                    function moveHandler(data) {
                        var newDragSet = data.event.getLocalPosition(stage);
                        var xOffset = newDragSet.x - dragSet.x;
                        slider.x = Math.min(Math.max(orgX + xOffset, cords[0]), cords[2]);
                        for (var a = 0; a < cords.length; a++) {
                            var cord = cords[a];
                            if (Math.abs(slider.x - cord) < 30) {
                                self.setSelected(a, false);
                            } else if (Math.abs(slider.x - cord) < 100) {
                                self.setSelected(a, false, true);
                            }
                        }
                    }
                    self.getComplexity = function() {
                        return selected;
                    };
                });
                window.Modal.ModalButton = Container.expand(function(text, subtext, callback, color, border, fontsize, buttonSize) {
                    Container.call(this);
                    var self = this;
                    var buttonBackground;
                    var buttonOverlay;
                    var buttonText;
                    color = color === undefined ? 0xf04e2b : color;
                    buttonBackground = new Graphics();
                    self.addChild(buttonBackground);
                    self.callback = callback;
                    var buttonHeight = buttonSize !== undefined ? buttonSize + border : 165 + border;
                    buttonOverlay = new Graphics();

                    function redraw() {
                        if (border) {
                            buttonBackground.drawRoundedRect(0, 0, 800, 200, border);
                            buttonOverlay.clear();
                            buttonOverlay.beginFill(0xffffff, 1);
                            buttonOverlay.drawRect(0, 0, 800, border);
                            self.addChild(buttonOverlay);
                        } else buttonBackground.drawRect(0, 0, 800, buttonHeight);
                    }
                    buttonText = new Text2(text, {
                        width: 400,
                        size: fontsize,
                        fill: "#ffffff",
                        maxWidth: 780
                    });
                    buttonText.anchor.set(.5, 0);
                    buttonText.x = 400;
                    buttonText.y = 30 + border;
                    buttonText.interactive = true;
                    buttonText.buttonMode = true;
                    self.addChild(buttonText);
                    var subtextLabel;
                    if (subtext) {
                        subtextLabel = new Text2(subtext, {
                            width: 400,
                            size: 40,
                            fill: "#ffffff"
                        });
                        subtextLabel.anchor.set(.5, 0);
                        subtextLabel.x = 400;
                        subtextLabel.y = 30 + border + 60;
                        self.addChild(subtextLabel);
                    } else {
                        buttonText.y = (buttonHeight + border) / 2 - buttonText.height / 2;
                    } //	buttonText.hitArea = new Rectangle(-400*XS.devicePixelRatio,-30*XS.devicePixelRatio,800*XS.devicePixelRatio,165*XS.devicePixelRatio)
                    if (callback) {
                        buttonBackground.on('down', function() {
                            if (Modal.sounds.button) Modal.sounds.button.play(0); //Clear all potential other events
                            XS.stageContainer.off('stageup', undefined, {
                                freezeGroup: ENG_FRZ_GRP
                            }); //Trigger on released.
                            XS.stageContainer.once('stageup', callback, {
                                freezeGroup: ENG_FRZ_GRP
                            });
                        }, {
                            freezeGroup: ENG_FRZ_GRP
                        });
                    }
                    self.setRatio = function(ratio) {
                        ratio = 1;
                        buttonBackground.width = 800 * ratio;
                        buttonBackground.height = buttonHeight * ratio;
                        if (buttonOverlay) {
                            buttonOverlay.width = 800 * ratio;
                            buttonOverlay.height = 35 * ratio;
                        }
                    };
                    self.setColor = function(color) {
                        buttonBackground.beginFill(color);
                        redraw();
                    };
                    self.setText = function(text) {
                        buttonText.setText(text);
                    };
                    self.updateTextStyle = function(opts) {
                        buttonText.updateStyle(opts);
                    };
                    self.centerText = function() {
                        buttonText.y = (buttonHeight + border) / 2 - buttonText.height / 2;
                    };
                    self.setSubtext = function(text) {
                        subtextLabel && subtextLabel.setText(text);
                    };
                    self.setColor(color === undefined ? 0xff0000 : color, 1);
                    self.getHeight = function() {
                        return buttonHeight;
                    };
                    self.getWidth = function() {
                        return 800; //TODO: Refactor into buttonWidth
                    };
                });
                window.Modal.PictureButton = Container.expand(function(path, callback) {
                    Container.call(this);
                    var self = this;
                    preload(path, function() {
                        var button = new Sprite(fetch(path));
                        button.anchor.set(.5, 0);
                        button.x = 400;
                        self.addChild(button);
                        var _ratio = 1;
                        var noticeBackground = new Graphics();
                        noticeBackground.beginFill(0xffffff, 0.7);
                        noticeBackground.drawRect(0, 0, 800, 165);
                        noticeBackground.y = 0;

                        function redraw() {
                            noticeBackground.x = (800 - 330) * _ratio;
                            noticeBackground.width = 330 * _ratio;
                            noticeBackground.height = 45 * _ratio;
                        }
                        self.setRatio = function(ratio) {
                            redraw();
                        };
                        var promoNotice = new Text2(Host.Localize.Translate("More great FRVR Games!", {}, "Cross-promo overlay text"), {
                            weight: 400,
                            size: 50,
                            maxWidth: 300,
                            fill: '#000'
                        });
                        promoNotice.anchor.set(1, 0);
                        promoNotice.ratio = -1; // Why is this necessary? BRIAN-FIXME
                        promoNotice.y = 0 + 6;
                        promoNotice.x = 800 - 10;
                        self.addChild(noticeBackground);
                        self.addChild(promoNotice);
                        self.setRatio(self.ratio);
                        if (callback) {
                            button.buttonMode = true;
                            button.on('down', callback, {
                                freezeGroup: ENG_FRZ_GRP
                            });
                        }
                    });
                });
                var metaChoicesOffset = Math.random() * 1337 >> 0;
                window.Modal.ModalOverlayContent = Container.expand(function() {
                    var self = Container.call(this);
                    this.innerHeight = 800;
                    this.blurClose = true;
                    self.addHeadline = function(text, style) {
                        var defaultStyle = {
                            weight: 200,
                            size: 90,
                            fill: "#2c2c2c",
                            maxWidth: 780
                        };
                        var headline = new Text2(text, style ? style : defaultStyle);
                        headline.anchor.set(.5, 0);
                        headline.x = 400;
                        headline.y = 40;
                        self.addChild(headline);
                        return headline;
                    };
                    self.addTextBlock = function(text, size, weight, style) {
                        var defaultStyle = {
                            weight: weight || 200,
                            size: size || 90,
                            fill: "#2c2c2c",
                            maxWidth: 700
                        };
                        var textline = new Text2(text, style ? style : defaultStyle);
                        textline.anchor.set(.5, 0);
                        textline.x = 400;
                        textline.y = 50;
                        self.addChild(textline);
                        return textline;
                    };
                    self.addLead = function(text, push, size, style) {
                        var defaultStyle = {
                            width: 200,
                            size: size || 45,
                            fill: "#2c2c2c",
                            maxWidth: 800,
                            align: "center"
                        };
                        var lead = new Text2(text, style ? style : defaultStyle);
                        lead.anchor.set(.5, 0);
                        lead.x = 400;
                        lead.y = 140 + (push || 0);
                        self.addChild(lead);
                        return lead;
                    };
                    self.addButton = function(text, callback, color, lead, size, border) {
                        var btn = new Modal.ModalButton(text, lead || "", callback, color, border === undefined ? 35 : border, size || 90);
                        btn.y = 570 - 200;
                        return self.addChild(btn);
                    };
                    self.addMiddleButton = function(text, subtext, callback, color, fontSize, buttonSize) {
                        var btn = new Modal.ModalButton(text, subtext, callback, color, 0, fontSize || 60, buttonSize);
                        btn.y = 570 - 200;
                        return self.addChild(btn);
                    };
                    self.addSocialButton = function(text, subtext, callback, color, offset) {
                        var btn = self.addMiddleButton(text, subtext, callback, color);
                        btn.y = 250 * 2 + 35 * 2 - 165 + (offset || 0);
                        return self.addChild(btn);
                    };
                    self.addPictureButton = function(path, callback, offset) {
                        var btn = new Modal.PictureButton(path, callback);
                        btn.y = 250 * 2 + 35 * 2 - 165 + (offset || 0);
                        btn.x = 2;
                        return self.addChild(btn);
                    };
                    self.addSlider = function(config) {
                        return self.addChild(new Slider(config));
                    };

                    function updateQueryStringParameter(uri, key, value) {
                        var re = new RegExp("([?&])" + key + "=.*?(&|$)", "i");
                        var separator = uri.indexOf('?') !== -1 ? "&" : "?";
                        if (uri.match(re)) {
                            return uri.replace(re, '$1' + key + "=" + value + '$2');
                        } else {
                            return uri + separator + key + (value ? "=" + value : "");
                        }
                    }

                    function appendPartnerID(uri) {
                        if (XS.is.samsungBixby) return updateQueryStringParameter(uri, 'samsung', '');
                        if (XS.is.samsungBrowser) return updateQueryStringParameter(uri, 'samsungbrowser', '');
                        return uri;
                    }
                    self.addMetaButton = function(offset, config) { //For now no meta button for SpilGames (Pending way to do this on their portal)
                        // Also disabled for OK.RU for now until more games are availaible on OK.RU
                        if (!XS.can.showModalCrossPromo()) { //console.log("Meta button excluded")
                            return false;
                        }
                        var cdnRemoteConfigPresent = XS.remoteConfig && XS.remoteConfig.crosspromoteConfig && XS.remoteConfig.crosspromoteConfig.length ? true : false;
                        var webXSCrosspromoConfigPresent = XS.crosspromo && XS.crosspromo.getConfig('banner', true) ? true : false; // last measure fallback for cross promo config
                        var fallbackCrosspromoConfig = [{
                            facebookImage: "cdn.frvr.com/2021/banners/800x165/basketball.jpg",
                            facebookUrl: "https://apps.facebook.com/basketballfrvr",
                            webImage: "cdn.frvr.com/2021/banners/800x165/basketball.jpg",
                            webUrl: "http://basketball.frvr.com/"
                        }, {
                            facebookImage: "cdn.frvr.com/2021/banners/800x165/hex.jpg",
                            facebookUrl: "https://apps.facebook.com/hexfrvr",
                            webImage: "cdn.frvr.com/2021/banners/800x165/hex.jpg",
                            webUrl: "http://hex.frvr.com/"
                        }, {
                            facebookImage: "cdn.frvr.com/2021/banners/800x165/mahjong.jpg",
                            facebookUrl: "https://apps.facebook.com/mahjongfrvr",
                            webImage: "cdn.frvr.com/2021/banners/800x165/mahjong.jpg",
                            webUrl: "http://mahjong.frvr.com/"
                        }];
                        var metaChoices = [];
                        if (!XS.is.twitter) { // Old cross promo config methodology
                            // Use new remote cross promo framework if present else default to legacy cross promo config method else fallback locally stored config
                            var configSet = webXSCrosspromoConfigPresent ? XS.crosspromo.getConfig('banner') : cdnRemoteConfigPresent ? XS.remoteConfig.crosspromoteConfig : fallbackCrosspromoConfig; // var configSet = XS.remoteConfig.crosspromoteConfig // Old cross promo config methodology
                            // var configSet = XS.crosspromo.config[0].web // New cross promo config framework, currently not making use of possible multiple ab_tests and only taking the first one from the array
                            var validConfigSet = [];
                            for (var a = 0; a < configSet.length; a++) {
                                var cc = configSet[a];
                                if (XS.is.android && !XS.is.samsungBixby) { //Control corss promotion based on android store.
                                    if (XS.is.silk);
                                    else if (XS.is.samsungAppStore) {
                                        if (cc.samsungUrl && cc.samsungImage) {
                                            validConfigSet.push([cc.samsungUrl, cc.samsungImage]);
                                        }
                                    } else if (cc.androidUrl && cc.androidImage) {
                                        validConfigSet.push([cc.androidUrl, cc.androidImage]);
                                    }
                                } else if (XS.is.iOS && cc.iOSUrl && cc.iOSImage) {
                                    validConfigSet.push([cc.iOSUrl, cc.iOSImage, '_top']);
                                } else if (XS.is.facebookApp && cc.facebookUrl && cc.facebookImage) {
                                    validConfigSet.push([cc.facebookUrl, cc.facebookImage, '_top']);
                                } else if (XS.is.chromeWrapper && cc.chromeUrl && cc.chromeImage) {
                                    validConfigSet.push([cc.chromeUrl, cc.chromeImage, '_blank']);
                                } else if (!XS.is.chromeWrapper && cc.webUrl && cc.webImage) { //HACK: Manually popped solitaire out of the Bixby integration
                                    if (XS.is.samsungBixby && cc.webUrl.indexOf('solitaire.frvr') != -1) continue;
                                    validConfigSet.push([appendPartnerID(cc.webUrl), cc.webImage, XS.is.mobile ? '_blank' : '_top']);
                                }
                            }
                            if (validConfigSet.length) {
                                metaChoices.push(function(scope) {
                                    var ad = validConfigSet[validConfigSet.length * Math.random() >> 0];
                                    var url = ad[0],
                                        imgSrc = XS.httpPrefix + ad[1],
                                        target = ad[2];
                                    if (XS.is.samsungBrowser) {
                                        url.replace(/^market:\/\//, XS.httpPrefix + 'market.android.com/');
                                    }
                                    XS.track.crossPromotionShow('standard_aftergame');
                                    scope.addPictureButton(imgSrc, function() {
                                        XS.track.crossPromotionSuccess(url);
                                        XS.navigate(url, target);
                                    }, offset).y = offset;
                                });
                            }
                        }
                        if (XS.can.showModalLoginWithFacebook()) {
                            metaChoices.push(function(scope) {
                                scope.addSocialButton(Host.Localize.Translate("Login with Facebook"), Host.Localize.Translate("Save your score!"), function() {
                                    window.requestFacebookLogin(function() {
                                        Modal.hide();
                                        if (config.mainActionCallback) {
                                            config.mainActionCallback();
                                        }
                                        if (config.autoCallback) {
                                            config.autoCallback();
                                        }
                                    });
                                }, 0x475766, offset).y = offset;
                            });
                        }
                        if (XS.can.showModalShareDialog()) {
                            metaChoices.push(function(scope) {
                                scope.addSocialButton(Host.Localize.Translate(Config.buttonShareTitle, {
                                    game_name: Config.shareTitle
                                }), Host.Localize.Translate(Config.buttonShareDescription, {
                                    game_name: Config.shareTitle
                                }), function() {
                                    window.shareDialogueCallback('');
                                    if (config.mainActionCallback) config.mainActionCallback();
                                }, 0x475766, offset).y = offset;
                            });
                        }
                        if (metaChoices.length) {
                            metaChoicesOffset++;
                            metaChoices[metaChoicesOffset % metaChoices.length](self); //metaChoices[0](self) // Force to cross promo
                            return true;
                        } else return false;
                    };
                    return self;
                });
                window.Modal.RateGameModal = Modal.ModalOverlayContent.expand(function(star, color) {
                    Modal.ModalOverlayContent.call(this);
                    this.addHeadline(Host.Localize.Translate("Having Fun?"));
                    this.addLead(Host.Localize.Translate("Help us improve the game!\nHow would you rate {game_name}?", {
                        game_name: Config.shareTitle
                    }), 10);
                    var self = this;
                    var feedbackBtn = self.addMiddleButton(Host.Localize.Translate("Send Feedback"), Host.Localize.Translate("Help us improve {game_name}", {
                        game_name: Config.shareTitle
                    }, "We are asking the user to provide feedback for the game"), function() {
                        XS.navigate(Config.feedbackURL);
                        Modal.hide();
                    }, 0x5ebc7e);
                    feedbackBtn.y = 370 + 50 + 10;
                    feedbackBtn.visible = false;
                    var reviewButton = self.addMiddleButton(Host.Localize.Translate("Write Review"), Host.Localize.Translate("Help us by writing a review!"), function() {
                        if (XS.is.samsungAppStore) {
                            XS.navigate(Config.samsungReviewUrl);
                        } else if (XS.is.chromeWrapper) {
                            XS.navigate(Config.chromeReviewUrl);
                        } else if (XS.is.android) {
                            XS.navigate(Config.androidReviewURL);
                        } else {
                            XS.navigate(Config.iOSReviewURL);
                        }
                        Modal.hide();
                    }, 0xBBBBBB);
                    reviewButton.y = 370 + 50 + 10 + 150;
                    reviewButton.visible = false;
                    var btn = self.addButton(Host.Localize.Translate("No thanks"), function() {
                        Modal.hide();
                    }, color);
                    btn.visible = false;

                    function showNoThanks(offset) {
                        var showFeedbackButton = offset != 4;
                        feedbackBtn.visible = showFeedbackButton;
                        reviewButton.visible = true;
                        var push = showFeedbackButton ? 150 : 0;
                        reviewButton.y = 370 + 50 + 10 + push;
                        reviewButton.setColor(showFeedbackButton ? 0xBBBBBB : 0x5ebc7e);
                        btn.visible = true;
                        self.innerHeight = 750 + 10 + push;
                        Modal.setHeight(self.innerHeight);
                        Modal.handleResize();
                        btn.y = 370 + 50 + 130 + 10 + push;
                        self.addChildAt(btn, 0);
                    }
                    var stars = [];

                    function getStar(offset) {
                        var st = new Sheet(star, 136, 130);
                        st.y = 270;
                        st.x = a * 150 + 30;
                        st.on('down', function() {
                            for (var a = 0; a < 5; a++) {
                                stars[a].frame = a <= offset ? 1 : 0;
                            }
                            showNoThanks(offset);
                        }, {
                            freezeGroup: ENG_FRZ_GRP
                        });
                        st.buttonMode = true;
                        return st;
                    }
                    for (var a = 0; a < 5; a++) {
                        stars.push(this.addChild(getStar(a)));
                    }
                    this.innerHeight = 450;
                    this.blurClose = false;
                });
                window.Modal.AskRateGameModal = Modal.ModalOverlayContent.expand(function(rateButtonBackgroundColor, showRateModal, callback) {
                    Modal.ModalOverlayContent.call(this);
                    this.addHeadline(Host.Localize.Translate("Having Fun?"));
                    this.addLead(Host.Localize.Translate("Help us improve the game!\nHow would you rate {game_name}?", {
                        game_name: Config.shareTitle
                    }), 26);
                    var self = this;
                    var rateButton = self.addButton(Host.Localize.Translate("Rate us"), function() {
                        showRateModal && showRateModal();
                        callback(true);
                        Modal.hide();
                    }, rateButtonBackgroundColor);
                    rateButton.visible = true;
                    rateButton.y = 276;
                    this.innerHeight = 450;
                    this.blurClose = false;
                    this.blurCallback = function() {
                        Modal.hide();
                        callback(false);
                    };
                });
                window.Modal.AlertDialog = Modal.ModalOverlayContent.expand(function(config, callback) { // `config` expected fields:
                    // var config ={
                    // 	titleText: "A title" ,
                    // 	messageText: "A Message" ,
                    // 	okButtonConfig: {
                    // 		title: "ok",
                    // 		backgroundColor: 0x000000,
                    // 	},
                    // }
                    var titleText = config.titleText || "";
                    var messageText = config.messageText || "";
                    var okButtonConfig = config.okButtonConfig;
                    Modal.ModalOverlayContent.call(this);
                    this.addHeadline(titleText);
                    this.addLead(messageText, 26);
                    var self = this;
                    var y = 276 - 90;
                    if (okButtonConfig) {
                        var okButton = self.addButton(okButtonConfig.title, function() {
                            callback(true);
                            Modal.hide();
                        }, okButtonConfig.backgroundColor);
                        okButton.visible = true;
                        okButton.y = y + 90;
                    }
                    this.innerHeight = 450;
                    this.blurClose = false;
                    this.blurCallback = function() {
                        Modal.hide();
                        callback(false);
                    };
                });
                window.Modal.FacebookLogin = Modal.ModalOverlayContent.expand(function(callback) {
                    var buttonColor = 0x3b5998;
                    Modal.ModalOverlayContent.call(this);
                    this.addHeadline(Host.Localize.Translate("Login to facebook"));
                    this.addLead(Host.Localize.Translate("Please relogin to facebook \nto continue save your score"), 26);
                    var self = this;
                    var rateButton = self.addButton(Host.Localize.Translate("Login"), function() {
                        callback(true);
                        Modal.hide();
                    }, buttonColor);
                    rateButton.visible = true;
                    rateButton.y = 276;
                    this.innerHeight = 450;
                    this.blurClose = false;
                    this.blurCallback = function() {
                        Modal.hide();
                        callback(false);
                    };
                });
                window.Modal.BuyItemModal = Modal.ModalOverlayContent.expand(function(headline, description, cost, callback, headline2, description2, callback2) {
                    Modal.ModalOverlayContent.call(this);
                    this.addHeadline(headline);
                    var lead = this.addLead(description, 10);
                    var ratio = 1;
                    lead.updateStyle({
                        wordWrapWidth: 790 * ratio
                    });
                    var btn = this.addButton(cost, callback, 0x71e096);
                    btn.y = 400 - 200;
                    if (headline2) {
                        var middle = this.addMiddleButton(headline2, description2, callback2, 0x7a7a7a);
                        middle.y = 400 - 150 + 5;
                        btn.y += 180 + 5;
                        this.innerHeight = 400 + 179;
                    } else {
                        btn.y += 20;
                        this.innerHeight = 420;
                    }
                    this.addChild(lead); //this.alpha = .5
                });
                window.Modal.InstallGameModal = Modal.ModalOverlayContent.expand(function(imagePath, installPath, callback, navigateCallback) {
                    Modal.ModalOverlayContent.call(this);
                    this.addHeadline(Host.Localize.Translate("Install {game_name}?", {
                        game_name: Config.shortTitle
                    }));
                    var btn = this.addButton(Host.Localize.Translate("Install Now"), function() {
                        if (installPath) XS.navigate(installPath, "_top");
                        if (navigateCallback) navigateCallback();
                    }, 0x5fbc7e);
                    btn.y = 640;
                    this.innerHeight += 40;
                    var banner = XS.utils.asynchLoadImageFromPath(window.__resolvePath(imagePath));
                    banner.anchor.set(0, 0);
                    this.addChild(banner);
                    banner.buttonMode = true;
                    banner.on('down', function() {
                        if (installPath) XS.navigate(installPath, "_top");
                        if (navigateCallback) navigateCallback();
                    }, {
                        freezeGroup: ENG_FRZ_GRP
                    });
                    this.setRatio = function(ratio) {
                        ratio = 1;
                        banner.scale.set(ratio * 1.465, ratio * 1.465);
                        banner.y = 160 * ratio;
                    };
                    this.setText = function(text) {
                        btn.setText(text);
                    };
                    this.blurClose = false;
                    this.blurCallback = function() {
                        Modal.hide(callback);
                    };
                });
                window.Modal.GameEndModal = Modal.ModalOverlayContent.expand(function(config) {
                    var self = Modal.ModalOverlayContent.call(this);
                    var contentTop = config.contentTop || 190;
                    if (config.headline) {
                        self.addHeadline(config.headline);
                    }
                    if (config.lead) {
                        self.addLead(config.lead);
                    }
                    this.blurClose = false;
                    self.blurCallback = function() {
                        config.mainActionCallback();
                    };
                    self.mainAction = self.addButton(config.mainActionText, config.mainActionCallback, config.mainActionColor || 0x71e096, config.mainActionLead, config.mainActionSize);
                    if (!config.disableMetaButton || XS.can.showModalMetaButtonOnGameEnd()) {
                        if (self.addMetaButton(contentTop + 50, config)) {
                            contentTop += 165;
                        }
                    }
                    self.mainAction.y = 215 + contentTop - 200;
                    self.innerHeight = 215 + contentTop;
                });
                window.Modal.NewWinModal = Modal.ModalOverlayContent.expand(function(config) {
                    var self = Modal.ModalOverlayContent.call(this); //Add headline to game
                    self.addHeadline([Host.Localize.Translate("Amazing!"), Host.Localize.Translate("Impressive!"), Host.Localize.Translate("Breathtaking!")][Math.random() * 3 >> 0]); //Prevent auto close of dialouge
                    self.blurClose = config.allowBlurClose || false;
                    var contentTop = 190;
                    var day = CalendarView.getCalendarViewDay({
                        currentDate: CalendarView.getDateFromOffset(config.seed),
                        isToday: CalendarView.isToday(config.seed),
                        isLarge: true,
                        dateOffset: config.seed,
                        stars: [config.bronze, config.silver, config.gold],
                        animate: true
                    });
                    self.addChild(day);
                    day.x = 400;
                    day.y = 380;
                    if (config.lead) {
                        var textblock = self.addTextBlock(config.lead, 50, 300);
                        textblock.y = contentTop + 400;
                        contentTop += 61;
                    }
                    if (config.score !== undefined) {
                        var numberWithCommas = function numberWithCommas(x) {
                            return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        };
                        contentTop += 130;
                        var scoreLabel = self.addTextBlock(0, 150, 400);
                        scoreLabel.y = 570 - 20;
                        self.addChild(scoreLabel);
                        var curValue = 0;
                        Object.defineProperty(scoreLabel, 'score', {
                            get: function get() {
                                return curValue;
                            },
                            set: function set(value) {
                                curValue = value;
                                this.setText(numberWithCommas(value >> 0));
                            }
                        });
                        var tx = scoreLabel.scale.x;
                        var ty = scoreLabel.scale.x;
                        new Tween(scoreLabel, {
                            score: config.score
                        }, 1, Tween.linary, ENG_FRZ_GRP).wait(.3).call(function() {
                            if (config.sounds && config.sounds.ding) {
                                config.sounds.ding.play();
                            }
                            scoreLabel.scale.set(tx * 1.1, ty * 1.1);
                            new Tween(scoreLabel.scale, {
                                x: tx,
                                y: ty
                            }, .3, undefined, ENG_FRZ_GRP);
                        });
                        if (config.sounds && config.sounds.count) {
                            config.sounds.count.play(.4);
                        }
                    }
                    if (self.addMetaButton(contentTop + 405, config)) {
                        contentTop += 165;
                    }
                    if (config.secondActionText && config.secondActionCallback) {
                        var btn = self.addSocialButton(config.secondActionText, config.secondActionLead, config.secondActionCallback, config.secondActionColor || 0x719be0);
                        btn.y = contentTop + 405;
                        contentTop += 165;
                    }
                    var mainAction = self.addButton(config.mainActionText, config.mainActionCallback, config.mainActionColor || 0x71e096);
                    self.addChildAt(mainAction, 1);
                    mainAction.y += contentTop;
                    self.innerHeight = 570 + contentTop;
                });
                window.Modal.StartGameModal = Modal.ModalOverlayContent.expand(function(config) {
                    var self = Modal.ModalOverlayContent.call(this);
                    var contentTop = config.contentTop || 190;
                    if (config.headline) {
                        self.addHeadline(config.headline);
                    }
                    if (config.lead) {
                        self.addLead(config.lead);
                    }
                    this.blurClose = false;
                    self.blurCallback = function() {
                        config.mainActionCallback();
                    };
                    self.mainAction = self.addButton(config.mainActionText, config.mainActionCallback, config.mainActionColor || 0x71e096, config.mainActionLead, config.mainActionSize);
                    if (!config.disableMetaButton || XS.can.showModalMetaButtonOnGameStart()) {
                        if (self.addMetaButton(contentTop + 50, config)) {
                            contentTop += 165;
                        }
                    }
                    self.mainAction.y = 215 + contentTop - 200;
                    self.innerHeight = 215 + contentTop;
                    return self;
                });
                window.Modal.GameOverModal = Container.expand(function(callback, worldmap_callback) {
                    Modal.ModalOverlayContent.call(this);
                    var self = this;
                    self.addHeadline(Host.Localize.Translate("Game Over"));
                    self.addLead(Host.Localize.Translate("No more valid moves"));
                    self.blurClose = false;
                    var playAgainButton = self.addButton(Host.Localize.Translate("Start over"), callback, 0x71e096);
                    var contentTop = 250;
                    if (self.addMetaButton(contentTop, {
                            mainActionCallback: worldmap_callback
                        })) {
                        contentTop += 165;
                    }
                    if (worldmap_callback) {
                        var calendar_button = self.addMiddleButton(Host.Localize.Translate("Return to Calendar"), Host.Localize.Translate("Play another level?"), worldmap_callback, 0x719be0);
                        calendar_button.y = contentTop;
                        contentTop += 165;
                    }
                    playAgainButton.y = contentTop - 35;
                    self.innerHeight = contentTop + 165;
                });
                window.Modal.NewGameModal = Container.expand(function(callback, threesetConfig) {
                    var self = Modal.ModalOverlayContent.call(this);
                    var contentTop = -170;
                    var playNowButton = self.addButton(Host.Localize.Translate("Start"), function() {
                        callback();
                    }, 0x71e096);
                    if (threesetConfig) {
                        var toggle = self.addSlider({
                            casual: Host.Localize.Translate("Casual"),
                            normal: Host.Localize.Translate("Normal"),
                            challenging: Host.Localize.Translate("Challenging"),
                            casualStar: threesetConfig.casualStar,
                            normalStar: threesetConfig.normalStar,
                            challengingStar: threesetConfig.challengingStar,
                            selected: threesetConfig.complexity
                        });
                        toggle.on('complexity', function(d) {
                            XS.data.modalSliderComplexity = d.selected + 1;
                        }, {
                            freezeGroup: ENG_FRZ_GRP
                        });
                        toggle.y = 595;
                        var cb = callback;
                        callback = function callback() {
                            cb(toggle.getComplexity());
                        };
                        contentTop = 290;
                        self.innerHeight = 570 + contentTop;
                    }
                    playNowButton.y += contentTop;
                    self.innerHeight = 570 + contentTop;
                });
                window.Modal.Toast = Modal.ModalOverlayContent.expand(function(title, subtitle) {
                    var self = Modal.ModalOverlayContent.call(this);
                    if (title) self.addHeadline(title);
                    if (subtitle) self.addLead(subtitle, 20);
                    self.innerHeight = 250;
                }); // // call Modal.hide() to hide it
                window.Modal.showToast = function(modal, toastTimeout, callback) {
                    var toastTimeout = toastTimeout || 3000;
                    Modal.show(modal, true, true);
                    XS.setTimeout(function() {
                        Modal.hide(modal);
                        callback && callback();
                    }, toastTimeout);
                };
                window.Modal.TryAgainModal = Modal.ModalOverlayContent.expand(function() {
                    Modal.ModalOverlayContent.call(this);
                    this.addHeadline([Host.Localize.Translate("Try again", {}, "Shown when a user plays bad"), Host.Localize.Translate("Once more", {}, "Shown when a user plays bad"), Host.Localize.Translate("Again", {}, "Shown when a user plays bad"), Host.Localize.Translate("One more time", {}, "Shown when a user plays bad")][Math.random() * 4 | 0]);
                    this.blurClose = true;
                    this.innerHeight = 200;
                });
                window.Modal.VBox = Container.expand(function(elements, spacing) {
                    Container.call(this);
                    var nextTop = 0;
                    for (var idx = 0; idx < elements.length; idx++) {
                        var element = elements[idx];
                        this.addChild(element);
                        element.y = nextTop;
                        nextTop += element.height + (spacing || 0);
                    }
                    this.innerHeight = nextTop;
                });
                window.Modal.ContentModal = Modal.ModalOverlayContent.expand(function(title, textBlock, lead, child) {
                    var CHILD_TOP_MARGIN = 40;
                    Modal.ModalOverlayContent.call(this);
                    var firstElement; //check if the text parameter is only text.
                    // if it's an object we assume, the form:
                    // {text: <text>, style: {...}}
                    function isString(obj) {
                        return typeof obj === 'string' || obj instanceof String || obj instanceof Host.Localize.LocalizedString;
                    }
                    if (title) {
                        if (isString(title)) {
                            this.headline = this.addHeadline(title);
                        } else {
                            this.headline = this.addHeadline(title.text, title.style);
                        }
                        firstElement = this.headline;
                    }
                    if (textBlock) {
                        if (isString(textBlock)) {
                            this.textBlock = this.addTextBlock(textBlock);
                        } else {
                            this.textBlock = this.addTextBlock(textBlock.text, undefined, undefined, textBlock.style);
                        }
                        firstElement = this.textBlock;
                    }
                    if (lead) {
                        if (isString(lead)) {
                            this.lead = this.addLead(lead);
                        } else {
                            this.lead = this.addLead(lead.text, undefined, undefined, lead.style);
                        }
                        firstElement = this.lead;
                    }
                    if (child) {
                        this.addChild(child);
                        child.y = (firstElement ? firstElement.y + firstElement.height : 0) + CHILD_TOP_MARGIN;
                        this.innerHeight = child.y + child.height;
                    }
                }); // MenuButton replacement that doesn't affect Button height when using a border
                window.Modal.ActionButton = Container.expand(function(text, callback, color, border, fontsize) {
                    Container.call(this);
                    var self = this;
                    color = color === undefined ? 0xf04e2b : color;
                    var buttonBackground = new Graphics();
                    this.addChild(buttonBackground);
                    var buttonSize = 165;
                    var buttonHeight = buttonSize; // + border
                    function redraw() {
                        if (border) {
                            buttonBackground.drawRoundedRect(0, 0, 800, buttonHeight, border);
                            buttonBackground.drawRect(0, 0, 800, border);
                        } else {
                            buttonBackground.drawRect(0, 0, 800, buttonHeight);
                        }
                    }
                    var buttonText = new Text2(text, {
                        width: 400,
                        size: fontsize,
                        fill: "#ffffff",
                        maxWidth: 780
                    });
                    buttonText.anchor.set(.5, 0);
                    buttonText.x = 400;
                    buttonText.y = 30; //+ border
                    buttonText.interactive = true;
                    buttonText.buttonMode = true;
                    this.addChild(buttonText);
                    if (callback) {
                        buttonBackground.on('down', function() {
                            if (Modal.sounds.button) Modal.sounds.button.play(0); //Clear all potential other events
                            XS.stageContainer.off('stageup', undefined, {
                                freezeGroup: ENG_FRZ_GRP
                            }); //Trigger on released.
                            XS.stageContainer.once('stageup', function() {
                                callback(self);
                            }, {
                                freezeGroup: ENG_FRZ_GRP
                            });
                        }, {
                            freezeGroup: ENG_FRZ_GRP
                        });
                    }
                    this.setColor = function(color) {
                        buttonBackground.beginFill(color);
                        redraw();
                    };
                    this.setText = function(text) {
                        buttonText.setText(text);
                    };
                    this.updateTextStyle = function(opts) {
                        buttonText.updateStyle(opts);
                    };
                    this.setColor(color === undefined ? 0xff0000 : color, 1);
                    this.select = function(tabgroup) {
                        if (callback) {
                            callback(self);
                        }
                    };
                });

                function TabButtonItem(button, tabindex, config) {
                    var self = this;
                    self.button = button;
                    self.tabindex = tabindex;
                    self.config = config;
                    this.focus = function() {
                        self.button.setColor(self.config.focus.color);
                        self.button.updateTextStyle(self.config.focus.style);
                    };
                    this.unfocus = function() {
                        self.button.setColor(self.config.unfocus.color);
                        self.button.updateTextStyle(self.config.unfocus.style);
                    };
                    this.select = function(tabgroup) {
                        self.button.select && self.button.select();
                    };
                }
                window.Modal.ButtonListModal = window.Modal.ContentModal.expand(function(config) {
                    var DEFAULT_CONFIG_COLOR_STYLE = {
                        focus: {
                            style: {
                                size: 90,
                                fill: '#FFFFFF'
                            },
                            color: 0x71e096
                        },
                        unfocus: {
                            style: {
                                size: 70,
                                fill: '#666666'
                            },
                            color: 0xFFFFFF
                        },
                        select: {
                            color: 0x4a9162
                        }
                    };
                    var DEFAULT_SIZE = 90;
                    var LAST_BUTTON_BORDER = 35;
                    config = config || {};
                    var title = config.title;
                    var textBlock = config.textBlock;
                    var lead = config.lead;
                    var buttons = config.buttons;
                    var styles = config.styles || DEFAULT_CONFIG_COLOR_STYLE;

                    function mapToActionButton(button, isLast) {
                        var style = styles[isLast ? 'select' : 'unfocus'];
                        var actionButton = new Modal.ActionButton(button.text, button.callback, style.color, isLast ? LAST_BUTTON_BORDER : 0, style.size || DEFAULT_SIZE);
                        actionButton.updateTextStyle(style.style);
                        return actionButton;
                    }
                    var buttonElements = [];
                    for (var i = 0; i < buttons.length; i++) {
                        var isLast = i === buttons.length - 1;
                        buttonElements.push(mapToActionButton(buttons[i], isLast));
                    }
                    var vbox = new window.Modal.VBox(buttonElements, 0);
                    window.Modal.ContentModal.call(this, title, textBlock, lead, vbox);
                    this.initTabGroup = function(defaultTabFocusIndex) {
                        var TabGroup = window.XS && window.XS.TabGroup;
                        if (!TabGroup) {
                            return;
                        }

                        function mapToTabButtonItem(buttonElement, index) {
                            return new TabButtonItem(buttonElement, index, styles);
                        }
                        var tabItems = [];
                        for (var i = 0; i < buttons.length; i++) {
                            tabItems.push(mapToTabButtonItem(buttonElements[i], i));
                        }
                        this.tabgroup = new TabGroup(tabItems, {
                            wrap: true,
                            defaultTabFocusIndex: defaultTabFocusIndex
                        });
                        return this.tabgroup;
                    };
                    this.focus = function() {
                        if (this.tabgroup) this.tabgroup.focus();
                    };
                    this.unfocus = function() {
                        if (this.tabgroup) this.tabgroup.unfocus();
                    };
                    this.onShow = function() {
                        if (this.tabgroup) this.tabgroup.push();
                    }; // Called by Modal.hide
                    this.destroy = function() {
                        if (this.tabgroup) this.tabgroup.pop();
                    };
                    if (buttons.length > 0) {
                        this.initTabGroup(buttons.length - 1);
                    }
                });
            });

            var fetch_i_g_s_Buttonclose_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/s/Buttonclose.svg', {
                    "data": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"93\" height=\"99\"><g data-name=\"close btn\"><g><circle cx=\"46.5\" cy=\"46.5\" transform=\"translate(0 6)\" fill=\"#008ebf\" r=\"46.5\"/><circle data-name=\"Ellisse 59\" cx=\"46.5\" cy=\"46.5\" r=\"46.5\" fill=\"#00bdff\"/></g><path data-name=\"icon close\" d=\"m51.74 47 14.286-14.289a3.348 3.348 0 0 0-4.734-4.735L47.005 42.264l-14.29-14.29a3.348 3.348 0 1 0-4.73 4.737l14.286 14.29L27.985 61.29a3.348 3.348 0 1 0 4.73 4.735l14.29-14.29 14.286 14.29a3.348 3.348 0 1 0 4.734-4.735Z\" fill=\"#fff\"/></g></svg>",
                    "width": 93,
                    "height": 99,
                    "mimetype": "svg+xml"
                });
            }, true);

            XS.modulesToPreload.push(function() {
                /**
                 * BrandedModal shows an FRVR branded stylized popup.
                 * @param {object} config An object allowing for popup customisation.
                 * @param {function(result)} callback Callback function that will be called with a boolean result stating if the user accepted or dismissed the popup. Can be null.
                 * 
                 * Example usage:
                 *  var config = {
                 *    title: {
                 *      text: Host.Localize.Translate('You have an\n ongoing tournament!'),
                 *      weight: 600,
                 *      size: 100,
                 *      fill: '#000000',
                 *      topMargin: 51,
                 *    },
                 *    image: fetch('i/g/s/selector.png'),
                 *    details1: Host.Localize.Translate("Do you want to join your friends"),
                 *    details2: Host.Localize.Translate("and show them who's the best?"),
                 *    okButtonText: Host.Localize.Translate('Join'),
                 *    okButtonImage: fetch('i/g/s/bronzestar.png'),
                 *    cancelButtonText: Host.Localize.Translate('DISMISS'),
                 *    shouldShowCloseButton: true		
                 *  }
                 * 
                 *  Modal.showBrandedModal(config, function (hasAccepted) {
                 *    if (hasAccepted) {
                 *      console.log("ACCEPTED")
                 *    } else {
                 *      console.log("DISMISSED")
                 *    }
                 *  }
                 */
                window.Modal.BrandedDialog = Container.expand(function(config, callback) {
                    var defaultStyle = {
                        FONT: 'Helvetica neue, helvetica, Verdana, Arial',
                        fontWeight: 400,
                        titleFontSize: 100,
                        titleFontColor: '#0a7cb0',
                        detailsFontSize: 60,
                        detailsFontColor: '#888888',
                        buttonFontSize: 60,
                        buttonFontColor: '#FFFFFF'
                    };

                    function rect(w, h, color) {
                        var g = new Graphics();
                        if (color === undefined) { // if the background is completely transparent it doesn't recognize gestures
                            g.beginFill(0xFFFFFF, 0.0001);
                        } else {
                            g.beginFill(color);
                        }
                        g.drawRect(0, 0, w, h);
                        g.endFill();
                        return g;
                    }
                    var UIShadowLabel = function UIShadowLabel(text, config, shift, shadowColor) {
                        var cont = new Container();
                        shift = shift || 10;
                        cont.label = new Text2(text, config);
                        var shadowConf = Object.assign({}, config);
                        shadowConf.fill = shadowColor || "#558093";
                        cont.shadow = new Text2(text, shadowConf);
                        cont.shadow.y += shift;
                        cont.addChild(cont.shadow);
                        cont.addChild(cont.label);
                        return cont;
                    };
                    var self = Container.call(this);
                    var containerWidth = 620;
                    var containerHeight = 916;
                    self.width = containerWidth;
                    self.height = containerHeight;
                    self.x = 100;
                    var popupBox = new Sprite(fetch_i_g_s_branded_modal_base_svg());
                    self.addChild(popupBox);
                    if (config.shouldShowCloseButton) {
                        var closeButton = new Sprite(fetch_i_g_s_Buttonclose_svg());
                        var closeButtonWidth = LEGACY_COORD_SYSTEM ? 93 : closeButton.width; //hardcoded width value to support legacy coordinate system
                        var closeButtonHeight = LEGACY_COORD_SYSTEM ? 99 : closeButton.height; //hardcoded height value to support legacy coordinate system
                        closeButton.x = containerWidth - closeButtonWidth * 0.7;
                        closeButton.y = -closeButtonHeight * 0.3;
                        self.addChild(closeButton);
                        closeButton.once('up', function() {
                            self.blurCallback();
                        });
                    }
                    config.title = config.title || {};
                    var titleLabelStyle = {
                        font: config.title.font || defaultStyle.FONT,
                        weight: config.title.weight || defaultStyle.fontWeight,
                        size: config.title.size || defaultStyle.titleFontSize,
                        fill: config.title.fill || defaultStyle.titleFontColor,
                        maxWidth: containerWidth - 80,
                        align: 'center'
                    };
                    var titleLabel = new Text2(config.title.text, titleLabelStyle);
                    titleLabel.x = containerWidth / 2 - titleLabel.width * 0.5;
                    titleLabel.y = config.title.topMargin || 80;
                    self.addChild(titleLabel);
                    var buttonHeight = 168;
                    var buttons = config.buttons || [{
                        text: config.okButtonText || Host.Localize.Translate('OK'),
                        style: config.okButtonStyle,
                        image: config.okButtonImage,
                        value: true
                    }];
                    var buttonsBoxY = containerHeight - buttons.length * buttonHeight;
                    var margin = 20;
                    var centerContainer = new Container();
                    var desiredHeight = buttonsBoxY - margin - (titleLabel.y + titleLabel.height + margin);
                    var detailsLabel1, detailsLabel2;
                    if (config.details1 || config.details2) { // line1
                        if (config.details1) {
                            var details1Style = config.details1Style || {};
                            detailsLabel1 = new Text2(config.details1, {
                                font: defaultStyle.FONT,
                                weight: details1Style.weight || defaultStyle.fontWeight,
                                size: details1Style.size || defaultStyle.detailsFontSize,
                                fill: details1Style.fill || defaultStyle.detailsFontColor,
                                maxWidth: containerWidth - 2 * margin + 10,
                                align: 'center'
                            });
                            detailsLabel1.x = containerWidth / 2 - detailsLabel1.width * 0.5;
                            detailsLabel1.y = 0;
                            centerContainer.addChild(detailsLabel1);
                        } // line 2
                        if (config.details2) {
                            var details2Style = config.details2Style || {};
                            detailsLabel2 = new Text2(config.details2, {
                                font: defaultStyle.FONT,
                                weight: details2Style.weight || defaultStyle.fontWeight,
                                size: details2Style.size || defaultStyle.detailsFontSize,
                                fill: details2Style.fill || defaultStyle.detailsFontColor,
                                maxWidth: containerWidth - 2 * margin,
                                align: 'center'
                            });
                            detailsLabel2.x = containerWidth / 2 - detailsLabel2.width * 0.5;
                            detailsLabel2.y = desiredHeight - detailsLabel2.height - margin;
                            centerContainer.addChild(detailsLabel2);
                        }
                    }
                    if (config.image) {
                        var featureBanner = new Sprite(config.image);
                        var detailsLabel1Height = 0;
                        if (detailsLabel1) {
                            detailsLabel1Height = detailsLabel1.height;
                        }
                        var detailsLabel2Height = 0;
                        if (detailsLabel2) {
                            detailsLabel2Height = detailsLabel2.height;
                        }
                        var availableHeight = desiredHeight - detailsLabel1Height - detailsLabel2Height - 2 * margin;
                        var desiredWidth = containerWidth - 2 * margin;
                        var fbScaleWidth = desiredWidth / featureBanner.width;
                        var fbScaleHeight = availableHeight / featureBanner.height;
                        var fbScale = fbScaleWidth < fbScaleHeight ? fbScaleWidth : fbScaleHeight;
                        featureBanner.scale.set(fbScale, fbScale);
                        featureBanner.x = containerWidth / 2 - featureBanner.width * 0.5;
                        featureBanner.y = detailsLabel1 ? detailsLabel1.height + margin : margin;
                        centerContainer.addChild(featureBanner);
                    }
                    centerContainer.y = titleLabel.y + titleLabel.height + margin;
                    self.addChild(centerContainer);
                    var addedButtons = [];
                    var _loop = function _loop(i) {
                        var buttonConfig = buttons[i];
                        var buttonStyle = buttonConfig.style || {};
                        var button = rect(containerWidth, buttonHeight, buttonStyle.background);
                        button.y = buttonsBoxY + i * buttonHeight;
                        self.addChild(button);
                        addedButtons.push(button);
                        var buttonContainer = new Container();
                        var buttonLabel = new Text2(buttonConfig.text || "Button " + i, {
                            font: defaultStyle.FONT,
                            weight: buttonStyle.weight || defaultStyle.fontWeight,
                            size: buttonStyle.size || defaultStyle.buttonFontSize,
                            fill: buttonStyle.fill || defaultStyle.buttonFontColor,
                            maxWidth: containerWidth - 200
                        });
                        buttonLabel.x = containerWidth / 2;
                        buttonLabel.y = buttonHeight / 2;
                        buttonLabel.anchor.set(0.5, 0.5);
                        buttonContainer.addChild(buttonLabel);
                        if (buttonConfig.image) {
                            buttonLabel.x -= 46;
                            var buttonImage = new Sprite(buttonConfig.image);
                            buttonImage.x = buttonLabel.x + buttonLabel.width / 2 + 20;
                            buttonImage.y = buttonLabel.y;
                            var scale = buttonLabel.height / buttonImage.height;
                            buttonImage.scale.set(scale, scale);
                            buttonImage.anchor.set(0, 0.5);
                            buttonContainer.addChild(buttonImage);
                        }
                        self.addChild(buttonContainer);
                        buttonContainer.y = button.y;
                        button.on('up', function() {
                            Modal.hide(function() {
                                callback && callback(buttonConfig.value);
                            });
                        });
                    };
                    for (var i = 0; i < buttons.length; i++) {
                        _loop(i);
                    }
                    if (!config.hideCancelButton) {
                        var noThanksLabel = new UIShadowLabel(config.cancelButtonText || Host.Localize.Translate("No thanks"), {
                            font: defaultStyle.FONT,
                            size: 40,
                            weight: 300,
                            fill: '#555555',
                            maxWidth: containerWidth - 120
                        }, 4, "#272727");
                        noThanksLabel.x = containerWidth / 2 - noThanksLabel.width * 0.5;
                        noThanksLabel.y = containerHeight + 20;
                        self.addChild(noThanksLabel);
                        var noThanksButton = rect(noThanksLabel.width, noThanksLabel.height);
                        noThanksButton.x = noThanksLabel.x;
                        noThanksButton.y = noThanksLabel.y;
                        self.addChild(noThanksButton);
                        noThanksButton.on('up', function() {
                            self.blurCallback();
                        });
                    }
                    self.innerHeight = containerHeight;

                    function onResize() {
                        for (var _i = 0; _i < addedButtons.length; _i++) {
                            var button = addedButtons[_i];
                            if (LEGACY_COORD_SYSTEM) {
                                button.y = (buttonsBoxY + _i * buttonHeight) * self.ratio;
                                button.height = buttonHeight * self.ratio;
                                button.width = containerWidth * self.ratio;
                            } else {
                                button.width = containerWidth / self.scale.x;
                                button.height = buttonHeight / self.scale.y;
                            }
                        }
                    }
                    XS.on('resize', onResize);
                    if (LEGACY_COORD_SYSTEM) {
                        self.setRatio = function(ratio) {
                            self.ratio = ratio;
                            onResize();
                        };
                    }
                    self.ratio = 1;
                    self.blurClose = false;
                    self.blurCallback = function() {
                        Modal.hide(function() {
                            callback && callback(false);
                        });
                    };
                });
                window.Modal.showBrandedModal = function(config, callback) {
                    Modal.show(new Modal.BrandedDialog(config, callback), false, false, true);
                };
            });

            var fetch_i_g_s_branded_modal_list_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/s/branded-modal-list.svg', {
                    "data": "<svg data-name=\"banner bg\" xmlns=\"http://www.w3.org/2000/svg\" width=\"740\" height=\"1569.999\"><path data-name=\"Tracciato 923\" d=\"M169.671.005h-85.2A84.721 84.721 0 0 0-.002 84.478v37.037h169.764Z\" fill=\"#00bdff\"/><path data-name=\"Tracciato 924\" d=\"M313.784.004H168.795l-20.833 31.1v90.412h165.822Z\" fill=\"#9b00ff\"/><path data-name=\"Tracciato 925\" d=\"M457.91.004H312.92l-20.833 31.1v90.412H457.91Z\" fill=\"#ff0029\"/><path data-name=\"Tracciato 926\" d=\"M601.887.004h-144.99l-20.833 31.1v90.412h165.823Z\" fill=\"#ff9603\"/><path data-name=\"Tracciato 927\" d=\"M740 84.474A84.722 84.722 0 0 0 655.527.001h-54.39l-20.874 31.082v90.428H740Z\" fill=\"#ffc700\"/><rect data-name=\"Rettangolo 2180\" width=\"740\" height=\"1538\" rx=\"50\" transform=\"translate(0 31.999)\" fill=\"#fff\"/></svg>",
                    "width": 740,
                    "height": 1569.999,
                    "mimetype": "svg+xml"
                });
            }, true);

            XS.modulesToPreload.push(function() {
                /**
                 * BrandedModal shows an FRVR branded stylized popup.
                 * @param {object} config An object allowing for popup customisation.
                 * @param {function(result)} callback Callback function that will be called with a boolean result stating if the user accepted or dismissed the popup. Can be null.
                 * 
                 * Example usage:
                 *  var config = {
                 *    title: {
                 *      text: Host.Localize.Translate('You have an\n ongoing tournament!'),
                 *      weight: 600,
                 *      size: 100,
                 *      fill: '#000000',
                 *      topMargin: 51,
                 *    },
                 *    image: fetch('i/g/s/selector.png'),
                 *    details1: Host.Localize.Translate("Do you want to join your friends"),
                 *    details2: Host.Localize.Translate("and show them who's the best?"),
                 *    okButtonText: Host.Localize.Translate('Join'),
                 *    okButtonImage: fetch('i/g/s/bronzestar.png'),
                 *    shouldShowCloseButton: true,
                 *    items: [ node1, node2, ...]		
                 *  }
                 * 
                 *  Modal.showBrandedModalList(config, function (hasAccepted) {
                 *    if (hasAccepted) {
                 *      console.log("ACCEPTED")
                 *    } else {
                 *      console.log("DISMISSED")
                 *    }
                 *  }
                 */
                window.Modal.BrandedDialogList = Container.expand(function(config, callback) {
                    if (!config.items) {
                        callback && callback();
                        return;
                    }
                    var defaultStyle = {
                        FONT: 'Helvetica neue, helvetica, Verdana, Arial',
                        fontWeight: 400,
                        titleFontSize: 100,
                        titleFontColor: '#0a7cb0',
                        detailsFontSize: 60,
                        detailsFontColor: '#888888'
                    };

                    function createMask(x, y, w, h, color, radius, alpha) {
                        var g = new Graphics();
                        g.beginFill(color, alpha === undefined ? 1 : alpha);
                        g.moveTo(x, y);
                        g.lineTo(w, y);
                        g.lineTo(w, y);
                        g.arcTo(w, h, w - 1, h, radius);
                        g.lineTo(w, h);
                        g.lineTo(x + 1, h);
                        g.arcTo(x, h, x, h - 1, radius);
                        g.endFill();
                        return g;
                    }

                    function rect(x, y, w, h, color, alpha) {
                        var g = new Graphics();
                        g.beginFill(color, alpha === undefined ? 1 : alpha);
                        g.drawRect(x, y, w, h);
                        g.endFill();
                        return g;
                    }
                    var self = Container.call(this);
                    var popupBox = new Sprite(fetch_i_g_s_branded_modal_list_svg());
                    self.addChild(popupBox);
                    var containerWidth = popupBox.width;
                    var containerHeight = popupBox.height;
                    self.width = containerWidth;
                    self.height = containerHeight;
                    self.x = 40;
                    if (config.shouldShowCloseButton) {
                        var closeButton = new Sprite(fetch_i_g_s_Buttonclose_svg());
                        var closeButtonWidth = LEGACY_COORD_SYSTEM ? 93 : closeButton.width; //hardcoded width value to support legacy coordinate system
                        var closeButtonHeight = LEGACY_COORD_SYSTEM ? 99 : closeButton.height; //hardcoded height value to support legacy coordinate system
                        closeButton.x = containerWidth - closeButtonWidth * 0.7;
                        closeButton.y = -closeButtonHeight * 0.3;
                        self.addChild(closeButton);
                        closeButton.once('up', function() {
                            self.blurCallback();
                        }, {
                            freezeGroup: ENG_FRZ_GRP
                        });
                    }
                    config.title = config.title || {};
                    var titleLabelStyle = {
                        font: config.title.font || defaultStyle.FONT,
                        weight: config.title.weight || defaultStyle.fontWeight,
                        size: config.title.size || defaultStyle.titleFontSize,
                        fill: config.title.fill || defaultStyle.titleFontColor,
                        maxWidth: containerWidth - 80,
                        align: 'center'
                    };
                    var titleLabel = new Text2(config.title.text, titleLabelStyle);
                    titleLabel.x = containerWidth / 2 - titleLabel.width * 0.5;
                    titleLabel.y = config.title.topMargin || 80;
                    self.addChild(titleLabel); // scroll container
                    var scrollTopMargin = titleLabel.y + titleLabel.height + 20;
                    var scrollWidth = containerWidth;
                    var scrollHeight = containerHeight - scrollTopMargin;
                    var scrollContainer = new ScrollContainer(scrollWidth, scrollHeight);
                    scrollContainer.allowScrollX = false;
                    scrollContainer.x = 0;
                    scrollContainer.y = scrollTopMargin;
                    var mask = createMask(0, 0, scrollWidth, scrollHeight, 0xffff00, 44);
                    mask.x = scrollContainer.x;
                    mask.y = scrollContainer.y;
                    self.addChild(mask);
                    scrollContainer.mask = mask;
                    self.addChild(scrollContainer);
                    var scrollTop = 0;
                    var items = config.items;
                    for (var i = 0; i < items.length; i++) {
                        var item = items[i];
                        item.y = scrollTop;
                        scrollTop += item.height;
                        scrollContainer.addChild(item);
                    }
                    if (scrollTop > scrollHeight) {
                        var scrollbarBackgroundRatio = 0.97;
                        var scrollbarBackgroundHeight = scrollbarBackgroundRatio * scrollHeight;
                        var scrollbarBackground = rect(0, 0, 10, scrollbarBackgroundHeight, 0xe4e4e4);
                        scrollbarBackground.x = scrollWidth - scrollbarBackground.width - 2;
                        scrollbarBackground.y = scrollContainer.y;
                        self.addChild(scrollbarBackground);
                        scrollbarBackground.visible = false;
                        var ratio = scrollHeight / scrollTop;
                        var scrollbarHeight = ratio * scrollbarBackgroundHeight;
                        var scrollbar = rect(0, 0, 6, scrollbarHeight, 0x008ebf);
                        scrollbar.x = scrollWidth - scrollbar.width - 4;
                        scrollbar.y = scrollContainer.y;
                        self.addChild(scrollbar);
                        scrollbar.visible = false;
                        var originalY = scrollbar.y;
                        var scrollbarHideTimeout;
                        scrollContainer.on('scroll', function() {
                            scrollbarBackground.visible = true;
                            scrollbar.visible = true;
                            clearTimeout(scrollbarHideTimeout);
                            var diff = scrollContainer.content.y * scrollHeight / scrollTop * scrollbarBackgroundRatio;
                            var newY = originalY - diff;
                            var lowerBound = originalY + (scrollbarBackgroundHeight - scrollbarHeight);
                            scrollbar.y = newY < originalY ? originalY : newY > lowerBound ? lowerBound : newY;
                            scrollbarHideTimeout = setTimeout(function() {
                                scrollbarBackground.visible = false;
                                scrollbar.visible = false;
                            }, 3000);
                        }, {
                            freezeGroup: ENG_FRZ_GRP
                        });
                    }
                    self.innerHeight = containerHeight;

                    function onResize() {}
                    XS.on('resize', onResize);
                    if (LEGACY_COORD_SYSTEM) {
                        self.setRatio = function(ratio) {
                            self.ratio = ratio;
                        };
                    }
                    self.ratio = 1;
                    self.blurClose = false;
                    self.blurCallback = function() {
                        Modal.hide(function() {
                            XS.unfreeze();
                            callback && callback();
                        });
                    };
                });
                window.Modal.showBrandedModalList = function(config, callback) {
                    XS.freeze();
                    Modal.show(new Modal.BrandedDialogList(config, callback), false, false, true);
                };
            });

            (function(scope) {
                scope.ScrollContainer = function(width, height) {
                    var self = Container.call(this);
                    self.scrollWidth = width;
                    self.scrollHeight = height;
                    self.allowScrollX = true;
                    self.allowScrollY = true;
                    self.content = new Container();
                    self.content._x = self.content._y = 0;
                    self.addChild(self.content); // We need to store this to internally add objects (such as the mask) to the non-scrolled container
                    self.content.addChild.bind(self.content);
                    var contentAddChildAt = self.content.addChildAt.bind(self.content);
                    var contentRemoveChild = self.content.removeChild.bind(self.content);
                    var selfAddChildAt = self.addChildAt.bind(self);
                    var contentChilden = [];

                    function cullAndRender() {
                        var nodeOffset = 0;
                        for (var a = 0; a < contentChilden.length; a++) {
                            var node = contentChilden[a];
                            var visible = true;
                            if (self.mask) {
                                if (node.y + self.content.y > self.scrollHeight) {
                                    visible = false;
                                }
                                if (node.x + self.content.x > self.scrollWidth) {
                                    visible = false;
                                }
                                if (node.y + node.height + self.content.y < 0) {
                                    visible = false;
                                }
                                if (node.x + node.width + self.content.x < 0) {
                                    visible = false;
                                }
                            }
                            if (visible) {
                                if (self.content.children[nodeOffset] !== node) {
                                    contentAddChildAt(node, nodeOffset);
                                }
                                nodeOffset++;
                            } else {
                                contentRemoveChild(node);
                            }
                        }
                    }
                    Object.defineProperty(self.content, 'x', {
                        get: function get() {
                            return this._x;
                        },
                        set: function set(value) {
                            if (this._x != value) {
                                this._x = value;
                                this.position.x = LEGACY_COORD_SYSTEM ? value * (this.parent ? this.parent.ratio || 1 : 1) : value;
                                cullAndRender();
                                self.emit('scroll');
                            }
                        }
                    });
                    Object.defineProperty(self.content, 'y', {
                        get: function get() {
                            return this._y;
                        },
                        set: function set(value) {
                            if (this._y != value) {
                                this._y = value;
                                this.position.y = LEGACY_COORD_SYSTEM ? value * (this.parent ? this.parent.ratio || 1 : 1) : value;
                                cullAndRender();
                                self.emit('scroll');
                            }
                        }
                    });

                    function getContentHeight() {
                        var maxY = 0;
                        for (var a = 0; a < contentChilden.length; a++) {
                            var node = contentChilden[a];
                            var newY = node.y + node.height;
                            if (newY > maxY) {
                                maxY = newY;
                            }
                        }
                        return maxY;
                    }

                    function getContentWidth() {
                        var maxX = 0;
                        for (var a = 0; a < contentChilden.length; a++) {
                            var node = contentChilden[a];
                            var newX = node.x + node.width;
                            if (newX > maxX) {
                                maxX = newX;
                            }
                        }
                        return maxX;
                    }
                    self.addChild = function(child) {
                        contentChilden.push(child);
                        cullAndRender();
                        return child;
                    };
                    self.setMaskEnabled = function(state) {
                        if (state) {
                            if (!self.mask) {
                                var mask = new Graphics();
                                selfAddChildAt(mask, self.children.length);
                                self.mask = mask;
                                self.resizeMask(self.scrollWidth, self.scrollHeight);
                            }
                        } else { // Remove mask
                            if (self.mask) {
                                self.mask = null;
                            }
                        }
                    };
                    self.addChildAt = function(child, index) {
                        if (index < 0 || index > contentChilden.length) throw 'Child index outside of valid scroll container range';
                        self.removeChild(child);
                        contentChilden.splice(index, 0, child);
                        cullAndRender();
                        return child;
                    };
                    self.removeChild = function(child) {
                        for (var a = 0; a < contentChilden.length; a++) {
                            if (contentChilden[a] == child) {
                                contentChilden.splice(a, 1);
                                contentRemoveChild(child);
                            }
                        }
                        return child;
                    };
                    self.resize = function(width, height) {
                        self.scrollWidth = width;
                        self.scrollHeight = height;
                        self.resizeMask(width, height);
                        cullAndRender();
                    };
                    self.resizeMask = function(w, h) {
                        if (self.mask) {
                            self.mask.clear();
                            self.mask.beginFill(0xffffff);
                            self.mask.drawRect(0, 0, w, h);
                            self.mask.endFill();
                        }
                    };
                    self.getChildren = function() {
                        return self.content.children;
                    };
                    self.moved = false;
                    var dragOffset = null;
                    var offsetX = 0;
                    var offsetY = 0;
                    var lastmove = null;
                    var speedY = 0;
                    var speedX = 0;
                    var time = 0;

                    function getMaxScrollX() {
                        return self.scrollWidth - Math.max(getContentWidth(), self.scrollWidth);
                    }

                    function getMaxScrollY() {
                        return self.scrollHeight - Math.max(getContentHeight(), self.scrollHeight);
                    }

                    function handleMove(data) {
                        var event = data.event;
                        var _ratio = 1;
                        if (dragOffset !== null) {
                            var ratio = 1;
                            var pos = event.getLocalPosition(self);
                            if (self.moved || self.allowScrollY && Math.abs(dragOffset.y - pos.y) > 25 * ratio || self.allowScrollX && Math.abs(dragOffset.x - pos.x) > 25 * ratio) {
                                self.moved = true;
                                if (lastmove) {
                                    speedY = pos.y - lastmove.y;
                                    speedX = pos.x - lastmove.x;
                                    time = new Date().getTime();
                                }
                                lastmove = pos;
                                if (self.allowScrollX) {
                                    var targetX = offsetX - (dragOffset.x - pos.x) / _ratio;
                                    var maxWidth = getMaxScrollX();
                                    if (targetX > 0) {
                                        targetX = Math.min(targetX, Math.sqrt(targetX) * 7);
                                    } else if (targetX < maxWidth) {
                                        var overflow = -targetX + maxWidth;
                                        targetX = maxWidth - Math.min(overflow, Math.sqrt(overflow) * 7);
                                    }
                                    self.content.x = targetX;
                                }
                                if (self.allowScrollY) {
                                    var targetY = offsetY - (dragOffset.y - pos.y) / _ratio;
                                    var maxHeight = getMaxScrollY();
                                    if (targetY > 0) {
                                        targetY = Math.min(targetY, Math.sqrt(targetY) * 7);
                                    } else if (targetY < maxHeight) {
                                        var overflow = -targetY + maxHeight;
                                        targetY = maxHeight - Math.min(overflow, Math.sqrt(overflow) * 7);
                                    }
                                    self.content.y = targetY;
                                }
                            }
                        }
                    }

                    function handleUp(event) {
                        if (dragOffset) {
                            if (!self.moved && self.callback) {
                                self.callback();
                            }
                            self.callback = null;
                            self.clean();
                        }
                        XS.stageContainer.off('up', handleUp, {
                            freezeGroup: ENG_FRZ_GRP
                        });
                        XS.stageContainer.off('move', handleMove, {
                            freezeGroup: ENG_FRZ_GRP
                        });
                    }

                    function findParent(start, end) {
                        var d = 0;
                        while (start && start != end && ++d < 100) {
                            start = start.parent;
                        }
                        return start == end;
                    }
                    var inTweenMovement = false;

                    function handleMouseLeave() {
                        handleUp();
                    }

                    function handleDown(data) {
                        if (!findParent(self, XS.stageContainer)) { //Not attached do nothing
                            return;
                        }
                        XS.stageContainer.on('up', handleUp, {
                            freezeGroup: ENG_FRZ_GRP
                        });
                        XS.stageContainer.on('move', handleMove, {
                            freezeGroup: ENG_FRZ_GRP
                        });
                        var event = data.event;
                        var pos = event.getLocalPosition(self);
                        var _ratio = 1;
                        var ox = pos.x / _ratio;
                        var oy = pos.y / _ratio;
                        offsetX = self.content.x;
                        offsetY = self.content.y;
                        if (ox >= 0 && oy >= 0 && ox <= self.scrollWidth && oy <= self.scrollHeight) {
                            dragOffset = pos;
                        }
                        self.moved = inTweenMovement;
                        Tween.clear(self.content);
                        inTweenMovement = false;
                    }

                    function handleMouseWheel(e) {
                        if (!self.allowScrollY) return;
                        var evt = window.event || e; //equalize event object
                        var delta = evt.detail ? evt.detail * -10 : evt.wheelDelta; //check for detail first so Opera uses that instead of wheelDelta
                        var maxHeight = getMaxScrollY();
                        if (self.content.y + delta >= 0) {
                            self.content.y = 0;
                        } else if (self.content.y + delta < maxHeight) {
                            self.content.y = maxHeight;
                        } else {
                            self.content.y = self.content.y + delta;
                        }
                        window.dirtyOnce = true;
                    } //Hacking in FF support
                    window.addEventListener("DOMMouseScroll", handleMouseWheel);
                    window.addEventListener("mousewheel", handleMouseWheel);
                    document.documentElement.addEventListener("mouseleave", handleMouseLeave);
                    XS.stageContainer.on('down', handleDown, {
                        freezeGroup: ENG_FRZ_GRP
                    });
                    self.dispose = function() {
                        window.removeEventListener("DOMMouseScroll", handleMouseWheel);
                        window.removeEventListener("mousewheel", handleMouseWheel);
                        document.documentElement.removeEventListener("mouseleave", handleMouseLeave);
                        XS.stageContainer.off('down', handleDown, {
                            freezeGroup: ENG_FRZ_GRP
                        });
                    };

                    function clearInTween() {
                        inTweenMovement = false;
                    }
                    self.clean = function() {
                        lastmove = null;
                        var maxWidth = getMaxScrollX();
                        var maxHeight = getMaxScrollY();
                        var tweenSpeed = .2;
                        var target = {};
                        if (self.content.x >= 0) {
                            target.x = 0;
                        } else if (self.content.x < maxWidth) {
                            target.x = maxWidth;
                        }
                        if (self.content.y >= 0) {
                            target.y = 0;
                        } else if (self.content.y < maxHeight) {
                            target.y = maxHeight;
                        } else {
                            if (new Date().getTime() - time < 250 && Math.abs(speedY) > 5 && self.allowScrollY) {
                                target.y = Math.max(Math.min(self.content.y + speedY * 20, 0), maxHeight);
                                tweenSpeed = .4;
                            }
                            if (new Date().getTime() - time < 250 && Math.abs(speedX) > 5 && self.allowScrollX) {
                                target.x = Math.max(Math.min(self.content.x + speedX * 20, 0), maxWidth);
                                tweenSpeed = .4;
                            }
                        }
                        if (target.x !== undefined || target.y !== undefined) {
                            inTweenMovement = true;
                            new Tween(self.content, target, tweenSpeed, undefined, ENG_FRZ_GRP).call(clearInTween);
                        }
                        speedY = 0;
                        speedX = 0;
                        dragOffset = null;
                        self.moved = false;
                    };
                    self.scrollTo = function(x, y) {
                        if (self.allowScrollX && x !== undefined) {
                            var maxX = getMaxScrollX();
                            var x = self.content.x;
                            if (x >= 0) {
                                self.content.x = 0;
                            } else if (x < maxX) {
                                self.content.x = maxX;
                            } else {
                                self.content.x = x;
                            }
                        }
                        if (self.allowScrollY && y !== undefined) {
                            var maxY = getMaxScrollY();
                            if (y >= 0) {
                                self.content.y = 0;
                            } else if (y < maxY) {
                                self.content.y = maxY;
                            } else {
                                self.content.y = y;
                            }
                        }
                    };
                    self.scrollToChild = function(child) {
                        var newX, newY;
                        if (self.allowScrollX) {
                            var viewportX = -self.content.x;
                            var viewportWidth = self.scrollWidth;
                            if (child.x < viewportX) { // when child is left of the viewport, scroll to child's left pixel
                                newX = -child.x;
                            } else if (child.x + child.width > viewportX + viewportWidth) { // when child is right of the viewport, scroll to child's right pixel
                                newX = -(child.x - viewportWidth + child.width);
                            }
                        }
                        if (self.allowScrollY) {
                            var viewportY = -self.content.y;
                            var viewportHeight = self.scrollHeight;
                            if (child.y < viewportY) { // when child is above the viewport, scroll to child's top pixel
                                newY = -child.y;
                            } else if (child.y + child.height > viewportY + viewportHeight) { // when child is below the viewport, scroll to child's bottom pixel
                                newY = -(child.y - viewportHeight + child.height);
                            }
                        }
                        self.scrollTo(newX, newY);
                    };
                    self.content.addChild = self.addChild;
                    self.content.addChildAt = self.addChildAt;
                    self.content.removeChild = self.removeChild;
                };
                ScrollContainer.prototype = Object.create(Container.prototype);
                ScrollContainer.prototype.constructor = ScrollContainer;
            })(window);

            var fetch_i_g_s_icon_new_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/s/icon_new.svg', {
                    "data": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"50\" height=\"50\" xml:space=\"preserve\"><circle fill=\"none\" stroke=\"#FFF\" stroke-width=\"3\" stroke-miterlimit=\"10\" cx=\"24.899\" cy=\"25.077\" r=\"21.917\"/><path fill=\"none\" stroke=\"#FFF\" stroke-width=\"3\" stroke-miterlimit=\"10\" d=\"M24.979 13.122v23.479M36.816 24.861H13.191\"/></svg>",
                    "width": 50,
                    "height": 50,
                    "mimetype": "svg+xml"
                });
            }, true);

            var fetch_i_g_s_menuopen_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/s/menuopen.svg', {
                    "data": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"68\" height=\"46\"><path fill=\"#fff\" d=\"M14 10a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2zm0 16a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2v-6a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2zm0 16a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2v-6a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2zm49-32a2 2 0 0 1-2 2H22a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h39a2 2 0 0 1 2 2zm0 16a2 2 0 0 1-2 2H22a2 2 0 0 1-2-2v-6a2 2 0 0 1 2-2h39a2 2 0 0 1 2 2zm0 16a2 2 0 0 1-2 2H22a2 2 0 0 1-2-2v-6a2 2 0 0 1 2-2h39a2 2 0 0 1 2 2z\"/></svg>",
                    "width": 68,
                    "height": 46,
                    "mimetype": "svg+xml",
                    "ignoreStageResolution": true
                });
            }, true);

            var fetch_i_g_s_menuclose_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/s/menuclose.svg', {
                    "data": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"68\" height=\"46\"><path fill=\"#fff\" d=\"M53.689 7.354a2 2 0 0 1 0 2.828L21.27 42.6a2 2 0 0 1-2.828 0L14.2 38.357a2 2 0 0 1 0-2.828L46.618 3.11a2 2 0 0 1 2.828 0z\"/><path fill=\"#fff\" d=\"M49.211 42.734a2 2 0 0 1-2.828 0L13.965 10.316a2 2 0 0 1 0-2.828l4.243-4.243a2 2 0 0 1 2.828 0l32.418 32.418a2 2 0 0 1 0 2.828z\"/></svg>",
                    "width": 68,
                    "height": 46,
                    "mimetype": "svg+xml",
                    "ignoreStageResolution": true
                });
            }, true);

            var fetch_i_g_s_ui_sidebar_shadow_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/s/ui-sidebar-shadow.svg', {
                    "data": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"25\" height=\"25\" viewBox=\"268 0 25 25\"><linearGradient id=\"a\" gradientUnits=\"userSpaceOnUse\" x1=\"267\" y1=\"12.5\" x2=\"293\" y2=\"12.5\"><stop offset=\"0\" stop-opacity=\"0\"/><stop offset=\"1\" stop-opacity=\".4\"/></linearGradient><path fill=\"url(#a)\" d=\"M267 0h26v25h-26z\"/></svg>",
                    "width": 25,
                    "height": 25,
                    "mimetype": "svg+xml",
                    "ignoreStageResolution": true
                });
            }, true);

            var fetch_i_g_s_ui_sidebar_background_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/s/ui-sidebar-background.svg', {
                    "data": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100\" height=\"60\" viewBox=\"167 0 100 60\"><path fill=\"#4CDA64\" d=\"M267 32.179C267 48.097 254.097 61 238.18 61h-42.36C179.903 61 167 48.097 167 32.179v-3.357C167 12.904 179.903 0 195.82 0h42.359C254.097 0 267 12.904 267 28.821v3.358z\"/></svg>",
                    "width": 100,
                    "height": 60,
                    "mimetype": "svg+xml",
                    "ignoreStageResolution": true
                });
            }, true);

            var fetch_i_g_s_ui_sidebar_outline_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/s/ui-sidebar-outline.svg', {
                    "data": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"104\" height=\"64\"><path fill=\"none\" stroke=\"#FCFCFC\" stroke-width=\"3\" stroke-miterlimit=\"10\" d=\"M102.5 33.679c0 15.918-12.903 28.821-28.821 28.821H31.321C15.403 62.5 2.5 49.597 2.5 33.679v-3.357C2.5 14.404 15.403 1.5 31.321 1.5h42.358c15.917 0 28.821 12.904 28.821 28.821v3.358z\"/></svg>",
                    "width": 104,
                    "height": 64,
                    "mimetype": "svg+xml",
                    "ignoreStageResolution": true
                });
            }, true);

            var fetch_i_g_s_ui_sidebar_toggle_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/s/ui-sidebar-toggle.svg', {
                    "data": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"61\" height=\"59\" viewBox=\"105 0 61 59\"><circle fill=\"#FFF\" cx=\"135.627\" cy=\"27.772\" r=\"27.273\"/></svg>",
                    "width": 61,
                    "height": 59,
                    "mimetype": "svg+xml",
                    "ignoreStageResolution": true
                });
            }, true);

            var fetch_i_g_s_icon_frvr_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/s/icon_frvr.svg', {
                    "data": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"50\" height=\"50\" xml:space=\"preserve\"><g style=\"opacity:1;fill:#fff\"><path class=\"st0\" d=\"M45.9 18.7c-.2-.3-.4-.7-.6-1-2.2-3.3-5.8-5.6-9.9-6-5.1-.5-10 2.1-12.8 6.3L18 25l-1.3 2c-2.9 4.1-8.9.4-6.5-4 1.1-1.8 3.6-2.4 5.4-1.1.4.3.8.7 1.1 1.2l4-6.1c-2-1.8-4.6-2.9-7.4-2.9-8.7 0-13.9 10-8.9 17.1 4.4 6.1 13.3 6.1 17.8.1l4.2-6.3c.3-.5 1-1.5 1.4-2 .8-1.2 1.5-2.3 2.7-3.2 4.2-2.9 9.8.1 9.9 5.2 0 4.5-4.6 7.5-8.8 5.8-1.8-.7-2.8-2.3-3.8-3.8 0-.1-.1-.1-.2-.2L23.2 33c.9 1.2 1.9 2.1 1.9 2.1 2.1 1.8 4.8 3 7.6 3.3C43.3 39.4 51 28 45.9 18.7Z\" style=\"fill:#fff\" transform=\"translate(.051 .814)\"/></g></svg>",
                    "width": 50,
                    "height": 50,
                    "mimetype": "svg+xml",
                    "ignoreStageResolution": true
                });
            }, true);

            var fetch_i_g_s_icon_twitter_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/s/icon_twitter.svg', {
                    "data": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"50\" height=\"50\" xml:space=\"preserve\"><path fill=\"#FFF\" d=\"M48.553 10.206a19.44 19.44 0 0 1-5.604 1.542 9.839 9.839 0 0 0 4.297-5.403 19.44 19.44 0 0 1-6.213 2.366 9.744 9.744 0 0 0-7.111-3.075c-5.387 0-9.757 4.369-9.757 9.754 0 .77.091 1.508.25 2.223-8.116-.41-15.3-4.286-20.119-10.193a9.674 9.674 0 0 0-1.323 4.908 9.738 9.738 0 0 0 4.34 8.113 9.587 9.587 0 0 1-4.411-1.219v.12c0 4.73 3.366 8.677 7.822 9.58a10.14 10.14 0 0 1-4.41.16 9.793 9.793 0 0 0 9.116 6.778 19.634 19.634 0 0 1-12.122 4.162c-.784 0-1.554-.043-2.323-.127a27.62 27.62 0 0 0 14.964 4.381c17.944 0 27.756-14.864 27.756-27.752l-.029-1.263a19.713 19.713 0 0 0 4.877-5.055zm0 0\"/></svg>",
                    "width": 50,
                    "height": 50,
                    "mimetype": "svg+xml",
                    "ignoreStageResolution": true
                });
            }, true);

            var fetch_i_g_s_icon_facebook_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/s/icon_facebook.svg', {
                    "data": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"50\" height=\"50\" xml:space=\"preserve\"><path fill=\"#FFF\" d=\"M46.021 1.368H3.979a2.608 2.608 0 0 0-2.608 2.608v42.041a2.608 2.608 0 0 0 2.608 2.609h22.634V30.325h-6.159v-7.132h6.159v-5.26c0-6.104 3.729-9.428 9.174-9.428 2.607 0 4.85.194 5.502.28v6.379l-3.775.002c-2.963 0-3.535 1.408-3.535 3.473v4.553h7.063l-.92 7.132h-6.143v18.301h12.043a2.608 2.608 0 0 0 2.607-2.609V3.976a2.608 2.608 0 0 0-2.608-2.608z\"/></svg>",
                    "width": 50,
                    "height": 50,
                    "mimetype": "svg+xml",
                    "ignoreStageResolution": true
                });
            }, true);

            var fetch_i_g_s_icon_sound_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/s/icon_sound.svg', {
                    "data": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"50\" height=\"50\" xml:space=\"preserve\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" fill=\"#FFF\" d=\"M26.938 26.027c0 4.648.018 9.296-.02 13.944-.006.716.26 1.852-.98 1.99-.729.081-1.495-.085-1.994-.543-2.2-2.017-4.235-4.215-6.345-6.324-2.139-2.139-2.139-2.139-5.129-2.139-1.817 0-3.649.074-5.474.027-2.158-.055-2.995-.78-3.038-2.793a227.835 227.835 0 0 1 0-9.462c.037-1.789.887-2.657 2.61-2.715 2.155-.073 4.318.02 6.47.02 2.422 0 2.422 0 4.257-1.836 1.875-1.875 3.726-3.784 5.604-5.661.469-.47.882-1.022 1.42-1.392 1.069-.733 2.604.12 2.61 1.446.02 5.147.009 10.293.009 15.438z\"/><path fill=\"none\" stroke=\"#FFF\" stroke-width=\"3\" stroke-miterlimit=\"10\" d=\"M40.551 10.934s4.564 7.817 4.564 15.093c0 7.48-4.564 15.94-4.564 15.94M36.008 15.934s3.107 5.322 3.107 10.276c0 5.093-3.107 10.853-3.107 10.853M31.225 20.073s1.891 3.237 1.891 6.25c0 3.098-1.891 6.602-1.891 6.602\"/></svg>",
                    "width": 50,
                    "height": 50,
                    "mimetype": "svg+xml",
                    "ignoreStageResolution": true
                });
            }, true);

            var fetch_i_g_s_icon_music_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/s/icon_music.svg', {
                    "data": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"50\" height=\"50\" xml:space=\"preserve\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" fill=\"#FFF\" d=\"M19.559 1.392c7.838 2.937 13.254 3.819 20.35 4.92 4.903.761 4.955.657 4.969 5.553.027 9.372.114 18.746-.028 28.117-.086 5.759-5.295 9.959-10.971 9.104-2.637-.397-4.88-1.552-5.679-4.314-.734-2.532.195-4.966 2.245-6.21 2.816-1.712 5.896-1.613 9.823-3.297 0-2.615.309-7.291.063-10.829-.065-.926-.316-2.083-2.094-2.557-5.362-1.425-10.833-2.414-16.947-3.722 0 5.731.105 11.102-.027 16.467-.148 5.98-5.675 10.141-11.549 8.85-2.453-.539-4.749-1.813-4.903-4.356-.116-1.906.593-4.71 1.956-5.68 2.784-1.982 6.222-1.49 10.276-3.287 0-6.603-.04-15.644.081-23.17.034-2.09-.081-4.11-.081-6.257.36 0 2.154.668 2.516.668z\"/></svg>",
                    "width": 50,
                    "height": 50,
                    "mimetype": "svg+xml",
                    "ignoreStageResolution": true
                });
            }, true);

            var fetch_i_g_s_icon_credits_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/s/icon_credits.svg', {
                    "data": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"50\" height=\"50\" style=\"enable-background:new 0 0 50 50\" xml:space=\"preserve\"><path d=\"M38 36.6H18.4c-1.3 0-2.3-1-2.3-2.3 0-1.3 1-2.3 2.3-2.3H38c1.3 0 2.3 1 2.3 2.3 0 1.2-1 2.3-2.3 2.3zm-24-.9v-2.8c0-.5-.4-.9-.9-.9h-2.4c-.5 0-.9.4-.9.9v2.8c0 .5.4.9.9.9h2.4c.5 0 .9-.4.9-.9zm24-8.3H18.4c-1.3 0-2.3-1-2.3-2.3 0-1.3 1-2.3 2.3-2.3H38c1.3 0 2.3 1 2.3 2.3 0 1.3-1 2.3-2.3 2.3zm-24-.8v-2.8c0-.5-.4-.9-.9-.9h-2.4c-.5 0-.9.4-.9.9v2.8c0 .5.4.9.9.9h2.4c.5-.1.9-.5.9-.9zm24-8.3H18.4c-1.3 0-2.3-1-2.3-2.3 0-1.3 1-2.3 2.3-2.3H38c1.3 0 2.3 1 2.3 2.3 0 1.3-1 2.3-2.3 2.3zm-24-.9v-2.8c0-.5-.4-.9-.9-.9h-2.4c-.5 0-.9.4-.9.9v2.8c0 .5.4.9.9.9h2.4c.5 0 .9-.4.9-.9zM44.5 2.1h-39C3.2 2.1 1.3 4 1.3 6.4v37.3c0 2.3 1.9 4.2 4.2 4.2h39c2.3 0 4.2-1.9 4.2-4.2V6.4c0-2.4-1.9-4.3-4.2-4.3zm.2 41.5c0 .1-.1.2-.2.2h-39c-.1 0-.2-.1-.2-.2V6.4c0-.1.1-.2.2-.2h39c.1 0 .2.1.2.2v37.2z\" style=\"fill:#fff\"/></svg>",
                    "width": 50,
                    "height": 50,
                    "mimetype": "svg+xml",
                    "ignoreStageResolution": true
                });
            }, true);

            var fetch_i_g_s_icon_legal_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/s/icon_legal.svg', {
                    "data": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"50\" height=\"50\" xml:space=\"preserve\"><circle fill=\"none\" stroke=\"#FFF\" stroke-width=\"3\" stroke-miterlimit=\"10\" cx=\"24.899\" cy=\"25.077\" r=\"21.917\"/><path fill=\"#FFF\" d=\"m23.434 30.974-.072-.936c-.216-1.944.432-4.068 2.232-6.228 1.619-1.908 2.52-3.312 2.52-4.932 0-1.835-1.152-3.06-3.42-3.096-1.295 0-2.735.432-3.635 1.116l-.864-2.268c1.188-.864 3.239-1.439 5.147-1.439 4.139 0 6.012 2.556 6.012 5.291 0 2.448-1.369 4.211-3.096 6.263-1.584 1.872-2.16 3.456-2.053 5.292l.037.936h-2.808zm-.792 5.039c0-1.332.9-2.268 2.16-2.268 1.261 0 2.124.936 2.124 2.268 0 1.26-.828 2.231-2.16 2.231-1.26 0-2.124-.972-2.124-2.231z\"/></svg>",
                    "width": 50,
                    "height": 50,
                    "mimetype": "svg+xml"
                });
            }, true);

            var fetch_i_g_s_icon_feedback_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/s/icon_feedback.svg', {
                    "data": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"50\" height=\"50\" xml:space=\"preserve\"><path fill=\"none\" stroke=\"#FFF\" stroke-width=\"3\" stroke-miterlimit=\"10\" d=\"M47.108 20.788c0 9.643-10.056 17.458-22.458 17.458-.936 0-1.858-.044-2.764-.131l-8.099 7.41-.018-9.461C6.865 33.087 2.191 27.362 2.191 20.788c0-9.642 10.055-17.458 22.458-17.458 12.404 0 22.459 7.816 22.459 17.458z\"/><g fill=\"#FFF\"><path d=\"M17.038 29.058c0-1.08.75-1.859 1.77-1.859 1.08 0 1.77.779 1.77 1.859 0 1.051-.69 1.86-1.77 1.86-1.05 0-1.77-.81-1.77-1.86zm.75-4.29-.42-14.399h2.88l-.42 14.399h-2.04zM26.488 24.858l-.061-.78c-.18-1.62.36-3.39 1.86-5.19 1.351-1.59 2.101-2.76 2.101-4.11 0-1.53-.961-2.55-2.851-2.58-1.08 0-2.28.36-3.03.93l-.72-1.89c.99-.72 2.7-1.2 4.29-1.2 3.449 0 5.01 2.13 5.01 4.41 0 2.04-1.141 3.51-2.58 5.22-1.32 1.56-1.8 2.88-1.71 4.41l.03.78h-2.339zm-.66 4.2c0-1.109.75-1.89 1.8-1.89s1.771.78 1.771 1.89c0 1.051-.69 1.86-1.801 1.86-1.049 0-1.77-.81-1.77-1.86z\"/></g></svg>",
                    "width": 50,
                    "height": 50,
                    "mimetype": "svg+xml",
                    "ignoreStageResolution": true
                });
            }, true);

            var fetch_i_g_s_icon_hand_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/s/icon_hand.svg', {
                    "data": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"50\" height=\"50\"><path fill=\"none\" stroke=\"#FFF\" stroke-width=\"1.5\" stroke-miterlimit=\"10\" d=\"m16.03 32.9 10.03 13.3V49h7.4s1.32-2.63 3-2.63c1.25 0 3.28 2.62 3.28 2.62h2.35s-.1-4.1 0-5.6c0-2.15 4.3-4.5 4.3-6.56V30.8c0-.7.44-4.3-1.4-4.85-3.4-1.02-2.5 3.05-3.4 3.05-1.25 0-.25-4.45-3.76-4.45C35.1 24.55 36.2 29 35 29c-.7 0 .4-5-3.43-5-2.8 0-1.85 5.03-2.84 5.03-1.2 0-.96-15.7-5.9-15-6.12.86 2.73 18.67 1.2 18.85-.7.08-.42-.34-3.4-3.16-1.98-1.9-6.32-.7-4.67 3.16z\"/><path fill=\"#FFF\" d=\"M39.24 43.1c-.6 0-1.1-.6-1.1-1.35V34.1c0-.75.5-1.36 1.1-1.36.6 0 1.1.6 1.1 1.35v7.6c0 .74-.5 1.34-1.1 1.34zm-4.08 0c-.6 0-1.1-.6-1.1-1.35V34.1c0-.75.5-1.36 1.1-1.36.6 0 1.1.6 1.1 1.35v7.6c0 .74-.5 1.34-1.1 1.34zm-3.9 0c-.6 0-1.1-.6-1.1-1.35V34.1c0-.75.5-1.36 1.1-1.36.6 0 1.1.6 1.1 1.35v7.6c0 .74-.5 1.34-1.1 1.34z\"/><path fill=\"none\" stroke=\"#FFF\" stroke-width=\"3\" stroke-miterlimit=\"10\" d=\"M31.6 17.2h10.17m-38.27 0h10.17m.56-15.9 4.24 9.26M32.13 1l-4.23 9.26\"/></svg>",
                    "width": 50,
                    "height": 50,
                    "mimetype": "svg+xml",
                    "ignoreStageResolution": true
                });
            }, true);

            var fetch_i_g_s_icon_restart_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/s/icon_restart.svg', {
                    "data": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"50\" height=\"50\" style=\"enable-background:new 0 0 50 50\" xml:space=\"preserve\"><path d=\"M25 1.6C12.2 1.6 1.7 12 1.6 24.8h3C4.7 13.6 13.8 4.6 25 4.6c11.3 0 20.4 9.2 20.4 20.4S36.3 45.4 25 45.4c-6.3 0-12-2.9-15.8-7.5l6.6-7.2H1.6v15.6l5.6-6.1c4.3 5 10.7 8.2 17.8 8.2 12.9 0 23.4-10.5 23.4-23.4S37.9 1.6 25 1.6z\" style=\"fill:#fff\"/></svg>",
                    "width": 50,
                    "height": 50,
                    "mimetype": "svg+xml",
                    "ignoreStageResolution": true
                });
            }, true);

            var fetch_i_g_s_icon_shop_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/s/icon_shop.svg', {
                    "data": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"50\" height=\"50\" xml:space=\"preserve\"><path fill=\"#FFF\" d=\"M7.078 27.922h35.843v17.076H7.078zM47.441 18.844c0 2.401-3.079 3.865-4.442 3.865-1.364 0-4.449-3.222-4.449-3.222s-3.272 3.217-4.686 3.222c-1.426.004-4.745-3.222-4.745-3.222s-3.225 3.213-4.626 3.222c-1.425.008-4.745-3.222-4.745-3.222s-2.898 3.188-4.214 3.222c-1.413.036-4.686-3.222-4.686-3.222s-3.228 3.3-4.626 3.222c-1.208-.068-3.664-1.406-3.664-3.865 0-3.572 8.582-11.424 8.582-11.424h27.526s8.775 7.823 8.775 11.424z\"/></svg>",
                    "width": 50,
                    "height": 50,
                    "mimetype": "svg+xml",
                    "ignoreStageResolution": true
                });
            }, true);

            var fetch_i_g_s_icon_map_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/s/icon_map.svg', {
                    "data": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"50\" height=\"50\"><g clip-rule=\"evenodd\"><path fill=\"none\" d=\"M16.56 31.82c-.95-.84-1.7-1.63-2.6-2.25-3.14-2.23-5.63-1.54-7.05 2-1.7 4.3-3.3 8.68-5.1 13-.6 1.7-.2 2.3 1.6 2.3 4.2-.05 8.4 0 12.6 0 9.8 0 19.6 0 29.5-.02 3.73-.02 3.75-.08 2.3-3.66-1.5-3.8-3.05-7.5-4.63-11.2-1.87-4.4-4.42-5-8.04-1.9-.57.5-1 1.1-1.5 1.7.7.13 1.4.52 2.1.44 2.5-.3 3.9.77 4.6 3.14.4 1.4 1.05 2.7 1.56 4.03 1.14 3.08 1.1 3.25-2.2 3.28-8.36.1-16.7.06-25.1.06-1.75 0-3.53.06-5.3-.1-.56-.1-1.6-1-1.53-1.27.9-2.77 1.56-5.7 3.16-8 .8-1.17 3.4-1.07 5.8-1.7z\"/><path fill-rule=\"evenodd\" fill=\"#FFF\" d=\"M27.98 2.5c1.38.34 2.52 1.3 3.75 2.02 8.02 4.64 9.7 15.25 3.25 21.9-2.55 2.64-5.66 4.75-8.45 7.17-1.2 1-2.2 1-3.38 0-2.45-2.1-5.1-4-7.46-6.2C7.6 20 9.6 8.1 19.5 3.6c.84-.4 1.64-1 2.6-1.2 1.9-.4 3.9-.5 5.8 0zm-3.22 23.83c5.18.05 9.58-4.3 9.62-9.5.05-5.22-4.23-9.53-9.5-9.57-5.3-.03-9.52 4.13-9.56 9.44-.03 5.26 4.2 9.6 9.44 9.63z\"/><path fill-rule=\"evenodd\" fill=\"#FFF\" d=\"M16.56 31.82c-2.4.62-4.98.52-5.78 1.66-1.6 2.3-2.53 5.2-3.16 8-.2.85.97 1.2 1.55 1.25 1.75.2 3.53.12 5.3.12 8.36 0 16.72.04 25.1-.03 3.3-.03 3.32-.2 2.2-3.27-.53-1.35-1.1-2.6-1.6-4.03-.8-2.32-2.1-2.7-4.6-3.14-1.22-.2-1.4-.3-2.07-.48.5-.6.92-1.26 1.5-1.75 3.6-3.06 6.16-2.46 8.04 1.92 1.58 3.7 3.1 7.4 4.62 11.12 1.45 3.5 1.43 3.6-2.3 3.6H15.93c-4.18 0-8.37-.1-12.55 0-1.78 0-2.26-.6-1.57-2.3 1.8-4.3 3.4-8.7 5.1-13 1.5-3.6 4-4.2 7.1-2 .9.6 1.7 1.4 2.6 2.2z\"/><path fill=\"none\" d=\"M24.76 26.33c-5.23-.04-9.47-4.37-9.44-9.63.04-5.3 4.26-9.47 9.57-9.44 5.2.04 9.5 4.35 9.5 9.57-.1 5.2-4.5 9.55-9.7 9.5z\"/></g></svg>",
                    "width": 50,
                    "height": 50,
                    "mimetype": "svg+xml",
                    "ignoreStageResolution": true
                });
            }, true);

            var fetch_i_g_s_icon_share_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/s/icon_share.svg', {
                    "data": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"50\" height=\"50\" xml:space=\"preserve\"><path fill=\"none\" stroke=\"#FFF\" stroke-width=\"4\" stroke-miterlimit=\"10\" d=\"M28.951 15.059H41.5v33.008H8.499V15.059h11.953\"/><path fill=\"#FFF\" d=\"M31.801 7.038 24.763 0l-7.038 7.038 2.1 2.099 2.852-2.852v25.278h4.172V6.284l2.852 2.853z\"/></svg>",
                    "width": 50,
                    "height": 50,
                    "mimetype": "svg+xml",
                    "ignoreStageResolution": true
                });
            }, true);

            XS.modulesToPreload.push(function() {
                window.Sidebar = function() {
                    var self = this;
                    var menuWidth = 510;
                    var itemYHeight = 81;
                    var itemYScrollHeight = 84;
                    var xOffset = -100;
                    var headerHeight = 68;
                    var menuWidthScale = XS.gui.scale.x;
                    self.downloadItems = [];
                    var debugHeaderPressCount = 0;
                    var debugHeaderLastItemPressed = undefined;
                    var debugBackgroundPressCount = 0;
                    var debugMenuSpawned = false;
                    var defaultIcon = self.defaultIcon = fetch_i_g_s_icon_new_svg(); //self.menuEntries = []
                    function createSidebarIcon() {
                        var open = XS.utils.composeButton(fetch_i_g_s_menuopen_svg(), 'Menu');
                        var close = XS.utils.composeButton(fetch_i_g_s_menuclose_svg(), 'Close');
                        var icon = new Container();
                        icon.addChild(open);
                        icon.addChild(close);
                        Object.defineProperty(icon, 'hasFrame', {
                            set: function set(value) {
                                open.visible = value ? false : true;
                                close.visible = value ? true : false;
                            }
                        });
                        Object.defineProperty(icon, 'anchor', {
                            get: function get() {
                                return {
                                    set: function set(x, y) {
                                        open.anchor.set(x, y);
                                        close.anchor.set(x, y);
                                    }
                                };
                            }
                        });
                        icon.hasFrame = false;
                        icon.buttonMode = true;
                        icon.interactive = true;
                        icon.on('down', function() {
                            if (self.status === "showing") {
                                self.hide();
                            } else if (self.status === "hidden") {
                                self.show();
                            }
                        }, {
                            freezeGroup: ENG_FRZ_GRP
                        });
                        Object.defineProperty(icon, 'tint', {
                            get: function get() {
                                return this.children[0].children[0].tint;
                            },
                            set: function set(val) {
                                this.children.forEach(function(container) {
                                    container.children.forEach(function(sprite) {
                                        sprite.tint = val;
                                    });
                                });
                            }
                        });
                        return icon;
                    }
                    Container.call(self);
                    self.icon = createSidebarIcon();
                    self.status = "hidden"; // can be [ hidden | transitioning | showing ]
                    self.scale.set(XS.gui.scale.x, XS.gui.scale.y); //Create menu background.
                    var background = new Graphics();
                    self.addChild(background);
                    background.on('down', function() {
                        if (!debugMenuSpawned) {
                            debugBackgroundPressCount++;
                            if (debugBackgroundPressCount == 16) {
                                debugMenuSpawned = true;
                                XS.emit('spawndebugmenu');
                            }
                        }
                    }, {
                        freezeGroup: ENG_FRZ_GRP
                    });
                    self.interactive = true;
                    background.beginFill(0x333333);
                    background.drawRect(0, 0, 200, 200);
                    var _ratio = 1; //XS.gui.scale.x
                    background.width = (menuWidth + XS.styles.margins.left) * _ratio * menuWidthScale;
                    var shadow = new Sprite(fetch_i_g_s_ui_sidebar_shadow_svg()); //Sound Wrapper
                    self.sounds = {
                        show: undefined,
                        hide: undefined
                    }; //Create menu icon in public space, such that games can move it accordingly.
                    XS.gui.addChild(self.icon);
                    shadow.x = -24;
                    self.content = new ScrollContainer(500, 500);
                    self.content.allowScrollX = false;
                    self.content.y = XS.styles.margins.top * _ratio;
                    self.addChild(self.content);
                    var shadowHeight;
                    var _sizeRatio = 1;
                    var _ratio = 1;

                    function handleResize() {
                        menuWidthScale = XS.gui.scale.x;
                        self.scale.set(XS.gui.scale.x);
                        _sizeRatio = 1 / self.scale.x; // re-apply positioning when resized
                        if (self.status === "hidden") {
                            self.icon.x = XS.styles.margins.left ? (XS.styles.margins.left + 5) / .5 : 25;
                            shadow.x = -24;
                            stage.x = 0;
                        } else { //self.icon.x = (menuWidth + XS.styles.margins.left)*_ratio + iconLeftMargin
                            shadow.x = (menuWidth * menuWidthScale + XS.styles.margins.left) * _ratio - 24;
                            stage.x = (menuWidth * menuWidthScale + XS.styles.margins.left) * _ratio;
                        }
                        self.icon.y = 25;
                        if (XS.styles.margins.top > 0) {
                            self.icon.y = XS.styles.margins.top + 50;
                        }
                        self.content.y = XS.styles.margins.top * _ratio;
                        self.content.x = XS.styles.margins.left * _ratio;
                        if (XS.styles.margins.top > 0) {
                            self.content.y = XS.styles.margins.top + 50;
                        }
                        windowSidebarClosedX = -(menuWidth * menuWidthScale + XS.styles.margins.left) * _ratio;
                        if (height != shadowHeight) {
                            shadowHeight = height;
                            shadow.width = 25;
                            setBackgroundHeight();
                        }
                        background.width = (menuWidth * menuWidthScale + XS.styles.margins.left) * _ratio * _sizeRatio;
                        self.content.resize((menuWidth + XS.styles.margins.left) * 2 * _ratio, (height - XS.styles.margins.top) * 2 - itemYHeight);
                    }

                    function setBackgroundHeight() { // Use working coord system to sort this 
                        if (self.parent) {
                            var p = self.toLocal(new Point(0, XS.size.canvas.height));
                            background.height = p.y;
                            shadow.height = XS.size.canvas.height;
                        }
                    }
                    var windowSidebarClosedX = -menuWidth * _ratio * menuWidthScale;
                    var shadowClosedX = -24;
                    self.show = function() { //handleResize() // To avoid duplicate positioning code
                        if (self.status === "hidden") {
                            self.status = "transitioning";
                            XS.stageContainer.addChild(window.Sidebar);
                            XS.stageContainer.addChild(shadow);
                            setBackgroundHeight();
                            window.Sidebar.x = windowSidebarClosedX;
                            shadow.x = shadowClosedX; //Hacky hacky
                            window.Sidebar.content.content.y = 0;
                            Tween.clear(stage);
                            Tween.clear(shadow);
                            Tween.clear(self.icon);
                            var _ratio = 1; //XS.gui.scale.x
                            new Tween(window.Sidebar, {
                                x: 0
                            }, .3, undefined, ENG_FRZ_GRP); // This is in XS.stageContainerCoords
                            new Tween(stage, {
                                x: (menuWidth * menuWidthScale + XS.styles.margins.left) * _ratio
                            }, .3, undefined, ENG_FRZ_GRP); // This is in XS.stageContainer coords
                            new Tween(shadow, {
                                x: (menuWidth * menuWidthScale + XS.styles.margins.left) * _ratio - 24
                            }, .3, undefined, ENG_FRZ_GRP); // This is in XS.stageContainer coords
                            new Tween(XS.gui, {
                                x: (menuWidth * menuWidthScale + XS.styles.margins.left) * _ratio
                            }, .3, undefined, ENG_FRZ_GRP);
                            new Tween(self.icon, {
                                alpha: 0
                            }, .15, undefined, ENG_FRZ_GRP).call(function() {
                                self.icon.hasFrame = true;
                                new Tween(self.icon, {
                                    alpha: 1
                                }, .15, undefined, ENG_FRZ_GRP);
                            });
                            if (self.sounds.show) self.sounds.show.play();
                            /*if(!debugMenuSpawned) {
                                        					console.error("TESTING DEBUG MENU, REMOVE ME")
                                        					console.error("TESTING DEBUG MENU, REMOVE ME")
                                        					console.error("TESTING DEBUG MENU, REMOVE ME")
                                        					console.error("TESTING DEBUG MENU, REMOVE ME")
                                        					console.error("TESTING DEBUG MENU, REMOVE ME")
                                        					console.error("TESTING DEBUG MENU, REMOVE ME")
                                        					console.error("TESTING DEBUG MENU, REMOVE ME")
                                        					console.error("TESTING DEBUG MENU, REMOVE ME")
                                        					XS.emit('spawndebugmenu')
                                        				}*/
                            XS.emit('togglesidebar', {
                                visible: true
                            });
                            XS.track.customEvent("sidebar_open", 1);
                            XS.freeze();
                            XS.setTimeout(function() {
                                self.status = "showing";
                            }, 400, [], ENG_FRZ_GRP);
                        }
                    };
                    self.hide = function(callback) {
                        if (self.status === "showing") {
                            debugHeaderPressCount = 0;
                            debugBackgroundPressCount = 0;
                            self.status = "transitioning";
                            Tween.clear(stage);
                            Tween.clear(shadow);
                            Tween.clear(self.icon);
                            new Tween(window.Sidebar, {
                                x: windowSidebarClosedX
                            }, .3, undefined, ENG_FRZ_GRP);
                            new Tween(stage, {
                                x: 0
                            }, .3, undefined, ENG_FRZ_GRP).call(function() {
                                if (window.Sidebar.parent) {
                                    window.Sidebar.parent.removeChild(window.Sidebar);
                                }
                            });
                            new Tween(shadow, {
                                x: shadowClosedX
                            }, .3, undefined, ENG_FRZ_GRP);
                            new Tween(XS.gui, {
                                x: 0
                            }, .3, undefined, ENG_FRZ_GRP);
                            new Tween(self.icon, {
                                x: XS.styles.margins.left ? (XS.styles.margins.left + 5) / .5 : 25
                            }, .3, undefined, ENG_FRZ_GRP);
                            new Tween(self.icon, {
                                alpha: 0
                            }, .15, undefined, ENG_FRZ_GRP).call(function() {
                                self.icon.hasFrame = false;
                                new Tween(self.icon, {
                                    alpha: 1
                                }, .15, undefined, ENG_FRZ_GRP);
                            });
                            if (self.sounds.hide) self.sounds.hide.play();
                            XS.setTimeout(function() {
                                XS.unfreeze();
                                XS.emit('togglesidebar', {
                                    visible: false
                                });
                                self.status = "hidden";
                                if (typeof callback === "function") callback();
                            }, 400, [], ENG_FRZ_GRP);
                        }
                    };
                    var top = 0;
                    self.addMenuHeader = function(text) {
                        var container = new Container();
                        var background = new Graphics();
                        var _ratio = 1; //XS.gui.scale.x
                        var bgWidth = menuWidth - xOffset;
                        var textPaddingX = 11 * 2;
                        background.beginFill(0x222222);
                        background.drawRect(xOffset * _ratio, -2 * _ratio, bgWidth * _ratio, headerHeight * _ratio);
                        container.addChild(background);
                        background.on('down', function() {
                            if (!debugMenuSpawned) {
                                if (debugHeaderLastItemPressed != background) {
                                    debugShadowPressCount = 0;
                                    debugHeaderPressCount++;
                                    debugHeaderLastItemPressed = background;
                                    if (debugHeaderPressCount == 8) {
                                        debugMenuSpawned = true;
                                        XS.emit('spawndebugmenu');
                                    }
                                } else debugHeaderPressCount = 0;
                            }
                        }, {
                            freezeGroup: ENG_FRZ_GRP
                        });
                        var fontSize = 35;
                        var maxTextWidth = (bgWidth + xOffset) / (self.content.ratio / _ratio || 1) - textPaddingX;
                        var text = new Text2(text, {
                            weight: XS.is.safari || XS.is.iOS ? 300 : 200,
                            size: fontSize,
                            fill: "#FFFFFF",
                            maxWidth: maxTextWidth
                        });
                        text.x = textPaddingX; // legacy coord system doesn't appear to calc text height properly (or more likely I can't figure out the math with the old coords)
                        text.y = headerHeight * .5 - text.height * .5;
                        window.headerText = text;
                        container.addChild(text); //container.cacheAsBitmap = true
                        container.y = top;
                        self.content.addChild(container);
                        var ySize = 128;
                        container.scrollHeight = 64;
                        if (XS.is.usingCanvasRenderer) { // Major hack - no clue why this is the case
                            ySize = 64;
                        }
                        ySize = itemYScrollHeight;
                        top += ySize; //self.menuEntries.push({type:'header',container:container})
                    };
                    self.addMenuToggle = function(icon, str, state, callback, maxWidth) {
                        var container = new Container();
                        var _ratio = 1; //XS.gui.scale.x
                        var bgWidth = menuWidth - xOffset;
                        var textPaddingX = 40 * 2;
                        icon.resolution = XS.devicePixelRatio; // Screen rez
                        icon.x = 15;
                        icon.y = 15;
                        container.addChild(icon);
                        var lines = new Graphics();
                        container.addChild(lines);
                        lines.lineStyle(1, 0x0, .2);
                        lines.moveTo(-100 * _ratio, 0);
                        lines.lineTo(menuWidth * _ratio, 0);
                        lines.lineStyle(1, 0xffffff, .2);
                        lines.moveTo(-100 * _ratio, 1 * _ratio);
                        lines.lineTo(menuWidth * _ratio, 1 * _ratio);
                        lines.y = itemYHeight * _ratio;
                        lines.scale.set(1, 1 / self.scale.y);
                        container.interactive = true;
                        container.buttonMode = true;
                        container.defaultCursor = "pointer";
                        container.y = top;
                        var background = createIcon(new Sprite(fetch_i_g_s_ui_sidebar_background_svg()), 382 + 6, 10);
                        container.addChild(background);
                        var outline = createIcon(new Sprite(fetch_i_g_s_ui_sidebar_outline_svg()), 380 + 6, 8);
                        container.addChild(outline);
                        var toggle = createIcon(new Sprite(fetch_i_g_s_ui_sidebar_toggle_svg()), 421 + 6, 12);
                        container.addChild(toggle);
                        var toggleWidth = 140;
                        var maxTextWidth = (bgWidth + xOffset) / (self.content.ratio / _ratio || 1) - textPaddingX - toggleWidth;
                        var text = new Text2(str, {
                            weight: XS.is.safari || XS.is.iOS ? 300 : 200,
                            size: 35,
                            fill: "#ffffff",
                            maxWidth: maxTextWidth
                        });
                        container.addChild(text);
                        text.x = textPaddingX; // legacy coord system doesn't appear to calc text height properly (or more likely I can't figure out the math with the old coords)
                        text.y = itemYHeight * .5 - text.height * .5;
                        var toggled = true;

                        function toggleState(state) {
                            toggled = state !== undefined ? state : !toggled;
                            if (toggled) {
                                new Tween(toggle, {
                                    x: 427
                                }, .2, undefined, ENG_FRZ_GRP);
                                new Tween(background, {
                                    alpha: 1
                                }, .2, undefined, ENG_FRZ_GRP);
                            } else {
                                new Tween(toggle, {
                                    x: 389
                                }, .2, undefined, ENG_FRZ_GRP);
                                new Tween(background, {
                                    alpha: 0
                                }, .2, undefined, ENG_FRZ_GRP);
                            }
                        } //container.cacheAsBitmap = true
                        container.hitArea = new Rectangle(xOffset * _ratio, 0, (menuWidth - xOffset) * _ratio, itemYHeight * _ratio); //console.log("HitArea1 MenuToggle", container.hitArea)
                        container.on('down', function() { //console.log("MenuToggle down", str)
                            self.content.callback = function() {
                                toggleState(!toggled);
                                callback(toggled);
                            };
                        }, {
                            freezeGroup: ENG_FRZ_GRP
                        });
                        toggleState(state);
                        self.content.addChild(container);
                        container.scrollHeight = itemYScrollHeight;
                        top += itemYScrollHeight;
                        container.toggle = toggleState;
                        return container;
                    };
                    self.hideIcon = function() {
                        self.icon.visible = false;
                        window.dirtyOnce = true;
                        self.emit('hideicon');
                    };
                    if (!XS.can.showSidebar()) self.hideIcon();
                    self.showIcon = function() {
                        if (!XS.can.showSidebar()) return;
                        self.icon.visible = true;
                        window.dirtyOnce = true;
                        self.emit('showicon');
                    };
                    self.popIcon = function() {
                        self.icon.parent.addChild(self.icon);
                    };
                    self.addMenuItem = function(icon, str, callback) {
                        var container = new Container();
                        var _ratio = 1; //XS.gui.scale.x
                        var bgWidth = menuWidth - xOffset;
                        var textPaddingX = 40 * 2;
                        icon.resolution = XS.devicePixelRatio; // Screen rez
                        icon.x = 15;
                        icon.y = 15;
                        container.addChild(icon);
                        var lines = new Graphics();
                        container.addChild(lines);
                        lines.lineStyle(1, 0x0, .2);
                        lines.moveTo(-100 * _ratio, 0);
                        lines.lineTo(menuWidth * _ratio, 0);
                        lines.lineStyle(1, 0xffffff, .2);
                        lines.moveTo(-100 * _ratio, 1 * _ratio);
                        lines.lineTo(menuWidth * _ratio, 1 * _ratio);
                        lines.y = itemYHeight * _ratio;
                        lines.scale.set(1, 1 / self.scale.y); // FIXME: This assumes none of the parents have scale applied (true now, but may not be in the future)
                        container.interactive = true;
                        container.buttonMode = true;
                        container.defaultCursor = "pointer";
                        container.y = top;
                        container.hitArea = new Rectangle(xOffset * _ratio, 0, (menuWidth - xOffset) * _ratio, itemYHeight * _ratio); //console.log("HitArea2 MenuItem", container.hitArea)
                        var maxTextWidth = (bgWidth + xOffset) / (self.content.ratio / _ratio || 1) - textPaddingX;
                        var text = new Text2(str, {
                            weight: XS.is.safari || XS.is.iOS ? 300 : 200,
                            size: 35,
                            fill: "#ffffff",
                            maxWidth: maxTextWidth
                        });
                        container.addChild(text);
                        text.x = textPaddingX; // legacy coord system doesn't appear to calc text height properly (or more likely I can't figure out the math with the old coords)
                        text.y = itemYHeight * .5 - text.height * .5;
                        self.content.addChild(container);
                        container.scrollHeight = itemYScrollHeight;
                        top += itemYScrollHeight;
                        container.on('down', function() { //console.log("MenuItem down", str)
                            self.content.callback = function() {
                                callback && callback();
                            };
                        }, {
                            freezeGroup: ENG_FRZ_GRP
                        }); //self.menuEntries.push({type:'item',container:container})
                        return container;
                    };
                    self.addMenuItemAt = function(index, icon, text, callback) {
                        var item = self.addMenuItem(icon, text, callback);
                        self.content.addChildAt(item, index);
                        self.reAlignItems();
                        return item;
                    };
                    self.addMenuItemAfter = function(target, icon, text, callback) {
                        var item = self.addMenuItem(icon, text, callback);
                        var children = self.content.getChildren();
                        for (var a = 0; a < children.length; a++) {
                            if (children[a] == target) {
                                break;
                            }
                        } //console.log(item,a)
                        self.content.addChildAt(item, a + 1);
                        self.reAlignItems();
                        return item;
                    };
                    self.removeMenuItem = function(container) {
                        if (self.content.removeChild(container)) {
                            top -= itemYScrollHeight;
                        }
                    };
                    self.reAlignItems = function() {
                        top = 0;
                        var children = self.content.getChildren();
                        for (var a = 0; a < children.length; a++) {
                            var child = children[a];
                            child.y = top;
                            top += child.scrollHeight; // BMA-FIXME
                        }
                    };
                    /*
                                			Create buttons or toggles according to opts:
                                			{
                                				name: 'internal_name',
                                				type: 'header' | 'button' | 'toggle','
                                				icon: Sprite(),
                                				label: Host.Localize.Translate('Label'),
                                				value: initial_value,
                                				handler: function() {} 
                                			}
                                		*/
                    self.addItem = function(opts) {
                        opts = opts || {};
                        var name = opts.name || opts.label;
                        var type = opts.type;
                        var icon = opts.icon || defaultIcon;
                        var label = opts.label || 'N/A';
                        var value = opts.value || false;
                        var handler = opts.handler;
                        var item;

                        function callHandler(nextValue) {
                            if (type === 'button') {
                                value = true;
                            } else if (type === 'toggle') {
                                value = nextValue;
                            }
                            if (typeof handler === 'function') {
                                handler.call(item, value);
                            } else {
                                self.emit('toggle', name, value);
                            }
                        }
                        switch (type) {
                            case 'header':
                                item = self.addMenuHeader(label);
                                break;
                            case 'button':
                                item = self.addMenuItem(new Sprite(icon), label, callHandler);
                                break;
                            case 'toggle':
                                item = self.addMenuToggle(new Sprite(icon), label, value, callHandler);
                                break;
                            default:
                                console.error('Invalid menu item options:', opts);
                        }
                        return item;
                    };

                    function createIcon(icon, x, y, path) {
                        var _ratio = 1; //XS.gui.scale.x
                        icon.ratio = _ratio / 2;
                        icon.x = x;
                        icon.y = y;
                        icon.resolution = 1;
                        icon.hitArea = new Rectangle(0, 0, 50 * _ratio, 50 * _ratio);
                        if (path !== undefined) {
                            icon.interactive = true;
                            icon.buttonMode = true;
                            icon.defaultCursor = "pointer"; //console.log("path", path)
                            icon.on('down', function() {
                                self.content.callback = function() {
                                    XS.navigate(path);
                                };
                            }, {
                                freezeGroup: ENG_FRZ_GRP
                            });
                        }
                        return icon;
                    }
                    self.addSocialBar = function() {
                        if (!XS.can.showSidebarSocial()) {
                            return;
                        }
                        var container = new Container();
                        container.addChild(createIcon(new Sprite(fetch_i_g_s_icon_frvr_svg()), 20, 15, "http://frvr.com"));
                        container.addChild(createIcon(new Sprite(fetch_i_g_s_icon_twitter_svg()), 20 + 200, 15, "https://twitter.com/frvrgames"));
                        container.addChild(createIcon(new Sprite(fetch_i_g_s_icon_facebook_svg()), 20 + 200 * 2, 15, Config.facebookPageUrl || "https://www.facebook.com/frvrgames"));
                        container.y = top;
                        self.content.addChild(container);
                        container.scrollHeight = 41 * 2;
                        top += 41 * 2;
                    };
                    self.settings = [];
                    self.addSetting = function(item) {
                        self.settings.push(item);
                    };
                    self.addSettings = function() {
                        if (Config.disableSidebarSettings || !XS.can.showSidebarSettings) return; // Set sound and music from config
                        if (XS.is.twitch) {
                            XS.muteSound(true);
                            XS.muteMusic(true);
                        }
                        XS.audio.muteSounds(XS.soundSettings.muteSound.get());
                        XS.audio.muteSounds(XS.soundSettings.muteSound.get()); // Add header, buttons. Header is hidden if there are no settings
                        if (self.settings.length === 0 && (Host.supports.hideSidebarSoundButton && Host.supports.hideSidebarMusicButton || !XS.can.showSidebarSoundButton() && !XS.can.showSidebarMusicButton())) return; // Add header. Removed "skipHeader" since no one used it + it should automatically hide if there are no buttons
                        self.addMenuHeader(Host.Localize.Translate("Settings"));
                        if (!Host.supports.hideSidebarSoundButton && XS.can.showSidebarSoundButton()) {
                            self.lastMenuItem = self.addMenuToggle(new Sprite(fetch_i_g_s_icon_sound_svg()), Host.Localize.Translate("Sound Effects"), !XS.Sound.muted, function(state) {
                                XS.audio.muteSounds(!state);
                            });
                        }
                        XS.audio.muteMusics(XS.soundSettings.muteMusic.get());
                        if (!XS.audio.isMusicMuted() && XS.backgroundMusic) {
                            XS.backgroundMusic.play(0, true);
                        }
                        if (!Host.supports.hideSidebarMusicButton && XS.can.showSidebarMusicButton()) {
                            self.lastMenuItem = self.addMenuToggle(new Sprite(fetch_i_g_s_icon_music_svg(), 1), Host.Localize.Translate("Music"), !XS.Music.muted, function(state) {
                                XS.audio.muteMusics(!state);
                            });
                        }
                        if (self.settings.length > 0) {
                            for (var i = 0; i < self.settings.length; i++) {
                                var item = self.settings[i];
                                self.lastMenuItem = self.addMenuToggle(item.image, item.text, item.state, item.callback);
                            }
                        }
                    };
                    self.addLegal = function() {
                        if (!XS.can.showSidebarLegal()) {
                            return;
                        }
                        self.addMenuHeader(Host.Localize.Translate("Legal Information"));
                        var tc_url;
                        var pp_url;
                        if (XS.is.samsung) {
                            tc_url = 'https://frvr.com/legal/samsung/#TermsofService';
                            pp_url = 'https://frvr.com/legal/samsung/#PrivacyPolicy';
                        } else {
                            tc_url = 'https://frvr.com/legal/#TermsofService';
                            pp_url = 'https://frvr.com/legal/#PrivacyPolicy';
                        }
                        self.addMenuItem(new Sprite(fetch_i_g_s_icon_credits_svg()), Host.Localize.Translate("Terms & Conditions"), function() {
                            XS.navigate(tc_url);
                        });
                        self.lastMenuItem = Sidebar.addMenuItem(new Sprite(fetch_i_g_s_icon_legal_svg()), Host.Localize.Translate("Privacy Policy"), function() {
                            XS.navigate(pp_url);
                        });
                    };
                    self.addMore = function() {
                        if (!XS.can.showSidebarMore()) {
                            return;
                        }
                        if (XS.is.snapchat) {
                            Sidebar.addMenuHeader(Host.Localize.Translate("More"));
                            Sidebar.addMenuItem(new Sprite(fetch_i_g_s_icon_legal_svg()), Host.Localize.Translate("Privacy Policy"), function() {
                                sc.presentPrivacyPolicy();
                            });
                            Sidebar.addMenuItem(new Sprite(fetch_i_g_s_icon_credits_svg()), Host.Localize.Translate("Terms of Service"), function() {
                                sc.presentTermsOfService();
                            });
                            return;
                        }
                        Sidebar.addMenuHeader(Host.Localize.Translate("More"));
                        if (!XS.is.lgtv) {
                            Sidebar.addMenuItem(new Sprite(fetch_i_g_s_icon_frvr_svg()), Host.Localize.Translate("FRVR Games"), function() {
                                if (XS.is.samsung) {
                                    XS.navigate("https://play.frvr.com");
                                } else {
                                    XS.navigate("https://frvr.com");
                                }
                            });
                        }
                        if (!XS.is.samsungGameLauncher) {
                            Sidebar.addMenuItem(new Sprite(fetch_i_g_s_icon_feedback_svg()), Host.Localize.Translate("Send Feedback"), function() {
                                XS.navigate('https://frvr.com/support/?platform=' + window.__FRVR.getChannel() + '&game=' + Config.id);
                            });
                        }
                        if (window.__FRVR && window.__FRVR.consent) {
                            Sidebar.addMenuItem(new Sprite(fetch_i_g_s_icon_hand_svg()), Host.Localize.Translate("Manage Consent"), window.__FRVR.consent.show);
                        }
                        self.lastMenuItem = Sidebar.addMenuItem(new Sprite(fetch_i_g_s_icon_credits_svg()), Host.Localize.Translate("Credits"), function() {
                            XS.navigate('https://frvr.com/credits/' + Config.id + '.html');
                        });
                    };
                    self.addDownloadItem = function(image, text, callback) {
                        self.downloadItems.push({
                            image: image,
                            text: text,
                            callback: callback
                        });
                    }; // Must be called before addStandards, otherwise it doesn't work
                    self.addRestartItem = function(_callback, customButtonText) {
                        var buttonText = customButtonText || Host.Localize.Translate("Restart Level", {}, "Level in this context is a level in a game");
                        self.restartItem = {
                            image: new Sprite(fetch_i_g_s_icon_restart_svg()),
                            text: buttonText,
                            callback: function callback() {
                                self.hide();
                                XS.emit('restart');
                                if (_callback) _callback();
                            }
                        };
                    };
                    self.topItems = [];
                    self.addTopItem = function(image, text, callback) {
                        self.topItems.push({
                            image: image,
                            text: text,
                            callback: callback
                        });
                    };
                    self.addNewItem = function(_callback2, customButtonText) {
                        var buttonText = customButtonText || Host.Localize.Translate("New Game", {}, "");
                        self.newItem = {
                            image: new Sprite(fetch_i_g_s_icon_new_svg()),
                            text: buttonText,
                            callback: function callback() {
                                self.hide();
                                XS.emit('newgame');
                                if (_callback2) _callback2();
                            }
                        };
                    };
                    self.addShopItem = function(_callback3, customButtonText) {
                        var buttonText = customButtonText || Host.Localize.Translate("Shop");
                        self.shopItem = {
                            image: new Sprite(fetch_i_g_s_icon_shop_svg()),
                            text: buttonText,
                            callback: function callback() {
                                self.hide();
                                if (_callback3) _callback3();
                            }
                        };
                    };
                    self.addExitToMapItem = function(_callback4, customButtonText) {
                        var buttonText = customButtonText || Host.Localize.Translate("Exit to Map");
                        self.exitToMapItem = {
                            image: new Sprite(fetch_i_g_s_icon_map_svg()),
                            text: buttonText,
                            callback: function callback() {
                                self.hide();
                                if (_callback4) _callback4();
                            }
                        };
                    };
                    self.addToturialRestartItem = function(_callback5, customButtonText) {
                        var buttonText = customButtonText || Host.Localize.Translate("Show Tutorial");
                        self.toturialRestartItem = {
                            image: new Sprite(fetch_i_g_s_icon_legal_svg()),
                            text: buttonText,
                            callback: function callback() {
                                self.hide();
                                if (_callback5) _callback5();
                            }
                        };
                    };
                    self.addStandards = function() { //if(!XS.is.facebookInstant){
                        Sidebar.addMenuHeader(Config.shareTitle); //}
                        if (self.newItem) {
                            var item = self.newItem;
                            self.lastItem = self.addMenuItem(item.image, item.text, item.callback);
                        }
                        if (self.restartItem) {
                            var item = self.restartItem;
                            self.lastItem = self.addMenuItem(item.image, item.text, item.callback);
                        }
                        for (var a = 0; a < self.topItems.length; a++) {
                            var item = self.topItems[a];
                            self.lastItem = self.addMenuItem(item.image, item.text, item.callback);
                        }
                        if (self.shopItem) {
                            var item = self.shopItem;
                            self.lastItem = self.addMenuItem(item.image, item.text, item.callback);
                        }
                        if (self.exitToMapItem) {
                            var item = self.exitToMapItem;
                            self.lastItem = self.addMenuItem(item.image, item.text, item.callback);
                        }
                        if (self.toturialRestartItem) {
                            var item = self.toturialRestartItem;
                            self.lastItem = self.addMenuItem(item.image, item.text, item.callback);
                        }
                        if (!XS.is.twitch) {
                            var adsButton = undefined;
                            XS.insertRemoveAdsButton = function(image, text, callback) {
                                Host.Log("Sidebar: Inserting 'Remove Ads' button");
                                var children = self.content.getChildren();
                                var offset = 1;
                                if (self.restartItem) // this is so hacky and ugly, sorry
                                    offset += 1;
                                if (children.length > offset) { // Child 0 is the title header, 1 is the share button
                                    adsButton = Sidebar.addMenuItemAfter(children[offset], image, text, callback);
                                } else {
                                    Host.WrapperLog("Warning: Sidebar: Remove Ads menu item added to bottom of menu");
                                    Sidebar.addMenuItem(image, text, callback);
                                }
                            };
                            XS.removeAdsButton = function() {
                                if (adsButton) {
                                    Host.Log("Sidebar: Removing 'Remove Ads' button");
                                    self.removeMenuItem(adsButton);
                                    self.reAlignItems();
                                    adsButton = undefined;
                                } else {
                                    Host.Log("Sidebar: No adsButton defined");
                                }
                            };
                            if (!XS.is.facebookInstant && !XS.is.spilGamesWrapper) {
                                window.insertButton = function(image, text, callback) {
                                    if (!(image instanceof Sprite)) throw "Please update your code to use the new SVG icons: " + text;
                                    var item;
                                    if (self.lastItem) {
                                        item = Sidebar.addMenuItemAfter(self.lastItem, image, text, callback);
                                    } else {
                                        item = Sidebar.addMenuItem(image, text, callback);
                                    }
                                    return item;
                                };
                            }
                            if (XS.can.showSidebarShare()) {
                                Sidebar.addMenuItem(new Sprite(fetch_i_g_s_icon_share_svg()), Host.Localize.Translate("Share {game_name}", {
                                    game_name: Config.shareTitle
                                }), function() {
                                    window.shareDialogueCallback();
                                });
                            }
                        }
                        if (self.downloadItems.length > 0) {
                            for (var i = 0; i < self.downloadItems.length; ++i) {
                                var item = self.downloadItems[i];
                                Sidebar.addMenuItem(new Sprite(item.image), item.text, item.callback);
                            }
                        }
                        Sidebar.addSettings();
                        Sidebar.addLegal();
                        Sidebar.addMore();
                        Sidebar.addSocialBar();
                        Sidebar.buildDefaultQaDebugItems();
                    };
                    self.addAdsDebug = function() {
                        if (!XS.ads) {
                            return;
                        }
                        Sidebar.addMenuItem(new Sprite(fetch_i_g_s_icon_new_svg()), "XS Ads: Preload Interstitial", function() {
                            XS.ads.preload("interstitial", function(result) { // defaults to interstitial_all
                            });
                            Sidebar.hide();
                        });
                        Sidebar.addMenuItem(new Sprite(fetch_i_g_s_icon_new_svg()), "XS Ads: Show Interstitial", function() {
                            XS.ads.show("interstitial", function(result) { // defaults to interstitial_all
                            });
                            Sidebar.hide();
                        });
                        Sidebar.addMenuItem(new Sprite(fetch_i_g_s_icon_new_svg()), "XS Ads: Force Interstitial", function() {
                            XS.ads.force("interstitial", function(result) { // defaults to interstitial_all
                            });
                            Sidebar.hide();
                        });
                        Sidebar.addMenuItem(new Sprite(fetch_i_g_s_icon_new_svg()), "XS Ads: Preload Reward Ad", function() {
                            XS.ads.preload("reward", function(result) { // defaults to reward_all
                            });
                            Sidebar.hide();
                        });
                        Sidebar.addMenuItem(new Sprite(fetch_i_g_s_icon_new_svg()), "XS Ads: Show Reward Ad", function() {
                            XS.ads.show("reward", function(result) { // defaults to reward_all
                            });
                            Sidebar.hide();
                        });
                        Sidebar.addMenuItem(new Sprite(fetch_i_g_s_icon_new_svg()), "XS Ads: Force Reward Ad", function() {
                            XS.ads.force("reward", function(result) { // defaults to reward_all
                            });
                            Sidebar.hide();
                        });
                    };
                    var qaDebugtItems = [];
                    self.addQaDebugItem = function(label, handler) {
                        if (typeof label === 'object') {
                            qaDebugtItems.push(label);
                        } else {
                            qaDebugtItems.push({
                                type: 'button',
                                label: label,
                                handler: handler
                            });
                        }
                    };
                    self.addQaDebug = function() {
                        for (var i = 0; i < qaDebugtItems.length; i++) {
                            self.addItem(qaDebugtItems[i]);
                        }
                    };
                    self.buildDefaultQaDebugItems = function() {
                        self.addQaDebugItem("Force Game Over", function() {
                            if (typeof window.debugShowGameOver === "function") {
                                window.debugShowGameOver();
                            } else {
                                if (XS.is.facebookInstant) {
                                    console.warn("debugShowGameOver function not implemented in game. Trying standards");
                                    if (typeof window.Social.Instant.showGameOver === "function") { //instant v1
                                        window.Social.Instant.showGameOver();
                                    } else if (typeof window.Social.Instant.onGameOver === "function") { //instant v2
                                        //Try instant v2..?
                                        window.Social.Instant.onGameOver();
                                    } else {
                                        console.warn("No applicable standard functions found");
                                    }
                                } else {
                                    console.warn("debugShowGameOver function not implemented in game.");
                                }
                            }
                            Sidebar.hide();
                        });

                        function outputData() {
                            if (typeof window.debugOutputData === "function") {
                                window.debugOutputData();
                            } else {
                                console.warn("debugOutputData function not implemented in game. Trying standard XS.data.toString");
                                if (XS.data) {
                                    console.log(XS.data.toString());
                                } else {
                                    console.warn("Game doesn't use XS.data");
                                }
                            }
                            Sidebar.hide();
                        }
                        self.addQaDebugItem("Force Retry Overlay", function() {
                            if (typeof window.debugForceRetry === "function") {
                                window.debugForceRetry();
                            } else {
                                console.warn("debugForceRetry function not implemented in game."); //TODO: There are too many variations of how games implement this. Consolidate in games, then this function can try and guess a sane default
                                /*if (XS.is.facebookInstant) {
                                						if (typeof window.Social.Instant.showTryAgainModal === "function") {
                                							window.Social.Instant.showTryAgainModal();
                                						} else if (retryOverlay) {
                                							retryOverlay.show();
                                						} else {
                                							console.warn("No retryOverlay found")
                                						}
                                            		} else {
                                            			if (typeof window.Social.ShowTryAgainModal === "function") {
                                            				window.Social.ShowTryAgainModal(null, function() {});
                                            			} else {
                                            				console.warn("No ShowTryAgainModal function found")
                                            			}
                                            		}*/
                            }
                            Sidebar.hide();
                        });
                        self.addQaDebugItem("XS Data output elements", function() {
                            outputData();
                        });
                        self.addQaDebugItem("XS Data reset to defaults", function() {
                            if (typeof window.debugResetData === "function") {
                                window.debugResetData();
                                outputData();
                            } else {
                                console.warn("debugResetData function not implemented in game. Trying standard XS.data.resetToDefaults");
                                if (XS.data) {
                                    XS.data.resetToDefaults();
                                    outputData();
                                } else {
                                    console.warn("Game doesn't use XS.data");
                                }
                            }
                            Sidebar.hide();
                        });
                        self.addQaDebugItem("Force Reload", function() {
                            if (window.FRVRInterfaceCoreProxy && window.FRVRInterfaceCoreProxy.forceReload) {
                                return void window.FRVRInterfaceCoreProxy.forceReload();
                            }
                            window.top.location.reload();
                        });
                        var rotateLanguagesTimer = null;
                        var rotateLanguagesPos = 0;
                        self.addQaDebugItem("Start rotating languages", function() {
                            if (rotateLanguagesTimer) return;
                            var ls = window.__FRVR.cohort().supportedLanguages.concat(['en']);
                            rotateLanguagesTimer = setInterval(function() {
                                Host.Localize.Load(ls[++rotateLanguagesPos % ls.length]);
                            }, 2000);
                        });
                        self.addQaDebugItem("Stop rotating languages", function() {
                            clearTimeout(rotateLanguagesTimer);
                            rotateLanguagesTimer = null;
                        });
                    };
                    self.addBuildInfo = function() {
                        var _cohort$buildJson;
                        var cohort = window.__FRVR.cohort();
                        self.addMenuHeader("Game version: " + cohort.version);
                        self.addMenuHeader("Engine version: " + window.__FRVR.XSEngineVersion);
                        self.addMenuHeader("Engine branch: " + window.__FRVR.XSEngineBranch);
                        var fsxBuildId = window.__FRVR.fsxBuildId;
                        self.addMenuHeader("Fsx build id: " + fsxBuildId);
                        var ts = new Date(cohort == null ? void 0 : (_cohort$buildJson = cohort.buildJson) == null ? void 0 : _cohort$buildJson.timeStamp);
                        self.addMenuHeader("Time: " + ts.toDateString() + " " + ("" + ts.toLocaleTimeString()));
                        if (cohort.experiment) {
                            self.addMenuHeader("------------------");
                            self.addMenuHeader("A/B: " + cohort.experiment.name);
                            self.addMenuHeader("Cohort name: " + cohort.cohortName);
                        }
                        if (cohort.buildJson) {
                            self.addItem({
                                type: 'button',
                                label: '_build.json',
                                handler: function handler() {
                                    var pretty = JSON.stringify(cohort.buildJson, null, 2);
                                    try {
                                        var x = window.open();
                                        x.document.open();
                                        x.document.write('<html><body><pre>' + pretty + '</pre></body></html>');
                                        x.document.close();
                                    } catch (_unused) { // Fallback for FBInstant.
                                        var div = document.createElement('div');
                                        var pre = document.createElement('pre');
                                        pre.innerHTML = pretty;
                                        div.appendChild(pre);
                                        document.body.appendChild(div);
                                        document.getElementById('gameCanvas').style.display = 'none';
                                    }
                                }
                            });
                        }
                        self.addMenuHeader("------------------");
                        for (var _i = 0, _Object$entries = Object.entries((cohort == null ? void 0 : (_cohort$buildJson2 = cohort.buildJson) == null ? void 0 : _cohort$buildJson2.repos) || {}); _i < _Object$entries.length; _i++) {
                            var _cohort$buildJson2, _repo$hash;
                            var _Object$entries$_i = _Object$entries[_i],
                                key = _Object$entries$_i[0],
                                repo = _Object$entries$_i[1];
                            var mnemonic = /game-/.test(key) ? 'g' : /builder/.test(key) ? 'b' : 'x';
                            if (repo.branch) self.addMenuHeader(mnemonic + ': ' + repo.branch);
                            self.addMenuHeader(mnemonic + ': ' + ((repo == null ? void 0 : (_repo$hash = repo.hash) == null ? void 0 : _repo$hash.slice(0, 8)) || repo.version));
                        }
                        var rendererType = XS.is.usingWebGLRenderer ? "WebGL" : XS.is.usingCanvasRenderer ? "Canvas" : "Unknown";
                        self.addMenuHeader("Renderer: " + rendererType);
                        self.addMenuHeader("Coords: " + "New");
                        if (Host.GetMemoryUsage) {
                            Host.GetMemoryUsage(function(result) {
                                Host.Log("free memory: " + result["freememory"]);
                                Host.Log("total memory: " + result["totalmemory"]);
                            });
                        }
                    };
                    stage.on('down', function() {
                        if (self.status === "showing") self.hide();
                    }, {
                        freezeGroup: ENG_FRZ_GRP
                    });
                    XS.on('resize', handleResize, {
                        freezeGroup: ENG_FRZ_GRP
                    });
                };
                Sidebar.prototype = Object.create(Container.prototype);
                Sidebar.prototype.constructor = Sidebar;
                window.Sidebar = new Sidebar(); //Sidebar.show()
            });
            XS.qaAssertProviders = XS.qaAssertProviders || {};
            XS.qaAssertProviders.sidebar = {
                display: 'Sidebar Options',
                items: {
                    apiShow: {
                        display: function display() {
                            return 'Show through API';
                        },
                        scope: window,
                        onRecord: function onRecord() {
                            Sidebar.show();
                        },
                        onReplay: function onReplay(value) {
                            Sidebar.show();
                        }
                    }
                }
            }; // JT@2021-12-03:  The "debug overlay" (of questionable utility).  We should really
            // just use Vconsole for this, which is already working.  Any takers?
            //
            var debugOverlay;

            function getDebugOverlay() {
                if (!debugOverlay) {
                    debugOverlay = document.createElement('div');
                    debugOverlay.style.cssText = "position:absolute;top:0px;left:0px;bottom:0px;height:100%" + "z-index:9999999999;background:rgba(0,0,0,.9);padding:10px;color:#FFFFFF;overflow:scroll";
                    debugOverlay.onclick = function() {
                        debugOverlay.parentNode && debugOverlay.parentNode.removeChild(debugOverlay);
                    }; //document.body.appendChild(debugOverlay)
                }
            }
            XS.on('showDebugOverlay', function() {
                getDebugOverlay();
                document.body.appendChild(debugOverlay);
            });
            XS.on('spawndebugmenu', function() {
                Sidebar.addMenuHeader(Host.Localize.Translate("Extra"));
                var developmentFlag = XS.track.getDevelopmentFlag();
                Sidebar.addMenuToggle(new Sprite(fetch_i_g_s_icon_frvr_svg(), 1), Host.Localize.Translate("Development "), developmentFlag, function(state) {
                    XS.track.setDevelopmentFlag(!developmentFlag);
                });
                Sidebar.addMenuItem(new Sprite(fetch_i_g_s_icon_new_svg()), "XS: Show Debug", function() {
                    getDebugOverlay();
                    document.body.appendChild(debugOverlay);
                    Sidebar.hide();
                });
            }, {
                freezeGroup: ENG_FRZ_GRP
            });
            var debugOverlaySections = {};
            XS.on('debugOverlayCreateSource', function(data) {
                getDebugOverlay();
                var section = document.createElement('div');
                var headline = document.createElement('h3');
                headline.style.cssText = "padding:0px;margin:0px";
                headline.innerHTML = data.source;
                section.style.cssText = "margin-bottom:5px";
                section.appendChild(headline);
                debugOverlaySections[data.source] = section;
                debugOverlay.appendChild(section);
            }, {
                freezeGroup: ENG_FRZ_GRP
            });
            XS.on('writeDebug', function(data) {
                getDebugOverlay();
                var target = debugOverlaySections[data.source];
                if (target) {
                    var node = document.createElement('span');
                    node.style.cssText = "margin:0px;padding:0px;";
                    node.innerHTML = (data.skipBreak || target.children.length == 1 ? "" : "<br/>") + data.message;
                    target.appendChild(node);
                    if (target.children.length > 26) {
                        target.removeChild(target.children[1]);
                    }
                } else console.warn("Unknown debug target", data);
            }, {
                freezeGroup: ENG_FRZ_GRP
            });

            XS.modulesToPreload.push(function() {
                var BitmapFont = Container.expand(function(config) {
                    var width = config.width;
                    var height = config.height;
                    var image = config.image;
                    var offsets = config.offsets;
                    var letterWidths = config.letterWidths || {};
                    var scale = config.scale;
                    var textWidth = 0;
                    var spaceWidthMultiplier = config.spaceWidthMultiplier !== undefined ? config.spaceWidthMultiplier : 1;
                    var textAlign = config.textAlign || 'left';
                    var verticalAlign = config.verticalAlign || 'top';
                    var self = Container.call(this);
                    var elements = [];
                    var tint = 0x0;
                    Object.defineProperty(self, 'tint', {
                        get: function get() {
                            return tint;
                        },
                        set: function set(value) {
                            tint = value;
                            for (var a = 0; a < elements.length; a++) {
                                elements[a].tint = tint;
                            }
                        }
                    });
                    if (config.tint) {
                        self.tint = config.tint;
                    }
                    if (scale !== undefined) {
                        self.scale.set(scale);
                        self.resolution = scale;
                    }

                    function reAlign() {
                        var ox = 0;
                        var oy = 0;
                        if (textAlign == 'right') {
                            ox = -textWidth;
                        }
                        if (textAlign == 'center') {
                            ox = -textWidth / 2;
                        }
                        if (verticalAlign == 'bottom') {
                            oy = -height;
                        }
                        if (verticalAlign == 'center') {
                            oy = -height / 2;
                        }
                        for (var a = 0; a < elements.length; a++) {
                            elements[a].x = ox;
                            elements[a].y = oy;
                            ox += elements[a].letterWidth;
                        }
                    }
                    Object.defineProperty(self, 'textAlign', {
                        get: function get() {
                            return textAlign;
                        },
                        set: function set(value) {
                            textAlign = value;
                            reAlign();
                        }
                    });
                    Object.defineProperty(self, 'verticalAlign', {
                        get: function get() {
                            return verticalAlign;
                        },
                        set: function set(value) {
                            verticalAlign = value;
                            reAlign();
                        }
                    });
                    var elementCache = [];
                    var space = {
                        letterWidth: width * spaceWidthMultiplier
                    };
                    self.getPixelWidth = function() {
                        return textWidth * (scale || 1);
                    };
                    self.text = "";
                    self.setText = function(text) {
                        var nt = text.toString();
                        if (nt == self.text) return;
                        self.text = nt;
                        var chars = nt.split('');
                        textWidth = 0;
                        var newElements = [];
                        for (var a = 0; a < chars.length; a++) {
                            var char = chars[a];
                            if (char !== " " && offsets[char] === undefined);
                            else {
                                if (char === " ") {
                                    nm = space;
                                } else {
                                    var nm = elements.shift();
                                    if (!nm || nm == space) {
                                        nm = elementCache.pop() || new Sheet(image, width, height);
                                        nm.tint = tint;
                                        nm.letterWidth = letterWidths[char] !== undefined ? letterWidths[char] : width;
                                        self.addChild(nm);
                                    }
                                    nm.frame = offsets[char];
                                }
                                newElements.push(nm);
                                textWidth += nm.letterWidth;
                            }
                        }
                        while (elements.length) {
                            var tm = elements.pop();
                            if (tm != space) {
                                elementCache.push(tm);
                                self.removeChild(tm);
                            }
                        }
                        elements = newElements;
                        reAlign();
                    };
                });
                window.BitmapFont = BitmapFont;
            });

            XS.modulesToPreload.push(function Tutorial() {
                function TutorialOverlay(title_text, text_text) {
                    Container.call(this);
                    var that = this;
                    var innerBackground = new Graphics();
                    innerBackground.beginFill(0xffffff, .9);
                    that.addChild(innerBackground);
                    var title = new Text2(title_text, {
                        weight: 400,
                        size: 110,
                        fill: "#000000",
                        align: "center",
                        maxWidth: 1950
                    });
                    title.anchor.set(.5, 0);
                    this.addChild(title);
                    title.x = 1000;
                    title.y = 25;
                    var size = 80;
                    var styleConfig = {
                        weight: 300,
                        size: size,
                        fill: "#000000",
                        align: "center",
                        maxWidth: 1950
                    };
                    var text = new Text2(text_text, styleConfig);
                    text.anchor.set(.5, 0);
                    this.addChild(text);
                    text.x = 1000;
                    text.y = title.y + title.height + 20;
                    var bottom = text.y + text.height + 40;
                    innerBackground.drawRoundedRect(0, 0, 2000, bottom, 35);
                    this.setRatio = function(ratio) {
                        innerBackground.width = 2000 * ratio;
                        innerBackground.height = 400 * ratio;
                    };
                }
                TutorialOverlay.prototype = Object.create(Container.prototype);
                TutorialOverlay.prototype.constructor = TutorialOverlay;
                var overlay = null;
                window.Tutorial = new function() {
                    var that = this;
                    this.show = function(container, x, y, title, text) {
                        if (overlay) that.hide();
                        overlay = new TutorialOverlay(title, text);
                        overlay.x = x - 1000; //Center X
                        overlay.y = y - 400 + 150; //Center Y
                        container.addChild(overlay);
                        overlay.alpha = 0;
                        new Tween(overlay, {
                            y: y - 400,
                            alpha: 1
                        }, .5, undefined, ENG_FRZ_GRP);
                        return overlay;
                    };
                    this.hide = function() {
                        if (overlay) {
                            new Tween(overlay, {
                                y: overlay.y - 150,
                                alpha: 0
                            }, .5, undefined, ENG_FRZ_GRP).call(function() {
                                this.parent.removeChild(this);
                            });
                            overlay = undefined;
                        }
                    };
                    this.get = function() {
                        return overlay;
                    };
                }();
            });

            XS.modulesToPreload.push(function() {
                function imageToPromise(url) {
                    return new Promise(function(resolve, reject) {
                        var img = new Image();
                        img.crossOrigin = 'anonymous';
                        img.src = url;
                        img.onload = resolve.bind(img, img);
                        img.onerror = function(event) {
                            reject(new Error('imageToPromise: Error loading image "' + url + '"'));
                        };
                    });
                }

                function drawCircle(ctx, x, y, r) {
                    ctx.arc(x, y, r, 0, Math.PI * 2, true);
                }

                function drawRoundedRect(ctx, x, y, w, h, r) {
                    ctx.moveTo(x + r, y);
                    ctx.lineTo(x + w - r, y);
                    ctx.quadraticCurveTo(x + w, y, x + w, y + r);
                    ctx.lineTo(x + w, y + h - r);
                    ctx.quadraticCurveTo(x + w, y + h, x + w - r, y + h);
                    ctx.lineTo(x + r, y + h);
                    ctx.quadraticCurveTo(x, y + h, x, y + h - r);
                    ctx.lineTo(x, y + r);
                    ctx.quadraticCurveTo(x, y, x + r, y);
                }

                function handleRotation(ctx, opts) {
                    if (opts.angle) {
                        var pivot = opts.pivot,
                            x = opts.x + pivot.x * opts.width,
                            y = opts.y + pivot.y * opts.height;
                        ctx.translate(x, y);
                        ctx.rotate(opts.angle * (Math.PI / 180)); // degrees to radians
                        ctx.translate(-x, -y);
                    }
                }

                function writeText(ctx, opts) {
                    var x = opts.x,
                        y = opts.y,
                        text = opts.text || '';
                    ctx.font = opts.font || [opts.style || '', opts.size ? opts.size + 'px' : '', opts.fontFamily ? opts.fontFamily : 'Segoe UI, Helvetica Neue, Helvetica, Arial, sans-serif'].join(' ');
                    ctx.textAlign = opts.textAlign || 'left';
                    ctx.textBaseline = opts.textBaseline || 'top';
                    if (opts.color) ctx.fillStyle = opts.color;
                    var mt = ctx.measureText(text);
                    opts.width = mt.width;
                    opts.height = parseInt(ctx.font.match(/\d+/));
                    handleRotation(ctx, opts);
                    ctx.fillText(text, x, y);
                }

                function drawShape(ctx, opts) {
                    if (opts.fill) ctx.fillStyle = opts.fill;
                    if (opts.stroke) ctx.strokeStyle = opts.stroke;
                    var x = opts.x,
                        y = opts.y;
                    var radius = opts.radius || 5;
                    var w = opts.width = opts.width || opts.w || opts.h || radius * 2;
                    var h = opts.height = opts.height || opts.h || opts.w || radius * 2;
                    handleRotation(ctx, opts);
                    ctx.beginPath();
                    if (opts.draw === 'rect') {
                        ctx.rect(x, y, w, h);
                    } else if (opts.draw === 'circle') {
                        ctx.arc(x, y, radius, 0, Math.PI * 2, true);
                    }
                    if (opts.fill) ctx.fill();
                    if (opts.stroke) ctx.stroke();
                }

                function preloadImages(opts, callback) {
                    var images = [];

                    function finish(err, res) {
                        if (typeof callback !== 'function') return;
                        var callbackRef = callback;
                        callback = undefined;
                        callbackRef(err, res);
                    }(opts.parts || []).forEach(function(part) {
                        if (typeof part.image === 'string') {
                            var img = new Image();
                            images.push(img);
                            img.crossOrigin = 'anonymous';
                            img.src = window.__resolvePath(part.image);
                            img.onload = function() {
                                var idx = images.indexOf(img);
                                if (idx !== -1) {
                                    part.image = img;
                                    images.splice(idx, 1);
                                    if (images.length === 0) finish(undefined, opts);
                                }
                            };
                            img.onerror = function(err) {
                                images.length = 0;
                                finish(err);
                            };
                        }
                    });
                }

                function scaleCanvas(canvas, width, height) {
                    width = width || canvas.width;
                    height = height || canvas.height;
                    if (width === canvas.width && height === canvas.height) return canvas;
                    var outputcanvas = getNewCanvasObject(),
                        ctx = outputcanvas.getContext('2d');
                    outputcanvas.width = width;
                    outputcanvas.height = height;
                    ctx.drawImage(canvas, 0, 0, canvas.width, canvas.height, 0, 0, width, height);
                    return outputcanvas;
                }

                function composeImage(opts) {
                    opts = opts || {};
                    var canvas = opts.canvas || getNewCanvasObject(),
                        ctx = opts.context || canvas.getContext('2d');
                    canvas.width = opts.width || 512;
                    canvas.height = opts.height || 512;
                    (opts.parts || []).forEach(function(part) {
                        if (typeof part === 'function') {
                            part(ctx);
                        } else if (part.image || part.text || part.draw) {
                            ctx.save();
                            var opts = Object.assign({
                                x: 0,
                                y: 0,
                                pivot: {
                                    x: 0.5,
                                    y: 0.5
                                }
                            }, part);
                            if (opts.pivot.x === undefined) opts.pivot.x = 0.5;
                            if (opts.pivot.y === undefined) opts.pivot.y = 0.5;
                            if (opts.image) {
                                var image = opts.image;
                                var sWidth = opts.sWidth || image.width;
                                var sHeight = opts.sHeight || image.height;
                                var dWidth = opts.width = opts.width || opts.w || opts.dWidth || opts.dHeight || sWidth;
                                var dHeight = opts.height = opts.height || opts.h || opts.dHeight || opts.dWidth || sHeight;
                                var dx = opts.dx || opts.x,
                                    dy = opts.dy || opts.y;
                                var sx = opts.sx || 0,
                                    sy = opts.sy || 0;
                                if (opts.sheet) { // Spritesheet support
                                    sWidth = opts.sheet.width || opts.sheet.w || sWidth;
                                    sHeight = opts.sheet.height || opts.sheet.h || sHeight;
                                    var frame = opts.sheet.frame || 0;
                                    var columns = image.width / sWidth;
                                    sx = opts.sx || frame % columns * sWidth;
                                    sy = opts.sy || Math.floor(frame / columns) * sHeight;
                                }
                                handleRotation(ctx, opts);
                                if (opts.clip) {
                                    ctx.beginPath();
                                    switch (opts.clip) {
                                        case 'circle':
                                            drawCircle(ctx, dx + 0.5 * dWidth, dy + 0.5 * dHeight, 0.5 * Math.min(dWidth, dHeight));
                                            break;
                                        case 'roundedrect':
                                            drawRoundedRect(ctx, dx, dy, dWidth, dHeight, opts.radius || 0);
                                            break;
                                    }
                                    ctx.closePath();
                                    ctx.clip();
                                }
                                if (image.isATL) {
                                    console.error('OBSOLETE: cannot composeImage() with ATLImage SVGs', image);
                                    return;
                                }
                                image = image.isPOG ? image.img : image;
                                ctx.drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight);
                            } else if (opts.text) {
                                composeImage.writeText(ctx, opts);
                            } else if (opts.draw) {
                                composeImage.drawShape(ctx, opts);
                            }
                            ctx.restore();
                        }
                    });
                    if (opts.outputwidth && opts.outputheight) {
                        canvas = scaleCanvas(canvas, opts.outputwidth, opts.outputheight);
                    }
                    switch (opts.return) {
                        case 'url':
                        case 'urlpng':
                            return canvas.toDataURL('image/png', opts.quality);
                        case 'urljpg':
                            return canvas.toDataURL('image/jpeg', opts.quality);
                        case 'sprite':
                            return new Sprite(canvas);
                        case 'image':
                            var image = new Image();
                            image.src = canvas.toDataURL();
                            return image;
                    }
                }
                composeImage.VERSION = '1.1.0';
                composeImage.writeText = writeText;
                composeImage.drawShape = drawShape;
                composeImage.preloadImages = preloadImages;
                composeImage.imageToPromise = imageToPromise;
                /*
                            	// Example:
                            	var imgSrc = composeImage({
                            		width: 1024,
                            		height: 1024,
                            		return: 'url', // 'canvas' | 'sprite' | 'url' | 'image'
                            		parts: [
                            			// {image: Image, x: 0, y: 0, dWidth: 100, dHeight: 100, sx: 0, sy: 0, sWidth: 100, sHeight: 100},
                            			// {text: "Text", x: 0, y: 0, angle: 0, size: 60, style: 'bold', color: 'white', textAlign: 'left'},
                            			{image: emXXXbed('i/g/challenge_result_bg.png')}, // emXXXbed -> embed
                            			{image: emXXXbed('i/g/challenge_result_logo.png')}, // emXXXbed -> embed
                            			{text: 'NameA', x: 40, y: 155, angle: -3, size: 110, style: 'bold', color: 'white'},
                            			{text: 'NameB', x: 605, y: 145, angle: 3, size: 110, style: 'bold', color: 'white'},
                            			{text: 'vs', x: 465, y: 135, size: 80, style: 'bold', color: 'white'},
                            			{text: '64.2 m', x: 50, y: 240, angle: 0, size: 80, style: 'bold', color: 'white'},
                            			{text: '48.2 m', x: 710, y: 250, angle: 0, size: 80, style: 'bold', color: 'white'},
                            			{text: 'Challenge result', x: 512, y: 1010, angle: 0, size: 90, style: 'bold', color: 'white', textAlign: 'center'},
                            		]
                            	});
                            	*/
                XS.composeImage = composeImage;
            });

            XS.modulesToPreload.push(function() {
                function LoadSpinner() {
                    var self = this;
                    var _openCount = 0;
                    var _overlay = undefined;
                    var _spinner = undefined;
                    var _loadSpinnerTimer = undefined;
                    var _gracePeriodTimer = undefined;
                    var _hideSpinner = false;

                    function createElements() {
                        if (!_overlay) {
                            _overlay = document.createElement('div');
                            var _overlayStyle = {
                                width: '100%',
                                height: '100%',
                                top: '0px',
                                left: '0px',
                                position: 'absolute',
                                backgroundColor: '#000',
                                opacity: '0.7',
                                zIndex: '102',
                                display: 'block'
                            };
                            for (var prop in _overlayStyle) {
                                _overlay.style[prop] = _overlayStyle[prop];
                            }
                        }
                        if (!_spinner) {
                            _spinner = document.createElement('div');
                            var _spinnerStyle = {
                                border: "10px solid rgba(255,255,255,.3)",
                                borderTop: "10px solid #ffffff",
                                borderRight: "10px solid #ffffff",
                                borderRadius: "50%",
                                width: "100px",
                                height: "100px",
                                position: "absolute",
                                zIndex: 20,
                                left: "50%",
                                top: "50%",
                                marginLeft: "-60px",
                                marginTop: "-60px"
                            };
                            for (var prop in _spinnerStyle) {
                                _spinner.style[prop] = _spinnerStyle[prop];
                            }
                        }
                    }
                    self.force = function() {
                        createElements();
                        if (!_hideSpinner) self.showSpinner();
                        document.body.appendChild(_overlay); // Animate rotation
                        var deg = 0;
                        _spinner.style.transform = "rotate(" + deg + "deg)";
                        clearInterval(_loadSpinnerTimer);
                        _loadSpinnerTimer = setInterval(function() {
                            deg += 4;
                            _spinner.style.transform = "rotate(" + deg + "deg)";
                        }, 16);
                    };
                    /**
                     * Show the overlay 
                     * gracePeriod: how many milliseconds we should wait before showing the spinner - if hide() is called before graceperiod ends, the spinner doesn't show
                     * hideSpinner: Don't show the spinner by default (you can show it later with .showSpinner()
                     */
                    self.show = function(hideSpinner, gracePeriod) {
                        _hideSpinner = hideSpinner;
                        _openCount++;
                        if (_openCount == 1) {
                            if (gracePeriod === 0) {
                                self.force();
                            } else {
                                _gracePeriodTimer = setTimeout(self.force, gracePeriod || 5);
                            }
                        }
                    };
                    /**
                     * Hide the overlay and spinner
                     */
                    self.hide = function() {
                        _openCount--;
                        if (_openCount == 0) {
                            clearTimeout(_gracePeriodTimer);
                            clearInterval(_loadSpinnerTimer);
                            _overlay && _overlay.parentNode && _overlay.parentNode.removeChild(_overlay);
                        }
                    };
                    /**
                     * Hides only the spinning part
                     * NB! Does nothing if the overlay is not visible
                     */
                    self.hideSpinner = function() {
                        _spinner && _spinner.parentNode && _spinner.parentNode.removeChild(_spinner);
                        _hideSpinner = true;
                    };
                    /**
                     * Show the spinner
                     * NB! Does nothing if the overlay is not visible
                     */
                    self.showSpinner = function() {
                        if (_overlay) {
                            _overlay.appendChild(_spinner);
                        }
                        _hideSpinner = false;
                    };
                }
                window.LoadSpinner = LoadSpinner;
                XS.loadSpinner = new LoadSpinner();
            });

            var ref_i_web_hexicon_png = "/assets/hexicon.5ffba275.png";

            var ref_i_web_dartsicon_png = "/assets/dartsicon.da712890.png";

            var ref_i_web_golddiggericon_png = "/assets/golddiggericon.b4bdabb1.png";

            var ref_i_web_cricketicon_png = "/assets/cricketicon.c2636681.png";

            var ref_i_web_caveicon_png = "/assets/caveicon.cc89865c.png";

            var ref_i_web_dragraceicon_png = "/assets/dragraceicon.cc685b31.png";

            var ref_i_web_fieldgoalicon_png = "/assets/fieldgoalicon.dcdf2a87.png";

            var ref_i_web_android_png = "/assets/android.3639b7be.png";

            var ref_i_web_ios_png = "/assets/ios.14744226.png";

            var ref_i_g_ball_vs_svg = "/assets/ball_vs.1cba772c.svg";

            Host.bootstrapper.mnemonicMap[ref_i_web_hexicon_png] = "i/web/hexicon.png";
            Host.bootstrapper.mnemonicMap[ref_i_web_dartsicon_png] = "i/web/dartsicon.png";
            Host.bootstrapper.mnemonicMap[ref_i_web_golddiggericon_png] = "i/web/golddiggericon.png";
            Host.bootstrapper.mnemonicMap[ref_i_web_cricketicon_png] = "i/web/cricketicon.png";
            Host.bootstrapper.mnemonicMap[ref_i_web_caveicon_png] = "i/web/caveicon.png";
            Host.bootstrapper.mnemonicMap[ref_i_web_dragraceicon_png] = "i/web/dragraceicon.png";
            Host.bootstrapper.mnemonicMap[ref_i_web_fieldgoalicon_png] = "i/web/fieldgoalicon.png";
            Host.bootstrapper.mnemonicMap[ref_i_web_android_png] = "i/web/android.png";
            Host.bootstrapper.mnemonicMap[ref_i_web_ios_png] = "i/web/ios.png";
            Host.bootstrapper.mnemonicMap[ref_i_g_ball_vs_svg] = "i/g/ball_vs.svg";
            window.Config = {
                id: "basketball",
                niceId: "basketball", //Used for analytics tracking
                domain: "basketball.frvr.com",
                version: "2.11.8",
                stage: 'live',
                svgScaleMassaging: {
                    maxDim: 1024,
                    factor: 2
                }, //debugShowInitErrors: true,
                samsungAppId: '000002986689',
                samsungReviewUrl: "samsungapps://ProductDetail/com.frvr.basketball",
                samsungInstallUrl: "http://www.samsungapps.com/appquery/appDetail.as?appId=com.frvr.basketball",
                androidGalaxyStoreBetaContentId: "000005923692",
                facebookAppId: "982281415240060",
                facebookPageUrl: "https://www.facebook.com/Basketball-FRVR-217271125346962/",
                facebookAppUrl: "https://apps.facebook.com/basketballfrvr",
                facebookAdsDisabled: true,
                facebookTournamentsTwoPointZeroIsWhitelisted: true, // parseId:"CHANGEME-hW4t51n5ESAedypQihRw86IDUu5ebReFPJNocf3B",
                // parseKey:"CHANGEME-mB15Fm9kjtNUitnEBwL2oVppJTg2AlzyobCtodCG",
                // 
                //
                adMobInterstitialIdiOS: 'ca-app-pub-6389174903462367/5295356939',
                adMobAppIdAndroidGooglePlay: 'ca-app-pub-6389174903462367~9865157337',
                adMobAppIdAndroidGalaxyStore: 'ca-app-pub-6389174903462367~5183578416', //Beta ID 
                //fbInstantInterstitialIdAndroid:'1747441975549547_1869644786662598',
                //fbInstantInterstitialIdAll:'1747441975549547_1897516393875437', 
                //Production id
                //fbInstantInterstitialIdAndroid:'800772590062226_940149252791225',
                fbInstantInterstitialIdAll: '800772590062226_957968134342670',
                facebookInstantPlacementId: '800772590062226_977916069014543',
                facebookInstantNamespace: 'instbasketballfrvr',
                facebookInstantSupportRewardCreateShortcutAsync: false, // facebookInterstitialIdiOS:"CHANGEME-883249178389083_912538678793466",
                // facebookInterstitialIdAndroid:"CHANGEME-883249178389083_918163058231028",
                //overwriteWithHighscoreMessage:true,
                enableCrossPromotion: true,
                facebookCrossPromotionGames: [
                    [ref_i_web_hexicon_png, '226951481038868', false],
                    [ref_i_web_dartsicon_png, '1576469492400901', false],
                    [ref_i_web_golddiggericon_png, '578514565910482', true, true],
                    [ref_i_web_cricketicon_png, '327848237954688', false],
                    [ref_i_web_caveicon_png, '282513215569229', false],
                    [ref_i_web_dragraceicon_png, '1182092508634251', false, true],
                    [ref_i_web_fieldgoalicon_png, '347920599089173', false]
                ],
                facebookHighscoreProperty: 'score',
                facebookInstantManualHighscores: true, // Disables automatic posting of highscores with session data
                facebookInstantDisableFRVRBackend: true, // Disables session and highscore posting to FRVR backend
                facebookInstantGlobalHighscoreId: 'GlobalHighscore2',
                mobvistaAppIdiOS: "33551",
                mobvistaAppIdAndroid: "33574",
                mobvistaInterstitialIdiOS: "10949",
                mobvistaInterstitialIdAndroid: "11063",
                interstitialRetryDelayMins: 0.5,
                debugShowInitErrors: false,
                oneSignalWebId: '1b1aebcc-aba9-4374-b04f-af8aae0b83aa',
                enablePWA: true,
                facebookRemoveAdsHouseAd: false,
                facebookRemoveAdsSidebarButton: false,
                iap: {
                    ios: {}, // remove ads will added automatically
                    house: {
                        catalog: {
                            removeads: {
                                label: '$4.99'
                            }
                        }
                    },
                    instant: {
                        catalog: {
                            removeads: 'removeads'
                        }
                    } //huawei: {
                    //	signerUrl: 'https://us-central1-frvr-hermes.cloudfunctions.net/huawei-iap-sign',
                    //	merchantId: "890356000004100007",
                    //	merchantName: "com.frvr.golddigger.quick",
                    //	applicationId: "101379799",
                    //  publicKey: "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0hahDXKQZ1M/6OWra/XTR1saLauFykpbn7VZJMDJQnbXU2W3UZPg6GaZUkEu7dO+v6bSpAuYrKEL5dADraNKcMNdXGMqxneMgexuBGPKEp6IkOJwFTGq+e/LHSc6trGNooPmguTmn9Tl34UrfqldCLwEyvzYNJrMsmONjHHpTUdStOR/caZUfKKQqrhXPy3XDRVkjYuZdkT8EteWrTCYNx72xZ1A+7/jofFIc157ZNDUbZ05fQ/cDG5JQFq+loPiNsaYOf/fDHW5vvsZuofTe3rw9vnWU4zf6Bx37SMSJL61ceaF5IA3l/mZ4uDSKJ9ep6/S9U1DqaCV5OQi3VqcewIDAQAB",
                    //	catalog: {
                    //		gems_15: { productNo: 'gems_15' },
                    //		gems_50: { productNo: 'gems_50' },
                    //		gems_100: { productNo: 'gems_100' },
                    //		gems_1000: { productNo: 'gems_1000' },
                    //	}
                    //},
                    //hago: {
                    //	catalog: {
                    //		gems_15: { label: '$0.99', item_id: '1802068' },
                    //		gems_50: { label: '$1.99', item_id: '1802070' },
                    //		gems_100: { label: '$4.99', item_id: '1802072' },
                    //		gems_1000: { label: '$9.99', item_id: '1802077' },
                    //	}
                    //}
                },
                useFacebookInstantRichGameplayFeatures: true, //facebookInstantTournamentsEnabled:true,//((navigator.languages? navigator.languages[0] : (navigator.language || navigator.userLanguage))||"").toLowerCase() == "fr-fr",
                //facebookInstantTournamentMode:'both',
                //facebookInstantTournamentScoreTemplate:Host.Localize.Translate("{score} points in {actions} throws", {}, "Tournament score text template"),
                //facebookInstantTournamentScoreTemplateShort:Host.Localize.Translate("{score} in {actions}", {}, "Short tournament score text template"),
                //facebookInstantLeaderBoardTitle:Host.Localize.Translate("Practice Leader board",{},"Text for leaderboard"),
                //facebookInstantTournamentSinglePlayerButtonText: Host.Localize.Translate("Play Single",{},"Play story mode, practicing the game"),
                //facebookInstantTournamentMultiPlayerButtonTextFromSingleplayer: Host.Localize.Translate("Play Tournament",{},"Join a tournament button for instant games"),
                //facebookInstantTournamentMultiPlayerButtonText: Host.Localize.Translate("Play Tournament",{},"Play now button for instant games"),
                ////facebookInstantSingleButtonBottomMargin: 100,
                ////facebookInstantDoubleButtonBottomMargin: 170,
                //facebookInstantTournamentButtonColor: "#4080fa",
                ////facebookInstantTournamentButtonColor: "#f5663e",
                ////facebookInstantTournamentButtonFontSize: "30px",
                ////facebookInstantPlayNowButtonFontSize: "18px",
                //facebookInstantTournamentButtonOnTop: true,
                ////facebookInstantDefaultToPlayingWithFriend: true,
                ////facebookInstantPlayNowButtonColor: "#003398",
                //facebookInstantPlayNowButtonColor: "#4080fa",
                //Beta Path
                //backendPath:"https://beta-dot-frvr-chatbot.appspot.com/basketballbeta",
                //Production Path
                backendPath: "https://production-dot-frvr-chatbot.appspot.com/basketball", //googleFullscreenAdTemplate:'https://googleads.g.doubleclick.net/pagead/ads?ad_type={$ADTYPE}&client=ca-games-pub-6389174903462367&description_url=https%3A%2F%2Fbasketball.frvr.com%2F&channel={$CHANNEL}&hl=en&max_ad_duration=15000',
                //googleFullscreenAdPathSpilgames:'https://googleads.g.doubleclick.net/pagead/ads?ad_type={$ADTYPE}&client=ca-games-pub-6389174903462367&description_url=https%3A%2F%2Fbasketball.frvr.com%2F&channel=3138478138&hl=en&max_ad_duration=15000&adsafe=high',
                //	googleFullscreenAdPath:'https://googleads.g.doubleclick.net/pagead/ads?ad_type={$ADTYPE}&client=ca-games-pub-6389174903462367&description_url=https%3A%2F%2Fbasketball.frvr.com%2F&channel=&hl=en&max_ad_duration=15000',
                googleAdSiteId: '1661744930',
                googleAdSpilgamesId: '3138478138',
                gaKey: 'c749c1f0cba9946e36ad53eb0b3a18b8',
                gaSecret: 'e60cbecb7a302ff87c596a25b9b9950c1e710f33', // adIds: {
                // 	"applixir" : {
                // 		"reward_all" : { 
                // 			"default": "2338_4401", 
                // 			"samsungBixby": "2337_4400",
                // 			"huawei": "2340_4403",
                // 			"miniclip": "2347_4410"
                // 		}
                // 	}, 
                // 	"lifestreetmedia" : {
                //     "interstitial_all" : "slot1231647_d48", 
                //     "reward_all" : "slot1231582_1c0",
                //   },	
                //    //"facebook" : {
                //    //  "interstitial_all" : { config: "800772590062226_957968134342670", format: "interstitial" },
                //    //  "reward_all" : { config: "800772590062226_977916069014543", format: "reward" }
                //    //},   
                // },
                ads: {
                    "android-googleplay": {
                        "interstitial": {
                            "maxfrequency": 60 * 1000 * .5,
                            "forceFirstAd": true,
                            "providers": {
                                "admob-interstitial": {
                                    "timeout": 500,
                                    "priority": 1,
                                    "config": {
                                        "adunitid": 'ca-app-pub-6389174903462367/2341890538',
                                        "adMobAppIdAndroid": 'ca-app-pub-6389174903462367~9865157337',
                                        "forcePreloadTimeout": 3.5
                                    }
                                }
                            }
                        },
                        "reward": {
                            "maxfrequency": 60 * 1000 * .5,
                            "forceFirstAd": true,
                            "providers": {
                                "admob-reward": {
                                    "timeout": 500,
                                    "priority": 1,
                                    "config": {
                                        "adunitid": 'ca-app-pub-6389174903462367/2454073683',
                                        "adMobAppIdAndroid": 'ca-app-pub-6389174903462367~9865157337',
                                        "forcePreloadTimeout": 3.5
                                    }
                                }
                            }
                        }
                    },
                    "android-galaxystore": {
                        "interstitial": {
                            "maxfrequency": 60 * 1000 * .5,
                            "forceFirstAd": true,
                            "providers": {
                                "admob-interstitial": {
                                    "timeout": 500,
                                    "priority": 1,
                                    "config": {
                                        "adunitid": 'ca-app-pub-6389174903462367/2226721510',
                                        "adMobAppIdAndroid": 'ca-app-pub-6389174903462367~5183578416',
                                        "forcePreloadTimeout": 3.5
                                    }
                                }
                            }
                        },
                        "reward": {
                            "maxfrequency": 60 * 1000 * .5,
                            "forceFirstAd": true,
                            "providers": {
                                "admob-reward": {
                                    "timeout": 500,
                                    "priority": 1,
                                    "config": {
                                        "adunitid": 'ca-app-pub-6389174903462367/2052768608',
                                        "adMobAppIdAndroid": 'ca-app-pub-6389174903462367~5183578416',
                                        "forcePreloadTimeout": 3.5
                                    }
                                }
                            }
                        }
                    },
                    "instant": {
                        "reward": {
                            "maxfrequency": 60 * .5 * 1000,
                            "providers": {
                                "instant-facebook-audience-network-reward": {
                                    "timeout": 500,
                                    "priority": 1,
                                    "config": '800772590062226_977916069014543'
                                }
                            }
                        },
                        "interstitial": {
                            "maxfrequency": 60 * .5 * 1000,
                            "providers": {
                                "instant-facebook-audience-network-interstitial": {
                                    "timeout": 500,
                                    "priority": 1,
                                    "config": '800772590062226_957968134342670'
                                },
                                "remove-ads-iap": {
                                    "priority": 2
                                } //"house-interstitial":{
                                // 	"priority":2,
                                // 	"config": {
                                // 		basketball: {
                                // 			chance:25,
                                // 			portrait: {path: 'i/web/cx_basketball_1440_3120.jpg'},
                                //},
                                // 			landscape: {path: 'i/web/cx_basketball_2400_1176.jpg'},
                                // 			data: {
                                // 				gameid: 'basketball',
                                // 				facebookInstantId: '800772590062226'
                                // 			}
                                // 		},
                                // 		darts: {
                                // 			chance:15,
                                // 			portrait: {path: 'i/web/cx_darts_1440_3120.jpg'},
                                // 			landscape: {path: 'i/web/cx_darts_2400_1176.jpg'},
                                // 			data: {
                                // 				gameid: 'darts',
                                // 				facebookInstantId:'1576469492400901'
                                // 			}
                                // 		},
                                // 		monsterbash:{
                                // 			chance:10,
                                // 			portrait: {path: 'i/web/cx_monsterbash_1440_3120.jpg'},
                                // 			landscape: {path: 'i/web/cx_monsterbash_2400_1176.jpg'},
                                // 			data: {
                                // 				gameid: 'monsterbash',
                                // 				facebookInstantId:'3146644278682265'
                                // 			}
                                // 		},
                                // 		balloon:{
                                // 			chance:10,
                                // 			portrait: {path: 'i/web/cx_balloon_1440_3120.jpg'},
                                // 			landscape: {path: 'i/web/cx_balloon_2400_1176.jpg'},
                                // 			data: {
                                // 				gameid: 'balloon',
                                // 				facebookInstantId:'1276179635798913'
                                // 			}
                                // 		},
                                // 		ballcrash:{
                                // 			chance:10,
                                // 			portrait: {path: 'i/web/cx_ballcrash_1440_3120.jpg'},
                                // 			landscape: {path: 'i/web/cx_ballcrash_2400_1176.jpg'},
                                // 			data: {
                                // 				gameid: 'ballcrash',
                                // 				facebookInstantId:'423348464899871'
                                // 			}
                                // 		},
                                // 		bowmania:{
                                // 			chance:10,
                                // 			portrait: {path: 'i/web/cx_bowmania_1440_3120.jpg'},
                                // 			landscape: {path: 'i/web/cx_bowmania_2400_1176.jpg'},
                                // 			data: {
                                // 				gameid: 'bowmania',
                                // 				facebookInstantId:'2234798373500951'
                                // 			}
                                // 		},
                                // 		cricket:{
                                // 			chance:10,
                                // 			portrait: {path: 'i/web/cx_cricket_1440_3120.jpg'},
                                // 			landscape: {path: 'i/web/cx_cricket_2400_1176.jpg'},
                                // 			data: {
                                // 				gameid: 'cricket',
                                // 				facebookInstantId:'327848237954688'
                                // 			}
                                // 		},
                                // 		fieldgoal:{
                                // 			chance:10,
                                // 			portrait: {path: 'i/web/cx_fieldgoal_1440_3120.jpg'},
                                // 			landscape: {path: 'i/web/cx_fieldgoal_2400_1176.jpg'},
                                // 			data: {
                                // 				gameid: 'fieldgoal',
                                // 				facebookInstantId:'347920599089173'
                                // 			}
                                // 		},
                                // 		kittenforce:{
                                // 			chance:4,
                                // 			portrait: {path: 'i/web/cx_kittenforce_1440_3120.jpg'},
                                // 			landscape: {path: 'i/web/cx_kittenforce_2400_1176.jpg'},
                                // 			data: {
                                // 				gameid: 'kittenforce',
                                // 				facebookInstantId:'320937505464843'
                                // 			}
                                // 		},
                                // 		wordtower:{
                                // 			chance:2,
                                // 			portrait: {path: 'i/web/cx_wordtower_1440_3120.jpg'},
                                // 			landscape: {path: 'i/web/cx_wordtower_2400_1176.jpg'},
                                // 			data: {
                                // 				gameid: 'wordtower',
                                // 				facebookInstantId:'588807545201715'
                                // 			}
                                // 		},
                                // 		planetminer:{
                                // 			chance:3,
                                // 			portrait: {path: 'i/web/cx_planetminer_1440_3120.jpg'},
                                // 			landscape: {path: 'i/web/cx_planetminer_2400_1176.jpg'},
                                // 			data: {
                                // 				gameid: 'planetminer',
                                // 				facebookInstantId:'2335394079916809'
                                // 			}
                                // 		}
                                // }
                                // }
                            }
                        }
                    },
                    "myjio": {
                        "interstitial": {
                            "maxfrequency": 20000, // 20 sec
                            "forceFirstAd": true,
                            "providers": {
                                "myjio-interstitial": {
                                    "timeout": 500,
                                    "priority": 1,
                                    "config": {
                                        "packageName": "com.frvr.basketballmyjio",
                                        "adspotKey": "9352271b"
                                    }
                                }
                            }
                        }
                    },
                    "ios": {
                        "reward": {
                            "maxfrequency": 5,
                            "providers": {
                                "admob-reward": {
                                    "timeout": 500,
                                    "priority": 1,
                                    "config": {
                                        "adunitid": 'ca-app-pub-6389174903462367/9999531996'
                                    }
                                }
                            }
                        },
                        "interstitial": {
                            "maxfrequency": 60 * 1000 * 2, // min throttle
                            "forceFirstAd": true,
                            "providers": {
                                "admob-interstitial": {
                                    "timeout": 500,
                                    "priority": 1,
                                    "config": {
                                        "adMobAppIdiOS": 'ca-app-pub-6389174903462367~3818623736',
                                        "adunitid": 'ca-app-pub-6389174903462367/5295356939',
                                        "forcePreloadTimeout": 2.5
                                    }
                                }
                            }
                        }
                    },
                    "web": {
                        "interstitial": {
                            "maxfrequency": 30000, //30sec
                            "forceFirstAd": true,
                            "providers": {
                                "huawei-quickapp-interstitial": {
                                    "priority": 1
                                },
                                "adsbygoogle-interstitial": {
                                    "timeout": 500,
                                    "priority": 2,
                                    "placementId": "ca-pub-6389174903462367"
                                }
                            }
                        },
                        "reward": {
                            "providers": {
                                "adsbygoogle-reward": {
                                    "timeout": 500,
                                    "priority": 2,
                                    "placementId": "ca-pub-6389174903462367"
                                }
                            }
                        }
                    }
                },
                rewardAdThrottleTime: 60,
                shareUrl: 'https://basketball.frvr.com/{{language_path}}',
                playTitle: Host.Localize.Translate('Play Basketball FRVR'),
                shareText: Host.Localize.Translate('I think you will like basketball FRVR'),
                shareTitle: Host.Localize.Translate('Basketball FRVR'),
                shortTitle: Host.Localize.Translate('Basketball'),
                tagLine: Host.Localize.Translate('Basketball Hoop Shooter'),
                tagLineFree: Host.Localize.Translate('Free Basketball Hoop Shooter'),
                oneliner: Host.Localize.Translate('Easy to learn yet frustrating to master basketball hoop shooter game.'),
                twitterDescription: "Easy to learn yet frustrating to master basketball hoop shooter game.",
                facebookInstantGameID: '800772590062226', //Share texts, used for both Facebook, Twitter and more share methods.
                buttonShareTitle: Host.Localize.Translate('Share Basketball FRVR', {}, "Button text for sharing basketball FRVR"),
                buttonShareDescription: Host.Localize.Translate('Invite your friends?'),
                iOSRemoveAdsProductIdentifier: "basketballremoveads",
                androidRemoveAdsProductIdentifier: "basketballremoveads",
                gameCenterEnabled: true,
                feedbackURL: 'https://frvr.com/support/',
                iosAppId: "1185836177",
                iOSReviewURL: 'https://itunes.apple.com/WebObjects/MZStore.woa/wa/viewContentsUserReviews?id=1185836177&pageNumber=0&sortOrdering=2&type=Purple+Software&mt=8',
                androidReviewURL: 'market://details?id=com.frvr.basketball',
                androidInstallBannerURL: ref_i_web_android_png,
                androidInstallURL: 'market://details?id=com.frvr.basketball',
                androidInstallURLWeb: 'https://play.google.com/store/apps/details?id=com.frvr.basketball',
                iOSInstallBannerURL: ref_i_web_ios_png,
                iOSInstallURL: 'http://itunes.apple.com/app/id1185836177',
                gaId: 'UA-54081731-1',
                gaGameId: 'UA-54081731-3',
                chromeAppEnabled: false, //chromeReviewUrl:'https://chrome.google.com/webstore/detail/basketball-frvr/kibjffjfmagcmicpmogpieelngkcfggn/reviews',
                //chromeInstallUrl:'https://chrome.google.com/webstore/detail/basketball-frvr/kibjffjfmagcmicpmogpieelngkcfggn/',
                //chromeInstallBannerURL:'i/web/chrome.png',
                /*Sharing Sharing*/
                twitterTexts: [Host.Localize.Translate("Help! I can't stop playing {game_name}!"), Host.Localize.Translate("Tonight we are playing {game_name}. What's your highscore?"), Host.Localize.Translate("Have you tried {game_name} yet?"), Host.Localize.Translate("Basketball, Basketball, {game_name}. Fun hoop shooter!"), Host.Localize.Translate("Must. Stop. Playing. {game_name}!"), Host.Localize.Translate("Just play {game_name} already!"), Host.Localize.Translate("{game_name} is my new favorite time waster!"), Host.Localize.Translate("Well there goes the rest of today >")],
                facebookInstantTournamentDisableHighscoreOverlay: true,
                styles: {
                    headline: {},
                    subheadline: {},
                    text: {}
                },
                statusBarColor: 'dark',
                pushNotificationText: Host.Localize.Translate("Your daily basketball points are recharged!", {}, "This is a push notification used on mobile phones to show that their daily level is ready"), //FIXME: Twitter is always english?
                twitterRelated: 'frvrgames,benjaminsen,brianmeidell,basketball,hoops',
                twitterHashTags: Host.Localize.Translate('basketball,hoops,threepoint', {}, "These are are hash tags for social networks such as twitter, E.g. #puzzle or #puzzle# for chinese sites"), //FIXME: Create better system for translations
                twitterHTML: '<div style="padding-right:10px"><a href="https://twitter.com/share" class="twitter-share-button" data-url="{{shareUrl}}" data-text="{{TEXT}}" data-via="FRVRGames" data-hashtags="{{twitterHashTags}}" data-related="{{twitterRelated}}" target="_new"></a></div>',
                twitterMobileHTML: '<a class="twitter-share-button" href="https://twitter.com/intent/tweet?text={{TEXT}}" data-size="large" data-hashtags="basketball,frvr,sports" data-related="frvrgames,benjaminsen,sports,gaming,basketball,frvr" data-url="http://basketball.frvr.com/alc/">Tweet</a>',
                twitterNewMode: true,
                facebookHTML2: '<iframe src="https://www.facebook.com/plugins/like.php?href=https%3A%2F%2Fwww.facebook.com%2FBasketball-FRVR-217271125346962%2F&width=120&layout=button_count&action=like&size=small&show_faces=false&share=false&height=21&appId=883249178389083" width="120" height="21" style="border:none;overflow:hidden" scrolling="no" frameborder="0" allowTransparency="true"></iframe>',
                remoteConfigVersion: 'v3',
                plugins: 'bitmapfont.js,modal.js,scrollcontainer.js,sidebar.js,tutorial.js,socialleaderboards.js,removeads.js,imagecomposer.js,dialog-accept.js,gui.js,tryagainmodal.js',
                gui: {
                    "socialleaderboards": {
                        "against-player": {
                            "border": 0x358296,
                            "background": 0xD0E5E6,
                            "content": 0xFFFFFF,
                            "textColor": "#358296"
                        },
                        "playercard": {
                            "border": 0xE27C47,
                            "background": 0x358296,
                            "shadow": 0x62382A,
                            "textColor": "#F8DF6B"
                        },
                        "baseScreen": {
                            "background": 0xA8D8D8
                        },
                        "gameOverScreen": {
                            "background": 0xC7E7E6,
                            "backgroundOpacity": 1.0,
                            "textColorWin": "#E27C47",
                            "textColorLose": "#E27C47",
                            "textColorTitle": "#FFFFFF",
                            "textColorTitleShadow": "#388096",
                            "playButtonShadow": 0xAA4615,
                            "playButtonBackground": 0xE27C47,
                            "playButtonTextColor": "#FFFFFF",
                            "playAnotherFriendButtonShadow": 0x2A8025,
                            "playAnotherFriendButtonBackground": 0x31AE30,
                            "playAnotherFriendButtonTextColor": "#FFFFFF",
                            "cancelButtonShadow": 0x588389,
                            "cancelButtonBackground": 0x76B0B4,
                            "cancelButtonTextColor": "#ADCCCF",
                            "vsShadow": 0xF8DF6B,
                            "vsBackground": 0x62382A,
                            "vsSpinnerUri": ref_i_g_ball_vs_svg,
                            "spinningStarColor": 0x97C2C6
                        },
                        "leaderboardScreen": {
                            "background": 0xC7E7E6,
                            "backgroundOpacity": 1.0,
                            "textColorTitle": "#FFFFFF",
                            "textColorTitleShadow": "#388096",
                            "playButtonShadow": 0xAA4615,
                            "playButtonBackground": 0xE27C47,
                            "playButtonTextColor": "#FFFFFF",
                            "playFriendButtonShadow": 0x2A8025,
                            "playFriendButtonBackground": 0x31AE30,
                            "playFriendButtonTextColor": "#FFFFFF",
                            "cancelButtonShadow": 0x588389,
                            "cancelButtonBackground": 0x76B0B4,
                            "cancelButtonTextColor": "#ADCCCF",
                            "rowBorder": 0x8CBEC5,
                            "rowBackground": 0x8CBEC5,
                            "rowWinnerBorder": 0xFE7E41,
                            "rowWinnerBackground": 0x368196
                        }
                    }
                },
                facebookGamingLoginId: "800772590062226",
                facebookGamingLogin: {
                    permissions: "gaming_profile", // string with permission separeted by ,
                    canvasAppId: "982281415240060",
                    instantAppId: "800772590062226",
                    needsMigration: true,
                    showLoginOnStart: true
                }
            };

            (function(scope) {
                var XS = scope.XS = scope.XS || {};
                var localConfig = {};
                var FRVRAnalyticsProvider = {
                    name: 'frvr',
                    oninit: function oninit(config, globals) {
                        localConfig = config;
                        if (!!localConfig.debug) console.log('XS.track > frvr.js > config: ' + JSON.stringify(config));
                    },
                    onevent: function onevent(name, value, params, context, args) {
                        var fields = {}; //NOTE: DO NOT REMOVE this.parseArgs. Context is required for the provider (expecially for FBInstant).
                        var globalState = (this.parseArgs(this.config.state, context) || [])[0];
                        for (var key in globalState) {
                            fields[key] = globalState[key];
                        }
                        for (var key in params) {
                            fields[key] = params[key];
                        }
                        fields.protocol_version = 5; // protocol format
                        fields.event = name;
                        fields.value = value;
                        fields.web_url = document && document.location && document.location.href ? document.location.href : undefined; // Client time
                        var offsetMs = new Date().getTimezoneOffset() * 60 * 1000;
                        fields.client_time = new Date(Date.now() - offsetMs).toISOString().slice(0, -1);
                        scope.__FRVR.analytics.logEvent(name, fields);
                    }
                };
                XS.track.addProvider('frvr', FRVRAnalyticsProvider);
            })(window);

            (function(scope) {
                var XS = scope.XS = scope.XS || {};
                var provider = {
                    globalState: undefined,
                    oninit: function oninit(config, globals) { //console.error('XS.track > ga.js > oninit(config, globals);');
                        this.eventCategory = Config.id;
                        var trackers = this.trackers = [];
                        var gaIds = config.gaIds || {};
                        var UAs = [];
                        for (var name in gaIds) {
                            UAs.push(gaIds[name]);
                        } //if(UAs.indexOf(Config.gaId) === -1) gaIds.all = Config.gaId; // Legacy default
                        //if(UAs.indexOf(Config.gaGameId) === -1) gaIds.game = Config.gaGameId; // Legacy default
                        for (var name in gaIds) {
                            if (gaIds[name]) {
                                var appInfo = window.gaAppInfo;
                                ga('create', gaIds[name], 'auto', name, appInfo);
                                ga(name + '.set', appInfo);
                                trackers.push({
                                    name: name,
                                    uaid: gaIds[name]
                                });
                            }
                        }
                        ga(function(tracker) {
                            if (_jsonData.scitylana) ga('all.require', 'scitylana', _jsonData.scitylana);
                        });
                    },
                    ga: function(_ga) {
                        function ga(_x) {
                            return _ga.apply(this, arguments);
                        }
                        ga.toString = function() {
                            return _ga.toString();
                        };
                        return ga;
                    }(function(fields) {
                        var trackers = this.trackers;
                        for (var i = 0; i < trackers.length; i++) {
                            ga(trackers[i].name + '.send', 'event', fields);
                        }
                    }),
                    onevent: function onevent(name, value, params, context, args) { //console.info('XS.track > ga.js > onevent("%s", value, params, context, %s);', name, JSON.stringify(args));
                        if (args === undefined) args = [];
                        var fields = {};
                        if (XS.track.dataIsDirty || this.globalState === undefined) {
                            this.globalState = (this.parseArgs(this.config.state, context) || [])[0];
                            XS.track.dataIsDirty = false;
                            for (var i = 0; i < this.trackers.length; i++) {
                                ga(this.trackers[i].name + '.set', this.globalState);
                            }
                            for (var key in this.globalState) {
                                fields[key] = this.globalState[key];
                            }
                        }
                        fields.eventCategory = this.eventCategory;
                        fields.eventAction = name;
                        if (args[0] !== undefined) fields.eventAction = args[0];
                        if (args[1] !== undefined) fields.eventLabel = args[1];
                        if (args[2] !== undefined) fields.eventValue = args[2];
                        if (typeof args[3] === 'object')
                            for (var prop in args[3]) {
                                fields[prop] = args[3][prop];
                            }
                        this.ga(fields);
                    }
                };
                XS.track.addProvider('ga', provider);
            })(window);

            (function(scope) {
                var XS = scope.XS = scope.XS || {};
                var provider = {
                    channel: undefined,
                    channelMapping: {},
                    isLoaded: false,
                    preLoadQueue: [],
                    oninit: function oninit(config, globals) {
                        if (XS.is.youtube) return;
                        var gma = this; //console.info('XS.track > gma.js > oninit(config, globals);');
                        // Parse channelMapping
                        var confChanMap = config.channelMapping;
                        for (var key in confChanMap) {
                            var chFroms = key.split(',');
                            for (var i = 0; i < chFroms.length; i++) {
                                this.channelMapping[chFroms[i]] = confChanMap[key];
                            }
                        }

                        function onGmaLoaded() {
                            var GA = GameAnalytics;
                            GA('configureBuild', scope.gaPath);
                            GA('setEventProcessInterval', 15);
                            GA('configureAvailableResourceCurrencies', (config.currencies || '').split(',').slice(0, 20));
                            GA('configureAvailableResourceItemTypes', (config.itemtypes || '').split(',').slice(0, 20));
                            GA('configureAvailableCustomDimensions01', (config.customDimensions01 || '').split(',').slice(0, 20));
                            GA('setEnabledInfoLog', false);
                            var key = config.key || Config.gaKey;
                            var secret = config.secret || Config.gaSecret;
                            if (window.__FRVR.consent) {
                                GA('setEnabledEventSubmission', window.__FRVR.consent.hasConsent(window.__FRVR.consent.ANALYTICS));
                                window.__FRVR.consent.onConsentChanged(function() {
                                    GA('setEnabledEventSubmission', window.__FRVR.consent.hasConsent(window.__FRVR.consent.ANALYTICS));
                                });
                            }
                            GA('initialize', key, secret);
                            gma.isLoaded = true;
                            var preLoadQueue = gma.preLoadQueue;
                            while (preLoadQueue.length > 0) {
                                gma.onevent.apply(gma, preLoadQueue.shift());
                            }
                        } // TODO: load this from cdn when possible (like on web)
                        var scriptPath = window.__resolvePath('/assets/GameAnalytics.4.4.5.min.js');
                        XS.loadScript(scriptPath, {}, onGmaLoaded);
                    },
                    onevent: function onevent(name, value, params, context, args) {
                        if (window.gameanalytics) {
                            var gma = window.gameanalytics;
                            var adAction = gma.EGAAdAction;
                            var adType = gma.EGAAdType;
                            var adError = gma.EGAAdError;
                            gma.GameAnalytics;
                            if (name === "ad_mandatory_response") {
                                if (params.ad_response === "success") {
                                    gma.GameAnalytics.addAdEvent(adAction.Show, adType.Interstitial, params.provider, params.advertisement_id);
                                } else {
                                    gma.GameAnalytics.addAdEvent(adAction.FailedShow, adType.Interstitial, params.provider, params.advertisement_id, {
                                        noAdReason: params.ad_response === "nofill" ? adError.NoFill : adError.Unknown
                                    });
                                }
                                return;
                            }
                            if (name === "ad_rewarded_response") {
                                if (params.ad_response === "success") {
                                    gma.GameAnalytics.addAdEvent(adAction.Show, adType.RewardedVideo, params.provider, params.advertisement_id);
                                } else {
                                    gma.GameAnalytics.addAdEvent(adAction.FailedShow, adType.RewardedVideo, params.provider, params.advertisement_id, {
                                        noAdReason: params.ad_response === "nofill" ? adError.NoFill : adError.Unknown
                                    });
                                }
                                return;
                            }
                        }
                        if (!this.isLoaded) return this.preLoadQueue.push([name, value, params, context, args]); // console.info('XS.track > gma.js > onevent("%s", value, params, context, %s);', name, JSON.stringify(args));
                        // Special handling of game_end/lose events
                        // TODO: Update to new mappings!
                        if (name === 'game_end' && context.dimension10 === 'lose') args = this.parseArgs(this.eventMap['game_end-lose'], context);
                        var nextChannel = XS.track.getChannel();
                        nextChannel = this.channelMapping[nextChannel] || nextChannel;
                        if (nextChannel !== this.channel) {
                            this.channel = nextChannel;
                            GameAnalytics('setCustomDimension01', this.channel);
                        }
                        GameAnalytics.apply(GameAnalytics, args);
                    }
                };
                var gaKey = _jsonData['track-gma'].key || Config.gaKey;
                var gaSecret = _jsonData['track-gma'].secret || Config.gaSecret;
                if (gaKey && gaSecret) XS.track.addProvider('gma', provider);
            })(window);

            var fetch_i_g_ball_golden_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/ball_golden.svg', {
                    "data": "<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0\" y=\"0\" width=\"563\" height=\"563\" style=\"enable-background:new 0 0 563 563\" xml:space=\"preserve\"><style>.st0{fill:#ffe300}.st5{fill:#fff5df}.st9{fill-rule:evenodd;clip-rule:evenodd;fill:#fff}</style><circle class=\"st0\" cx=\"281.5\" cy=\"281.6\" r=\"268\"/><circle cx=\"281.5\" cy=\"281.6\" r=\"245.4\" style=\"fill:#f89d21\"/><circle cx=\"250.5\" cy=\"257.2\" r=\"211.8\" style=\"fill:#ffc61a\"/><circle cx=\"185.9\" cy=\"163.6\" r=\"127.5\" style=\"fill:#ffe250\"/><circle cx=\"181.9\" cy=\"137.6\" r=\"87.1\" style=\"fill:#fceba7\"/><path class=\"st5\" d=\"M198.8 443.9c8.8.6 17.5.8 26 .8 86.6 0 155.9-28 200.3-52.8 45.1-25.2 84.3-58.2 112.3-93.8.3-5.5.5-11 .5-16.5v-3.8c-28.2 39.8-71 77.2-120.8 105.1-44.3 24.8-113.6 52.8-200.3 52.8-8.5 0-17.2-.3-26-.8-5.9-.4-11.5-.9-17.1-1.6 3.4 9 7.5 18.1 12.3 27.1 1.2.2 2.5.5 3.8.8-3-6.3-5.7-12.6-8.1-18.8 5.5.5 11.2 1.1 17.1 1.5zM285.8 510.9c26 6.4 51 9.6 74.7 9.6 7.3 0 14.4-.3 21.4-.9 10.5-4.6 20.7-9.8 30.6-15.8-9.8 2.7-19.9 4.7-30.4 6-9.6 1.2-19.5 1.8-29.6 1.8-23.6 0-48.6-3.2-74.7-9.6-32.1-7.9-57.1-13.8-77.1-18.1 4.2 5.8 8.7 11.5 13.7 17 1.1 1.2 2.2 2.4 3.3 3.5-3.2-3.8-6.1-7.6-8.9-11.5 20 4.2 44.9 10.1 77 18zM200.9 348.6c-14.7 5.4-29.4 8.7-43.5 9.9 1.3 16 4 34.4 9.4 53.7 1.9.3 3.9.6 5.9.8-4-16.3-6.2-31.8-7.3-45.5 14.1-1.2 28.8-4.5 43.5-9.9 36.8-13.5 70.9-39.2 96-72.3 61.6-81.2 139.8-161.9 160.3-182.7 1.6 1.5 3.2 3 4.7 4.6 2.3 2.3 4.5 4.6 6.7 6.9-4.6-5.5-9.5-10.8-14.7-15.9-1.6-1.6-3.1-3.1-4.7-4.6-20.5 20.8-98.7 101.4-160.3 182.7-25.1 33.1-59.2 58.8-96 72.3zM67 289.5c4.5 11 10.8 20.3 18.6 27.7-4.2-5.5-7.7-11.8-10.6-18.7-9.4-22.9-11.1-52.2-5.1-87.2.1-.3 6.2-35 28.9-73.5 13.2-22.4 29.3-41.8 47.9-57.6C169.9 60.5 197 46.3 227.4 38c6.4-1.5 12.9-2.7 19.4-3.7 4.6-4 9.4-7.8 14.2-11.4-14.1.9-28 3-41.6 6.1-30.4 8.3-57.6 22.5-80.7 42.2-18.6 15.8-34.7 35.2-47.9 57.6C68.2 167.3 62 202 62 202.3c-6.1 35-4.4 64.3 5 87.2z\"/><path class=\"st5\" d=\"M191.2 144.5c-25.5 56-37.4 122.8-34.9 194.1 2.6-.2 5.2-.5 7.7-.9-1.1-67.6 10.8-130.8 35.1-184.1 24.6-54.1 63.6-98 106.6-121.6 49.2 3.6 95.6 20.9 134.9 50 .5-.6 1.1-1.1 1.6-1.6C401 46.7 351 26.8 297.8 22.9c-43 23.6-81.9 67.5-106.6 121.6z\"/><path d=\"M479 84C426.3 31.3 356.1 2.2 281.5 2.2S136.7 31.3 84 84C31.2 136.8 2.1 207 2.1 281.6S31.2 426.3 84 479.1s122.9 81.8 197.5 81.8 144.8-29.1 197.5-81.8c52.8-52.8 81.8-122.9 81.8-197.5S531.8 136.8 479 84zm59.2 160.3c-25 44.9-72 89.8-127.9 121.1C363.9 391.3 289 421 195 414.9c-8.7-.6-17.1-1.5-25.3-2.7-5.4-19.3-8.1-37.7-9.4-53.7 14.1-1.2 28.8-4.5 43.5-9.9 36.8-13.5 70.9-39.2 96-72.3C361.5 195 439.7 114.4 460.2 93.6c1.6 1.5 3.2 3 4.7 4.6 40.1 40.1 65.4 91 73.3 146.1zM141.7 71.2C164.8 51.5 192 37.3 222.4 29c13.6-3.2 27.5-5.2 41.6-6.1-36.1 26.7-66.2 65.4-88 113.4-26.7 58.6-39.3 128.3-36.7 202.5-10.2-.9-19.9-3.2-28.9-7.1-18.6-8.1-32.2-22.3-40.4-42.1-9.4-22.9-11.1-52.2-5.1-87.2.1-.3 6.2-35 28.9-73.5 13.2-22.5 29.3-41.9 47.9-57.7zm17.6 267.4c-2.6-71.3 9.4-138.1 34.9-194.1 24.6-54.1 63.6-98 106.6-121.6C354 26.8 404 46.7 445.2 80.3c-22 22.3-99.7 102.7-161.2 183.8-32.7 43.1-81 70.5-124.7 74.5zm-91-204.8c-17.8 35.3-22.9 63.8-23.1 65.1-6.7 38.7-4.6 71.8 6.3 98.2 10.1 24.4 27.7 42.7 50.9 52.8 11.6 5.1 24.5 8 38 8.8 1.3 17.9 4 34.3 7.6 49.3-36.5-8.7-66.6-25-89.8-48.6-17.4-17.7-29.4-40.9-34.8-52.6-.8-8.4-1.2-16.8-1.2-25.3-.1-53.5 16.1-104.6 46.1-147.7zM35.6 364.4c2.3 2.7 4.8 5.5 7.5 8.2 20.4 21 55.2 46 111.1 57.2 3.1 9.4 6.6 18.1 10.3 26.2-33.9-5.2-49.3-3.4-59.3 4-2.5 1.8-4.4 3.9-5.9 6.2l-1.2-1.2c-28.8-28.8-49.9-63.2-62.5-100.6zm166.9 149.7c7.2 8 14.3 14.7 20.9 20.3-39.9-9.1-77.1-27.6-108.8-54.4.7-2.3 1.7-3.4 2.6-4 5.1-3.8 18.9-4 41-.8 5.4.8 11.4 1.8 18 3 8.6 14.6 17.8 26.5 26.3 35.9zm65.7 26.5c-6.5-3.3-29.5-16.1-50.9-39.8-5-5.5-9.5-11.2-13.7-17 20.1 4.3 45 10.2 77.1 18.1 26 6.4 51 9.6 74.7 9.6 10.1 0 20-.6 29.6-1.8 10.5-1.3 20.6-3.3 30.4-6-40 24.2-85.9 37.1-133.9 37.1-4.4.1-8.9 0-13.3-.2zm225.2-109.4-.5-.3c-.1.2-14.1 21.7-46.3 39.1-19.1 10.3-40.7 17-64.1 19.9-29.6 3.6-62.2 1.1-97-7.4-40.8-10.1-72.2-17.3-96.6-22.1-4.8-9-8.9-18-12.3-27.1 5.5.7 11.2 1.2 17.1 1.6 8.8.6 17.5.8 26 .8 86.6 0 155.9-28 200.3-52.8 49.8-27.9 92.6-65.3 120.8-105.1v3.8c0 54.3-16.6 106.2-47.4 149.6z\" style=\"fill:#ce7a15\"/><path class=\"st0\" d=\"M361.5 37.3C452.2 76.1 515.8 166 515.8 270.6c0 140.2-114 253.8-254.5 253.8-53.1 0-102.4-16.2-143.2-44 45.1 38.2 103.5 61.3 167.3 61.3 142.8 0 258.6-115.5 258.6-257.9 0-116-76.8-214.1-182.5-246.5z\"/><ellipse transform=\"rotate(-43.448 169.019 111.376)\" cx=\"169\" cy=\"111.4\" rx=\"66.5\" ry=\"47.7\" style=\"opacity:.49;fill:#fff;enable-background:new\"/><ellipse transform=\"rotate(-43.448 163.02 104.377)\" cx=\"163\" cy=\"104.4\" rx=\"41.8\" ry=\"29.8\" style=\"fill:#fff\"/><ellipse transform=\"rotate(-42.58 419.63 442.12)\" class=\"st0\" cx=\"419.6\" cy=\"442.1\" rx=\"42.2\" ry=\"27\"/><ellipse transform=\"rotate(-45.057 424.9 449.158)\" class=\"st5\" cx=\"424.9\" cy=\"449.2\" rx=\"28.4\" ry=\"18.1\"/><path class=\"st9\" d=\"m500.3 232.9-8.6-2.8c-11.1-3.6-17.2-15.6-13.6-26.7l2.8-8.6c1.2-3.8-.8-7.9-4.6-9.1l-.3-.1c-3.8-1.2-7.9.8-9.1 4.6l-2.8 8.6c-3.6 11.1-15.6 17.2-26.7 13.6l-8.6-2.8c-3.8-1.2-7.9.8-9.1 4.6-1.2 3.8.8 7.9 4.6 9.1l8.6 2.8c11.1 3.6 17.2 15.6 13.6 26.7l-2.8 8.6c-1.2 3.8.8 7.9 4.6 9.1l.3.1c3.8 1.2 7.9-.8 9.1-4.6l2.8-8.6c3.6-11.1 15.6-17.2 26.7-13.6l8.6 2.8c3.8 1.2 7.9-.8 9.1-4.6 1.3-3.8-.8-7.9-4.6-9.1zM97.3 435.7l-4.7-1.5c-6.1-2-9.4-8.5-7.4-14.6l1.5-4.7c.7-2.1-.5-4.3-2.5-5l-.2-.1c-2.1-.7-4.3.5-5 2.5l-1.5 4.7c-2 6.1-8.5 9.4-14.6 7.4l-4.7-1.5c-2.1-.7-4.3.5-5 2.5-.7 2.1.5 4.3 2.5 5l4.7 1.5c6.1 2 9.4 8.5 7.4 14.6l-1.5 4.7c-.7 2.1.5 4.3 2.5 5l.2.1c2.1.7 4.3-.5 5-2.5l1.5-4.7c2-6.1 8.5-9.4 14.6-7.4l4.7 1.5c2.1.7 4.3-.5 5-2.5.7-2.1-.4-4.3-2.5-5z\"/></svg>",
                    "width": 563,
                    "height": 563,
                    "mimetype": "svg+xml"
                });
            }, true);

            var fetch_i_g_ball_silver_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/ball_silver.svg', {
                    "data": "<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0\" y=\"0\" width=\"563\" height=\"563\" style=\"enable-background:new 0 0 563 563\" xml:space=\"preserve\"><style>.st0{fill:#edf3f4}.st6,.st8{fill:#fff}.st8{fill-rule:evenodd;clip-rule:evenodd}</style><circle class=\"st0\" cx=\"281.5\" cy=\"281.6\" r=\"268\"/><circle cx=\"281.5\" cy=\"281.6\" r=\"245.4\" style=\"fill:#839197\"/><circle cx=\"250.5\" cy=\"257.2\" r=\"211.8\" style=\"fill:#b4c1c7\"/><circle cx=\"185.9\" cy=\"163.6\" r=\"127.5\" style=\"fill:#cadbda\"/><path class=\"st0\" d=\"M198.8 443.9c8.8.6 17.5.8 26 .8 86.6 0 155.9-28 200.3-52.8 45.1-25.2 84.3-58.2 112.3-93.8.3-5.5.5-11 .5-16.5v-3.8c-28.2 39.8-71 77.2-120.8 105.1-44.3 24.8-113.6 52.8-200.3 52.8-8.5 0-17.2-.3-26-.8-5.9-.4-11.5-.9-17.1-1.6 3.4 9 7.5 18.1 12.3 27.1 1.2.2 2.5.5 3.8.8-3-6.3-5.7-12.6-8.1-18.8 5.5.5 11.2 1.1 17.1 1.5zM285.8 510.9c26 6.4 51 9.6 74.7 9.6 7.3 0 14.4-.3 21.4-.9 10.5-4.6 20.7-9.8 30.6-15.8-9.8 2.7-19.9 4.7-30.4 6-9.6 1.2-19.5 1.8-29.6 1.8-23.6 0-48.6-3.2-74.7-9.6-32.1-7.9-57.1-13.8-77.1-18.1 4.2 5.8 8.7 11.5 13.7 17 1.1 1.2 2.2 2.4 3.3 3.5-3.2-3.8-6.1-7.6-8.9-11.5 20 4.2 44.9 10.1 77 18zM200.9 348.6c-14.7 5.4-29.4 8.7-43.5 9.9 1.3 16 4 34.4 9.4 53.7 1.9.3 3.9.6 5.9.8-4-16.3-6.2-31.8-7.3-45.5 14.1-1.2 28.8-4.5 43.5-9.9 36.8-13.5 70.9-39.2 96-72.3 61.6-81.2 139.8-161.9 160.3-182.7 1.6 1.5 3.2 3 4.7 4.6 2.3 2.3 4.5 4.6 6.7 6.9-4.6-5.5-9.5-10.8-14.7-15.9-1.6-1.6-3.1-3.1-4.7-4.6-20.5 20.8-98.7 101.4-160.3 182.7-25.1 33.1-59.2 58.8-96 72.3zM67 289.5c4.5 11 10.8 20.3 18.6 27.7-4.2-5.5-7.7-11.8-10.6-18.7-9.4-22.9-11.1-52.2-5.1-87.2.1-.3 6.2-35 28.9-73.5 13.2-22.4 29.3-41.8 47.9-57.6C169.9 60.5 197 46.3 227.4 38c6.4-1.5 12.9-2.7 19.4-3.7 4.6-4 9.4-7.8 14.2-11.4-14.1.9-28 3-41.6 6.1-30.4 8.3-57.6 22.5-80.7 42.2-18.6 15.8-34.7 35.2-47.9 57.6C68.2 167.3 62 202 62 202.3c-6.1 35-4.4 64.3 5 87.2z\"/><path class=\"st0\" d=\"M191.2 144.5c-25.5 56-37.4 122.8-34.9 194.1 2.6-.2 5.2-.5 7.7-.9-1.1-67.6 10.8-130.8 35.1-184.1 24.6-54.1 63.6-98 106.6-121.6 49.2 3.6 95.6 20.9 134.9 50 .5-.6 1.1-1.1 1.6-1.6C401 46.7 351 26.8 297.8 22.9c-43 23.6-81.9 67.5-106.6 121.6z\"/><path d=\"M479 84C426.3 31.3 356.1 2.2 281.5 2.2S136.7 31.3 84 84C31.2 136.8 2.1 207 2.1 281.6S31.2 426.3 84 479.1s122.9 81.8 197.5 81.8 144.8-29.1 197.5-81.8c52.8-52.8 81.8-122.9 81.8-197.5S531.8 136.8 479 84zm59.2 160.3c-25 44.9-72 89.8-127.9 121.1C363.9 391.3 289 421 195 414.9c-8.7-.6-17.1-1.5-25.3-2.7-5.4-19.3-8.1-37.7-9.4-53.7 14.1-1.2 28.8-4.5 43.5-9.9 36.8-13.5 70.9-39.2 96-72.3C361.5 195 439.7 114.4 460.2 93.6c1.6 1.5 3.2 3 4.7 4.6 40.1 40.1 65.4 91 73.3 146.1zM141.7 71.2C164.8 51.5 192 37.3 222.4 29c13.6-3.2 27.5-5.2 41.6-6.1-36.1 26.7-66.2 65.4-88 113.4-26.7 58.6-39.3 128.3-36.7 202.5-10.2-.9-19.9-3.2-28.9-7.1-18.6-8.1-32.2-22.3-40.4-42.1-9.4-22.9-11.1-52.2-5.1-87.2.1-.3 6.2-35 28.9-73.5 13.2-22.5 29.3-41.9 47.9-57.7zm17.6 267.4c-2.6-71.3 9.4-138.1 34.9-194.1 24.6-54.1 63.6-98 106.6-121.6C354 26.8 404 46.7 445.2 80.3c-22 22.3-99.7 102.7-161.2 183.8-32.7 43.1-81 70.5-124.7 74.5zm-91-204.8c-17.8 35.3-22.9 63.8-23.1 65.1-6.7 38.7-4.6 71.8 6.3 98.2 10.1 24.4 27.7 42.7 50.9 52.8 11.6 5.1 24.5 8 38 8.8 1.3 17.9 4 34.3 7.6 49.3-36.5-8.7-66.6-25-89.8-48.6-17.4-17.7-29.4-40.9-34.8-52.6-.8-8.4-1.2-16.8-1.2-25.3-.1-53.5 16.1-104.6 46.1-147.7zM35.6 364.4c2.3 2.7 4.8 5.5 7.5 8.2 20.4 21 55.2 46 111.1 57.2 3.1 9.4 6.6 18.1 10.3 26.2-33.9-5.2-49.3-3.4-59.3 4-2.5 1.8-4.4 3.9-5.9 6.2l-1.2-1.2c-28.8-28.8-49.9-63.2-62.5-100.6zm166.9 149.7c7.2 8 14.3 14.7 20.9 20.3-39.9-9.1-77.1-27.6-108.8-54.4.7-2.3 1.7-3.4 2.6-4 5.1-3.8 18.9-4 41-.8 5.4.8 11.4 1.8 18 3 8.6 14.6 17.8 26.5 26.3 35.9zm65.7 26.5c-6.5-3.3-29.5-16.1-50.9-39.8-5-5.5-9.5-11.2-13.7-17 20.1 4.3 45 10.2 77.1 18.1 26 6.4 51 9.6 74.7 9.6 10.1 0 20-.6 29.6-1.8 10.5-1.3 20.6-3.3 30.4-6-40 24.2-85.9 37.1-133.9 37.1-4.4.1-8.9 0-13.3-.2zm225.2-109.4-.5-.3c-.1.2-14.1 21.7-46.3 39.1-19.1 10.3-40.7 17-64.1 19.9-29.6 3.6-62.2 1.1-97-7.4-40.8-10.1-72.2-17.3-96.6-22.1-4.8-9-8.9-18-12.3-27.1 5.5.7 11.2 1.2 17.1 1.6 8.8.6 17.5.8 26 .8 86.6 0 155.9-28 200.3-52.8 49.8-27.9 92.6-65.3 120.8-105.1v3.8c0 54.3-16.6 106.2-47.4 149.6z\" style=\"fill:#6a7575\"/><path class=\"st0\" d=\"M361.5 37.3C452.2 76.1 515.8 166 515.8 270.6c0 140.2-114 253.8-254.5 253.8-53.1 0-102.4-16.2-143.2-44 45.1 38.2 103.5 61.3 167.3 61.3 142.8 0 258.6-115.5 258.6-257.9 0-116-76.8-214.1-182.5-246.5z\"/><ellipse transform=\"rotate(-43.448 169.002 111.416)\" cx=\"169\" cy=\"111.4\" rx=\"66.5\" ry=\"47.7\" style=\"opacity:.5;fill:#fff;enable-background:new\"/><ellipse transform=\"rotate(-43.448 163.002 104.415)\" class=\"st6\" cx=\"163\" cy=\"104.4\" rx=\"41.8\" ry=\"29.8\"/><ellipse transform=\"rotate(-42.58 419.582 442.103)\" cx=\"419.6\" cy=\"442.1\" rx=\"42.2\" ry=\"27\" style=\"fill:#e4e9ea\"/><ellipse transform=\"rotate(-45.057 424.908 449.224)\" class=\"st6\" cx=\"424.9\" cy=\"449.2\" rx=\"28.4\" ry=\"18.1\"/><path class=\"st8\" d=\"m500.3 232.9-8.6-2.8c-11.1-3.6-17.2-15.6-13.6-26.7l2.8-8.6c1.2-3.8-.8-7.9-4.6-9.1l-.3-.1c-3.8-1.2-7.9.8-9.1 4.6l-2.8 8.6c-3.6 11.1-15.6 17.2-26.7 13.6l-8.6-2.8c-3.8-1.2-7.9.8-9.1 4.6-1.2 3.8.8 7.9 4.6 9.1l8.6 2.8c11.1 3.6 17.2 15.6 13.6 26.7l-2.8 8.6c-1.2 3.8.8 7.9 4.6 9.1l.3.1c3.8 1.2 7.9-.8 9.1-4.6l2.8-8.6c3.6-11.1 15.6-17.2 26.7-13.6l8.6 2.8c3.8 1.2 7.9-.8 9.1-4.6 1.3-3.8-.8-7.9-4.6-9.1zM97.3 435.7l-4.7-1.5c-6.1-2-9.4-8.5-7.4-14.6l1.5-4.7c.7-2.1-.5-4.3-2.5-5l-.2-.1c-2.1-.7-4.3.5-5 2.5l-1.5 4.7c-2 6.1-8.5 9.4-14.6 7.4l-4.7-1.5c-2.1-.7-4.3.5-5 2.5-.7 2.1.5 4.3 2.5 5l4.7 1.5c6.1 2 9.4 8.5 7.4 14.6l-1.5 4.7c-.7 2.1.5 4.3 2.5 5l.2.1c2.1.7 4.3-.5 5-2.5l1.5-4.7c2-6.1 8.5-9.4 14.6-7.4l4.7 1.5c2.1.7 4.3-.5 5-2.5.7-2.1-.4-4.3-2.5-5z\"/></svg>",
                    "width": 563,
                    "height": 563,
                    "mimetype": "svg+xml"
                });
            }, true);

            var fetch_i_g_ball_bronze_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/ball_bronze.svg', {
                    "data": "<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0\" y=\"0\" width=\"563\" height=\"563\" style=\"enable-background:new 0 0 563 563\" xml:space=\"preserve\"><style>.st0{fill:#f7c164}.st4,.st8{fill:#fff}.st8{fill-rule:evenodd;clip-rule:evenodd}</style><circle class=\"st0\" cx=\"281.5\" cy=\"281.6\" r=\"268\"/><circle cx=\"281.5\" cy=\"281.6\" r=\"245.4\" style=\"fill:#d6711e\"/><circle cx=\"250.5\" cy=\"257.2\" r=\"211.8\" style=\"fill:#f5a73f\"/><ellipse class=\"st0\" cx=\"185.2\" cy=\"158.9\" rx=\"120.7\" ry=\"120.1\"/><g style=\"opacity:.75\"><path class=\"st4\" d=\"M198.8 443.9c8.8.6 17.5.8 26 .8 86.6 0 155.9-28 200.3-52.8 45.1-25.2 84.3-58.2 112.3-93.8.3-5.5.5-11 .5-16.5v-3.8c-28.2 39.8-71 77.2-120.8 105.1-44.3 24.8-113.6 52.8-200.3 52.8-8.5 0-17.2-.3-26-.8-5.9-.4-11.5-.9-17.1-1.6 3.4 9 7.5 18.1 12.3 27.1 1.2.2 2.5.5 3.8.8-3-6.3-5.7-12.6-8.1-18.8 5.5.5 11.2 1.1 17.1 1.5zM285.8 510.9c26 6.4 51 9.6 74.7 9.6 7.3 0 14.4-.3 21.4-.9 10.5-4.6 20.7-9.8 30.6-15.8-9.8 2.7-19.9 4.7-30.4 6-9.6 1.2-19.5 1.8-29.6 1.8-23.6 0-48.6-3.2-74.7-9.6-32.1-7.9-57.1-13.8-77.1-18.1 4.2 5.8 8.7 11.5 13.7 17 1.1 1.2 2.2 2.4 3.3 3.5-3.2-3.8-6.1-7.6-8.9-11.5 20 4.2 44.9 10.1 77 18zM200.9 348.6c-14.7 5.4-29.4 8.7-43.5 9.9 1.3 16 4 34.4 9.4 53.7 1.9.3 3.9.6 5.9.8-4-16.3-6.2-31.8-7.3-45.5 14.1-1.2 28.8-4.5 43.5-9.9 36.8-13.5 70.9-39.2 96-72.3 61.6-81.2 139.8-161.9 160.3-182.7 1.6 1.5 3.2 3 4.7 4.6 2.3 2.3 4.5 4.6 6.7 6.9-4.6-5.5-9.5-10.8-14.7-15.9-1.6-1.6-3.1-3.1-4.7-4.6-20.5 20.8-98.7 101.4-160.3 182.7-25.1 33.1-59.2 58.8-96 72.3zM67 289.5c4.5 11 10.8 20.3 18.6 27.7-4.2-5.5-7.7-11.8-10.6-18.7-9.4-22.9-11.1-52.2-5.1-87.2.1-.3 6.2-35 28.9-73.5 13.2-22.4 29.3-41.8 47.9-57.6C169.9 60.5 197 46.3 227.4 38c6.4-1.5 12.9-2.7 19.4-3.7 4.6-4 9.4-7.8 14.2-11.4-14.1.9-28 3-41.6 6.1-30.4 8.3-57.6 22.5-80.7 42.2-18.6 15.8-34.7 35.2-47.9 57.6C68.2 167.3 62 202 62 202.3c-6.1 35-4.4 64.3 5 87.2z\"/><path class=\"st4\" d=\"M191.2 144.5c-25.5 56-37.4 122.8-34.9 194.1 2.6-.2 5.2-.5 7.7-.9-1.1-67.6 10.8-130.8 35.1-184.1 24.6-54.1 63.6-98 106.6-121.6 49.2 3.6 95.6 20.9 134.9 50 .5-.6 1.1-1.1 1.6-1.6C401 46.7 351 26.8 297.8 22.9c-43 23.6-81.9 67.5-106.6 121.6z\"/></g><path d=\"M479 84C426.3 31.3 356.1 2.2 281.5 2.2S136.7 31.3 84 84C31.2 136.8 2.1 207 2.1 281.6S31.2 426.3 84 479.1s122.9 81.8 197.5 81.8 144.8-29.1 197.5-81.8c52.8-52.8 81.8-122.9 81.8-197.5S531.8 136.8 479 84zm59.2 160.3c-25 44.9-72 89.8-127.9 121.1C363.9 391.3 289 421 195 414.9c-8.7-.6-17.1-1.5-25.3-2.7-5.4-19.3-8.1-37.7-9.4-53.7 14.1-1.2 28.8-4.5 43.5-9.9 36.8-13.5 70.9-39.2 96-72.3C361.5 195 439.7 114.4 460.2 93.6c1.6 1.5 3.2 3 4.7 4.6 40.1 40.1 65.4 91 73.3 146.1zM141.7 71.2C164.8 51.5 192 37.3 222.4 29c13.6-3.2 27.5-5.2 41.6-6.1-36.1 26.7-66.2 65.4-88 113.4-26.7 58.6-39.3 128.3-36.7 202.5-10.2-.9-19.9-3.2-28.9-7.1-18.6-8.1-32.2-22.3-40.4-42.1-9.4-22.9-11.1-52.2-5.1-87.2.1-.3 6.2-35 28.9-73.5 13.2-22.5 29.3-41.9 47.9-57.7zm17.6 267.4c-2.6-71.3 9.4-138.1 34.9-194.1 24.6-54.1 63.6-98 106.6-121.6C354 26.8 404 46.7 445.2 80.3c-22 22.3-99.7 102.7-161.2 183.8-32.7 43.1-81 70.5-124.7 74.5zm-91-204.8c-17.8 35.3-22.9 63.8-23.1 65.1-6.7 38.7-4.6 71.8 6.3 98.2 10.1 24.4 27.7 42.7 50.9 52.8 11.6 5.1 24.5 8 38 8.8 1.3 17.9 4 34.3 7.6 49.3-36.5-8.7-66.6-25-89.8-48.6-17.4-17.7-29.4-40.9-34.8-52.6-.8-8.4-1.2-16.8-1.2-25.3-.1-53.5 16.1-104.6 46.1-147.7zM35.6 364.4c2.3 2.7 4.8 5.5 7.5 8.2 20.4 21 55.2 46 111.1 57.2 3.1 9.4 6.6 18.1 10.3 26.2-33.9-5.2-49.3-3.4-59.3 4-2.5 1.8-4.4 3.9-5.9 6.2l-1.2-1.2c-28.8-28.8-49.9-63.2-62.5-100.6zm166.9 149.7c7.2 8 14.3 14.7 20.9 20.3-39.9-9.1-77.1-27.6-108.8-54.4.7-2.3 1.7-3.4 2.6-4 5.1-3.8 18.9-4 41-.8 5.4.8 11.4 1.8 18 3 8.6 14.6 17.8 26.5 26.3 35.9zm65.7 26.5c-6.5-3.3-29.5-16.1-50.9-39.8-5-5.5-9.5-11.2-13.7-17 20.1 4.3 45 10.2 77.1 18.1 26 6.4 51 9.6 74.7 9.6 10.1 0 20-.6 29.6-1.8 10.5-1.3 20.6-3.3 30.4-6-40 24.2-85.9 37.1-133.9 37.1-4.4.1-8.9 0-13.3-.2zm225.2-109.4-.5-.3c-.1.2-14.1 21.7-46.3 39.1-19.1 10.3-40.7 17-64.1 19.9-29.6 3.6-62.2 1.1-97-7.4-40.8-10.1-72.2-17.3-96.6-22.1-4.8-9-8.9-18-12.3-27.1 5.5.7 11.2 1.2 17.1 1.6 8.8.6 17.5.8 26 .8 86.6 0 155.9-28 200.3-52.8 49.8-27.9 92.6-65.3 120.8-105.1v3.8c0 54.3-16.6 106.2-47.4 149.6z\" style=\"fill:#a04d1f\"/><path class=\"st0\" d=\"M361.5 37.3C452.2 76.1 515.8 166 515.8 270.6c0 140.2-114 253.8-254.5 253.8-53.1 0-102.4-16.2-143.2-44 45.1 38.2 103.5 61.3 167.3 61.3 142.8 0 258.6-115.5 258.6-257.9 0-116-76.8-214.1-182.5-246.5z\"/><ellipse transform=\"rotate(-43.448 169.019 111.376)\" cx=\"169\" cy=\"111.4\" rx=\"66.5\" ry=\"47.7\" style=\"opacity:.49;fill:#fff;enable-background:new\"/><ellipse transform=\"rotate(-43.448 163.02 104.377)\" class=\"st4\" cx=\"163\" cy=\"104.4\" rx=\"41.8\" ry=\"29.8\"/><ellipse transform=\"rotate(-42.58 419.63 442.12)\" class=\"st0\" cx=\"419.6\" cy=\"442.1\" rx=\"42.2\" ry=\"27\"/><ellipse transform=\"rotate(-45.057 424.9 449.158)\" cx=\"424.9\" cy=\"449.2\" rx=\"28.4\" ry=\"18.1\" style=\"fill:#fff5df\"/><path class=\"st8\" d=\"m500.3 232.9-8.6-2.8c-11.1-3.6-17.2-15.6-13.6-26.7l2.8-8.6c1.2-3.8-.8-7.9-4.6-9.1l-.3-.1c-3.8-1.2-7.9.8-9.1 4.6l-2.8 8.6c-3.6 11.1-15.6 17.2-26.7 13.6l-8.6-2.8c-3.8-1.2-7.9.8-9.1 4.6-1.2 3.8.8 7.9 4.6 9.1l8.6 2.8c11.1 3.6 17.2 15.6 13.6 26.7l-2.8 8.6c-1.2 3.8.8 7.9 4.6 9.1l.3.1c3.8 1.2 7.9-.8 9.1-4.6l2.8-8.6c3.6-11.1 15.6-17.2 26.7-13.6l8.6 2.8c3.8 1.2 7.9-.8 9.1-4.6 1.3-3.8-.8-7.9-4.6-9.1zM97.3 435.7l-4.7-1.5c-6.1-2-9.4-8.5-7.4-14.6l1.5-4.7c.7-2.1-.5-4.3-2.5-5l-.2-.1c-2.1-.7-4.3.5-5 2.5l-1.5 4.7c-2 6.1-8.5 9.4-14.6 7.4l-4.7-1.5c-2.1-.7-4.3.5-5 2.5-.7 2.1.5 4.3 2.5 5l4.7 1.5c6.1 2 9.4 8.5 7.4 14.6l-1.5 4.7c-.7 2.1.5 4.3 2.5 5l.2.1c2.1.7 4.3-.5 5-2.5l1.5-4.7c2-6.1 8.5-9.4 14.6-7.4l4.7 1.5c2.1.7 4.3-.5 5-2.5.7-2.1-.4-4.3-2.5-5z\"/></svg>",
                    "width": 563,
                    "height": 563,
                    "mimetype": "svg+xml"
                });
            }, true);

            var fetch_i_g_drink_aim_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/drink_aim.svg', {
                    "data": "<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0\" y=\"0\" width=\"563\" height=\"950\" style=\"enable-background:new 0 0 563 950\" xml:space=\"preserve\"><style>.st2,.st3{fill-rule:evenodd;clip-rule:evenodd;fill:#ffdf00}.st3{fill:#ba9b00}.st4{fill:#f9eec0}.st17,.st20,.st21,.st4,.st5,.st6{fill-rule:evenodd;clip-rule:evenodd}.st5{opacity:.75;fill:#fff800;enable-background:new}.st17,.st20,.st21,.st6{fill:#fff5bb}.st17,.st20,.st21{fill:#7f7c04}.st20,.st21{fill:#d64c30}.st21{fill:#ffd665}.st26{fill:#ad3b27}.st27,.st28{fill-rule:evenodd;clip-rule:evenodd;fill:#831411}.st28{fill:#e62f29}</style><path d=\"M276.5 677.4c131.5 0 238 56.2 238 125.6S408 928.6 276.5 928.6s-238-56.2-238-125.6 106.5-125.6 238-125.6z\" style=\"opacity:.5;fill-rule:evenodd;clip-rule:evenodd;fill:#998d9d;enable-background:new\"/><path d=\"M275.6 919.4c-73.2 0-193.8-24.6-213.5-110.2C24.9 762.4 39 704.8 83.2 668.4v-18.7c-.1-1.9-.2-3.7-.2-5.5V448.9c-29.1-30.6-37.7-74.3-14.7-111.3-8.8-23.7-8.9-48.6-.2-72.5 9.5-26 29.2-49.7 57.1-68.4 3.6-2.4 7.4-4.8 11.3-7.1V110.2c1.4-35.9 36.9-59.1 67.4-69.6 33.9-15 75.5-16.7 111.2-7.6 38.8 6.4 94 28.4 99.1 74.3.2.9.3 1.8.3 2.8v79c0 .6-.1 1.3-.1 1.9 0 .4-.1.8-.1 1.3 2.6 1.6 5.1 3.2 7.5 4.8 53.2 35.9 75 88.3 58 138.2 25 37.5 19.7 80.8-14.1 115.3v188.3c.3 3.7.3 7.4 0 11.1v20.1c22.4 19 36.4 41.2 40.7 64.7 4.4 24.3-1.7 48.6-17.7 70.7-15.4 88.4-140.1 113.9-213.1 113.9z\" style=\"fill:#484400\"/><path class=\"st2\" d=\"M131.1 708.9c79.2-45.3 208.1-45.2 287.6.4 79.4 45.5 78.8 119-.9 163.9-79.4 44.7-207.5 44.2-286.4-.9-79-45.3-79.2-118.3-.3-163.4z\"/><path class=\"st3\" d=\"M130.7 703.7c79.1-43.5 207.8-43.4 287 .4 79.3 43.8 78.7 114.3-.9 157.5-79.3 43-207.1 42.5-285.9-.9-78.7-43.5-78.9-113.7-.2-157z\"/><path class=\"st4\" d=\"M116.3 659.2c86.7-49.5 227.8-49.4 314.7.4 86.9 49.8 86.3 130.2-1 179.4-86.9 48.9-227.1 48.4-313.4-1-86.4-49.5-86.7-129.4-.3-178.8z\"/><path class=\"st2\" d=\"M120.8 667.1c82.2-46.9 215.8-46.8 298.2.4 82.3 47.2 81.8 123.4-.9 169.9-82.4 46.4-215.2 45.9-297-1-81.8-46.8-82.1-122.5-.3-169.3z\"/><path class=\"st3\" d=\"M140.4 707.3c70.6-33.8 185.6-33.8 256.4.3s70.3 89-.8 122.5c-70.8 33.4-185 33.1-255.3-.7-70.5-33.8-70.7-88.4-.3-122.1z\"/><path class=\"st5\" d=\"M107.5 789c13.7-.5 30 9.2 36.4 21.6 6.4 12.4.5 22.8-13.2 23.2-13.6.4-29.8-9.3-36.2-21.6-6.5-12.3-.6-22.7 13-23.2z\"/><path class=\"st6\" d=\"M106.2 792.4c9.5-1.6 21.7 3.6 27.4 11.6 5.6 8 2.5 15.7-7.1 17.3-9.5 1.5-21.6-3.7-27.2-11.6-5.6-8-2.5-15.7 6.9-17.3z\"/><defs><path id=\"SVGID_1_\" d=\"M116.3 659.2c86.7-49.5 227.8-49.4 314.7.4 86.9 49.8 86.3 130.2-1 179.4-86.9 48.9-227.1 48.4-313.4-1-86.4-49.5-86.7-129.4-.3-178.8z\"/></defs><clipPath id=\"SVGID_2_\"><use xlink:href=\"#SVGID_1_\" style=\"overflow:visible\"/></clipPath><g style=\"opacity:.5;clip-path:url(#SVGID_2_)\"><path d=\"M146.3 646.7c83.1-41 218.3-40.9 301.7.4 83.3 41.3 82.7 107.9-1 148.6-83.3 40.5-217.7 40.1-300.4-.9-82.8-40.9-83-107.2-.3-148.1z\" style=\"opacity:.5;fill-rule:evenodd;clip-rule:evenodd;fill:#7f7c04;enable-background:new\"/></g><defs><path id=\"SVGID_3_\" d=\"M453.8 704.2v-339H95.2v345.4c-.2 26.4 17.3 52.8 52.5 72.9 69.8 40 183.1 40.4 253.4.8 38.7-21.8 56.3-51.3 52.7-80.1z\"/></defs><clipPath id=\"SVGID_4_\"><use xlink:href=\"#SVGID_3_\" style=\"overflow:visible\"/></clipPath><path d=\"M453.8 704.2v-339H95.2v345.4c-.2 26.4 17.3 52.8 52.5 72.9 69.8 40 183.1 40.4 253.4.8 38.7-21.8 56.3-51.3 52.7-80.1z\" style=\"clip-path:url(#SVGID_4_);fill-rule:evenodd;clip-rule:evenodd;fill:#eaf5e7\"/><defs><path id=\"SVGID_5_\" d=\"M453.8 704.2v-339H95.2v345.4c-.2 26.4 17.3 52.8 52.5 72.9 69.8 40 183.1 40.4 253.4.8 38.7-21.8 56.3-51.3 52.7-80.1z\"/></defs><clipPath id=\"SVGID_6_\"><use xlink:href=\"#SVGID_5_\" style=\"overflow:visible\"/></clipPath><path d=\"M459.3 732V299.6l-138 60.6v430.7c-.1 33 6.5 63.5 19.8 84 26.5 40.8 70.1 26.8 97.5-33.2 15.3-33.3 22.2-73.5 20.7-109.7z\" style=\"clip-path:url(#SVGID_6_);fill-rule:evenodd;clip-rule:evenodd;fill:#d6ebd3\"/><defs><path id=\"SVGID_7_\" d=\"M453.8 704.2v-339H95.2v345.4c-.2 26.4 17.3 52.8 52.5 72.9 69.8 40 183.1 40.4 253.4.8 38.7-21.8 56.3-51.3 52.7-80.1z\"/></defs><clipPath id=\"SVGID_8_\"><use xlink:href=\"#SVGID_7_\" style=\"overflow:visible\"/></clipPath><path d=\"M265.4 750.7v-394H129.3v401.1c-.1 30.6 6.6 61.3 19.9 84.7 26.5 46.5 69.5 47 96.2 1 14.6-25.4 21.3-59.4 20-92.8z\" style=\"clip-path:url(#SVGID_8_);fill-rule:evenodd;clip-rule:evenodd;fill:#fefefc\"/><defs><path id=\"SVGID_9_\" d=\"M453.8 704.2v-339H95.2v345.4c-.2 26.4 17.3 52.8 52.5 72.9 69.8 40 183.1 40.4 253.4.8 38.7-21.8 56.3-51.3 52.7-80.1z\"/></defs><clipPath id=\"SVGID_10_\"><use xlink:href=\"#SVGID_9_\" style=\"overflow:visible\"/></clipPath><path d=\"M453.5 443c-3 23.9-20.6 47.3-52.7 65.4-70.3 39.6-183.6 39.2-253.4-.8-32.2-18.5-49.6-42.2-52.1-66.3H95v201.4c-.2 26.4 17.3 52.8 52.5 72.9 69.8 40 183.1 40.4 253.4.8 38.8-21.9 56.4-51.3 52.7-80.2V443h-.1z\" style=\"opacity:.75;clip-path:url(#SVGID_10_);fill:#b9c6b5\"/><defs><path id=\"SVGID_11_\" d=\"M453.8 704.2v-339H95.2v345.4c-.2 26.4 17.3 52.8 52.5 72.9 69.8 40 183.1 40.4 253.4.8 38.7-21.8 56.3-51.3 52.7-80.1z\"/></defs><clipPath id=\"SVGID_12_\"><use xlink:href=\"#SVGID_11_\" style=\"overflow:visible\"/></clipPath><path d=\"M120.2 714.3v-339h-15.3v345.4c0 26.4.7 52.8 2.2 72.9 3 40 7.8 40.4 10.8.8 1.7-21.8 2.4-51.3 2.3-80.1z\" style=\"clip-path:url(#SVGID_12_);fill-rule:evenodd;clip-rule:evenodd;fill:#fff\"/><defs><path id=\"SVGID_13_\" d=\"M453.8 704.2v-339H95.2v345.4c-.2 26.4 17.3 52.8 52.5 72.9 69.8 40 183.1 40.4 253.4.8 38.7-21.8 56.3-51.3 52.7-80.1z\"/></defs><clipPath id=\"SVGID_14_\"><use xlink:href=\"#SVGID_13_\" style=\"overflow:visible\"/></clipPath><path d=\"M446.8 679V340h-15.3v345.4c0 26.4.7 52.8 2.2 72.9 3 40 7.8 40.4 10.8.8 1.7-21.8 2.4-51.3 2.3-80.1z\" style=\"clip-path:url(#SVGID_14_);fill-rule:evenodd;clip-rule:evenodd;fill:#fff\"/><defs><path id=\"SVGID_15_\" d=\"M453.8 704.2v-339H95.2v345.4c-.2 26.4 17.3 52.8 52.5 72.9 69.8 40 183.1 40.4 253.4.8 38.7-21.8 56.3-51.3 52.7-80.1z\"/></defs><clipPath id=\"SVGID_16_\"><use xlink:href=\"#SVGID_15_\" style=\"overflow:visible\"/></clipPath><path d=\"M290.6 362.3c-102-5.8-186.6 22.8-188.9 63.9-2.3 41.1 78.5 79.1 180.5 84.9 76 4.3 142.4-10.5 172.2-35.3v-62.2c-28.6-26.5-90.7-47.1-163.8-51.3z\" style=\"opacity:.5;clip-path:url(#SVGID_16_);fill:#635e57;enable-background:new\"/><path class=\"st4\" d=\"M127.1 299c81.4-46.5 213.9-46.4 295.5.4s81 122.3-.9 168.5c-81.6 46-213.3 45.5-294.3-1-81.1-46.4-81.4-121.5-.3-167.9z\"/><path class=\"st2\" d=\"M131.4 303.4c77.2-44.1 202.7-44 280.1.4 77.3 44.4 76.8 115.9-.9 159.6-77.4 43.6-202.1 43.1-278.9-.9-76.9-44-77.2-115.2-.3-159.1z\"/><path class=\"st3\" d=\"M149.7 344.2c66.3-31.8 174.3-31.7 240.8.3s66 83.5-.8 115.1c-66.5 31.4-173.8 31.1-239.8-.7-66.1-31.8-66.3-83.1-.2-114.7z\"/><path class=\"st5\" d=\"M118.8 420.9c12.8-.5 28.2 8.6 34.2 20.3 6 11.7.4 21.4-12.4 21.8-12.8.4-28-8.7-34-20.3-6-11.6-.6-21.4 12.2-21.8z\"/><path class=\"st6\" d=\"M117.6 424.1c8.9-1.5 20.4 3.4 25.7 10.9s2.3 14.8-6.6 16.2c-8.9 1.4-20.3-3.4-25.6-10.9-5.2-7.5-2.3-14.7 6.5-16.2z\"/><defs><path id=\"SVGID_17_\" d=\"M127.1 299c81.4-46.5 213.9-46.4 295.5.4s81 122.3-.9 168.5c-81.6 46-213.3 45.5-294.3-1-81.1-46.4-81.4-121.5-.3-167.9z\"/></defs><clipPath id=\"SVGID_18_\"><use xlink:href=\"#SVGID_17_\" style=\"overflow:visible\"/></clipPath><g style=\"opacity:.5;clip-path:url(#SVGID_18_)\"><path class=\"st17\" d=\"M155.3 287.3c78.1-38.6 205-38.5 283.3.3 78.2 38.8 77.7 101.3-.9 139.6-78.3 38.1-204.4 37.7-282.1-.8-77.8-38.5-78-100.7-.3-139.1z\"/><path class=\"st17\" d=\"M139.2 275.3c74.8-40.5 196.4-40.4 271.4.4 74.9 40.7 74.4 106.4-.9 146.5-75 40-195.8 39.5-270.3-.8-74.4-40.5-74.7-105.8-.2-146.1z\"/></g><path class=\"st4\" d=\"M131.8 205.7c78.1-52.4 205-52.3 283.3.5 78.2 52.7 77.7 137.7-.9 189.7-78.3 51.8-204.4 51.2-282.1-1.1-77.8-52.3-78-136.9-.3-189.1z\"/><path class=\"st2\" d=\"M133.8 212.3c72.7-48.8 190.9-48.7 263.7.4s72.3 128.2-.8 176.6c-72.9 48.2-190.3 47.7-262.7-1-72.4-48.6-72.6-127.4-.2-176z\"/><path class=\"st3\" d=\"M174.5 260.4c56.1-37.7 147.4-37.6 203.7.3s55.9 99-.6 136.3c-56.3 37.2-147 36.8-202.9-.8-55.9-37.5-56.1-98.3-.2-135.8z\"/><path class=\"st5\" d=\"M139 270c46.2-7.8 105.9 17.5 133.4 56.5 27.4 39 11.9 76.7-34.4 84.2-46.1 7.5-105.5-17.9-132.7-56.6C78 315.4 93 277.7 139 270z\"/><path class=\"st6\" d=\"M135.5 280.8c25.3-4.3 58 9.6 73 30.9s6.5 42-18.8 46.1c-25.2 4.1-57.7-9.8-72.6-31-15-21.2-6.7-41.8 18.4-46z\"/><defs><path id=\"SVGID_19_\" d=\"M131.8 205.7c78.1-52.4 205-52.3 283.3.5 78.2 52.7 77.7 137.7-.9 189.7-78.3 51.8-204.4 51.2-282.1-1.1-77.8-52.3-78-136.9-.3-189.1z\"/></defs><clipPath id=\"SVGID_20_\"><use xlink:href=\"#SVGID_19_\" style=\"overflow:visible\"/></clipPath><path d=\"M201 152.5c60.5-29.5 158.9-23.4 219.5 13.6s60.2 90.8-.7 120c-60.6 29.1-158.4 22.8-218.6-14-60.2-36.7-60.4-90.2-.2-119.6z\" style=\"opacity:.5;clip-path:url(#SVGID_20_);fill-rule:evenodd;clip-rule:evenodd;fill:#7f7c04;enable-background:new\"/><path d=\"M206.4 182.2c38-21.6 99.9-21.5 138.1.2 38.1 21.7 37.9 56.8-.4 78.2-38.1 21.3-99.6 21.1-137.5-.4-38-21.7-38.1-56.5-.2-78z\" style=\"opacity:.5;fill-rule:evenodd;clip-rule:evenodd;fill:#ffea3d;enable-background:new\"/><path class=\"st20\" d=\"M156.8 109.2h245.7v79H156.8v-79z\"/><path class=\"st21\" d=\"M184.6 138.8c48.1-27.3 125.9-27 173.8.9s47.7 72.6-.3 99.9c-48.1 27.3-125.9 27-173.8-.9-48-27.8-47.8-72.5.3-99.9z\"/><path class=\"st21\" d=\"M148.4 110.3h245.7v79H148.4v-79z\"/><path class=\"st21\" d=\"M184.6 61.4c48.1-27.3 125.9-27 173.8.9s47.7 72.6-.3 99.9c-48.1 27.3-125.9 27-173.8-.9-48-27.9-47.8-72.6.3-99.9z\"/><path class=\"st20\" d=\"M156.5 113.5h241.2v74.2H156.5v-74.2z\"/><path class=\"st20\" d=\"M193 135.4c48.1-27.3 125.9-27 173.8.9s47.7 72.6-.3 99.9c-48.1 27.3-125.9 27-173.8-.9-48-27.9-47.8-72.6.3-99.9z\"/><path d=\"M193 114.4c48.1-27.3 125.9-27 173.8.9s47.7 72.6-.3 99.9c-48.1 27.3-125.9 27-173.8-.9-48-27.8-47.8-72.5.3-99.9z\" style=\"opacity:.5;fill-rule:evenodd;clip-rule:evenodd;fill:#ad3b27;enable-background:new\"/><path d=\"m177.1 156.9 16 9c1.2.7 2.2 2.2 2.2 3.4l.7 60.7c0 1.2-1 1.6-2.2.9l-16-9c-1.2-.7-2.2-2.2-2.2-3.4l-.7-60.7c.1-1.2 1-1.6 2.2-.9z\" style=\"fill-rule:evenodd;clip-rule:evenodd;fill:#f7943c\"/><path class=\"st21\" d=\"M186 63.7c48.1-27.3 125.9-27 173.8.9s47.7 72.6-.3 99.9c-48.1 27.3-125.9 27-173.8-.9-48-27.8-47.8-72.6.3-99.9z\"/><path d=\"M193 61.4c48.1-27.3 125.9-27 173.8.9s47.7 72.6-.3 99.9c-48.1 27.3-125.9 27-173.8-.9-48-27.9-47.8-72.6.3-99.9z\" style=\"fill-rule:evenodd;clip-rule:evenodd;fill:#f46138\"/><path class=\"st21\" d=\"M196.3 134.7c12.4 9.8 17.2 22 12.3 27.1-4.7 5-16.5 2.1-27-5.7-10.5-7.9-17.6-19.5-14.5-26.2 3.4-6.9 16.7-5.1 29.2 4.8z\"/><path class=\"st21\" d=\"M199.3 55.4c39.8-22.6 104.3-22.3 143.9.7s39.5 60.1-.3 82.7-104.3 22.3-143.9-.7c-39.6-23.1-39.5-60.1.3-82.7z\"/><path d=\"M210.5 58.1c39.8-22.6 104.3-22.3 143.9.7 39.7 23 39.5 60.1-.3 82.7s-104.3 22.3-143.9-.7c-39.7-23-39.5-60 .3-82.7z\" style=\"fill-rule:evenodd;clip-rule:evenodd;fill:#f68737\"/><path class=\"st26\" d=\"M162.8 155.6c-.2-.1-.3-.1-.5-.2-3.1-1.1-5.6 1.2-5.6 5.2v53.9c2.9 4.4 6.7 8.6 11.2 12.6v-62.6c.1-3.8-2.2-7.6-5.1-8.9zM212 181c-4.4-.9-8 2.4-8 7.3V248c5.1 2 10.5 3.7 15.9 5.1v-61.7c0-4.8-3.5-9.5-7.9-10.4zM382.4 155.2c-2.8.9-5 4.9-5 8.8v65c3.8-2.8 7.2-5.8 10.1-8.9v-59.5c0-4-2.3-6.4-5.1-5.4zM332 180.8c-4.6.8-8.3 5.4-8.3 10.3v62.2c5.7-1.5 11.3-3.3 16.6-5.4v-59.6c0-4.9-3.8-8.3-8.3-7.5zM272 186.4c-5.6 0-10.2 4.6-10.2 10.2v63c6.8.3 13.6.3 20.4 0v-63c0-5.6-4.6-10.2-10.2-10.2z\"/><path class=\"st27\" d=\"M412.9 636.9h-8.7c-4.5-26.5-17.3-51.2-36.5-70.3s-44-31.7-70.5-36.1v-9.3c0-4.5-3.6-8.1-8.1-8.1h-27c-4.5 0-8.1 3.6-8.1 8.1v9.5c-26.2 4.6-50.8 17.3-69.7 36.3-19 19-31.6 43.6-36.1 69.8h-9.7c-4.5 0-8.1 3.6-8.1 8.1v27c0 4.5 3.6 8.1 8.1 8.1h9.6c4.4 26.3 17 51 36 70.1s43.6 31.9 69.9 36.5v9c0 4.5 3.6 8.1 8.1 8.1h27c4.5 0 8.1-3.6 8.1-8.1v-8.8c26.6-4.4 51.4-17.1 70.6-36.2 19.2-19.2 32-44 36.4-70.5h8.6c4.5 0 8.1-3.6 8.1-8.1v-27c.1-4.5-3.5-8.1-8-8.1zM297.2 741.2v-24.7c0-4.5-3.6-8.1-8.1-8.1h-27c-4.5 0-8.1 3.6-8.1 8.1v24.4c-29.3-8-52.5-31.4-60.2-60.8h23.8c4.5 0 8.1-3.6 8.1-8.1v-27c0-4.5-3.6-8.1-8.1-8.1h-23.7c3.8-14.4 11.3-27.5 22-38.2s23.7-18.3 38.1-22.2v23.8c0 4.5 3.6 8.1 8.1 8.1h27c4.5 0 8.1-3.6 8.1-8.1v-24.1c29.7 7.6 53.4 31 61.2 60.7h-24.7c-4.5 0-8.1 3.6-8.1 8.1v27c0 4.5 3.6 8.1 8.1 8.1h24.8c-7.8 29.9-31.5 53.4-61.3 61.1z\"/><path class=\"st27\" d=\"M276.1 619.5c-21.6 0-39.2 17.6-39.2 39.2s17.6 39.2 39.2 39.2 39.2-17.6 39.2-39.2-17.6-39.2-39.2-39.2z\"/><path class=\"st28\" d=\"M397.1 645c-6.3-56.5-51.5-101.4-108.1-107.4v-16.4h-27v16.6c-56 6.5-100.6 51.2-106.9 107.3h-16.7v27h16.7c6.1 56.3 50.8 101.2 107 107.6v16h27v-15.9c56.7-6 101.9-51.1 108.1-107.8h15.7v-27h-15.8zM289 751.1v-34.5h-27V751c-40.4-6.1-72.4-38.4-78.2-78.9h33.7v-27h-33.7c6-40.4 37.9-72.4 78.2-78.5v33.8h27v-34c40.9 5.7 73.3 37.9 79.4 78.7h-34.6v27h34.7c-5.9 40.8-38.5 73.3-79.5 79z\"/><circle class=\"st28\" cx=\"276.3\" cy=\"658.9\" r=\"30.2\"/></svg>",
                    "width": 563,
                    "height": 950,
                    "mimetype": "svg+xml"
                });
            }, true);

            var fetch_i_g_drink_coin_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/drink_coin.svg', {
                    "data": "<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0\" y=\"0\" width=\"563\" height=\"950\" style=\"enable-background:new 0 0 563 950\" xml:space=\"preserve\"><style>.st2,.st3,.st4{fill-rule:evenodd;clip-rule:evenodd;fill:#66d5ff}.st3,.st4{fill:#0083ff}.st4{fill:#0059b4}.st5{opacity:.5;fill:#66d5ff;enable-background:new}.st16,.st19,.st20,.st5{fill-rule:evenodd;clip-rule:evenodd}.st16{opacity:.65;fill:#113972;enable-background:new}.st19,.st20{fill:#d64c30}.st20{fill:#ffd665}.st25{fill:#ad3b27}.st32{fill:#ffcd04}.st35{fill:#fff}</style><path d=\"M278.6 677.4c131.5 0 238 56.2 238 125.6S410 928.6 278.6 928.6s-238-56.2-238-125.6 106.5-125.6 238-125.6z\" style=\"opacity:.5;fill-rule:evenodd;clip-rule:evenodd;fill:#998d9d;enable-background:new\"/><path d=\"M277.6 919.4c-73.2 0-193.8-24.6-213.5-110.2-37.1-46.8-23-104.4 21.2-140.8v-18.7c-.1-1.9-.2-3.7-.2-5.5V448.9C56 418.3 47.4 374.6 70.4 337.6c-8.8-23.7-8.9-48.6-.2-72.5 9.5-26 29.2-49.7 57.1-68.4 3.6-2.4 7.4-4.8 11.3-7.1V110.2c1.4-35.9 36.9-59.1 67.4-69.6 33.9-15 75.5-16.7 111.2-7.6 38.8 6.4 94 28.4 99.1 74.3.2.9.3 1.8.3 2.8v79c0 .6-.1 1.3-.1 1.9 0 .4-.1.8-.1 1.3 2.6 1.6 5.1 3.2 7.5 4.8 53.2 35.9 75 88.3 58 138.2 25 37.5 19.7 80.8-14.1 115.3v188.3c.3 3.7.3 7.4 0 11.1v20.1c22.4 19 36.4 41.2 40.7 64.7 4.4 24.3-1.7 48.6-17.7 70.7-15.4 88.4-140.1 113.9-213.2 113.9z\" style=\"fill:#00345a\"/><path class=\"st2\" d=\"M133.1 708.9c79.2-45.3 208.1-45.2 287.6.4 79.4 45.5 78.8 119-.9 163.9-79.4 44.7-207.5 44.2-286.4-.9-78.9-45.3-79.2-118.3-.3-163.4z\"/><path class=\"st3\" d=\"M132.8 703.6c79.1-43.5 207.8-43.4 287 .4 79.3 43.8 78.7 114.3-.9 157.5-79.3 43-207.1 42.5-285.9-.9-78.7-43.4-79-113.6-.2-157z\"/><path class=\"st2\" d=\"M118.4 659.2c86.7-49.5 227.8-49.4 314.7.4 86.9 49.8 86.3 130.2-1 179.4-86.9 48.9-227.1 48.4-313.4-1-86.4-49.5-86.7-129.4-.3-178.8z\"/><path class=\"st3\" d=\"M122.9 667.1c82.2-46.9 215.8-46.8 298.2.4 82.3 47.2 81.8 123.4-.9 169.9-82.4 46.4-215.2 45.9-297-1-81.9-46.8-82.1-122.5-.3-169.3z\"/><path class=\"st4\" d=\"M142.4 707.3c70.6-33.8 185.6-33.8 256.4.3s70.3 89-.8 122.5c-70.8 33.4-185 33.1-255.3-.7-70.4-33.8-70.6-88.4-.3-122.1z\"/><path class=\"st5\" d=\"M109.5 789c13.7-.5 30 9.2 36.4 21.6 6.4 12.4.5 22.8-13.2 23.2-13.6.4-29.8-9.3-36.2-21.6-6.4-12.4-.6-22.8 13-23.2z\"/><path class=\"st2\" d=\"M108.2 792.4c9.5-1.6 21.7 3.6 27.4 11.6 5.6 8 2.5 15.7-7.1 17.3-9.5 1.5-21.6-3.7-27.2-11.6-5.6-8-2.6-15.7 6.9-17.3z\"/><defs><path id=\"SVGID_1_\" d=\"M118.4 659.2c86.7-49.5 227.8-49.4 314.7.4 86.9 49.8 86.3 130.2-1 179.4-86.9 48.9-227.1 48.4-313.4-1-86.4-49.5-86.7-129.4-.3-178.8z\"/></defs><clipPath id=\"SVGID_00000101098231772809851510000008228563426059409340_\"><use xlink:href=\"#SVGID_1_\" style=\"overflow:visible\"/></clipPath><g style=\"opacity:.65;clip-path:url(#SVGID_00000101098231772809851510000008228563426059409340_)\"><path d=\"M148.4 646.7c83.1-41 218.3-40.9 301.7.4 83.3 41.3 82.7 107.9-1 148.6-83.3 40.5-217.7 40.1-300.4-.9-82.8-40.9-83.1-107.2-.3-148.1z\" style=\"opacity:.5;fill-rule:evenodd;clip-rule:evenodd;fill:#113972;enable-background:new\"/></g><defs><path id=\"SVGID_00000050654942348291197350000014187124036877064383_\" d=\"M455.8 704.2v-339H97.3v345.4c-.2 26.4 17.3 52.8 52.5 72.9 69.8 40 183.1 40.4 253.4.8 38.7-21.8 56.3-51.3 52.6-80.1z\"/></defs><clipPath id=\"SVGID_00000147182071424634603550000001931801582561609135_\"><use xlink:href=\"#SVGID_00000050654942348291197350000014187124036877064383_\" style=\"overflow:visible\"/></clipPath><path style=\"clip-path:url(#SVGID_00000147182071424634603550000001931801582561609135_);fill-rule:evenodd;clip-rule:evenodd;fill:#ece8f5\" d=\"M455.8 704.2v-339H97.3v345.4c-.2 26.4 17.3 52.8 52.5 72.9 69.8 40 183.1 40.4 253.4.8 38.7-21.8 56.3-51.3 52.6-80.1z\"/><defs><path id=\"SVGID_00000059281808670326828410000011876746408369198491_\" d=\"M455.8 704.2v-339H97.3v345.4c-.2 26.4 17.3 52.8 52.5 72.9 69.8 40 183.1 40.4 253.4.8 38.7-21.8 56.3-51.3 52.6-80.1z\"/></defs><clipPath id=\"SVGID_00000102521755502162410130000004266909795389578659_\"><use xlink:href=\"#SVGID_00000059281808670326828410000011876746408369198491_\" style=\"overflow:visible\"/></clipPath><path style=\"clip-path:url(#SVGID_00000102521755502162410130000004266909795389578659_);fill-rule:evenodd;clip-rule:evenodd;fill:#dcd3eb\" d=\"M461.4 731.9V299.6l-138 60.6v430.7c-.1 33 6.5 63.5 19.8 84 26.5 40.8 70.1 26.8 97.5-33.2 15.3-33.4 22.2-73.5 20.7-109.8z\"/><defs><path id=\"SVGID_00000007426764491488782060000009677560223154503591_\" d=\"M455.8 704.2v-339H97.3v345.4c-.2 26.4 17.3 52.8 52.5 72.9 69.8 40 183.1 40.4 253.4.8 38.7-21.8 56.3-51.3 52.6-80.1z\"/></defs><clipPath id=\"SVGID_00000021803936778446094620000002304583496516410526_\"><use xlink:href=\"#SVGID_00000007426764491488782060000009677560223154503591_\" style=\"overflow:visible\"/></clipPath><path style=\"clip-path:url(#SVGID_00000021803936778446094620000002304583496516410526_);fill-rule:evenodd;clip-rule:evenodd;fill:#fcfdfe\" d=\"M267.4 750.7V356.6h-136v401.1c-.1 30.6 6.6 61.3 19.9 84.7 26.5 46.5 69.5 47 96.2 1 14.6-25.3 21.3-59.3 19.9-92.7z\"/><defs><path id=\"SVGID_00000145020644965417463410000005303382120474363042_\" d=\"M455.8 704.2v-339H97.3v345.4c-.2 26.4 17.3 52.8 52.5 72.9 69.8 40 183.1 40.4 253.4.8 38.7-21.8 56.3-51.3 52.6-80.1z\"/></defs><clipPath id=\"SVGID_00000034087254589367558530000003910227255687866768_\"><use xlink:href=\"#SVGID_00000145020644965417463410000005303382120474363042_\" style=\"overflow:visible\"/></clipPath><path style=\"opacity:.5;clip-path:url(#SVGID_00000034087254589367558530000003910227255687866768_);fill:#beb0d9;enable-background:new\" d=\"M455.6 443c-3 23.9-20.6 47.3-52.7 65.4-70.3 39.6-183.6 39.2-253.4-.8-32.2-18.5-49.6-42.2-52.1-66.3H97v201.4c-.2 26.4 17.3 52.8 52.5 72.9 69.8 40 183.1 40.4 253.4.8 38.8-21.9 56.4-51.3 52.7-80.2V443z\"/><defs><path id=\"SVGID_00000005948036211826071130000006888852587593486001_\" d=\"M455.8 704.2v-339H97.3v345.4c-.2 26.4 17.3 52.8 52.5 72.9 69.8 40 183.1 40.4 253.4.8 38.7-21.8 56.3-51.3 52.6-80.1z\"/></defs><clipPath id=\"SVGID_00000090271441978854520490000011144467511810795948_\"><use xlink:href=\"#SVGID_00000005948036211826071130000006888852587593486001_\" style=\"overflow:visible\"/></clipPath><path style=\"clip-path:url(#SVGID_00000090271441978854520490000011144467511810795948_);fill-rule:evenodd;clip-rule:evenodd;fill:#fff\" d=\"M122.2 714.3v-339h-15.3v345.4c0 26.4.7 52.8 2.2 72.9 3 40 7.8 40.4 10.8.8 1.7-21.8 2.5-51.3 2.3-80.1z\"/><defs><path id=\"SVGID_00000137815252360631326280000015005488765409448332_\" d=\"M455.8 704.2v-339H97.3v345.4c-.2 26.4 17.3 52.8 52.5 72.9 69.8 40 183.1 40.4 253.4.8 38.7-21.8 56.3-51.3 52.6-80.1z\"/></defs><clipPath id=\"SVGID_00000121258743532321135070000006071223558245076636_\"><use xlink:href=\"#SVGID_00000137815252360631326280000015005488765409448332_\" style=\"overflow:visible\"/></clipPath><path style=\"clip-path:url(#SVGID_00000121258743532321135070000006071223558245076636_);fill-rule:evenodd;clip-rule:evenodd;fill:#fff\" d=\"M448.9 679V340h-15.3v345.4c0 26.4.7 52.8 2.2 72.9 3 40 7.8 40.4 10.8.8 1.7-21.8 2.4-51.3 2.3-80.1z\"/><defs><path id=\"SVGID_00000115490773151481842930000008990335647399159217_\" d=\"M455.8 704.2v-339H97.3v345.4c-.2 26.4 17.3 52.8 52.5 72.9 69.8 40 183.1 40.4 253.4.8 38.7-21.8 56.3-51.3 52.6-80.1z\"/></defs><clipPath id=\"SVGID_00000036945817653188077570000007860981821438208696_\"><use xlink:href=\"#SVGID_00000115490773151481842930000008990335647399159217_\" style=\"overflow:visible\"/></clipPath><path style=\"opacity:.5;clip-path:url(#SVGID_00000036945817653188077570000007860981821438208696_);fill:#4a4556;enable-background:new\" d=\"M292.5 363c-102-5.8-186.6 22.8-188.9 63.9-2.3 41.1 78.5 79.1 180.5 84.9 76 4.3 142.4-10.5 172.2-35.3v-62.2c-28.6-26.5-90.7-47.1-163.8-51.3z\"/><path class=\"st2\" d=\"M129.2 299c81.4-46.5 213.9-46.4 295.5.4s81 122.3-.9 168.5c-81.6 46-213.3 45.5-294.3-1-81.2-46.4-81.4-121.5-.3-167.9z\"/><path class=\"st3\" d=\"M133.4 303.4c77.2-44.1 202.7-44 280.1.4 77.3 44.4 76.8 115.9-.9 159.6-77.4 43.6-202.1 43.1-278.9-.9-76.9-44-77.1-115.2-.3-159.1z\"/><path class=\"st4\" d=\"M151.8 344.1c66.3-31.8 174.3-31.7 240.8.3s66 83.5-.8 115.1c-66.5 31.4-173.8 31.1-239.8-.7-66.1-31.7-66.3-83-.2-114.7z\"/><path class=\"st5\" d=\"M120.9 420.9c12.8-.5 28.2 8.6 34.2 20.3 6 11.7.4 21.4-12.4 21.8-12.8.4-28-8.7-34-20.3-6.1-11.6-.6-21.4 12.2-21.8z\"/><path class=\"st2\" d=\"M119.6 424.1c8.9-1.5 20.4 3.4 25.7 10.9s2.3 14.8-6.6 16.2c-8.9 1.4-20.3-3.4-25.6-10.9-5.3-7.5-2.4-14.7 6.5-16.2z\"/><defs><path id=\"SVGID_00000019649069249310205950000006013537124480249258_\" d=\"M129.2 299c81.4-46.5 213.9-46.4 295.5.4s81 122.3-.9 168.5c-81.6 46-213.3 45.5-294.3-1-81.2-46.4-81.4-121.5-.3-167.9z\"/></defs><clipPath id=\"SVGID_00000121243870515719110940000001275202975667945886_\"><use xlink:href=\"#SVGID_00000019649069249310205950000006013537124480249258_\" style=\"overflow:visible\"/></clipPath><g style=\"opacity:.5;clip-path:url(#SVGID_00000121243870515719110940000001275202975667945886_)\"><path class=\"st16\" d=\"M157.4 287.3c78.1-38.6 205-38.5 283.3.3 78.2 38.8 77.7 101.3-.9 139.6-78.3 38.1-204.4 37.7-282.1-.8-77.8-38.5-78.1-100.7-.3-139.1z\"/><path class=\"st16\" d=\"M141.3 275.3c74.8-40.5 196.4-40.4 271.4.4 74.9 40.7 74.4 106.4-.9 146.5-75 40-195.8 39.5-270.3-.8-74.5-40.5-74.7-105.8-.2-146.1z\"/></g><path class=\"st2\" d=\"M133.9 205.7c78.1-52.4 205-52.3 283.3.5 78.2 52.7 77.7 137.7-.9 189.7-78.3 51.8-204.4 51.2-282.1-1.1-77.8-52.4-78.1-136.9-.3-189.1z\"/><path class=\"st3\" d=\"M135.8 212.3c72.7-48.8 190.9-48.7 263.7.4s72.3 128.2-.8 176.6c-72.9 48.2-190.3 47.7-262.7-1-72.3-48.6-72.5-127.4-.2-176z\"/><path class=\"st4\" d=\"M176.6 260.4c56.1-37.7 147.4-37.6 203.7.3s55.9 99-.6 136.3c-56.3 37.2-147 36.8-202.9-.8-56-37.5-56.1-98.3-.2-135.8z\"/><path class=\"st5\" d=\"M141.1 270c46.2-7.8 105.9 17.5 133.4 56.5 27.4 39 11.9 76.7-34.4 84.2-46.1 7.5-105.5-17.9-132.7-56.6-27.3-38.7-12.3-76.4 33.7-84.1z\"/><path class=\"st2\" d=\"M137.6 280.8c25.3-4.3 58 9.6 73 30.9s6.5 42-18.8 46.1c-25.2 4.1-57.7-9.8-72.6-31-15-21.2-6.8-41.8 18.4-46z\"/><defs><path id=\"SVGID_00000175316391559803652710000012639490508685570237_\" d=\"M133.9 205.7c78.1-52.4 205-52.3 283.3.5 78.2 52.7 77.7 137.7-.9 189.7-78.3 51.8-204.4 51.2-282.1-1.1-77.8-52.4-78.1-136.9-.3-189.1z\"/></defs><clipPath id=\"SVGID_00000046305827496173813670000018145995159899421568_\"><use xlink:href=\"#SVGID_00000175316391559803652710000012639490508685570237_\" style=\"overflow:visible\"/></clipPath><path style=\"opacity:.65;clip-path:url(#SVGID_00000046305827496173813670000018145995159899421568_);fill-rule:evenodd;clip-rule:evenodd;fill:#113972;enable-background:new\" d=\"M203.1 152.5c60.5-29.5 158.9-23.4 219.5 13.6s60.2 90.8-.7 120c-60.6 29.1-158.4 22.8-218.6-14-60.3-36.7-60.5-90.2-.2-119.6z\"/><path d=\"M208.4 182.2c38-21.6 99.9-21.5 138.1.2 38.1 21.7 37.9 56.8-.4 78.2-38.1 21.3-99.6 21.1-137.5-.4-37.9-21.7-38.1-56.5-.2-78z\" style=\"fill-rule:evenodd;clip-rule:evenodd;fill:#00acff\"/><path class=\"st19\" d=\"M158.9 109.2h245.7v79H158.9v-79z\"/><path class=\"st20\" d=\"M186.6 138.8c48.1-27.3 125.9-27 173.8.9s47.7 72.6-.3 99.9c-48.1 27.3-125.9 27-173.8-.9-47.9-27.8-47.7-72.5.3-99.9z\"/><path class=\"st20\" d=\"M150.5 110.3h245.7v79H150.5v-79z\"/><path class=\"st20\" d=\"M186.6 61.3c48.1-27.3 125.9-27 173.8.9s47.7 72.6-.3 99.9c-48.1 27.3-125.9 27-173.8-.9-47.9-27.8-47.7-72.5.3-99.9z\"/><path class=\"st19\" d=\"M158.6 113.5h241.2v74.2H158.6v-74.2z\"/><path class=\"st19\" d=\"M195 135.3c48.1-27.3 125.9-27 173.8.9s47.7 72.6-.3 99.9c-48.1 27.3-125.9 27-173.8-.9-47.9-27.8-47.8-72.5.3-99.9z\"/><path d=\"M195 114.4c48.1-27.3 125.9-27 173.8.9s47.7 72.6-.3 99.9c-48.1 27.3-125.9 27-173.8-.9-47.9-27.8-47.8-72.6.3-99.9z\" style=\"opacity:.5;fill-rule:evenodd;clip-rule:evenodd;fill:#ad3b27;enable-background:new\"/><path d=\"m179.2 156.9 16 9c1.2.7 2.2 2.2 2.2 3.4l.7 60.7c0 1.2-1 1.6-2.2.9l-16-9c-1.2-.7-2.2-2.2-2.2-3.4l-.7-60.7c0-1.2 1-1.6 2.2-.9z\" style=\"fill-rule:evenodd;clip-rule:evenodd;fill:#f7943c\"/><path class=\"st20\" d=\"M188 63.7c48.1-27.3 125.9-27 173.8.9s47.7 72.6-.3 99.9c-48.1 27.3-125.9 27-173.8-.9S140 91 188 63.7z\"/><path d=\"M195 61.3c48.1-27.3 125.9-27 173.8.9s47.7 72.6-.3 99.9c-48.1 27.3-125.9 27-173.8-.9-47.9-27.8-47.8-72.5.3-99.9z\" style=\"fill-rule:evenodd;clip-rule:evenodd;fill:#f46138\"/><path class=\"st20\" d=\"M198.4 134.7c12.4 9.8 17.2 22 12.3 27.1-4.7 5-16.5 2.1-27-5.7-10.5-7.9-17.6-19.5-14.5-26.2 3.3-6.9 16.7-5.1 29.2 4.8z\"/><path class=\"st20\" d=\"M201.4 55.3c39.8-22.6 104.3-22.3 143.9.7s39.5 60.1-.3 82.7-104.3 22.3-143.9-.7c-39.7-23-39.5-60 .3-82.7z\"/><path d=\"M212.6 58.1c39.8-22.6 104.3-22.3 143.9.7 39.7 23 39.5 60.1-.3 82.7s-104.3 22.3-143.9-.7c-39.7-23-39.6-60 .3-82.7z\" style=\"fill-rule:evenodd;clip-rule:evenodd;fill:#f68737\"/><path class=\"st25\" d=\"M164.9 155.6c-.2-.1-.3-.1-.5-.2-3.1-1.1-5.6 1.2-5.6 5.2v53.9c2.9 4.4 6.7 8.6 11.2 12.6v-62.6c0-3.8-2.2-7.6-5.1-8.9zM214 181c-4.4-.9-8 2.4-8 7.3V248c5.1 2 10.5 3.7 15.9 5.1v-61.7c.1-4.8-3.5-9.5-7.9-10.4zM384.5 155.1c-2.8.9-5 4.9-5 8.8v65c3.8-2.8 7.2-5.8 10.1-8.9v-59.5c-.1-3.9-2.3-6.3-5.1-5.4zM334 180.8c-4.6.8-8.3 5.4-8.3 10.3v62.2c5.7-1.5 11.3-3.3 16.6-5.4v-59.6c0-4.9-3.7-8.3-8.3-7.5zM274.1 186.4c-5.6 0-10.2 4.6-10.2 10.2v63c6.8.3 13.6.3 20.4 0v-63c-.1-5.6-4.6-10.2-10.2-10.2z\"/><ellipse transform=\"rotate(-77.889 277.504 660.38)\" cx=\"277.5\" cy=\"660.4\" rx=\"149.3\" ry=\"152.1\" style=\"fill:#543f1f\"/><linearGradient id=\"SVGID_00000110430894588857789920000016403844118311324331_\" gradientUnits=\"userSpaceOnUse\" x1=\"-5446.596\" y1=\"2523.414\" x2=\"-5446.596\" y2=\"2378.849\" gradientTransform=\"scale(-1 1) rotate(-12.111 -10940.61 -22793.215)\"><stop offset=\"0\" style=\"stop-color:#c14211\"/><stop offset=\"1\" style=\"stop-color:#fd9809\"/></linearGradient><path style=\"fill:url(#SVGID_00000110430894588857789920000016403844118311324331_)\" d=\"M316.8 530.4c71.2 15.3 116 87.7 100.2 161.7s-86.5 121.6-157.7 106.4c-71.2-15.3-116-87.7-100.2-161.7s86.5-121.7 157.7-106.4z\"/><linearGradient id=\"SVGID_00000181773558357250787540000003200023065430424198_\" gradientUnits=\"userSpaceOnUse\" x1=\"-5424.012\" y1=\"2533.842\" x2=\"-5424.012\" y2=\"2207.073\" gradientTransform=\"scale(-1 1) rotate(-12.111 -10940.61 -22793.215)\"><stop offset=\"0\" style=\"stop-color:#c14211\"/><stop offset=\".434\" style=\"stop-color:#fb9509\"/><stop offset=\".829\" style=\"stop-color:#ffcd04\"/><stop offset=\".999\" style=\"stop-color:#fcee21\"/></linearGradient><path style=\"fill:url(#SVGID_00000181773558357250787540000003200023065430424198_)\" d=\"M137.3 630.3c15.9-74.1 90-119.4 161.1-104.2 71.1 15.3 112.8 85.5 96.9 159.5-15.9 74.1-86.6 121.6-157.7 106.4-71.1-15.3-116.2-87.8-100.3-161.7z\"/><linearGradient id=\"SVGID_00000142142798983727355260000001634760701552449438_\" gradientUnits=\"userSpaceOnUse\" x1=\"-5423.606\" y1=\"2248.165\" x2=\"-5428.188\" y2=\"2293.979\" gradientTransform=\"scale(-1 1) rotate(-12.111 -10940.61 -22793.215)\"><stop offset=\"0\" style=\"stop-color:#ffed51;stop-opacity:0\"/><stop offset=\".615\" style=\"stop-color:#fff\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.87\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.7093\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.5322\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.3434\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:.1476\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><path style=\"opacity:.64;fill:url(#SVGID_00000142142798983727355260000001634760701552449438_);enable-background:new\" d=\"M148.7 638.4c15.9-74.1 90-119.4 161.1-104.2 71.1 15.3 112.8 85.5 96.9 159.5S320.1 815.4 249 800.1c-71.5-15.3-116.2-87.7-100.3-161.7z\"/><ellipse transform=\"rotate(-77.889 280.836 659.96)\" cx=\"280.8\" cy=\"659.9\" rx=\"137.1\" ry=\"131.9\" style=\"opacity:.53;fill:#c14211;enable-background:new\"/><linearGradient id=\"SVGID_00000063606946717290138220000010401904393625063588_\" gradientUnits=\"userSpaceOnUse\" x1=\"-5393.986\" y1=\"2231.391\" x2=\"-5494.331\" y2=\"2501.86\" gradientTransform=\"scale(-1 1) rotate(-12.111 -10940.61 -22793.215)\"><stop offset=\"0\" style=\"stop-color:#fff\"/><stop offset=\".275\" style=\"stop-color:#ffffa6\"/><stop offset=\"1\" style=\"stop-color:#ffdc00\"/></linearGradient><path style=\"fill:url(#SVGID_00000063606946717290138220000010401904393625063588_)\" d=\"M317.6 526.6c71.2 15.3 116 87.7 100.2 161.7S331.2 810 260 794.7C188.8 779.4 144 707 159.9 633s86.5-121.6 157.7-106.4z\"/><path class=\"st32\" d=\"M162.4 633.5c15.3-70.5 83.1-113.8 153-98.8s115.1 80.6 99.6 153-84.6 119.1-154.5 104.1c-69.7-15-113.7-85.7-98.1-158.3z\"/><linearGradient id=\"SVGID_00000158012482812502903390000017666551616477649567_\" gradientUnits=\"userSpaceOnUse\" x1=\"279.757\" y1=\"2335.064\" x2=\"294.234\" y2=\"2404.785\" gradientTransform=\"rotate(12.111 8360.034 1522.734)\"><stop offset=\"0\" style=\"stop-color:#ffed51;stop-opacity:0\"/><stop offset=\".615\" style=\"stop-color:#fff;stop-opacity:.5\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.435\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.3546\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.2661\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.1717\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:7.378837e-02\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><path style=\"opacity:.65;fill:url(#SVGID_00000158012482812502903390000017666551616477649567_);enable-background:new\" d=\"M317 529.4c69.7 15 113.7 85.9 98.1 158.3-15.6 72.5-84.7 119.1-154.5 104.1S147 706.1 162.5 633.6 247.2 514.5 317 529.4z\"/><g style=\"opacity:.43\"><path class=\"st35\" d=\"m158.2 681.6 260.3 4c2.7-13.5 3.4-27 2.1-40.2l-262.4-4c-1.9 13.7-1.9 27.3 0 40.2z\"/><linearGradient id=\"SVGID_00000101786236329853476580000015992437980234883753_\" gradientUnits=\"userSpaceOnUse\" x1=\"286.663\" y1=\"2367.773\" x2=\"289.569\" y2=\"2381.212\" gradientTransform=\"rotate(12.111 8360.019 1522.883)\"><stop offset=\"0\" style=\"stop-color:#ffed51;stop-opacity:0\"/><stop offset=\".615\" style=\"stop-color:#fff\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.87\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.7093\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.5322\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.3434\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:.1476\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><path style=\"opacity:.64;fill:url(#SVGID_00000101786236329853476580000015992437980234883753_);enable-background:new\" d=\"m158.2 681.6 260.3 4c2.7-13.5 3.4-27 2.1-40.2l-262.4-4c-1.9 13.7-1.9 27.3 0 40.2z\"/><linearGradient id=\"SVGID_00000136404486095457756940000017594493745565283714_\" gradientUnits=\"userSpaceOnUse\" x1=\"286.663\" y1=\"2367.773\" x2=\"289.569\" y2=\"2381.212\" gradientTransform=\"rotate(12.111 8360.019 1522.883)\"><stop offset=\"0\" style=\"stop-color:#ffed51;stop-opacity:0\"/><stop offset=\".615\" style=\"stop-color:#fff\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.87\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.7093\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.5322\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.3434\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:.1476\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><path style=\"opacity:.64;fill:url(#SVGID_00000136404486095457756940000017594493745565283714_);enable-background:new\" d=\"m158.2 681.6 260.3 4c2.7-13.5 3.4-27 2.1-40.2l-262.4-4c-1.9 13.7-1.9 27.3 0 40.2z\"/><path class=\"st35\" d=\"M409.8 645.2s10.8-2.6 8.3-14.6 2.4 14.6 2.4 14.6h-10.7zM406.7 685.5s10.2.7 8.9 12.3c0 0 1.2-4.6 2.9-12.2l-11.8-.1zM168.6 641.5s-10.7-3.9-8.4-11.4c0 0-1.6 6.8-2.1 11.2l10.5.2zM158.2 681.6l8.9.1s-7.1.7-7.4 10.2l-1.5-10.3z\"/></g><ellipse transform=\"rotate(-77.889 288.385 660.284)\" cx=\"288.4\" cy=\"660.3\" rx=\"103.6\" ry=\"99.8\" style=\"opacity:.45;fill:#fd9809;enable-background:new\"/><linearGradient id=\"SVGID_00000168078801526392692970000001463700458104705467_\" gradientUnits=\"userSpaceOnUse\" x1=\"-5446.12\" y1=\"2286.126\" x2=\"-5446.12\" y2=\"2471.964\" gradientTransform=\"scale(-1 1) rotate(-12.111 -10940.61 -22793.215)\"><stop offset=\"0\" style=\"stop-color:#ffffa6\"/><stop offset=\"1\" style=\"stop-color:#ffdc00\"/></linearGradient><path style=\"fill:url(#SVGID_00000168078801526392692970000001463700458104705467_)\" d=\"M308.6 566.2c49.9 10.7 81.3 61.5 70.1 113.4-11.1 51.9-60.6 85.4-110.5 74.7-49.9-10.7-81.3-61.5-70.1-113.4 11.1-52 60.6-85.4 110.5-74.7z\"/><ellipse transform=\"rotate(-77.889 288.783 660.694)\" cx=\"288.8\" cy=\"660.7\" rx=\"93.5\" ry=\"90\" style=\"fill:#c14211\"/><linearGradient id=\"SVGID_00000167371864059405751880000010279843386653680554_\" gradientUnits=\"userSpaceOnUse\" x1=\"-5405.238\" y1=\"2244.983\" x2=\"-5466.515\" y2=\"2454.091\" gradientTransform=\"scale(-1 1) rotate(-12.111 -10940.61 -22793.215)\"><stop offset=\"0\" style=\"stop-color:#ffcd04\"/><stop offset=\".532\" style=\"stop-color:#fd9809\"/><stop offset=\".746\" style=\"stop-color:#d96111\"/><stop offset=\".805\" style=\"stop-color:#da6510;stop-opacity:.9179\"/><stop offset=\".862\" style=\"stop-color:#dc700e;stop-opacity:.8405\"/><stop offset=\".916\" style=\"stop-color:#df830a;stop-opacity:.765\"/><stop offset=\".97\" style=\"stop-color:#e49e04;stop-opacity:.6912\"/><stop offset=\"1\" style=\"stop-color:#e7b000;stop-opacity:.65\"/></linearGradient><path style=\"opacity:.6;fill:url(#SVGID_00000167371864059405751880000010279843386653680554_);enable-background:new\" d=\"M200.1 644.7c12.2-56.9 57.2-83 104.8-72.8 47.6 10.2 75.5 56.7 65.5 105.6-10.6 53-58.5 79.8-106 69.6-47-10-74.7-53.6-64.3-102.4z\"/><path d=\"M353.4 656.5c-.2-1.3-.8-2.4-1.3-3.8-4.7-12.7-14.4-22.9-27.6-26.8-16.2-5.3-33.7.1-45.8 12.4l-20.1 19.8-5.8 5.7c-12.4 11.8-29.1-4.9-17.9-17.8 4.7-5.5 13.5-5.5 18.2 0 1 1.4 1.9 3 2.7 4.8l17.4-17.5c-5-7.6-12.9-13-21.8-14.9-28.2-6.2-52.3 23.9-40.9 51 9.7 23.6 38.5 29.8 57.3 12.5l18.2-18.1c1.3-1.3 4.4-4.4 5.8-5.7 3.3-3.5 6.7-6.8 10.8-8.7 15.5-6.7 31.7 7.1 28.2 24.2-3.3 15.2-20.3 22.2-32.7 13.2-5.2-3.7-7.3-9.7-9.4-15.3-.1-.3-.2-.5-.3-.9l-18.6 17.7c2.1 4.7 4.7 8.1 4.7 8.1 5.3 7.6 13.1 13.5 22.1 16.4 33.5 11.4 66.4-21.6 56.8-56.3z\" style=\"fill:#42210b\"/><path class=\"st32\" d=\"M359.7 654.2c-.2-1.3-.8-2.4-1.3-3.8-4.7-12.7-14.4-22.9-27.6-26.8-16.2-5.3-33.7.1-45.8 12.4l-20.1 19.8-5.8 5.7c-12.4 11.8-29.1-4.9-17.9-17.8 4.7-5.5 13.5-5.5 18.2 0 1 1.4 1.9 3 2.7 4.8l17.4-17.5c-5-7.6-12.9-13-21.8-14.9-28.2-6.2-52.3 23.9-40.9 51 9.7 23.6 38.5 29.8 57.3 12.5l18.2-18.1c1.3-1.3 4.4-4.4 5.8-5.7 3.3-3.5 6.7-6.8 10.8-8.7 15.5-6.7 31.7 7.1 28.2 24.2-3.3 15.2-20.3 22.2-32.7 13.2-5.2-3.7-7.3-9.7-9.4-15.3-.1-.3-.2-.5-.3-.9L276.1 686c2.1 4.7 4.7 8.1 4.7 8.1 5.3 7.6 13.1 13.5 22.1 16.4 33.6 11.1 66.4-21.7 56.8-56.3z\"/><g style=\"opacity:.64\"><linearGradient id=\"SVGID_00000062189984134696180990000002363100651137991589_\" gradientUnits=\"userSpaceOnUse\" x1=\"267.003\" y1=\"2325.309\" x2=\"281.406\" y2=\"2397.575\" gradientTransform=\"rotate(12.111 8355.063 1569.582)\"><stop offset=\"0\" style=\"stop-color:#ffed51;stop-opacity:0\"/><stop offset=\".615\" style=\"stop-color:#fff;stop-opacity:.63\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.5481\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.4468\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.3353\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.2164\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:9.297335e-02\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><path style=\"fill:url(#SVGID_00000062189984134696180990000002363100651137991589_)\" d=\"M359.7 654.2c-.2-1.3-.8-2.4-1.3-3.8-4.7-12.7-14.4-22.9-27.6-26.8-16.2-5.3-33.7.1-45.8 12.4l-20.1 19.8-5.8 5.7c-12.4 11.8-29.1-4.9-17.9-17.8 4.7-5.5 13.5-5.5 18.2 0 1 1.4 1.9 3 2.7 4.8l17.4-17.5c-5-7.6-12.9-13-21.8-14.9-28.2-6.2-52.3 23.9-40.9 51 9.7 23.6 38.5 29.8 57.3 12.5l18.2-18.1c1.3-1.3 4.4-4.4 5.8-5.7 3.3-3.5 6.7-6.8 10.8-8.7 15.5-6.7 31.7 7.1 28.2 24.2-3.3 15.2-20.3 22.2-32.7 13.2-5.2-3.7-7.3-9.7-9.4-15.3-.1-.3-.2-.5-.3-.9L276.1 686c2.1 4.7 4.7 8.1 4.7 8.1 5.3 7.6 13.1 13.5 22.1 16.4 33.6 11.1 66.4-21.7 56.8-56.3z\"/></g><linearGradient id=\"SVGID_00000119808263689101315100000016976421056265326220_\" gradientUnits=\"userSpaceOnUse\" x1=\"287.272\" y1=\"603.378\" x2=\"288.64\" y2=\"706.557\" gradientTransform=\"rotate(12.111 277.565 660.525)\"><stop offset=\"0\" style=\"stop-color:#ffffa6\"/><stop offset=\"1\" style=\"stop-color:#ffdc00\"/></linearGradient><path style=\"fill:url(#SVGID_00000119808263689101315100000016976421056265326220_)\" d=\"M327.1 624c1.2.3 2.8.6 4 1 12.4 4 22.1 13.5 26.7 26 .3.9.8 2.1 1.2 3.7 4.3 14.9.4 30.4-10 41.9-10.5 11.9-25.7 17.2-40.4 14-1.4-.3-2.9-.6-4.3-1.1-8.4-2.6-16-8.3-21.2-15.9 0 0-2.2-3.2-4.2-7.1l16.3-15.3c1.9 5.3 4.3 11.1 9.5 14.8 2.5 1.8 5.3 3.1 8.1 3.7 11.9 2.6 24.2-5.3 26.9-17.9 1.3-6.2.2-12.4-3.2-17.7-3.2-4.9-8.1-8.4-13.7-9.6-4.3-.9-8.8-.4-13.3 1.4-4.2 2-7.6 5.2-10.7 8.2l-.7 1c-1.4 1.3-4.3 4.3-5.8 5.7l-18.2 18.1c-8.7 7.9-19.9 11-30.7 8.6-11-2.4-19.9-9.9-24.4-20.8-5-12.1-2.9-25.7 5.4-36.3 4-5.1 8.9-8.8 14.7-11.3 6-2.4 12.5-3 19-1.6h.2c.2 0 .2 0 .3.1 7.6 1.6 14.5 6.4 19.7 13.3L263.2 646c-.7-1.4-1.4-2.6-2.2-3.4-1.8-2.2-4.4-3.7-7-4.3-4.8-1-10 .6-13.2 4.3-3.5 4.3-4.9 9.3-3.4 14.2 1.4 5 5.6 8.8 10.5 9.9 4.5 1 9.1-.7 12.7-4.2l5.8-5.7 20-19.9c11.3-11.1 26.5-16 40.7-12.9m.3-1.4c-15-3.2-30.6 2.2-41.8 13.7l-19.8 19.9-5.8 5.8c-3.7 3.7-8 4.6-11.7 3.8-8.2-1.8-14.2-12.6-6.5-21.7 3-3.6 7.6-4.7 11.7-3.8 2.3.5 4.6 1.8 6.7 3.7 1 1.4 1.9 3 2.7 4.8l17.4-17.5c-5.1-7.4-12.6-12.9-21.5-14.8-.2 0-.2 0-.3-.1-27.9-6-52 24-40.8 51.1 4.9 11.8 14.5 19.3 25.3 21.6 10.7 2.3 22.6-.5 31.9-9l18.2-18.1c1.3-1.3 4.4-4.4 5.8-5.7 3.3-3.5 6.7-6.8 10.8-8.7 4.1-1.9 8.4-2.1 12.1-1.3 10.4 2.2 18.6 13.1 15.9 25.5-2.6 11.9-14 19-25 16.7-2.5-.5-5.2-1.6-7.7-3.4-5.2-3.7-7.3-9.7-9.4-15.3-.1-.3-.2-.5-.3-.9l-18.5 17.6c2.1 4.7 4.7 8.1 4.7 8.1 5.3 7.6 13.1 13.5 22.1 16.4 1.4.5 3.1.8 4.5 1.1 31.5 6.8 61.1-24.7 51.8-57.8-.2-1.3-.8-2.4-1.3-3.8-4.7-12.7-14.4-22.9-27.6-26.8-.9-.5-2.2-.8-3.6-1.1z\"/><g style=\"opacity:.33\"><path class=\"st35\" d=\"M296.1 669.5c-.1-.3-.2-.5-.3-.9L279.4 684l25.9.4c-4.8-3.5-7.1-9.4-9.2-14.9z\"/><path class=\"st35\" d=\"M358 685.4c4.1-9.3 5.3-20.1 2.3-31-.2-1.3-.8-2.4-1.3-3.8-.7-1.9-1.5-3.7-2.4-5.5l-78.9-1-12 12.3-5.8 5.7c-12.4 11.8-29.1-4.9-17.9-17.8.2-.3.4-.4.6-.7l-26.2-.4c-2.2 7.8-2.2 16.4 1.2 24.6 2.8 6.8 7.3 12.1 12.3 15.9l39.9.6c1.7-1.1 3.5-2.5 5.1-3.9l18.2-18.1c1.3-1.3 4.4-4.4 5.8-5.7 3.3-3.5 6.7-6.8 10.8-8.7 15.5-6.7 31.7 7.1 28.2 24.2-1.3 5.9-4.5 10.4-8.9 13.3h29z\"/><path class=\"st35\" d=\"m263.1 648.8 5.2-5.2-8.2-.1c.1.2.3.2.2.4.9 1.3 1.9 3.1 2.8 4.9z\"/></g><linearGradient id=\"SVGID_00000105386334579107460450000017608153686846677404_\" gradientUnits=\"userSpaceOnUse\" x1=\"340.124\" y1=\"2221.741\" x2=\"320.358\" y2=\"2285.601\" gradientTransform=\"rotate(12.111 8359.008 1532.407)\"><stop offset=\".615\" style=\"stop-color:#fff\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.87\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.7093\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.5322\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.3434\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:.1476\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><path style=\"fill:url(#SVGID_00000105386334579107460450000017608153686846677404_)\" d=\"M369.5 573c-3.5 7.2-14.4 8.8-24.3 3.5-9.7-5.2-15.2-15.1-11.6-22.1 3.6-6.9 14.4-8.8 24.3-3.5 9.9 5 15.1 14.9 11.6 22.1z\"/><linearGradient id=\"SVGID_00000170971141069394060870000011658108738482197135_\" gradientUnits=\"userSpaceOnUse\" x1=\"320.553\" y1=\"2314.117\" x2=\"314.463\" y2=\"2347.613\" gradientTransform=\"rotate(12.111 8359.008 1532.407)\"><stop offset=\".615\" style=\"stop-color:#fff\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.87\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.7093\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.5322\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.3434\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:.1476\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><path style=\"fill:url(#SVGID_00000170971141069394060870000011658108738482197135_)\" d=\"M328.2 624.2c5.2 1.1 8.8 5.1 8 8.8-.8 3.8-5.7 5.9-10.9 4.8-5.2-1.1-8.8-5.1-8-8.8.8-3.7 5.7-5.9 10.9-4.8z\"/><linearGradient id=\"SVGID_00000054961865955164622490000017290885042452794251_\" gradientUnits=\"userSpaceOnUse\" x1=\"-85.861\" y1=\"1727.115\" x2=\"-98.522\" y2=\"1796.752\" gradientTransform=\"rotate(23.609 2495.037 2021.396)\"><stop offset=\".615\" style=\"stop-color:#fff\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.87\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.7093\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.5322\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.3434\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:.1476\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><path style=\"opacity:.6;fill:url(#SVGID_00000054961865955164622490000017290885042452794251_);enable-background:new\" d=\"M238.8 764.4c-3.1 7.4-13.4 10.1-22.6 5.8s-14.4-13.6-11.1-21c3.1-7.4 13.4-10.1 22.6-5.8 9.5 4.1 14.5 13.6 11.1 21z\"/></svg>",
                    "width": 563,
                    "height": 950,
                    "mimetype": "svg+xml"
                });
            }, true);

            var fetch_i_g_drink_points_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/drink_points.svg', {
                    "data": "<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0\" y=\"0\" width=\"563\" height=\"950\" style=\"enable-background:new 0 0 563 950\" xml:space=\"preserve\"><style>.st2,.st3,.st4,.st5,.st6{fill-rule:evenodd;clip-rule:evenodd;fill:#e68cff}.st3,.st4,.st5,.st6{fill:#8a00b5}.st4,.st5,.st6{fill:#c600ff}.st5,.st6{opacity:.85;fill:#cb73e5}.st6{fill:#f0b6fa}.st8{opacity:.5;fill:#4e3d51}.st13,.st19,.st20,.st8{fill-rule:evenodd;clip-rule:evenodd}.st13{clip-path:url(#SVGID_4_);fill:#fff}.st19,.st20{fill:#d64c30}.st20{fill:#ffd665}.st25{fill:#ad3b27}.st34{fill-rule:evenodd;clip-rule:evenodd}.st34,.st36{fill:#61392f}.st37{opacity:.35}.st38,.st39{fill:#f2c7b1}.st39{opacity:.35}</style><path d=\"M279.1 678.7c131.5 0 238 56.2 238 125.6s-106.6 125.6-238 125.6S41 873.7 41 804.3s106.6-125.6 238.1-125.6z\" style=\"opacity:.5;fill-rule:evenodd;clip-rule:evenodd;fill:#998d9d\"/><path d=\"M278.1 920.7c-73.2 0-193.8-24.6-213.5-110.2C27.4 763.7 41.5 706 85.7 669.6v-18.7c-.1-1.9-.2-3.7-.2-5.5V450.2c-29.1-30.6-37.7-74.3-14.7-111.3-8.8-23.7-8.9-48.6-.2-72.5 9.5-26 29.2-49.7 57.1-68.4 3.6-2.4 7.4-4.8 11.3-7.1V111.5c1.4-35.9 36.9-59.1 67.4-69.6 33.9-15 75.5-16.7 111.2-7.6 38.8 6.4 94 28.4 99.1 74.3.2.9.3 1.8.3 2.8v79c0 .6-.1 1.3-.1 1.9 0 .4-.1.8-.1 1.3 2.6 1.6 5.1 3.2 7.5 4.8 53.2 35.9 75 88.3 58 138.2 25 37.5 19.7 80.8-14.1 115.3v188.3c.3 3.7.3 7.4 0 11.1v20.1c22.4 19 36.4 41.2 40.7 64.7 4.4 24.3-1.7 48.6-17.7 70.7-15.3 88.4-140 113.9-213.1 113.9z\" style=\"fill:#430751\"/><path class=\"st2\" d=\"M133.7 710.2c79.2-45.3 208.1-45.2 287.6.4 79.4 45.5 78.8 119-.9 163.9-79.4 44.7-207.5 44.2-286.4-.9-79-45.3-79.3-118.3-.3-163.4z\"/><path class=\"st3\" d=\"M133.3 704.9c79.1-43.5 207.8-43.4 287 .4 79.3 43.8 78.7 114.3-.9 157.5-79.3 43-207.1 42.5-285.9-.9-78.7-43.4-79-113.6-.2-157z\"/><path class=\"st2\" d=\"M118.9 660.5c86.7-49.5 227.8-49.4 314.7.4 86.9 49.8 86.3 130.2-1 179.4-86.9 48.9-227.1 48.4-313.4-1-86.4-49.5-86.7-129.4-.3-178.8z\"/><path class=\"st4\" d=\"M123.4 668.4c82.2-46.9 215.8-46.8 298.2.4 82.3 47.2 81.8 123.4-.9 169.9-82.4 46.4-215.2 45.9-297-1-81.9-46.8-82.1-122.5-.3-169.3z\"/><path class=\"st3\" d=\"M142.9 708.6c70.6-33.8 185.6-33.8 256.4.3 70.8 34.1 70.3 89-.8 122.5-70.8 33.4-185 33.1-255.3-.7-70.4-33.8-70.6-88.4-.3-122.1z\"/><path class=\"st5\" d=\"M110 790.3c13.7-.5 30 9.2 36.4 21.6 6.4 12.4.5 22.8-13.2 23.2-13.6.4-29.8-9.3-36.2-21.6-6.4-12.4-.6-22.8 13-23.2z\"/><path class=\"st6\" d=\"M108.7 793.7c9.5-1.6 21.7 3.6 27.4 11.6 5.6 8 2.5 15.7-7.1 17.3-9.5 1.5-21.6-3.7-27.2-11.6-5.6-8-2.6-15.7 6.9-17.3z\"/><defs><path id=\"SVGID_1_\" d=\"M118.9 660.5c86.7-49.5 227.8-49.4 314.7.4 86.9 49.8 86.3 130.2-1 179.4-86.9 48.9-227.1 48.4-313.4-1-86.4-49.5-86.7-129.4-.3-178.8z\"/></defs><clipPath id=\"SVGID_2_\"><use xlink:href=\"#SVGID_1_\" style=\"overflow:visible\"/></clipPath><path class=\"st8\" d=\"M148.9 648c83.1-41 218.3-40.9 301.7.4 83.3 41.3 82.7 107.9-1 148.6-83.3 40.5-217.7 40.1-300.4-.9-82.8-40.9-83.1-107.2-.3-148.1z\" style=\"opacity:.5;clip-path:url(#SVGID_2_)\"/><defs><path id=\"SVGID_3_\" d=\"M456.3 705.4v-339H97.8v345.4c-.2 26.4 17.3 52.8 52.5 72.9 69.8 40 183.1 40.4 253.4.8 38.7-21.7 56.3-51.2 52.6-80.1z\"/></defs><clipPath id=\"SVGID_4_\"><use xlink:href=\"#SVGID_3_\" style=\"overflow:visible\"/></clipPath><path d=\"M456.3 705.4v-339H97.8v345.4c-.2 26.4 17.3 52.8 52.5 72.9 69.8 40 183.1 40.4 253.4.8 38.7-21.7 56.3-51.2 52.6-80.1z\" style=\"clip-path:url(#SVGID_4_);fill-rule:evenodd;clip-rule:evenodd;fill:#f9e7ef\"/><path d=\"M461.9 733.2V300.9l-138 60.6v430.7c-.1 33 6.5 63.5 19.8 84 26.5 40.8 70.1 26.8 97.5-33.2 15.3-33.4 22.2-73.5 20.7-109.8z\" style=\"clip-path:url(#SVGID_4_);fill-rule:evenodd;clip-rule:evenodd;fill:#f2d2e0\"/><path d=\"M267.9 752V357.9h-136V759c-.1 30.6 6.6 61.3 19.9 84.7 26.5 46.5 69.5 47 96.2 1 14.6-25.3 21.3-59.3 19.9-92.7z\" style=\"clip-path:url(#SVGID_4_);fill-rule:evenodd;clip-rule:evenodd;fill:#fdfcfe\"/><path d=\"M456.1 444.3c-3 23.9-20.6 47.3-52.7 65.4-70.3 39.6-183.6 39.2-253.4-.8-32.2-18.5-49.6-42.2-52.1-66.3h-.4V644c-.2 26.4 17.3 52.8 52.5 72.9 69.8 40 183.1 40.4 253.4.8 38.8-21.9 56.4-51.3 52.7-80.2V444.3z\" style=\"clip-path:url(#SVGID_4_);fill:#f3d0e2\"/><path class=\"st13\" d=\"M122.7 715.6v-339h-15.3V722c0 26.4.7 52.8 2.2 72.9 3 40 7.8 40.4 10.8.8 1.7-21.8 2.5-51.3 2.3-80.1zM449.4 680.3v-339H434v345.4c0 26.4.7 52.8 2.2 72.9 3 40 7.8 40.4 10.8.8 1.8-21.8 2.5-51.3 2.4-80.1z\"/><path d=\"M293.1 365.5c-102-5.8-186.6 22.8-188.9 63.9-2.3 41.1 78.5 79.1 180.5 84.9 76 4.3 142.4-10.5 172.2-35.3v-62.2c-28.6-26.5-90.7-47.1-163.8-51.3z\" style=\"opacity:.5;clip-path:url(#SVGID_4_);fill:#5e4f57\"/><path class=\"st2\" d=\"M129.7 300.3c81.4-46.5 213.9-46.4 295.5.4s81 122.3-.9 168.5c-81.6 46-213.3 45.5-294.3-1-81.2-46.4-81.4-121.5-.3-167.9z\"/><path class=\"st4\" d=\"M133.9 304.7c77.2-44.1 202.7-44 280.1.4 77.3 44.4 76.8 115.9-.9 159.6-77.4 43.6-202.1 43.1-278.9-.9-76.9-44-77.1-115.2-.3-159.1z\"/><path class=\"st3\" d=\"M152.3 345.4c66.3-31.8 174.3-31.7 240.8.3s66 83.5-.8 115.1c-66.5 31.4-173.8 31.1-239.8-.7-66.1-31.7-66.3-83-.2-114.7z\"/><path class=\"st5\" d=\"M121.4 422.2c12.8-.5 28.2 8.6 34.2 20.3 6 11.7.4 21.4-12.4 21.8-12.8.4-28-8.7-34-20.3-6.1-11.6-.6-21.4 12.2-21.8z\"/><path class=\"st6\" d=\"M120.1 425.4c8.9-1.5 20.4 3.4 25.7 10.9 5.3 7.5 2.3 14.8-6.6 16.2-8.9 1.4-20.3-3.4-25.6-10.9-5.2-7.5-2.4-14.7 6.5-16.2z\"/><defs><path id=\"SVGID_5_\" d=\"M129.7 300.3c81.4-46.5 213.9-46.4 295.5.4s81 122.3-.9 168.5c-81.6 46-213.3 45.5-294.3-1-81.2-46.4-81.4-121.5-.3-167.9z\"/></defs><clipPath id=\"SVGID_6_\"><use xlink:href=\"#SVGID_5_\" style=\"overflow:visible\"/></clipPath><g style=\"opacity:.5;clip-path:url(#SVGID_6_)\"><path class=\"st8\" d=\"M157.9 288.6c78.1-38.6 205-38.5 283.3.3 78.2 38.8 77.7 101.3-.9 139.6-78.3 38.1-204.4 37.7-282.1-.8-77.8-38.5-78.1-100.7-.3-139.1z\"/><path class=\"st8\" d=\"M141.8 276.6c74.8-40.5 196.4-40.4 271.4.4 74.9 40.7 74.4 106.4-.9 146.5-75 40-195.8 39.5-270.3-.8-74.5-40.5-74.7-105.8-.2-146.1z\"/></g><path class=\"st2\" d=\"M134.4 207c78.1-52.4 205-52.3 283.3.5 78.2 52.7 77.7 137.7-.9 189.7-78.3 51.8-204.4 51.2-282.1-1.1-77.8-52.4-78.1-136.9-.3-189.1z\"/><path class=\"st4\" d=\"M136.4 213.6c72.7-48.8 190.9-48.7 263.7.4 72.8 49.1 72.3 128.2-.8 176.6-72.9 48.2-190.3 47.7-262.7-1-72.4-48.6-72.6-127.4-.2-176z\"/><path class=\"st3\" d=\"M177.1 261.7c56.1-37.7 147.4-37.6 203.7.3 56.3 37.9 55.9 99-.6 136.3-56.3 37.2-147 36.8-202.9-.8-56-37.5-56.1-98.3-.2-135.8z\"/><path d=\"M141.6 271.3c46.2-7.8 105.9 17.5 133.4 56.5 27.4 39 11.9 76.7-34.4 84.2-46.1 7.5-105.5-17.9-132.7-56.6-27.3-38.7-12.3-76.4 33.7-84.1z\" style=\"opacity:.8;fill-rule:evenodd;clip-rule:evenodd;fill:#cb73e5\"/><path class=\"st6\" d=\"M138.1 282.1c25.3-4.3 58 9.6 73 30.9 15 21.3 6.5 42-18.8 46.1-25.2 4.1-57.7-9.8-72.6-31-15-21.2-6.8-41.8 18.4-46z\"/><defs><path id=\"SVGID_7_\" d=\"M134.4 207c78.1-52.4 205-52.3 283.3.5 78.2 52.7 77.7 137.7-.9 189.7-78.3 51.8-204.4 51.2-282.1-1.1-77.8-52.4-78.1-136.9-.3-189.1z\"/></defs><clipPath id=\"SVGID_8_\"><use xlink:href=\"#SVGID_7_\" style=\"overflow:visible\"/></clipPath><path d=\"M203.6 153.8c60.5-29.5 158.9-23.4 219.5 13.6 60.6 37 60.2 90.8-.7 120-60.6 29.1-158.4 22.8-218.6-14-60.3-36.7-60.4-90.2-.2-119.6z\" style=\"opacity:.5;clip-path:url(#SVGID_8_);fill-rule:evenodd;clip-rule:evenodd;fill:#4e3d51\"/><path d=\"M208.9 183.5c38-21.6 99.9-21.5 138.1.2 38.1 21.7 37.9 56.8-.4 78.2-38.1 21.3-99.6 21.1-137.5-.4-37.9-21.7-38.1-56.5-.2-78z\" style=\"fill-rule:evenodd;clip-rule:evenodd;fill:#e23eff\"/><path class=\"st19\" d=\"M159.4 110.5h245.7v79H159.4v-79z\"/><path class=\"st20\" d=\"M187.1 140.1c48.1-27.3 125.9-27 173.8.9s47.7 72.6-.3 99.9c-48.1 27.3-125.9 27-173.8-.9-47.9-27.8-47.7-72.5.3-99.9z\"/><path class=\"st20\" d=\"M151 111.6h245.7v79H151v-79z\"/><path class=\"st20\" d=\"M187.1 62.6c48.1-27.3 125.9-27 173.8.9s47.7 72.6-.3 99.9c-48.1 27.3-125.9 27-173.8-.9-47.9-27.8-47.7-72.5.3-99.9z\"/><path class=\"st19\" d=\"M159.1 114.7h241.2v74.2H159.1v-74.2z\"/><path class=\"st19\" d=\"M195.5 136.6c48.1-27.3 125.9-27 173.8.9s47.7 72.6-.3 99.9c-48.1 27.3-125.9 27-173.8-.9-47.9-27.8-47.7-72.5.3-99.9z\"/><path d=\"M195.5 115.7c48.1-27.3 125.9-27 173.8.9s47.7 72.6-.3 99.9c-48.1 27.3-125.9 27-173.8-.9-47.9-27.8-47.7-72.6.3-99.9z\" style=\"opacity:.5;fill-rule:evenodd;clip-rule:evenodd;fill:#ad3b27\"/><path d=\"m179.7 158.2 16 9c1.2.7 2.2 2.2 2.2 3.4l.7 60.7c0 1.2-1 1.6-2.2.9l-16-9c-1.2-.7-2.2-2.2-2.2-3.4l-.7-60.7c0-1.2 1-1.6 2.2-.9z\" style=\"fill-rule:evenodd;clip-rule:evenodd;fill:#f7943c\"/><path class=\"st20\" d=\"M188.5 65c48.1-27.3 125.9-27 173.8.9s47.7 72.6-.3 99.9c-48.1 27.3-125.9 27-173.8-.9-47.9-27.9-47.7-72.6.3-99.9z\"/><path d=\"M195.5 62.6c48.1-27.3 125.9-27 173.8.9s47.7 72.6-.3 99.9c-48.1 27.3-125.9 27-173.8-.9-47.9-27.8-47.7-72.5.3-99.9z\" style=\"fill-rule:evenodd;clip-rule:evenodd;fill:#f46138\"/><path class=\"st20\" d=\"M198.9 136c12.4 9.8 17.2 22 12.3 27.1-4.7 5-16.5 2.1-27-5.7-10.5-7.9-17.6-19.5-14.5-26.2 3.3-6.9 16.7-5.1 29.2 4.8z\"/><path class=\"st20\" d=\"M201.9 56.6c39.8-22.6 104.3-22.3 143.9.7s39.5 60.1-.3 82.7-104.3 22.3-143.9-.7c-39.7-23-39.5-60 .3-82.7z\"/><path d=\"M213.1 59.4c39.8-22.6 104.3-22.3 143.9.7 39.7 23 39.5 60.1-.3 82.7s-104.3 22.3-143.9-.7c-39.7-23-39.6-60 .3-82.7z\" style=\"fill-rule:evenodd;clip-rule:evenodd;fill:#f68737\"/><path class=\"st25\" d=\"M165.4 156.9c-.2-.1-.3-.1-.5-.2-3.1-1.1-5.6 1.2-5.6 5.2v53.9c2.9 4.4 6.7 8.6 11.2 12.6v-62.6c0-3.8-2.2-7.6-5.1-8.9zM214.5 182.3c-4.4-.9-8 2.4-8 7.3v59.7c5.1 2 10.5 3.7 15.9 5.1v-61.7c.1-4.8-3.5-9.5-7.9-10.4zM385 156.4c-2.8.9-5 4.9-5 8.8v65c3.8-2.8 7.2-5.8 10.1-8.9v-59.5c-.1-3.9-2.3-6.3-5.1-5.4zM334.5 182.1c-4.6.8-8.3 5.4-8.3 10.3v62.2c5.7-1.5 11.3-3.3 16.6-5.4v-59.6c0-4.9-3.7-8.3-8.3-7.5zM274.6 187.7c-5.6 0-10.2 4.6-10.2 10.2v63c6.8.3 13.6.3 20.4 0v-63c0-5.7-4.6-10.2-10.2-10.2z\"/><path d=\"M277.7 808.7c-87.6 0-156.2-47.1-156.2-107.3 0-25.9 12.8-50.5 36.3-69.6v-2.3c0-66.8 54.3-121.1 121.1-121.1S400 562.7 400 629.5c0 1.4 0 2.8-.1 4.2 22 18.9 34.1 42.8 34.1 67.8 0 60.1-68.7 107.2-156.3 107.2zm-99.8-112.4c-.4 1.7-.6 3.4-.6 5.1 0 12.3 10.3 25.1 28.3 35.2 19.6 11 45.9 17.3 72.2 17.3 57.5 0 100.5-27.7 100.5-52.5 0-.8 0-1.6-.1-2.5-22.5 32.2-59.1 51.6-99.2 51.6-23.3 0-46-6.7-65.5-19.2-14.4-9.1-26.4-21-35.6-35z\" style=\"fill-rule:evenodd;clip-rule:evenodd;fill:#fff\"/><path d=\"M276.7 799.8c-82.5 0-147.3-43.2-147.3-98.3 0-55.1 64.6-98.3 147.3-98.3 82.5 0 147.3 43.2 147.3 98.3 0 55-64.8 98.3-147.3 98.3zm0-159.8c-58.3 0-109.4 28.7-109.4 61.5S218.5 763 276.7 763c58.3 0 109.4-28.7 109.4-61.5 0-32.9-51.1-61.5-109.4-61.5z\" style=\"fill:#a91816\"/><path d=\"M276.7 793.6c-78.8 0-140.7-40.4-140.7-92.2 0-51.6 61.8-92.2 140.7-92.2s140.7 40.4 140.7 92.2c0 51.7-61.7 92.2-140.7 92.2zm0-159.8c-62.9 0-116 30.9-116 67.6 0 36.6 53.1 67.6 116 67.6s116-30.9 116-67.6c0-36.6-53.1-67.6-116-67.6z\" style=\"fill:#e62f29\"/><path d=\"M404.8 699.9c2.8-.1 5-2.5 4.8-5-.1-2.7-2.6-4.7-5.4-4.6-2.8.1-5 2.5-4.8 5 .1 2.7 2.6 4.7 5.4 4.6z\" style=\"fill-rule:evenodd;clip-rule:evenodd;fill:#b2161c\"/><path d=\"M399.9 684c-2 0-3.9-1.1-4.8-2.9-1-2.2-26.4-54-115.8-55.5-2.9 0-5.2-2.2-5.2-5 .1-2.7 2.6-4.8 5.4-4.8 96.4 1.8 124.1 59 125.2 61.5s-.1 5.4-2.7 6.5c-.8.1-1.4.2-2.1.2z\" style=\"fill:#b2161c\"/><path d=\"M146.8 706.7c-2.8.2-4.9 2.5-4.8 5.2.2 2.7 2.7 4.7 5.5 4.5 2.8-.2 4.9-2.5 4.8-5.2-.2-2.7-2.7-4.7-5.5-4.5z\" style=\"fill-rule:evenodd;clip-rule:evenodd;fill:#eb968d\"/><path d=\"M274.6 786.8c-96.5-.7-124.9-57.7-126.1-60.1-1.2-2.5 0-5.4 2.7-6.5 2.7-1.1 5.7 0 6.9 2.5 1.1 2.2 27.1 53.6 116.6 54.3 2.9 0 5.3 2.2 5.2 4.9-.2 2.8-2.5 4.9-5.3 4.9z\" style=\"fill:#eb968d\"/><path d=\"m372 626-26.4 28.5c22.5 10.6 37.9 25.9 40.2 42.7 7.2-7.4 18-15.8 33.2-21.5-7.8-19.9-24.4-37.1-47-49.7z\" style=\"opacity:.5;fill:#56495e\"/><circle class=\"st34\" cx=\"277.8\" cy=\"629.5\" r=\"112.1\"/><circle cx=\"278.2\" cy=\"629.5\" r=\"98.8\" style=\"fill-rule:evenodd;clip-rule:evenodd;fill:#ff6000\"/><path transform=\"rotate(90 277.999 631.031)\" class=\"st34\" d=\"M175 626.5h206v9H175z\"/><path class=\"st36\" d=\"M350.3 697.1c-15-18.5-23.9-42-23.9-67.6 0-25.6 9-49.1 23.9-67.6-2.1-2.2-4.2-4.3-6.4-6.3-16.5 20.1-26.5 45.9-26.5 73.9 0 28 9.9 53.7 26.5 73.9 2.2-2 4.3-4.1 6.4-6.3zM210.3 557.7c-2.2 2.1-4.3 4.2-6.3 6.5 14.4 18.3 23 41.4 23 66.4 0 24.5-8.2 47.1-22.1 65.2 2 2.2 4.2 4.4 6.4 6.4 15.5-19.8 24.7-44.7 24.7-71.7.1-27.5-9.6-52.8-25.7-72.8z\"/><g class=\"st37\"><path class=\"st38\" d=\"M193.1 616.2c-.5 0-1-.1-1.5-.2-3-.8-4.8-3.9-4-6.8.2-.7 4.6-16.7 18.3-33.3 12.6-15.3 35.9-34.1 74.9-36.4 3.1-.2 5.7 2.2 5.9 5.3s-2.2 5.7-5.3 5.9c-27.9 1.6-50.3 12.4-66.6 32-12.3 14.8-16.3 29.3-16.4 29.5-.6 2.4-2.8 4-5.3 4z\"/></g><circle class=\"st39\" cx=\"296.6\" cy=\"545.7\" r=\"6\"/><g class=\"st37\"><path class=\"st38\" d=\"M361.5 642.3c.5 0 1 .1 1.5.2 3 .8 4.8 3.9 4 6.8-.2.7-4.6 16.7-18.3 33.3-12.6 15.3-35.9 34.1-74.9 36.4-3.1.2-5.7-2.2-5.9-5.3s2.2-5.7 5.3-5.9c27.9-1.6 50.3-12.4 66.6-32 12.3-14.8 16.3-29.3 16.4-29.5.6-2.3 2.8-4 5.3-4z\"/></g><circle class=\"st39\" cx=\"258\" cy=\"712.8\" r=\"6\"/><path class=\"st34\" d=\"M175 626.5h206v9H175z\"/></svg>",
                    "width": 563,
                    "height": 950,
                    "mimetype": "svg+xml"
                });
            }, true);

            var fetch_i_g_drink_rim_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/drink_rim.svg', {
                    "data": "<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0\" y=\"0\" width=\"563\" height=\"950\" style=\"enable-background:new 0 0 563 950\" xml:space=\"preserve\"><style>.st2,.st3,.st4,.st5,.st6,.st7,.st9{fill-rule:evenodd;clip-rule:evenodd;fill:#a9d83a}.st3,.st4,.st5,.st6,.st7,.st9{fill:#439c2d}.st4,.st5,.st6,.st7,.st9{fill:#e7f38d}.st5,.st6,.st7,.st9{fill:#76c432}.st6,.st7,.st9{fill:#94d031}.st7,.st9{fill:#c8e875}.st9{opacity:.5;fill:#3c7c2a}.st10{clip-path:url(#SVGID_4_);fill:#d0ebce}.st10,.st13,.st19,.st20{fill-rule:evenodd;clip-rule:evenodd}.st13{clip-path:url(#SVGID_4_);fill:#fff}.st19,.st20{fill:#d64c30}.st20{fill:#ffd665}.st25{fill:#ad3b27}.st29{fill:#e3e5e8}.st30{fill:none}.st31{opacity:.5;fill:#78697f}</style><path d=\"M280 675.7c131.5 0 238 56.2 238 125.6S411.4 926.9 280 926.9 42 870.7 42 801.3s106.5-125.6 238-125.6z\" style=\"opacity:.5;fill-rule:evenodd;clip-rule:evenodd;fill:#998d9d\"/><path d=\"M279 917.7c-73.2 0-193.8-24.6-213.5-110.2C28.3 760.7 42.4 703 86.6 666.6V648c-.1-1.9-.2-3.7-.2-5.5V447.2c-29.1-30.6-37.7-74.3-14.7-111.3-8.8-23.7-8.9-48.6-.2-72.5 9.5-26 29.2-49.7 57.1-68.4 3.6-2.4 7.4-4.8 11.3-7.1V108.5c1.4-35.9 36.9-59.1 67.4-69.6 33.9-15 75.5-16.7 111.2-7.6 38.8 6.4 94 28.4 99.1 74.3.2.9.3 1.8.3 2.8v79c0 .6-.1 1.3-.1 1.9 0 .4-.1.8-.1 1.3 2.6 1.6 5.1 3.2 7.5 4.8 53.2 35.9 75 88.3 58 138.2 25 37.5 19.7 80.8-14.1 115.3v188.3c.3 3.7.3 7.4 0 11.1v20.1c22.4 19 36.4 41.2 40.7 64.7 4.4 24.3-1.7 48.6-17.7 70.7-15.3 88.5-140 113.9-213.1 113.9z\" style=\"fill:#222e0d\"/><path class=\"st2\" d=\"M134.5 707.2c79.2-45.3 208.1-45.2 287.6.4 79.4 45.5 78.8 119-.9 163.9-79.4 44.7-207.5 44.2-286.4-.9-78.9-45.2-79.2-118.3-.3-163.4z\"/><path class=\"st3\" d=\"M134.2 702c79.1-43.5 207.8-43.4 287 .4 79.3 43.8 78.7 114.3-.9 157.5-79.3 43-207.1 42.5-285.9-.9-78.7-43.5-79-113.7-.2-157z\"/><path class=\"st4\" d=\"M119.8 657.5c86.7-49.5 227.8-49.4 314.7.4 86.9 49.8 86.3 130.2-1 179.4-86.9 48.9-227.1 48.4-313.4-1-86.4-49.4-86.7-129.4-.3-178.8z\"/><path class=\"st5\" d=\"M124.3 665.4c82.2-46.9 215.8-46.8 298.2.4 82.3 47.2 81.8 123.4-.9 169.9-82.4 46.4-215.2 45.9-297-1-81.9-46.7-82.1-122.5-.3-169.3z\"/><path class=\"st3\" d=\"M143.8 705.6c70.6-33.8 185.6-33.8 256.4.3 70.8 34.1 70.3 89-.8 122.5-70.8 33.4-185 33.1-255.3-.7-70.4-33.8-70.6-88.4-.3-122.1z\"/><path class=\"st6\" d=\"M110.9 787.3c13.7-.5 30 9.2 36.4 21.6 6.4 12.4.5 22.8-13.2 23.2-13.6.4-29.8-9.3-36.2-21.6-6.4-12.3-.6-22.7 13-23.2z\"/><path class=\"st7\" d=\"M109.6 790.7c9.5-1.6 21.7 3.6 27.4 11.6 5.6 8 2.5 15.7-7.1 17.3-9.5 1.5-21.6-3.7-27.2-11.6-5.6-8-2.6-15.7 6.9-17.3z\"/><defs><path id=\"SVGID_1_\" d=\"M119.8 657.5c86.7-49.5 227.8-49.4 314.7.4 86.9 49.8 86.3 130.2-1 179.4-86.9 48.9-227.1 48.4-313.4-1-86.4-49.4-86.7-129.4-.3-178.8z\"/></defs><clipPath id=\"SVGID_2_\"><use xlink:href=\"#SVGID_1_\" style=\"overflow:visible\"/></clipPath><path class=\"st9\" d=\"M149.8 645c83.1-41 218.3-40.9 301.7.4 83.3 41.3 82.7 107.9-1 148.6-83.3 40.5-217.7 40.1-300.4-.9-82.8-40.9-83.1-107.2-.3-148.1z\" style=\"opacity:.75;clip-path:url(#SVGID_2_)\"/><defs><path id=\"SVGID_3_\" d=\"M457.2 702.5v-339H98.7v345.4c-.2 26.4 17.3 52.8 52.5 72.9 69.8 40 183.1 40.4 253.4.8 38.7-21.8 56.3-51.3 52.6-80.1z\"/></defs><clipPath id=\"SVGID_4_\"><use xlink:href=\"#SVGID_3_\" style=\"overflow:visible\"/></clipPath><path class=\"st10\" d=\"M457.2 702.5v-339H98.7v345.4c-.2 26.4 17.3 52.8 52.5 72.9 69.8 40 183.1 40.4 253.4.8 38.7-21.8 56.3-51.3 52.6-80.1z\"/><path class=\"st10\" d=\"M462.8 730.3V297.9l-138 60.6v430.7c-.1 33 6.5 63.5 19.8 84 26.5 40.8 70.1 26.8 97.5-33.2 15.3-33.3 22.2-73.5 20.7-109.7z\"/><path d=\"M268.8 749V355h-136v401.1c-.1 30.6 6.6 61.3 19.9 84.7 26.5 46.5 69.5 47 96.2 1 14.6-25.3 21.2-59.4 19.9-92.8z\" style=\"opacity:.5;clip-path:url(#SVGID_4_);fill-rule:evenodd;clip-rule:evenodd;fill:#fff\"/><path d=\"M457 441.3c-3 23.9-20.6 47.3-52.7 65.4-70.3 39.6-183.6 39.2-253.4-.8-32.2-18.5-49.6-42.2-52.1-66.3h-.4V641c-.2 26.4 17.3 52.8 52.5 72.9 69.8 40 183.1 40.4 253.4.8 38.8-21.9 56.4-51.3 52.7-80.2V441.3z\" style=\"opacity:.5;clip-path:url(#SVGID_4_);fill:#cfecca\"/><path class=\"st13\" d=\"M123.6 712.6v-339h-15.3V719c0 26.4.7 52.8 2.2 72.9 3 40 7.8 40.4 10.8.8 1.7-21.8 2.5-51.3 2.3-80.1zM450.3 677.3v-339H435v345.4c0 26.4.7 52.8 2.2 72.9 3 40 7.8 40.4 10.8.8 1.7-21.8 2.4-51.3 2.3-80.1z\"/><path d=\"M293.2 359c-102-5.8-186.6 22.8-188.9 63.9-2.3 41.1 78.5 79.1 180.5 84.9 76 4.3 142.4-10.5 172.2-35.3v-62.2c-28.6-26.5-90.7-47.1-163.8-51.3z\" style=\"opacity:.75;clip-path:url(#SVGID_4_);fill:#778478\"/><path class=\"st4\" d=\"M130.6 297.3c81.4-46.5 213.9-46.4 295.5.4s81 122.3-.9 168.5c-81.6 46-213.3 45.5-294.3-1-81.2-46.4-81.4-121.5-.3-167.9z\"/><path class=\"st5\" d=\"M134.8 301.7c77.2-44.1 202.7-44 280.1.4 77.3 44.4 76.8 115.9-.9 159.6-77.4 43.6-202.1 43.1-278.9-.9-76.9-44-77.1-115.1-.3-159.1z\"/><path class=\"st3\" d=\"M153.2 342.5c66.3-31.8 174.3-31.7 240.8.3s66 83.5-.8 115.1c-66.5 31.4-173.8 31.1-239.8-.7-66.1-31.8-66.3-83.1-.2-114.7z\"/><path class=\"st6\" d=\"M122.3 419.2c12.8-.5 28.2 8.6 34.2 20.3 6 11.7.4 21.4-12.4 21.8-12.8.4-28-8.7-34-20.3-6.1-11.6-.6-21.4 12.2-21.8z\"/><path class=\"st7\" d=\"M121 422.4c8.9-1.5 20.4 3.4 25.7 10.9 5.3 7.5 2.3 14.8-6.6 16.2-8.9 1.4-20.3-3.4-25.6-10.9-5.3-7.5-2.4-14.7 6.5-16.2z\"/><defs><path id=\"SVGID_5_\" d=\"M130.6 297.3c81.4-46.5 213.9-46.4 295.5.4s81 122.3-.9 168.5c-81.6 46-213.3 45.5-294.3-1-81.2-46.4-81.4-121.5-.3-167.9z\"/></defs><clipPath id=\"SVGID_6_\"><use xlink:href=\"#SVGID_5_\" style=\"overflow:visible\"/></clipPath><g style=\"opacity:.75;clip-path:url(#SVGID_6_)\"><path class=\"st9\" d=\"M158.8 285.6c78.1-38.6 205-38.5 283.3.3 78.2 38.8 77.7 101.3-.9 139.6-78.3 38.1-204.4 37.7-282.1-.8-77.8-38.5-78.1-100.7-.3-139.1z\"/><path d=\"M142.7 273.6c74.8-40.5 196.4-40.4 271.4.4 74.9 40.7 74.4 106.4-.9 146.5-75 40-195.8 39.5-270.3-.8-74.5-40.5-74.7-105.8-.2-146.1z\" style=\"opacity:.75;fill-rule:evenodd;clip-rule:evenodd;fill:#3c7c2a\"/></g><path d=\"M135.3 204c78.1-52.4 205-52.3 283.3.5 78.2 52.7 77.7 137.7-.9 189.7-78.3 51.8-204.4 51.2-282.1-1.1-77.8-52.3-78.1-136.9-.3-189.1z\" style=\"fill-rule:evenodd;clip-rule:evenodd;fill:#d7ed7f\"/><path class=\"st5\" d=\"M137.2 210.7c72.7-48.8 190.9-48.7 263.7.4 72.8 49.1 72.3 128.2-.8 176.6-72.9 48.2-190.3 47.7-262.7-1-72.3-48.7-72.5-127.5-.2-176z\"/><path class=\"st3\" d=\"M178 258.7c56.1-37.7 147.4-37.6 203.7.3 56.3 37.9 55.9 99-.6 136.3-56.3 37.2-147 36.8-202.9-.8-56-37.5-56.1-98.3-.2-135.8z\"/><path class=\"st6\" d=\"M142.5 268.3c46.2-7.8 105.9 17.5 133.4 56.5 27.4 39 11.9 76.7-34.4 84.2-46.1 7.5-105.5-17.9-132.7-56.6-27.3-38.7-12.3-76.4 33.7-84.1z\"/><path class=\"st7\" d=\"M139 279.1c25.3-4.3 58 9.6 73 30.9 15 21.3 6.5 42-18.8 46.1-25.2 4.1-57.7-9.8-72.6-31-15-21.2-6.8-41.8 18.4-46z\"/><defs><path id=\"SVGID_7_\" d=\"M135.3 204c78.1-52.4 205-52.3 283.3.5 78.2 52.7 77.7 137.7-.9 189.7-78.3 51.8-204.4 51.2-282.1-1.1-77.8-52.3-78.1-136.9-.3-189.1z\"/></defs><clipPath id=\"SVGID_8_\"><use xlink:href=\"#SVGID_7_\" style=\"overflow:visible\"/></clipPath><path d=\"M204.5 150.8c60.5-29.5 158.9-23.4 219.5 13.6 60.6 37 60.2 90.8-.7 120-60.6 29.1-158.4 22.8-218.6-14-60.3-36.7-60.5-90.2-.2-119.6z\" style=\"opacity:.75;clip-path:url(#SVGID_8_);fill-rule:evenodd;clip-rule:evenodd;fill:#3c7c2a\"/><path class=\"st2\" d=\"M209.8 180.5c38-21.6 99.9-21.5 138.1.2 38.1 21.7 37.9 56.8-.4 78.2-38.1 21.3-99.6 21.1-137.5-.4-37.9-21.6-38.1-56.5-.2-78z\"/><path class=\"st19\" d=\"M160.3 107.5H406v79H160.3v-79z\"/><path class=\"st20\" d=\"M188 137.2c48.1-27.3 125.9-27 173.8.9s47.7 72.6-.3 99.9c-48.1 27.3-125.9 27-173.8-.9-47.9-27.9-47.7-72.6.3-99.9z\"/><path class=\"st20\" d=\"M151.9 108.7h245.7v79H151.9v-79z\"/><path class=\"st20\" d=\"M188 59.7c48.1-27.3 125.9-27 173.8.9s47.7 72.6-.3 99.9c-48.1 27.3-125.9 27-173.8-.9-47.9-27.9-47.7-72.6.3-99.9z\"/><path class=\"st19\" d=\"M160 111.8h241.2V186H160v-74.2z\"/><path class=\"st19\" d=\"M196.4 133.7c48.1-27.3 125.9-27 173.8.9s47.7 72.6-.3 99.9c-48.1 27.3-125.9 27-173.8-.9-47.9-27.9-47.8-72.6.3-99.9z\"/><path d=\"M196.4 112.7c48.1-27.3 125.9-27 173.8.9s47.7 72.6-.3 99.9c-48.1 27.3-125.9 27-173.8-.9-47.9-27.8-47.8-72.5.3-99.9z\" style=\"opacity:.5;fill-rule:evenodd;clip-rule:evenodd;fill:#ad3b27\"/><path d=\"m180.6 155.2 16 9c1.2.7 2.2 2.2 2.2 3.4l.7 60.7c0 1.2-1 1.6-2.2.9l-16-9c-1.2-.7-2.2-2.2-2.2-3.4l-.7-60.7c0-1.2 1-1.6 2.2-.9z\" style=\"fill-rule:evenodd;clip-rule:evenodd;fill:#f7943c\"/><path class=\"st20\" d=\"M189.4 62c48.1-27.3 125.9-27 173.8.9s47.7 72.6-.3 99.9c-48.1 27.3-125.9 27-173.8-.9-47.9-27.8-47.7-72.6.3-99.9z\"/><path d=\"M196.4 59.7c48.1-27.3 125.9-27 173.8.9s47.7 72.6-.3 99.9c-48.1 27.3-125.9 27-173.8-.9-47.9-27.9-47.8-72.6.3-99.9z\" style=\"fill-rule:evenodd;clip-rule:evenodd;fill:#f46138\"/><path class=\"st20\" d=\"M199.8 133c12.4 9.8 17.2 22 12.3 27.1-4.7 5-16.5 2.1-27-5.7-10.5-7.9-17.6-19.5-14.5-26.2 3.3-6.9 16.6-5.1 29.2 4.8z\"/><path class=\"st20\" d=\"M202.8 53.7c39.8-22.6 104.3-22.3 143.9.7s39.5 60.1-.3 82.7-104.3 22.3-143.9-.7c-39.7-23.1-39.5-60.1.3-82.7z\"/><path d=\"M214 56.5c39.8-22.6 104.3-22.3 143.9.7 39.7 23 39.5 60.1-.3 82.7s-104.3 22.3-143.9-.7c-39.7-23.1-39.6-60.1.3-82.7z\" style=\"fill-rule:evenodd;clip-rule:evenodd;fill:#f68737\"/><path class=\"st25\" d=\"M166.3 153.9c-.2-.1-.3-.1-.5-.2-3.1-1.1-5.6 1.2-5.6 5.2v53.9c2.9 4.4 6.7 8.6 11.2 12.6v-62.6c0-3.8-2.2-7.6-5.1-8.9zM215.4 179.3c-4.4-.9-8 2.4-8 7.3v59.7c5.1 2 10.5 3.7 15.9 5.1v-61.7c.1-4.8-3.5-9.5-7.9-10.4zM385.9 153.5c-2.8.9-5 4.9-5 8.8v65c3.8-2.8 7.2-5.8 10.1-8.9v-59.5c-.1-4-2.3-6.4-5.1-5.4zM335.4 179.1c-4.6.8-8.3 5.4-8.3 10.3v62.2c5.7-1.5 11.3-3.3 16.6-5.4v-59.6c0-4.9-3.7-8.2-8.3-7.5zM275.5 184.7c-5.6 0-10.2 4.6-10.2 10.2v63c6.8.3 13.6.3 20.4 0v-63c-.1-5.6-4.6-10.2-10.2-10.2z\"/><path d=\"M278.6 506.6c-83 0-148.1 45.5-148.1 103.7 0 23.4 10.3 45.2 29.7 63.2 5.7 16.8 8.5 35.5 8.3 55.6v1.4c-.1 1.1-.1 2.1 0 3.2 0 .4.1.8.1 1.1 0 .7.1 1.4.2 2.1.1 1.2.4 2.4.8 3.5 4.1 18.4 17.6 35 38 46.8 19.7 11.4 44.8 17.7 70.7 17.7 26.8 0 52.6-6.7 72.5-18.8 21.6-13.1 34.8-31.4 37.1-51.5.1-.7.1-1.4.1-2.2-.6-21 2.1-40.5 8-58 20.1-18.2 30.8-40.3 30.8-64.2-.1-58-65.1-103.6-148.2-103.6zM300 717.3V713c4-.4 7.9-.9 11.8-1.5-.1 1-.3 2.1-.4 3.1-3.6 1.1-7.5 1.9-11.4 2.7zm7.9-80c-.7 3.1-1.3 6.2-1.9 9.3-3.4.7-6.9 1.2-10.4 1.7v-13.4c4.2.6 8.3 1.4 12.3 2.4zm2.5 121.6c-3.4 1.1-6.8 1.9-10.4 2.6V759c3.5-.5 6.9-1 10.3-1.7.1.5.1 1.1.1 1.6zm18.6-178c-3 5.3-5.8 10.9-8.4 16.9-8-2.1-16.4-3.6-25-4.5v-21c12 1.5 23.4 4.4 33.4 8.6zM226.3 601c-2.2-5.5-4.7-10.7-7.3-15.6 9.3-5.2 20.8-9.2 33.1-11.6v20.7c-8.9 1.5-17.5 3.6-25.8 6.5zm25.9 35.7v10.1c-4.5-.9-9-2-13.3-3.3-.2-.9-.4-1.7-.5-2.6 4.4-1.7 9-3.1 13.8-4.2zm4.1 76.1v4.5c-3.1-.5-6.1-1.2-9-2-.1-1.2-.3-2.4-.4-3.7 3.1.5 6.2.9 9.4 1.2zm0 46.3v2.5c-2.8-.6-5.5-1.2-8.2-2 0-.6.1-1.2.1-1.7l8.1 1.2z\" style=\"fill:#fefefd\"/><path d=\"M278.6 517.1c-77 0-137.3 40.9-137.3 93.2 0 21.2 9.8 41.1 28.3 57.4 6.7 18.6 10 39.4 9.7 61.7v1.9c-.1.5-.1 1-.1 1.4 0 .3.1.6.1.9v.1c0 .7.1 1.4.2 2.1.1.5.2 1.1.4 1.6 3.3 15.8 15 30.3 33.2 40.8 18 10.4 41.2 16.2 65.1 16.2 24.8 0 48.5-6.1 66.8-17.2 18.8-11.4 30.2-26.9 32.1-43.8v-.7c-.6-23.2 2.6-44.8 9.5-64.2 19.2-16.5 29.3-36.6 29.3-58.3 0-52.2-60.3-93.1-137.3-93.1zm10.6 232.5c11-.8 21.6-2.7 31.6-5.7.1 7.2.4 14.6 1 22-9.8 4-21 6.7-32.6 7.7v-24zm0-20.4v-25.9c12.3-.6 24.3-2.3 35.7-5-1.5 7.7-2.6 15.8-3.3 24-9.9 3.6-21 6-32.4 6.9zm31.6-98.9c-2.1 7.9-3.9 16.3-5.3 24.8-9.9 2.5-20.2 4-30.7 4.4v-36.2c12.6.7 24.9 3 36 7zm23.4-53.6c-4.8 7.2-11.3 18.4-17.1 34-13-4.5-27.5-7.1-42.2-7.6v-42c22 .8 42.9 6.3 59.3 15.6zm26.3 33.6c0 6.6-3 13.4-8.6 19.8-4.5-3.9-9.5-7.4-15.1-10.6 4-11.2 8.9-21.2 14.4-29.8 6.1 6.6 9.3 13.7 9.3 20.6zm-25.4 33.1c-1.9 1.1-3.8 2.1-5.9 3.1.5-2.1.9-4.3 1.5-6.3 1.5 1 3 2.1 4.4 3.2zm13.9 43c-.4 2-.8 4-1.1 6-1.3-1.2-2.8-2.4-4.2-3.6 1.7-.7 3.5-1.5 5.3-2.4zm-4.2 45.1c0 1-.1 2-.2 3.3-1.6 6.4-5.5 12.7-11.5 18.2-.3-6.1-.3-12.2-.1-18.1 4.1-2.2 8-4.6 11.5-7.2.2 1.2.3 2.5.3 3.8zm-121-32.9c10.7 2.4 21.9 4 33.3 4.6v26c-10.5-.8-20.7-2.9-29.9-6-.7-8.4-1.8-16.7-3.4-24.6zm33.3 51.1v24c-10.8-.9-21.2-3.3-30.5-6.8.7-7.4 1.1-14.8 1.2-22 9.4 2.4 19.2 4.1 29.3 4.8zm-64.2-61.2c-1.5 1.2-2.9 2.4-4.3 3.6-.3-2-.7-4.1-1.1-6.1 1.8.9 3.6 1.7 5.4 2.5zm8.3 20.8 1.8-1.8c.2 1.2.4 2.4.6 3.7-.9-.7-1.7-1.3-2.4-1.9zm4.2 45.4c-8-6.7-12.9-14.4-14-22.4V729.6c0-.6.1-1.3.2-1.9 4.3 3.2 9 6 14.1 8.6.2 6 .1 12.1-.3 18.4zM204.8 582c14.5-10.6 35.5-17.9 58.2-20.3v42c-15.4 1.5-30.1 5.3-43 11.1-4.2-12.2-9.3-23.2-15.2-32.8zm58.2 42.2v34.7c-11.7-1.2-23.2-3.8-33.6-7.5-1-5.6-2.2-11.2-3.5-16.5 10.9-5.4 23.7-9.1 37.1-10.7zm-67.6 6c-5.7-6.4-8.7-13.3-8.7-19.9 0-3.9 1-7.8 2.9-11.6 4.3 8.1 8.1 17.2 11.3 27.1-1.9 1.4-3.8 2.9-5.5 4.4z\" style=\"fill:#004d04\"/><path d=\"M328.4 680.5c1.6-19.2 4.7-35.4 8.5-49 18.6 10 30.6 24.6 30.6 40.6h10.1c0-20.3-14.8-38.4-37.7-50 11.4-34.2 26.7-48.6 27.6-49.5l.1-.1-7.2-6.6c-2.5 2.3-18.1 17.6-29.8 52.1-15-6-32.7-9.5-51.6-9.5V554h-10.1v54.8c-19.7 1.3-37.7 6.3-52.3 13.9-11.9-37.8-28.7-54.4-31.3-56.8l-3.6 3.4-3.7 3.3.1.1c1 .9 17.9 17 29.5 55.4-17.1 11.5-27.7 27-27.7 44.2H190c0-12.8 7.7-24.7 20.3-34.1 3.3 13 5.8 28.3 7.1 45.9l3.4-.2C199.1 695 185 712.3 185 731.7c0 1.3.1 2.6.2 3.9h10.4c-.2-1.3-.3-2.6-.3-3.9 0-26.3 32.2-48.1 73.4-50.9v.3h10.1v-.6c45.1.3 81.6 23.2 81.6 51.2 0 1.3-.1 2.6-.3 3.9l8.7-.5c.1-1.3 1.9-2.1 1.9-3.5.3-21.5-16.7-40.3-42.3-51.1zm-101.1.2c-1.5-18.7-4.4-34.8-8-48.5 13.5-7.6 30.8-12.7 49.6-14v52.9c-15.3.9-29.4 4.3-41.6 9.6zm51.6-62.9c17.8 0 34.7 3.5 48.7 9.3-4 13.8-7.3 30.3-9.1 49.8-12-3.8-25.5-6-39.7-6.1v-53z\" style=\"fill:#bfbfc1\"/><path class=\"st29\" d=\"m408.2 621.6-3.6-3.4-3.6-3.4c-1.4 1.2-29.4 26.3-37.8 80.8-4.3 9.8-13.2 18.4-25.2 25.1 4.1-42.6 19.2-64.2 19.4-64.5l-4.4-2.6-4.4-2.6c-.9 1.3-18.3 25.9-21.6 74.9-12.7 5.2-27.7 8.4-43.7 9v-57.8h-10.4V735c-15.1-.5-29.2-3.4-41.3-8-3-48.5-20.6-73-21.6-74.2l-8.7 5.3c.2.3 15.5 21.7 19.3 64.1-13.1-6.9-22.9-16.1-27.4-26.6-8.3-54.5-36.3-79.5-37.8-80.8l-7.2 6.8c.4.3 38.6 34.5 36.8 110.6 3.1 31.6 43.7 56.8 93.2 56.8 49.1 0 89.5-24.8 93.1-56.1-2-76.3 36.6-111 36.9-111.3zm-81.6 114.6c-.2 10.1.1 21.2 1.3 33.1-12.6 5.8-27.9 9.5-44.6 10.2v-35c15.8-.6 30.5-3.6 43.3-8.3zm-53.7 8.3v35c-16.4-.6-31.6-4.3-44.1-10l1.7.1c1.3-11.7 1.7-22.5 1.5-32.4 12.3 4.2 26.1 6.8 40.9 7.3zm-77.3-11.9c.1-6.2 0-12.2-.3-17.9 6.7 7.2 15.6 13.4 26.2 18.2.4 9.8.2 20.5-1 32.1-14-8.3-23.2-19.7-24.9-32.4zm142.3 31.2c-1-11.7-1.1-22.5-.6-32.3 9.6-4.8 17.8-10.7 24-17.4-.3 5.8-.5 11.8-.3 18.1h-.1c-1.5 12.3-10 23.3-23 31.6z\"/><path class=\"st30\" d=\"m230.5 769.6-1.7-.1c12.5 5.7 27.6 9.3 44.1 10v-35c-14.8-.5-28.7-3.1-40.9-7.3.2 9.9-.2 20.7-1.5 32.4zM195.3 714.7c.3 5.7.4 11.7.3 17.9 1.7 12.7 10.9 24.1 24.9 32.5 1.1-11.7 1.3-22.4 1-32.1-10.6-4.9-19.5-11.1-26.2-18.3zM326.6 736.2c-12.8 4.8-27.5 7.7-43.3 8.3v35c16.7-.6 32-4.3 44.6-10.2-1.1-12-1.5-23-1.3-33.1zM337.3 731.6c-.5 9.8-.3 20.6.6 32.3 13-8.3 21.5-19.4 23-31.6h.1c-.1-6.3 0-12.4.3-18.1-6.2 6.7-14.4 12.6-24 17.4z\"/><path class=\"st29\" d=\"m155.5 614.8-7.2 6.8c.2.2 10.6 9.4 20.3 29 .7-4.2 2.5-8.2 5.3-11.9-9-15.6-17.6-23.2-18.4-23.9zM408.2 621.6l-3.6-3.4-3.6-3.4c-.8.7-10.2 9.1-19.7 26.2 3 2.3 5.6 4.7 7.9 7.2 9.3-17.9 18.9-26.4 19-26.6z\"/><path class=\"st29\" d=\"M381.3 641c-7.2 13-14.5 31.1-18.1 54.7-1.8 4.2-4.5 8.1-7.9 11.8 6.5-1.9 12.4-4.1 17.6-6.6 3-22.5 9.6-40 16.2-52.7-2.2-2.5-4.8-4.9-7.8-7.2z\"/><path class=\"st31\" d=\"M381.3 641c-7.2 13-14.5 31.1-18.1 54.7-1.8 4.2-4.5 8.1-7.9 11.8 6.5-1.9 12.4-4.1 17.6-6.6 3-22.5 9.6-40 16.2-52.7\"/><path class=\"st29\" d=\"M191.8 687.3c-4.2-20.9-11.2-37-17.9-48.6-2.8 3.7-4.6 7.7-5.3 11.9 3.6 7.2 7.1 15.8 9.9 25.8 3.6 3.8 8.1 7.5 13.3 10.9z\"/><path class=\"st31\" d=\"M191.8 687.3c-4.2-20.9-11.2-37-17.9-48.6-2.8 3.7-4.6 7.7-5.3 11.9 3.6 7.2 7.1 15.8 9.9 25.8 3.6 3.8 8.1 7.5 13.3 10.9z\"/><path class=\"st29\" d=\"m353.1 653.7-4.4-2.6c-.8 1.2-15.2 21.5-20.3 61.7 3.7-.5 7.3-1 10.8-1.6 5.2-36.3 18-54.6 18.2-54.9l-4.3-2.6z\"/><path class=\"st31\" d=\"m353.1 653.7-4.4-2.6c-.8 1.2-15.2 21.5-20.3 61.7 3.7-.5 7.3-1 10.8-1.6 5.2-36.3 18-54.6 18.2-54.9l-4.3-2.6z\"/><path class=\"st29\" d=\"M201.4 658.1c.2.2 10.2 14.3 16 42 3.7 1.4 7.5 2.7 11.5 4-5.9-33.2-18.1-50.1-18.8-51.2l-8.7 5.2z\"/><path class=\"st31\" d=\"M201.4 658.1c.2.2 10.2 14.3 16 42 3.7 1.4 7.5 2.7 11.5 4-5.9-33.2-18.1-50.1-18.8-51.2l-8.7 5.2z\"/><path class=\"st29\" d=\"M272.9 677.2V713l5.7.6c1.6.1 3.2.3 4.8.4v-36.7h-10.5z\"/><path class=\"st31\" d=\"M272.9 677.2V713l5.7.6c1.6.1 3.2.3 4.8.4v-36.7h-10.5z\"/><path class=\"st30\" d=\"m408.2 621.6-3.6-3.4-3.6-3.4c-1.4 1.2-29.4 26.3-37.8 80.8-4.3 9.8-13.2 18.4-25.2 25.1 4.1-42.6 19.2-64.2 19.4-64.5l-4.4-2.6-4.4-2.6c-.9 1.3-18.3 25.9-21.6 74.9-12.7 5.2-27.7 8.4-43.7 9v-57.8h-10.4V735c-15.1-.5-29.2-3.4-41.3-8-3-48.5-20.6-73-21.6-74.2l-8.7 5.3c.2.3 15.5 21.7 19.3 64.1-13.1-6.9-22.9-16.1-27.4-26.6-8.3-54.5-36.3-79.5-37.8-80.8l-7.2 6.8c.4.3 38.6 34.5 36.8 110.6 3.1 31.6 43.7 56.8 93.2 56.8 49.1 0 89.5-24.8 93.1-56.1-2-76.3 36.6-111 36.9-111.3zm-81.6 114.6c-.2 10.1.1 21.2 1.3 33.1-12.6 5.8-27.9 9.5-44.6 10.2v-35c15.8-.6 30.5-3.6 43.3-8.3zm-53.7 8.3v35c-16.4-.6-31.6-4.3-44.1-10l1.7.1c1.3-11.7 1.7-22.5 1.5-32.4 12.3 4.2 26.1 6.8 40.9 7.3zm-77.3-11.9c.1-6.2 0-12.2-.3-17.9 6.7 7.2 15.6 13.4 26.2 18.2.4 9.8.2 20.5-1 32.1-14-8.3-23.2-19.7-24.9-32.4zm142.3 31.2c-1-11.7-1.1-22.5-.6-32.3 9.6-4.8 17.8-10.7 24-17.4-.3 5.8-.5 11.8-.3 18.1h-.1c-1.5 12.3-10 23.3-23 31.6z\"/><defs><path id=\"SVGID_9_\" d=\"M328.4 680.5c1.6-19.2 4.7-35.4 8.5-49 18.6 10 30.6 24.6 30.6 40.6h10.1c0-20.3-14.8-38.4-37.7-50 11.4-34.2 26.7-48.6 27.6-49.5l.1-.1-7.2-6.6c-2.5 2.3-18.1 17.6-29.8 52.1-15-6-32.7-9.5-51.6-9.5V554h-10.1v54.8c-19.7 1.3-37.7 6.3-52.3 13.9-11.9-37.8-28.7-54.4-31.3-56.8l-3.6 3.4-3.7 3.3.1.1c1 .9 17.9 17 29.5 55.4-17.1 11.5-27.7 27-27.7 44.2H190c0-12.8 7.7-24.7 20.3-34.1 3.3 13 5.8 28.3 7.1 45.9l3.4-.2C199.1 695 185 712.3 185 731.7c0 1.3.1 2.6.2 3.9h10.4c-.2-1.3-.3-2.6-.3-3.9 0-26.3 32.2-48.1 73.4-50.9v.3H279v-.6c45.1.3 81.6 23.2 81.6 51.2 0 1.3-.1 2.6-.3 3.9l8.7-.5c.1-1.3 1.9-2.1 1.9-3.5.1-21.5-16.9-40.3-42.5-51.1zm-101.1.2c-1.5-18.7-4.4-34.8-8-48.5 13.5-7.6 30.8-12.7 49.6-14v52.9c-15.2.9-29.4 4.3-41.6 9.6zm51.7-62.9c17.8 0 34.7 3.5 48.7 9.3-4 13.8-7.3 30.3-9.1 49.8-12-3.8-25.5-6-39.7-6.1v-53z\"/></defs><clipPath id=\"SVGID_10_\"><use xlink:href=\"#SVGID_9_\" style=\"overflow:visible\"/></clipPath><path d=\"M331.2 582.3c17.1 1.2 33 4.8 47 10-16.4-20.3-50.2-35.7-90.4-38.7-58.5-4.3-108.2 19.7-111 53.6-2 24 20.1 46.4 53.9 59-7.5-9.3-11.4-19.7-10.5-30.3 2.8-33.9 52.5-57.8 111-53.6z\" style=\"opacity:.5;clip-path:url(#SVGID_10_);fill:#78697f\"/><path d=\"M278.6 698.1c-73.7 0-131.5-38.6-131.5-87.8s57.7-87.8 131.5-87.8c73.7 0 131.5 38.6 131.5 87.8s-57.8 87.8-131.5 87.8zm0-142.7c-52.1 0-97.7 25.6-97.7 54.9s45.7 54.9 97.7 54.9c52.1 0 97.7-25.6 97.7-54.9s-45.6-54.9-97.7-54.9z\" style=\"fill:#c64600\"/><path d=\"M278.6 692.6c-70.4 0-125.6-36.1-125.6-82.3 0-46.1 55.2-82.3 125.6-82.3s125.6 36.1 125.6 82.3c0 46.1-55.1 82.3-125.6 82.3zm0-142.7c-56.2 0-103.6 27.6-103.6 60.4 0 32.7 47.4 60.4 103.6 60.4s103.6-27.6 103.6-60.4c0-32.7-47.4-60.4-103.6-60.4z\" style=\"fill:#ff6700\"/><path d=\"M393 608.9c2.5-.1 4.5-2.2 4.3-4.5-.1-2.4-2.3-4.2-4.8-4.1-2.5.1-4.5 2.2-4.3 4.5.1 2.4 2.3 4.2 4.8 4.1z\" style=\"fill-rule:evenodd;clip-rule:evenodd;fill:#f65200\"/><path d=\"M388.6 594.7c-1.8 0-3.5-1-4.3-2.6-.9-2-23.6-48.2-103.4-49.6-2.6 0-4.6-2-4.6-4.5.1-2.4 2.3-4.3 4.8-4.3 86.1 1.6 110.8 52.7 111.8 54.9 1 2.2-.1 4.8-2.4 5.8-.7.2-1.3.3-1.9.3z\" style=\"fill:#f65200\"/><path d=\"M162.6 615c-2.5.2-4.4 2.2-4.3 4.6.2 2.4 2.4 4.2 4.9 4 2.5-.2 4.4-2.2 4.3-4.6-.2-2.4-2.4-4.2-4.9-4z\" style=\"fill-rule:evenodd;clip-rule:evenodd;fill:#ffab6d\"/><path d=\"M276.7 686.5c-86.2-.6-111.5-51.5-112.6-53.7-1.1-2.2 0-4.8 2.4-5.8s5.1 0 6.2 2.2c1 2 24.2 47.9 104.1 48.5 2.6 0 4.7 2 4.6 4.4-.1 2.5-2.2 4.4-4.7 4.4z\" style=\"fill:#ffab6d\"/></svg>",
                    "width": 563,
                    "height": 950,
                    "mimetype": "svg+xml"
                });
            }, true);

            var fetch_i_g_ball_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/ball.svg', {
                    "data": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"563\" height=\"563\" viewBox=\"-237.274 -242.274 563 563\" xml:space=\"preserve\"><path fill=\"#61392E\" d=\"M325.727 39.226c0 155.468-126.034 281.5-281.498 281.5-155.47 0-281.502-126.032-281.502-281.5 0-155.467 126.032-281.499 281.502-281.499 155.463 0 281.498 126.031 281.498 281.499z\"/><path fill=\"#FF6000\" d=\"M306.729 39.226c0 144.966-117.538 262.504-262.501 262.504-144.972 0-262.501-117.538-262.501-262.504 0-144.968 117.529-262.497 262.501-262.497 144.963 0 262.501 117.529 262.501 262.497z\"/><path fill=\"#61392E\" d=\"M30.166-227.438h28.125v534.472H30.166z\"/><path fill=\"#61392E\" d=\"M-223.579 27.299h534.475v24.999h-534.475z\"/><path fill=\"#61392E\" d=\"m-138.266-160.202 14.852-9.327s66.146 85.1 66.146 209.373c0 109.215-66.146 209.898-66.146 209.898l-14.852-9.946s60.932-90.384 60.932-200.444c0-123.781-60.932-199.554-60.932-199.554zM225.581-161.083l-15.039-9.327s-66.984 85.1-66.984 209.375c0 109.214 66.984 209.897 66.984 209.897l15.039-9.944s-61.704-90.39-61.704-200.449c0-123.779 61.704-199.552 61.704-199.552z\"/></svg>",
                    "width": 563,
                    "height": 563,
                    "mimetype": "svg+xml"
                });
            }, true);

            var fetch_i_g_ballshine_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/ballshine.svg', {
                    "data": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"563\" height=\"563\" style=\"enable-background:new 0 0 563 563\" xml:space=\"preserve\"><linearGradient id=\"a\" gradientUnits=\"userSpaceOnUse\" x1=\"-1746.718\" y1=\"1521.662\" x2=\"-2028.278\" y2=\"2009.338\" gradientTransform=\"matrix(-1 0 0 1 -1604.998 -1484)\"><stop offset=\"0\" style=\"stop-color:#fff;stop-opacity:.3\"/><stop offset=\".5\" style=\"stop-color:#929091;stop-opacity:0\"/><stop offset=\"1\" style=\"stop-color:#000;stop-opacity:.4\"/></linearGradient><path d=\"M564 281.5C564 437 438 563 282.5 563S1 437 1 281.5 127 0 282.5 0 564 126 564 281.5z\" style=\"fill:url(#a)\"/><path d=\"M334.6 180.9c0 69-56 125-125 125s-125-56-125-125 56-125 125-125 125 55.9 125 125z\" style=\"opacity:.3;fill:#fecdb1;enable-background:new\"/><path d=\"M271.8 167.2c0 38.8-31.5 70.3-70.3 70.3s-70.3-31.5-70.3-70.3 31.5-70.3 70.3-70.3 70.3 31.5 70.3 70.3z\" style=\"opacity:.3;fill:#f6ddcd;enable-background:new\"/></svg>",
                    "width": 563,
                    "height": 563,
                    "mimetype": "svg+xml"
                });
            }, true);

            var fetch_i_g_s_shockwave_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/s/shockwave.svg', {
                    "data": "<svg data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" width=\"512\" height=\"512\"><defs><radialGradient id=\"a\" cx=\"256\" cy=\"256\" r=\"256\" gradientUnits=\"userSpaceOnUse\"><stop offset=\".67\" stop-color=\"#fff\" stop-opacity=\"0\"/><stop offset=\"1\" stop-color=\"#fff\"/></radialGradient></defs><circle cx=\"256\" cy=\"256\" r=\"256\" style=\"fill:url(#a)\"/></svg>",
                    "width": 512,
                    "height": 512,
                    "mimetype": "svg+xml"
                });
            }, true);

            var fetch_i_g_hoopshadow_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/hoopshadow.svg', {
                    "data": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"2373.3\" height=\"2144.5\" style=\"enable-background:new 0 0 2373.3 2144.5\" xml:space=\"preserve\"><linearGradient id=\"a\" gradientUnits=\"userSpaceOnUse\" x1=\"653.9\" y1=\"1902.9\" x2=\"1719.4\" y2=\"837.4\" gradientTransform=\"matrix(1 0 0 -1 0 2329)\"><stop offset=\"0\" style=\"stop-color:#72adb4\"/><stop offset=\"1\" style=\"stop-color:#72adb4;stop-opacity:0\"/></linearGradient><path style=\"fill:url(#a)\" d=\"M1066.5 2144.5 0 1080 1306.8-226.8 2373.3 837.7z\"/></svg>",
                    "width": 2373.3,
                    "height": 2144.5,
                    "mimetype": "svg+xml"
                });
            }, true);

            var fetch_i_g_hoop_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/hoop.svg', {
                    "data": "<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0\" y=\"0\" width=\"1530\" height=\"1080\" style=\"enable-background:new 0 0 1530 1080\" xml:space=\"preserve\"><style>.st0{fill:#368196}</style><path class=\"st0\" d=\"M0 0h1530v1080H0V0z\" id=\"glass\"/><g id=\"center\"><path d=\"M560.6 471.3h410c27.6 0 50 22.4 50 50v305c0 27.6-22.4 50-50 50h-410c-27.6 0-50-22.4-50-50v-305c0-27.7 22.4-50 50-50z\" style=\"fill:#f7e16a\"/><path class=\"st0\" d=\"M558.6 519.3h414v309h-414z\"/></g><path d=\"M1500 0H0v1080h1530V0h-30zM30 1050V30h1470v1020H30z\" style=\"fill:#61392e\" id=\"edge\"/><path d=\"M1471.2 30H30v1020H1500.1V30h-28.9zM58.8 1021.7V58.3h1412.4v963.3H58.8z\" style=\"fill:#ff7d43\" id=\"edge_1_\"/></svg>",
                    "width": 1530,
                    "height": 1080,
                    "mimetype": "svg+xml"
                });
            }, true);

            var fetch_i_g_hoopoverlay_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/hoopoverlay.svg', {
                    "data": "<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0\" y=\"0\" width=\"1530\" height=\"1080\" style=\"enable-background:new 0 0 1530 1080\" xml:space=\"preserve\"><style>.st1{fill:#fff}</style><path d=\"M765.6 30H1500v1020H765.6V30z\" id=\"glass_1_\" style=\"opacity:.15\"/><path class=\"st1\" d=\"M1439.3 985.8c-1 .5-2.2.8-3.3.9-1.7 0-3.4-1.1-4.9-2.7-1.1-1.1-2.3-2.5-3.4-3.8 2.7-.5 4-1.1 4.3-1.3 1.1-.5 2.2-1.3 3.1-2.2 1.7-1.7 3.4-4.6 3.4-9.1 0-7.8-5.3-13.1-13.7-13.1h-17.3v39.1h8.4v-12.8h2.1c3.4 3.6 7.5 10.7 13 12.8l.4.1.2.1.4.1c.2 0 .4.1.5.1h.3c.1 0 .3 0 .4.1h2.4l.5-.1h.3c.2 0 .4-.1.6-.1 1.2-.2 2.3-.6 3.4-1.2l-1.1-6.9zm-15-12.9h-8.7v-10.6h8.7c3.1 0 5.3 2.2 5.3 5.3.1 3.1-2.1 5.3-5.3 5.3zM1293 954.5v39.1h8.4v-14.2h15.9V971.5h-15.9v-9.2h20.4V954.4H1293zM1392.5 954.4l-10.2 28.8h-.3l-10.2-28.8h-8.9v.1l14.5 39.1h9.5l14.5-39.1v-.1zM1360.8 985.8c-1 .5-2.2.8-3.3.9-1.7 0-3.4-1.1-4.9-2.7-1.1-1.1-2.3-2.5-3.4-3.8 2.7-.5 4-1.1 4.3-1.3 1.2-.5 2.2-1.3 3.1-2.2 1.7-1.7 3.4-4.6 3.4-9.1 0-7.8-5.3-13.1-13.7-13.1H1329v39.1h8.4v-12.8h2.1c3.4 3.6 7.5 10.7 13 12.8.1.1.3.1.4.1l.2.1.4.1c.2 0 .4.1.5.1h.3c.1 0 .3 0 .4.1h2.4l.5-.1h.3c.2 0 .4-.1.6-.1 1.2-.2 2.3-.6 3.4-1.2l-1.1-6.9zm-15-12.9h-8.7v-10.6h8.7c3.1 0 5.3 2.2 5.3 5.3 0 3.1-2.2 5.3-5.3 5.3zM1435 874.9c-.6-1.1-1.3-2.2-2-3.3-7.3-11.1-19.2-18.4-32.4-19.6-16.8-1.7-32.7 6.8-41.8 20.8l-15.2 22.6-4.4 6.6c-9.4 13.5-29.1 1.2-21.1-12.9 3.6-6 11.9-7.8 17.7-3.7 2 1.4 3.6 3.7 5.1 6l1.1 1.7 13.8-20.3c-6.8-7.8-16.8-12.7-27.2-12.6-28.5-.1-45.6 32.7-29 55.8 14.4 20 43.4 20 58.1.2l13.9-20.6c1.1-1.6 3.4-5 4.4-6.5 2.5-3.8 5-7.7 8.8-10.4 13.7-9.3 32.2.3 32.3 16.9 0 14.6-15.1 24.7-28.8 18.9-5.7-2.3-9.2-7.5-12.4-12.4-.9-1.3-1.8-2.7-2.8-4.1l-14 20.7c3.3 5 8.3 9.4 8.3 9.4 6.9 6.1 15.6 9.9 24.7 10.8 34.3 3.5 59.4-33.7 42.9-64z\"/></svg>",
                    "width": 1530,
                    "height": 1080,
                    "mimetype": "svg+xml"
                });
            }, true);

            var fetch_i_g_bitmapfont_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/bitmapfont.svg', {
                    "data": "<svg version=\"1.1\" id=\"Layer_4\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0\" y=\"0\" width=\"1248\" height=\"94\" style=\"enable-background:new 0 0 1248 94\" xml:space=\"preserve\"><style>.st0{fill:#fff}</style><path class=\"st0\" d=\"m480 32.8 8.7-8.7 15.2 15.2L519.3 24l8.7 8.8-15.3 15.3 15.1 15.1-8.7 8.8L504 56.9 488.9 72l-8.7-8.8 15.1-15.1L480 32.8zM528 42h17.9V24H558v18h18v12.2h-18V72h-12.2V54.1H528V42zM608.2 19.5v17.8h-16.5V19.5h16.5zm0 39.2v17.8h-16.5V58.7h16.5zM4.3 19.9c0-3.1.5-5.9 1.6-8.3C7 9.2 8.5 7.1 10.3 5.3s3.9-3 6.3-3.9S21.5 0 24 0c2.6 0 5.1.4 7.4 1.3 2.4.9 4.5 2.2 6.3 3.9 1.8 1.7 3.2 3.8 4.3 6.2 1.1 2.4 1.6 5.2 1.6 8.3v54.2c0 3.1-.5 5.9-1.6 8.3-1.1 2.4-2.5 4.5-4.3 6.2-1.8 1.7-3.9 3-6.3 3.9s-4.8 1.3-7.4 1.3-5.1-.4-7.4-1.3c-2.4-.9-4.5-2.2-6.3-3.9-1.8-1.7-3.2-3.8-4.3-6.2-1-2.4-1.6-5.1-1.6-8.2V19.9zm13.3 54.2c0 1.9.6 3.5 1.8 4.7 1.2 1.2 2.7 1.9 4.6 1.9 1.9 0 3.4-.6 4.6-1.9 1.2-1.2 1.8-2.8 1.8-4.7V19.9c0-1.9-.6-3.5-1.8-4.7s-2.7-1.9-4.6-1.9c-1.9 0-3.4.6-4.6 1.9s-1.8 2.8-1.8 4.7v54.2zM68 93.2V14.8l-13.2 9.7v-14L68 .8h13.2v92.4H68zM100.2 93.2V80.7l23.9-45c1.2-2.2 1.9-4.2 2.1-5.9.1-1.7.2-3.8.2-6.3V20c0-1.2-.3-2.3-.7-3.3-.4-.9-1.1-1.7-1.9-2.4-.8-.6-2.1-.9-3.7-.9-2 0-3.5.5-4.7 1.7-1.1 1.1-1.7 2.7-1.7 4.9v7.5h-13.2v-7.4c0-2.7.5-5.3 1.5-7.8 1-2.4 2.4-4.5 4.3-6.3 1.7-1.8 3.8-3.2 6.2-4.3 2.4-1.1 5-1.6 7.8-1.6 3.4 0 6.4.6 8.9 1.9 2.4 1.2 4.5 2.9 6.1 5.1 1.5 2.1 2.7 4.6 3.4 7.4s1.1 5.7 1.1 8.8c0 2.2 0 4.1-.1 5.6s-.2 2.9-.5 4.3c-.2 1.4-.7 2.7-1.3 4.1-.6 1.4-1.4 3-2.4 5L115.9 80h23.8v13.2h-39.5zM164.1 39.8c4 0 6.7-.4 8.2-1.4 1.5-.9 2.2-3.1 2.2-6.6v-12c0-1.9-.6-3.4-1.7-4.6s-2.7-1.8-4.7-1.8c-2.3 0-4 .7-5 2.2-1 1.4-1.5 2.9-1.5 4.3v7.5h-13.2v-7.7c0-2.7.5-5.2 1.5-7.6s2.4-4.5 4.3-6.2c1.8-1.7 3.9-3.1 6.3-4.1 2.4-1 5-1.5 7.8-1.5 3.6 0 6.6.7 9 2.1 2.4 1.4 4.2 2.9 5.4 4.3.8 1 1.6 2.1 2.2 3.1.6 1 1.2 2.3 1.6 3.7.8 2.8 1.1 7.1 1.1 12.7 0 3.2 0 5.8-.2 7.8-.1 2-.4 3.6-.9 4.9-.6 1.4-1.4 2.5-2.5 3.5-1.1.9-2.6 2-4.5 3.1 2.1 1.3 3.6 2.5 4.7 3.6s1.9 2.4 2.4 3.9.8 3.4.9 5.5c.1 2.1.1 4.8.1 8.1 0 3 0 5.5-.2 7.5-.1 2-.3 3.6-.6 4.9-.2 1.4-.6 2.5-1 3.5-.4.9-1 1.9-1.7 3-1.6 2.4-3.7 4.4-6.3 6-2.5 1.6-5.9 2.4-10 2.4-2.1 0-4.3-.3-6.6-1s-4.4-1.8-6.3-3.4c-1.9-1.5-3.5-3.6-4.7-6.1-1.2-2.5-1.9-5.6-1.9-9.2v-7.5h13.2v6.9c0 2.1.6 3.8 1.7 5.1s2.7 2 4.7 2 3.5-.6 4.7-2c1.1-1.3 1.7-3.1 1.7-5.4V60.1c0-3.6-.7-6-2.1-7.1-.8-.7-1.8-1.1-3.2-1.3-1.3-.1-3.1-.2-5.2-.2V39.8h.3zM219.4 93.2V79.4H193V67L212 .9h14L206.3 67h13.1V40.7h13.2V67h6.3v12.4h-6.3v13.7h-13.2zM283.7.8v12.4h-26.2v24.9c1.2-1.2 2.7-2.2 4.6-3s4-1.2 6.3-1.2c4.5 0 8.1 1.3 10.9 4.1s4.2 6.8 4.2 12.2v23.9c0 3.1-.5 5.9-1.6 8.3-1.1 2.4-2.5 4.5-4.3 6.2-1.8 1.7-3.9 3-6.3 3.9-2.4.9-4.8 1.3-7.4 1.3s-5.1-.4-7.4-1.3c-2.4-.9-4.5-2.2-6.3-3.9-1.8-1.7-3.2-3.8-4.3-6.2-1.1-2.4-1.6-5.2-1.6-8.3v-3.9h13.2v3.4c0 2.2.6 4 1.9 5.2 1.2 1.2 2.9 1.9 4.8 1.9 2 0 3.5-.6 4.6-1.8 1.1-1.2 1.6-2.9 1.6-5V52.2c0-1.8-.6-3.4-1.7-4.6-1.1-1.3-2.6-1.9-4.5-1.9-1.1 0-2.1.2-2.8.6-.8.4-1.4.8-1.9 1.3s-.9 1.1-1.1 1.7c-.4.8-.7 1.2-.8 1.4H246V.8h37.7zM326.9.8l-15 38.8.2.2c.4-.3 1.1-.6 2-.8.9-.2 2.1-.3 3.5-.3 2.3 0 4.5.5 6.5 1.7 2 1.1 3.5 2.5 4.6 4.3.6.9 1.1 1.9 1.4 2.8s.6 2.2.9 3.7c.1 1.5.3 3.5.4 5.9.1 2.4.1 5.4.1 9 0 3 0 5.5-.1 7.4-.1 1.9-.2 3.5-.4 4.8-.2 1.4-.6 2.5-.9 3.5-.4.9-.9 1.9-1.5 3-1.7 2.8-4 5-6.9 6.6-2.9 1.5-6.1 2.3-9.8 2.3s-6.9-.8-9.7-2.4c-2.8-1.6-5.1-3.8-6.9-6.5-.7-1-1.2-2-1.6-3-.4-.9-.6-2.1-.8-3.5-.2-1.3-.4-2.9-.5-4.8-.1-1.9-.1-4.4-.1-7.4 0-2.8 0-5.2.1-7.1.1-1.8.2-3.5.4-4.8.1-1.3.4-2.5.8-3.5.3-1.1.7-2.2 1.1-3.4L312.1.8h14.8zM318.5 57c0-2-.6-3.6-1.9-4.8s-2.8-1.8-4.5-1.8-3.2.6-4.5 1.8c-1.3 1.2-1.9 2.8-1.9 4.8v17.1c0 2 .6 3.6 1.9 4.8 1.3 1.2 2.8 1.8 4.5 1.8s3.2-.6 4.5-1.8c1.3-1.2 1.9-2.8 1.9-4.8V57zM343.3 93.2l23.2-79.9H352v10.6h-11.7V.9h39.5V14l-22.4 79.1h-14.1zM388.3 25c0-2.5.1-4.6.2-6.4.1-1.7.4-3.3.9-4.6s.9-2.4 1.5-3.5c.5-1 1.3-2.1 2.1-3.2 1.7-2.2 3.9-4 6.5-5.2C402.2.7 405 0 408 0s5.8.6 8.4 1.9c2.6 1.2 4.7 3 6.5 5.2.8 1.1 1.6 2.2 2.2 3.2s1.1 2.2 1.5 3.5.7 2.8.8 4.6.2 3.9.2 6.4c0 2.7 0 5.1-.1 7-.1 1.9-.3 3.6-.8 5s-1.1 2.8-2 3.9c-.9 1.1-2.1 2.4-3.7 3.7 1.5 1.2 2.8 2.4 3.7 3.6.9 1.2 1.6 2.6 2 4.3.4 1.6.7 3.6.8 6 .1 2.4.1 5.3.1 8.7 0 2.8 0 5.2-.2 7.1-.1 1.8-.3 3.5-.6 4.8-.2 1.4-.6 2.5-1.1 3.5-.5.9-1 1.9-1.7 3-1.4 2.2-3.5 4.2-6.2 5.8-2.7 1.6-5.9 2.4-9.8 2.4s-7.2-.8-9.8-2.4c-2.7-1.6-4.7-3.5-6.2-5.8-.7-1-1.3-2-1.7-3-.5-.9-.8-2.1-1.1-3.5s-.4-3-.6-4.8-.2-4.2-.2-7.1c0-3.4 0-6.4.1-8.7.1-2.4.3-4.4.8-6 .4-1.6 1.1-3 2-4.3.9-1.2 2.1-2.4 3.7-3.6-1.5-1.3-2.8-2.5-3.7-3.7-.9-1.1-1.6-2.5-2-3.9-.4-1.4-.7-3.1-.8-5-.2-1.7-.2-4.1-.2-6.8zm26.2-5.2c0-1.8-.6-3.3-1.9-4.6s-2.8-1.9-4.5-1.9-3.2.6-4.5 1.9c-1.3 1.2-1.9 2.8-1.9 4.6v13.5c0 1.8.6 3.3 1.9 4.6s2.8 1.9 4.5 1.9 3.2-.6 4.5-1.9c1.3-1.2 1.9-2.8 1.9-4.6V19.8zm0 36.3c0-1.8-.6-3.3-1.9-4.6s-2.8-1.9-4.5-1.9-3.2.6-4.5 1.9c-1.3 1.2-1.9 2.8-1.9 4.6v18.2c0 1.8.6 3.3 1.9 4.6s2.8 1.9 4.5 1.9 3.2-.6 4.5-1.9c1.3-1.2 1.9-2.8 1.9-4.6V56.1zM441 93.2l15-38.8-.2-.2c-.4.3-1.1.6-2 .8-.9.2-2.1.3-3.5.3-2.3 0-4.5-.5-6.5-1.7-2-1.1-3.5-2.5-4.6-4.3-.6-.8-1.1-1.8-1.4-2.8-.3-1-.6-2.2-.8-3.8-.2-1.5-.4-3.5-.5-5.9-.1-2.4-.1-5.4-.1-9 0-3 0-5.5.1-7.4.1-1.9.2-3.6.5-5 .1-1.3.4-2.4.8-3.4.4-.9.9-1.9 1.5-3 1.7-2.8 4-5 6.9-6.6C449.1.9 452.3.1 456 .1s6.9.8 9.7 2.4 5.1 3.8 6.9 6.5c.6 1 1.1 2 1.5 3s.8 2.1 1 3.4c.1 1.4.3 3 .4 5 .1 1.9.1 4.4.1 7.4 0 2.8 0 5.2-.1 7.1-.1 1.8-.2 3.4-.4 4.7-.2 1.4-.5 2.6-.8 3.7-.3 1.1-.6 2.2-1.1 3.4l-17.4 46.5H441zm8.5-56.2c0 2 .6 3.6 1.9 4.8 1.3 1.2 2.8 1.8 4.5 1.8s3.2-.6 4.5-1.8c1.3-1.2 1.9-2.8 1.9-4.8V19.9c0-2-.6-3.6-1.9-4.8-1.3-1.2-2.8-1.8-4.5-1.8s-3.2.6-4.5 1.8-1.9 2.8-1.9 4.8V37z\"/></svg>",
                    "width": 1248,
                    "height": 94,
                    "mimetype": "svg+xml"
                });
            }, true);

            var fetch_i_g_hooppictogram_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/hooppictogram.svg', {
                    "data": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100\" height=\"100\" style=\"enable-background:new 0 0 100 100\" xml:space=\"preserve\"><path d=\"M14.3 40.7s15.1 3.7 35.1 3.7c21 0 36.2-3.7 36.2-3.7M17.4 59.1s13.2 3.7 33.2 3.7c21 0 31.9-3.7 31.9-3.7M17.9 75.6S31.7 81 50.6 81c19.7 0 32-5.4 32-5.4M24.3 24c5.7 14.6 8 33.1 8.7 55.4M6.7 24c11 18.5 11.9 30.6 11.8 53.2M49.4 24v57.5M75.7 24c-5.7 14.6-8 33.1-8.7 55.4M93.3 24c-11 18.5-11.9 30.5-11.8 53.1\" style=\"fill:none;stroke:#fff;stroke-width:2.7603;stroke-miterlimit:10\"/><path d=\"M100 22.9c0 1.5-1.2 2.6-2.6 2.6H2.6c-1.5 0-2.6-1.2-2.6-2.6v-1.8c0-1.5 1.2-2.6 2.6-2.6h94.7c1.5 0 2.6 1.2 2.6 2.6l.1 1.8z\" style=\"fill:#fff\"/></svg>",
                    "width": 100,
                    "height": 100,
                    "mimetype": "svg+xml"
                });
            }, true);

            var fetch_i_g_ballpictogram_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/ballpictogram.svg', {
                    "data": "<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0\" y=\"0\" width=\"100\" height=\"100\" style=\"enable-background:new 0 0 100 100\" xml:space=\"preserve\"><style>.st0{fill:#fff}</style><path class=\"st0\" d=\"M50 100C22.4 100 0 77.6 0 50S22.4 0 50 0s50 22.4 50 50-22.4 50-50 50zm0-94C25.7 6 6 25.7 6 50s19.7 44 44 44 44-19.7 44-44S74.3 6 50 6z\"/><path class=\"st0\" d=\"M97.4 47.9H71.3c.7-20.7 10.9-33.3 10.9-33.3l-2.7-1.7S68.4 27 67.6 47.9H52.5V2.6h-5v45.2H31.9c-.7-20.9-11.7-35-11.7-35l-2.6 1.7s10.1 12.6 10.8 33.3h-26v4.4h25.9c-.8 18.5-10.8 33.3-10.8 33.3l2.6 1.8S31 70.8 31.8 52.2h15.6v45.2h5V52.3h15.2c.8 18.5 11.8 35.1 11.8 35.1l2.7-1.8S72 70.8 71.2 52.3h26.1v-4.4z\"/></svg>",
                    "width": 100,
                    "height": 100,
                    "mimetype": "svg+xml"
                });
            }, true);

            var fetch_i_g_crownpictogram_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/crownpictogram.svg', {
                    "data": "<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0\" y=\"0\" width=\"100\" height=\"100\" style=\"enable-background:new 0 0 100 100\" xml:space=\"preserve\"><style>.st0{fill:#fff}</style><path class=\"st0\" d=\"M93.5 34.4 67.8 55.6 50 22.3 32.2 55.8 6.4 34.3l10.8 51.4h65.7l10.6-51.3z\"/><circle class=\"st0\" cx=\"7.1\" cy=\"32.9\" r=\"7.1\"/><circle class=\"st0\" cx=\"92.9\" cy=\"32.9\" r=\"7.1\"/><circle class=\"st0\" cx=\"50\" cy=\"21.5\" r=\"7.1\"/></svg>",
                    "width": 100,
                    "height": 100,
                    "mimetype": "svg+xml"
                });
            }, true);

            var fetch_i_g_clockpictogram_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/clockpictogram.svg', {
                    "data": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100\" height=\"100\" style=\"enable-background:new 0 0 100 100\" xml:space=\"preserve\"><circle cx=\"50\" cy=\"50\" r=\"47\" style=\"fill:none;stroke:#fff;stroke-width:6;stroke-miterlimit:10\"/><path d=\"M70.5 55H50c-2.8 0-5-2.2-5-5V19.9c0-2.8 2.2-5 5-5s5 2.2 5 5V45h15.5c2.8 0 5 2.2 5 5s-2.2 5-5 5z\" style=\"fill:#fff\"/></svg>",
                    "width": 100,
                    "height": 100,
                    "mimetype": "svg+xml"
                });
            }, true);

            var fetch_i_g_rim_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/rim.svg', {
                    "data": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"570\" height=\"40\" style=\"enable-background:new 0 0 570 40\" xml:space=\"preserve\"><path d=\"M570 25c0 8.3-6.7 15-15 15H15C6.7 40 0 33.3 0 25V15C0 6.7 6.7 0 15 0h540c8.3 0 15 6.7 15 15v10z\" style=\"fill:#ff6c00\"/><path d=\"M518.8 21.5c0 2.6-2.1 4.6-4.6 4.6H377c-2.6 0-4.6-2.1-4.6-4.6v-3.1c0-2.6 2.1-4.6 4.6-4.6h137.1c2.6 0 4.6 2.1 4.6 4.6v3.1z\" style=\"fill:#ff9a55\"/><path d=\"M555.5 21.5c0 2.6-2.1 4.6-4.6 4.6h-17.1c-2.6 0-4.6-2.1-4.6-4.6v-3.1c0-2.6 2.1-4.6 4.6-4.6h17.1c2.6 0 4.6 2.1 4.6 4.6v3.1z\" style=\"fill:#ffd5b8\"/></svg>",
                    "width": 570,
                    "height": 40,
                    "mimetype": "svg+xml"
                });
            }, true);

            var fetch_i_g_button_ad_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/button_ad.svg', {
                    "data": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"64\" height=\"64\" style=\"enable-background:new 0 0 64 64\" xml:space=\"preserve\"><path d=\"M61.7 54c0 5.5-4.5 10-10 10H12.3c-5.5 0-10-4.5-10-10V14.6c0-5.5 4.5-10 10-10h39.4c5.5 0 10 4.5 10 10V54z\" style=\"fill:#305c2e\"/><path d=\"M61.7 49.4c0 5.5-4.5 10-10 10H12.3c-5.5 0-10-4.5-10-10V10c0-5.5 4.5-10 10-10h39.4c5.5 0 10 4.5 10 10v39.4z\" style=\"fill:#35af4a\"/><path style=\"fill:#fff\" d=\"M51 29.7 13.4 8v43.4z\"/></svg>",
                    "width": 64,
                    "height": 64,
                    "mimetype": "svg+xml"
                });
            }, true);

            var fetch_i_g_coinflat_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/coinflat.svg', {
                    "data": "<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0\" y=\"0\" width=\"176\" height=\"30\" style=\"enable-background:new 0 0 176 30\" xml:space=\"preserve\"><style>.st3{fill:#ffc843}</style><path style=\"fill:#ffb225\" d=\"M61 6.5h73.8v17.1H61z\"/><linearGradient id=\"SVGID_1_\" gradientUnits=\"userSpaceOnUse\" x1=\"118.145\" y1=\"19.791\" x2=\"157.449\" y2=\"10.559\"><stop offset=\"0\" style=\"stop-color:#ffee60\"/><stop offset=\"1\" style=\"stop-color:#ffffe8\"/></linearGradient><path style=\"fill:url(#SVGID_1_)\" d=\"M134.8 6.5h7.5v17.1h-7.5z\"/><linearGradient id=\"SVGID_2_\" gradientUnits=\"userSpaceOnUse\" x1=\"42.379\" y1=\"26.67\" x2=\"10.399\" y2=\"-29.069\"><stop offset=\"0\" style=\"stop-color:#ffee60\"/><stop offset=\"1\" style=\"stop-color:#ffffe8\"/></linearGradient><path d=\"M12.1 6.5c-1.7 0-3 1.3-3 3v11.1c0 1.7 1.3 3 3 3H61V6.5H12.1z\" style=\"fill:url(#SVGID_2_)\"/><path class=\"st3\" d=\"M142.3 6.5h11.9v17.1h-11.9zM163.9 6.5h-4.5v17.1h4.5c1.7 0 3-1.3 3-3V9.5c0-1.7-1.3-3-3-3z\"/><linearGradient id=\"SVGID_3_\" gradientUnits=\"userSpaceOnUse\" x1=\"152.931\" y1=\"38.09\" x2=\"157.582\" y2=\"10.184\"><stop offset=\"0\" style=\"stop-color:#ffee60\"/><stop offset=\"1\" style=\"stop-color:#ffffe8\"/></linearGradient><path style=\"fill:url(#SVGID_3_)\" d=\"M154.2 6.5h5.2v17.1h-5.2z\"/></svg>",
                    "width": 176,
                    "height": 30,
                    "mimetype": "svg+xml"
                });
            }, true);

            var fetch_i_g_coinflatshadow_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/coinflatshadow.svg', {
                    "data": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"176\" height=\"30\" style=\"enable-background:new 0 0 176 30\" xml:space=\"preserve\"><path d=\"M166.4 4.5c1.7 0 3.1 1.4 3.1 3.1v14.8c0 1.7-1.4 3.1-3.1 3.1H9.6c-1.7 0-3.1-1.4-3.1-3.1V7.6c0-1.7 1.4-3.1 3.1-3.1\" style=\"opacity:.25\"/></svg>",
                    "width": 176,
                    "height": 30,
                    "mimetype": "svg+xml"
                });
            }, true);

            var fetch_i_g_floor_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/floor.svg', {
                    "data": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"2711.2\" height=\"631.1\" style=\"enable-background:new 0 0 2711.2 631.1\" xml:space=\"preserve\"><path style=\"fill:#61392e\" d=\"M2711.2 631.1H11.2L552.9-1h1618.3z\"/><path style=\"fill:#ff7d43\" d=\"M2657.2 615H73.3L563.6 10.1h1597.7z\"/><path style=\"fill:#368196\" d=\"M2589.1 608.6H139.4L584.3 31.7H2146z\"/><path style=\"opacity:.15;fill:#505050\" d=\"M2657.2 615h-1292V10.1h796.1z\"/></svg>",
                    "width": 2711.2,
                    "height": 631.1,
                    "mimetype": "svg+xml"
                });
            }, true);

            var fetch_i_g_shadow_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/shadow.svg', {
                    "data": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"473\" height=\"80\" xml:space=\"preserve\"><ellipse opacity=\".5\" cx=\"237\" cy=\"40\" rx=\"236.5\" ry=\"40\"/></svg>",
                    "width": 473,
                    "height": 80,
                    "mimetype": "svg+xml"
                });
            }, true);

            var fetch_i_g_coinsheet_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/coinsheet.svg', {
                    "data": "<svg version=\"1.1\" id=\"Layer_2\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0\" y=\"0\" width=\"1000\" height=\"500\" style=\"enable-background:new 0 0 1000 500\" xml:space=\"preserve\"><style>.st2{fill:#ffcd04}.st4{opacity:.43}.st5{fill:#fff}.st8{opacity:.45;fill:#fd9809;enable-background:new}.st10{fill:#c14211}.st12{fill:#42210b}.st13{opacity:.64}.st16{opacity:.33}.st21{opacity:.53;fill:#c14211;enable-background:new}</style><linearGradient id=\"SVGID_1_\" gradientUnits=\"userSpaceOnUse\" x1=\"120.914\" y1=\"967.408\" x2=\"120.914\" y2=\"873.171\" gradientTransform=\"translate(0 -750)\"><stop offset=\"0\" style=\"stop-color:#c14211\"/><stop offset=\"1\" style=\"stop-color:#fd9809\"/></linearGradient><ellipse cx=\"120.9\" cy=\"122\" rx=\"89.3\" ry=\"89.5\" style=\"fill:url(#SVGID_1_)\"/><linearGradient id=\"SVGID_00000037673994741691724980000001147039101117220524_\" gradientUnits=\"userSpaceOnUse\" x1=\"138.259\" y1=\"783.394\" x2=\"102.442\" y2=\"961.361\" gradientTransform=\"translate(0 -750)\"><stop offset=\"0\" style=\"stop-color:#fff\"/><stop offset=\".275\" style=\"stop-color:#ffffa6\"/><stop offset=\"1\" style=\"stop-color:#ffdc00\"/></linearGradient><ellipse style=\"fill:url(#SVGID_00000037673994741691724980000001147039101117220524_)\" cx=\"120.9\" cy=\"119.6\" rx=\"89.3\" ry=\"89.5\"/><path class=\"st2\" d=\"M208.4 119.6c0-48.2-39-83.9-87.4-83.9s-87.4 35.7-87.4 83.9 39.1 87.5 87.4 87.5 87.4-39.3 87.4-87.5z\"/><linearGradient id=\"SVGID_00000177472247818187693910000004208307849425416855_\" gradientUnits=\"userSpaceOnUse\" x1=\"115.739\" y1=\"844.521\" x2=\"125.198\" y2=\"890.073\" gradientTransform=\"translate(0 -750)\"><stop offset=\"0\" style=\"stop-color:#ffed51;stop-opacity:0\"/><stop offset=\".615\" style=\"stop-color:#fff;stop-opacity:.5\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.435\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.3546\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.2661\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.1717\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:7.378837e-02\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><ellipse style=\"opacity:.65;fill:url(#SVGID_00000177472247818187693910000004208307849425416855_);enable-background:new\" cx=\"120.9\" cy=\"119.4\" rx=\"87.4\" ry=\"87.5\"/><g class=\"st4\"><path class=\"st5\" d=\"m37.4 150.6 172.9-33c-.1-9-1.6-17.7-4.2-25.9L31.8 125c.6 9 2.6 17.6 5.6 25.6z\"/><linearGradient id=\"SVGID_00000174562352048384929610000018077807189600055976_\" gradientUnits=\"userSpaceOnUse\" x1=\"120.227\" y1=\"865.673\" x2=\"122.216\" y2=\"874.871\" gradientTransform=\"translate(0 -750)\"><stop offset=\"0\" style=\"stop-color:#ffed51;stop-opacity:0\"/><stop offset=\".615\" style=\"stop-color:#fff\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.87\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.7093\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.5322\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.3434\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:.1476\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><path style=\"opacity:.64;fill:url(#SVGID_00000174562352048384929610000018077807189600055976_);enable-background:new\" d=\"m37.4 150.6 172.9-33c-.1-9-1.6-17.7-4.2-25.9L31.8 125c.6 9 2.6 17.6 5.6 25.6z\"/><linearGradient id=\"SVGID_00000148642701373209106060000009471568203473751741_\" gradientUnits=\"userSpaceOnUse\" x1=\"120.227\" y1=\"865.673\" x2=\"122.216\" y2=\"874.871\" gradientTransform=\"translate(0 -750)\"><stop offset=\"0\" style=\"stop-color:#ffed51;stop-opacity:0\"/><stop offset=\".615\" style=\"stop-color:#fff\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.87\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.7093\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.5322\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.3434\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:.1476\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><path style=\"opacity:.64;fill:url(#SVGID_00000148642701373209106060000009471568203473751741_);enable-background:new\" d=\"m37.4 150.6 172.9-33c-.1-9-1.6-17.7-4.2-25.9L31.8 125c.6 9 2.6 17.6 5.6 25.6z\"/><path class=\"st5\" d=\"M198.9 93s6.7-3.2 3.3-10.3c-3.3-7.3 3.7 9.1 3.7 9.1l-7 1.2zM202.5 119s6.9-.9 7.7 6.6c0 0 .3-3.2.3-8.1l-8 1.5zM38.7 123.7s-7.7-1.1-7.1-6.1c0 0-.1 4.5.3 7.4l6.8-1.3zM37.4 150.6l5.9-1.2s-4.5 1.3-3.4 7.5l-2.5-6.3z\"/></g><circle class=\"st8\" cx=\"121.2\" cy=\"119.2\" r=\"67.5\"/><linearGradient id=\"SVGID_00000171718719425356078790000001853389273292407959_\" gradientUnits=\"userSpaceOnUse\" x1=\"121.178\" y1=\"812.729\" x2=\"121.178\" y2=\"933.869\" gradientTransform=\"translate(0 -750)\"><stop offset=\"0\" style=\"stop-color:#ffffa6\"/><stop offset=\"1\" style=\"stop-color:#ffdc00\"/></linearGradient><circle style=\"fill:url(#SVGID_00000171718719425356078790000001853389273292407959_)\" cx=\"121.2\" cy=\"119.2\" r=\"62.5\"/><circle class=\"st10\" cx=\"120.9\" cy=\"119.6\" r=\"60.9\"/><linearGradient id=\"SVGID_00000016774579062209804830000003154424346866812344_\" gradientUnits=\"userSpaceOnUse\" x1=\"140.294\" y1=\"749.365\" x2=\"110.944\" y2=\"934.422\" gradientTransform=\"translate(0 -750)\"><stop offset=\"0\" style=\"stop-color:#ffcd04\"/><stop offset=\".532\" style=\"stop-color:#fd9809\"/><stop offset=\".746\" style=\"stop-color:#d96111\"/><stop offset=\".805\" style=\"stop-color:#da6510;stop-opacity:.9179\"/><stop offset=\".862\" style=\"stop-color:#dc700e;stop-opacity:.8405\"/><stop offset=\".916\" style=\"stop-color:#df830a;stop-opacity:.765\"/><stop offset=\".97\" style=\"stop-color:#e49e04;stop-opacity:.6912\"/><stop offset=\"1\" style=\"stop-color:#e7b000;stop-opacity:.65\"/></linearGradient><ellipse style=\"opacity:.6;fill:url(#SVGID_00000016774579062209804830000003154424346866812344_);enable-background:new\" cx=\"120.9\" cy=\"121.6\" rx=\"60.9\" ry=\"58.9\"/><path class=\"st12\" d=\"M168.4 109c-.4-.8-.8-1.5-1.3-2.2-4.9-7.4-13-12.4-22.1-13.3-11.5-1.2-22.3 4.6-28.5 14.1L106.1 123l-3.2 4.4c-6.5 9.3-20 .8-14.5-8.9 2.4-4.1 8.2-5.3 12.2-2.5.9.7 1.7 1.6 2.5 2.8l9.1-13.6c-4.5-4.1-10.3-6.6-16.5-6.5-19.4-.1-31.2 22.3-20 38.2 10 13.6 29.9 13.6 39.8.1l9.4-14c.7-1.1 2.2-3.4 3-4.4 1.7-2.6 3.4-5.2 5.9-7.1 9.4-6.5 21.9.3 22.1 11.5 0 10-10.3 16.9-19.7 13-4-1.6-6.3-5.2-8.5-8.5-.1-.3-.3-.4-.4-.4l-9.8 13.9c2.1 2.6 4.4 4.6 4.4 4.6 4.6 4.1 10.7 6.7 16.9 7.4 23.9 2.1 41.1-23.2 29.6-44z\"/><path class=\"st2\" d=\"M168.4 105.6c-.4-.8-.8-1.5-1.3-2.2-4.9-7.4-13-12.4-22.1-13.3-11.5-1.2-22.3 4.6-28.5 14.1l-10.3 15.5-3.2 4.5c-6.5 9.3-20 .8-14.5-8.9 2.4-4.1 8.2-5.3 12.2-2.5.9.7 1.7 1.6 2.5 2.8l9.1-13.6c-4.5-4.1-10.3-6.6-16.5-6.5-19.4-.1-31.2 22.3-20 38.2 9.9 13.7 29.7 13.7 39.8.1l9.4-14c.7-1.1 2.2-3.4 3-4.4 1.7-2.6 3.4-5.2 5.9-7.1 9.4-6.5 21.9.3 22.1 11.5 0 10-10.3 16.9-19.7 13-4-1.6-6.3-5.2-8.5-8.5-.1-.3-.3-.4-.4-.4l-9.8 13.9c2.1 2.6 4.4 4.6 4.4 4.6 4.6 4.1 10.7 6.7 16.9 7.4 23.8 2 41-23.5 29.5-44.2z\"/><g class=\"st13\"><linearGradient id=\"SVGID_00000021110651125393346120000009548049728998950043_\" gradientUnits=\"userSpaceOnUse\" x1=\"115.404\" y1=\"838.013\" x2=\"124.855\" y2=\"885.434\" gradientTransform=\"translate(0 -750)\"><stop offset=\"0\" style=\"stop-color:#ffed51;stop-opacity:0\"/><stop offset=\".615\" style=\"stop-color:#fff;stop-opacity:.63\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.5481\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.4468\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.3353\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.2164\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:9.297335e-02\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><path style=\"fill:url(#SVGID_00000021110651125393346120000009548049728998950043_)\" d=\"M168.4 105.6c-.4-.8-.8-1.5-1.3-2.2-4.9-7.4-13-12.4-22.1-13.3-11.5-1.2-22.3 4.6-28.5 14.1l-10.3 15.5-3.2 4.5c-6.5 9.3-20 .8-14.5-8.9 2.4-4.1 8.2-5.3 12.2-2.5.9.7 1.7 1.6 2.5 2.8l9.1-13.6c-4.5-4.1-10.3-6.6-16.5-6.5-19.4-.1-31.2 22.3-20 38.2 9.9 13.7 29.7 13.7 39.8.1l9.4-14c.7-1.1 2.2-3.4 3-4.4 1.7-2.6 3.4-5.2 5.9-7.1 9.4-6.5 21.9.3 22.1 11.5 0 10-10.3 16.9-19.7 13-4-1.6-6.3-5.2-8.5-8.5-.1-.3-.3-.4-.4-.4l-9.8 13.9c2.1 2.6 4.4 4.6 4.4 4.6 4.6 4.1 10.7 6.7 16.9 7.4 23.8 2 41-23.5 29.5-44.2z\"/></g><linearGradient id=\"SVGID_00000034051943811527128260000015422264569992321182_\" gradientUnits=\"userSpaceOnUse\" x1=\"121.411\" y1=\"833.687\" x2=\"122.303\" y2=\"900.946\" gradientTransform=\"translate(0 -750)\"><stop offset=\"0\" style=\"stop-color:#ffffa6\"/><stop offset=\"1\" style=\"stop-color:#ffdc00\"/></linearGradient><path style=\"fill:url(#SVGID_00000034051943811527128260000015422264569992321182_)\" d=\"M142.1 90.9c.9 0 1.9 0 2.8.1 8.7.8 16.5 5.6 21.4 13.1.4.5.8 1.3 1.3 2.2 4.9 8.7 4.6 19.3-.5 28.1-5.3 9-14.5 14.4-24.6 14.4-1.1 0-2.1 0-3-.1-5.9-.5-11.8-3.2-16.4-7.1 0 0-2-1.7-3.8-4l8.5-12c2 3 4.5 6.6 8.5 8.2 2 .8 4 1.3 5.9 1.3 8.3 0 15.1-6.7 15.1-15.1 0-4.1-1.7-7.9-4.8-10.8-2.8-2.6-6.7-4.1-10.4-4.1-3 0-5.9.9-8.5 2.6-2.5 1.9-4.1 4.2-5.8 6.7l-.4.7c-.7 1.1-2.2 3.3-3 4.5l-9.4 14c-4.6 6.2-11.5 9.8-19.2 9.8s-14.5-3.8-19.2-10c-5-7-5.7-16-1.6-23.9 2-3.7 4.8-6.9 8.2-9.1 3.7-2.4 7.9-3.6 12.3-3.6h.4c5.3 0 10.6 2 14.9 5.7l-7.8 11.6c-.7-.8-1.3-1.3-1.9-1.9-1.5-1.2-3.4-1.7-5.4-1.7-3.3 0-6.5 1.7-8.2 4.5-1.9 3.2-1.9 6.7-.3 9.4 1.7 2.9 4.9 4.9 8.5 4.9 3.2 0 5.9-1.6 7.9-4.4l3-4.5 10.3-15.5c5.9-8.8 15.2-14 25.2-14m0-1.1c-10.3 0-20.1 5.7-25.6 14.4l-10.3 15.5-3.2 4.5c-2 2.8-4.6 4.1-7.1 4.1-5.8 0-11.2-6.1-7.4-13 1.5-2.6 4.4-4.1 7.3-4.1 1.7 0 3.3.4 4.9 1.5.9.7 1.7 1.6 2.5 2.8l9.1-13.5c-4.5-4.1-10.3-6.5-16.3-6.5h-.4c-19.4 0-30.9 22.5-19.7 38.2 4.9 6.9 12.4 10.3 20 10.3s14.8-3.3 20-10.2l9.5-14c.7-1.1 2.2-3.4 3-4.4 1.7-2.6 3.4-5.2 5.9-7.1 2.5-1.7 5.3-2.5 7.9-2.5 7.3 0 14 5.8 14.1 14 0 8.1-6.7 14-14.1 14-1.9 0-3.7-.4-5.6-1.2-4-1.6-6.3-5.2-8.5-8.5-.1-.1-.1-.3-.3-.4l-9.8 13.9c2.1 2.6 4.4 4.6 4.4 4.6 4.6 4.1 10.7 6.7 16.9 7.4 1.1.1 2.1.1 3.2.1 21.9 0 37-24.1 26.2-43.9-.4-.8-.8-1.5-1.3-2.2-5-7.7-13.1-12.7-22.3-13.6-1.1-.2-2.1-.2-3-.2z\"/><g class=\"st16\"><path class=\"st5\" d=\"M128.1 124.2c-.1-.3-.3-.4-.4-.4l-8.6 12.2 17.2-3.3c-3.8-1.9-6.3-5.3-8.2-8.5z\"/><path class=\"st5\" d=\"M171.3 125.8c1.3-6.5.7-13.5-2.9-20.1-.4-.8-.8-1.5-1.3-2.2-.7-1.2-1.5-2.2-2.4-3.2l-52.5 10-6.3 9.4-2.9 4.5c-6.5 9.3-20 .8-14.5-8.9.1-.3.3-.4.4-.5l-17.6 3.3c-.4 5.2.9 10.7 4.4 15.6 2.9 4 6.5 6.7 10.4 8.5l26.4-5c1.1-.9 2-2.1 2.8-3.2l9.4-14c.7-1.1 2.2-3.4 3-4.4 1.7-2.6 3.4-5.2 5.9-7.1 9.4-6.5 21.9.3 22.1 11.5 0 3.8-1.5 7.3-4 9.6l19.6-3.8z\"/><path class=\"st5\" d=\"m103.1 115.5 2.6-4-5.4 1.2c.1.1.3.1.4.3.8.5 1.6 1.4 2.4 2.5z\"/></g><linearGradient id=\"SVGID_00000120556069804823889350000007112579938773762991_\" gradientUnits=\"userSpaceOnUse\" x1=\"163.069\" y1=\"770.619\" x2=\"150.136\" y2=\"812.404\" gradientTransform=\"translate(0 -750)\"><stop offset=\".615\" style=\"stop-color:#fff\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.87\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.7093\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.5322\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.3434\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:.1476\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><path style=\"fill:url(#SVGID_00000120556069804823889350000007112579938773762991_)\" d=\"M167.6 52.4c-1.3 4.9-8.3 7.5-15.6 5.7-7.4-2-12.2-7.5-11-12.6 1.3-4.9 8.3-7.5 15.6-5.7 7.4 2.1 12.3 7.8 11 12.6z\"/><linearGradient id=\"SVGID_00000142155343447263940060000007874207304571214510_\" gradientUnits=\"userSpaceOnUse\" x1=\"145.334\" y1=\"831.408\" x2=\"141.355\" y2=\"853.296\" gradientTransform=\"translate(0 -750)\"><stop offset=\".615\" style=\"stop-color:#fff\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.87\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.7093\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.5322\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.3434\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:.1476\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><ellipse style=\"fill:url(#SVGID_00000142155343447263940060000007874207304571214510_)\" cx=\"142.7\" cy=\"95.8\" rx=\"6.6\" ry=\"4.6\"/><linearGradient id=\"SVGID_00000170249639154688014750000008876615289236875963_\" gradientUnits=\"userSpaceOnUse\" x1=\"-432.285\" y1=\"695.591\" x2=\"-440.592\" y2=\"741.277\" gradientTransform=\"rotate(11.496 2475.947 3120.52)\"><stop offset=\".615\" style=\"stop-color:#fff\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.87\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.7093\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.5322\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.3434\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:.1476\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><path style=\"opacity:.6;fill:url(#SVGID_00000170249639154688014750000008876615289236875963_);enable-background:new\" d=\"M110.2 195.6c-1.1 5.2-7.4 8.3-14.1 6.9-6.7-1.5-11.4-6.7-10.3-11.9 1.1-5.2 7.4-8.3 14.1-6.9 6.7 1.4 11.5 6.7 10.3 11.9z\"/><linearGradient id=\"SVGID_00000080921391798573288410000007373424733871825821_\" gradientUnits=\"userSpaceOnUse\" x1=\"883.846\" y1=\"1224.291\" x2=\"883.846\" y2=\"1006.307\" gradientTransform=\"translate(0 -750)\"><stop offset=\"0\" style=\"stop-color:#c14211\"/><stop offset=\".434\" style=\"stop-color:#fb9509\"/><stop offset=\".829\" style=\"stop-color:#ffcd04\"/><stop offset=\".999\" style=\"stop-color:#fcee21\"/></linearGradient><path style=\"fill:url(#SVGID_00000080921391798573288410000007373424733871825821_)\" d=\"M965.8 368.5c0-50.6-39.1-90.6-84.3-90.6-45.2 0-79.7 40.2-79.7 90.6s36.7 91.4 81.9 91.4c45.3 0 82.1-40.9 82.1-91.4z\"/><path class=\"st21\" d=\"M963.5 368.5c0-50.6-39.1-90.6-84.3-90.6s-79.7 40.2-79.7 90.6 36.7 91.4 81.9 91.4c45.4 0 82.1-40.9 82.1-91.4z\"/><linearGradient id=\"SVGID_00000054964932924430009660000016625115495540255630_\" gradientUnits=\"userSpaceOnUse\" x1=\"870.333\" y1=\"1217.606\" x2=\"870.333\" y2=\"1121.935\" gradientTransform=\"translate(0 -750)\"><stop offset=\"0\" style=\"stop-color:#c14211\"/><stop offset=\"1\" style=\"stop-color:#fd9809\"/></linearGradient><ellipse style=\"fill:url(#SVGID_00000054964932924430009660000016625115495540255630_)\" cx=\"870.3\" cy=\"370.7\" rx=\"88.1\" ry=\"90.7\"/><linearGradient id=\"SVGID_00000173879850890870763290000011907864280648453283_\" gradientUnits=\"userSpaceOnUse\" x1=\"887.905\" y1=\"1030.899\" x2=\"851.585\" y2=\"1211.364\" gradientTransform=\"translate(0 -750)\"><stop offset=\"0\" style=\"stop-color:#fff\"/><stop offset=\".275\" style=\"stop-color:#ffffa6\"/><stop offset=\"1\" style=\"stop-color:#ffdc00\"/></linearGradient><ellipse style=\"fill:url(#SVGID_00000173879850890870763290000011907864280648453283_)\" cx=\"870.3\" cy=\"368.2\" rx=\"88.1\" ry=\"90.7\"/><path class=\"st2\" d=\"M956.5 368.2c0-49-38.5-85.1-86-85.1s-86.1 36.1-86.1 85.1 38.6 88.8 86 88.8c47.3 0 86.1-39.8 86.1-88.8z\"/><linearGradient id=\"SVGID_00000120558568865987654810000017258971985973591957_\" gradientUnits=\"userSpaceOnUse\" x1=\"865.099\" y1=\"1092.869\" x2=\"874.69\" y2=\"1139.058\" gradientTransform=\"translate(0 -750)\"><stop offset=\"0\" style=\"stop-color:#ffed51;stop-opacity:0\"/><stop offset=\".615\" style=\"stop-color:#fff;stop-opacity:.5\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.435\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.3546\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.2661\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.1717\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:7.378837e-02\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><ellipse style=\"opacity:.65;fill:url(#SVGID_00000120558568865987654810000017258971985973591957_);enable-background:new\" cx=\"870.3\" cy=\"368.1\" rx=\"86\" ry=\"88.8\"/><g class=\"st4\"><path class=\"st5\" d=\"m788 399.9 170.3-33.6c-.1-9.1-1.7-18.1-4.2-26.3l-171.5 33.7c.5 9.2 2.5 18 5.4 26.2z\"/><linearGradient id=\"SVGID_00000094602976409011838460000001989935222193622419_\" gradientUnits=\"userSpaceOnUse\" x1=\"869.607\" y1=\"1114.539\" x2=\"871.551\" y2=\"1123.53\" gradientTransform=\"translate(0 -750)\"><stop offset=\"0\" style=\"stop-color:#ffed51;stop-opacity:0\"/><stop offset=\".615\" style=\"stop-color:#fff\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.87\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.7093\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.5322\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.3434\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:.1476\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><path style=\"opacity:.64;fill:url(#SVGID_00000094602976409011838460000001989935222193622419_);enable-background:new\" d=\"m788 399.9 170.3-33.6c-.1-9.1-1.7-18.1-4.2-26.3l-171.5 33.7c.5 9.2 2.5 18 5.4 26.2z\"/><linearGradient id=\"SVGID_00000067926302458731121390000002508868057848620187_\" gradientUnits=\"userSpaceOnUse\" x1=\"869.607\" y1=\"1114.539\" x2=\"871.551\" y2=\"1123.53\" gradientTransform=\"translate(0 -750)\"><stop offset=\"0\" style=\"stop-color:#ffed51;stop-opacity:0\"/><stop offset=\".615\" style=\"stop-color:#fff\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.87\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.7093\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.5322\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.3434\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:.1476\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><path style=\"opacity:.64;fill:url(#SVGID_00000067926302458731121390000002508868057848620187_);enable-background:new\" d=\"m788 399.9 170.3-33.6c-.1-9.1-1.7-18.1-4.2-26.3l-171.5 33.7c.5 9.2 2.5 18 5.4 26.2z\"/><path class=\"st5\" d=\"M947.2 341.3s6.7-3.2 3.4-10.5c-3.2-7.4 3.6 9.2 3.6 9.2l-7 1.3zM950.7 367.8s6.7-1 7.4 6.7c0 0 .3-3.2.3-8.1l-7.7 1.4zM789.4 372.4s-7.4-1.1-7-6.2c0 0-.1 4.6.3 7.4l6.7-1.2zM788 399.9l5.9-1.1s-4.5 1.4-3.4 7.6l-2.5-6.5z\"/></g><ellipse class=\"st8\" cx=\"870.6\" cy=\"367.9\" rx=\"66.5\" ry=\"68.5\"/><linearGradient id=\"SVGID_00000107549383695862893300000008880085688584340381_\" gradientUnits=\"userSpaceOnUse\" x1=\"870.613\" y1=\"1060.574\" x2=\"870.613\" y2=\"1183.557\" gradientTransform=\"translate(0 -750)\"><stop offset=\"0\" style=\"stop-color:#ffffa6\"/><stop offset=\"1\" style=\"stop-color:#ffdc00\"/></linearGradient><ellipse style=\"fill:url(#SVGID_00000107549383695862893300000008880085688584340381_)\" cx=\"870.6\" cy=\"367.9\" rx=\"61.6\" ry=\"63.6\"/><ellipse class=\"st10\" cx=\"870.3\" cy=\"368.2\" rx=\"59.9\" ry=\"61.9\"/><linearGradient id=\"SVGID_00000181776900330098070380000005109494631055253137_\" gradientUnits=\"userSpaceOnUse\" x1=\"889.972\" y1=\"996.346\" x2=\"860.198\" y2=\"1184.072\" gradientTransform=\"translate(0 -750)\"><stop offset=\"0\" style=\"stop-color:#ffcd04\"/><stop offset=\".532\" style=\"stop-color:#fd9809\"/><stop offset=\".746\" style=\"stop-color:#d96111\"/><stop offset=\".805\" style=\"stop-color:#da6510;stop-opacity:.9179\"/><stop offset=\".862\" style=\"stop-color:#dc700e;stop-opacity:.8405\"/><stop offset=\".916\" style=\"stop-color:#df830a;stop-opacity:.765\"/><stop offset=\".97\" style=\"stop-color:#e49e04;stop-opacity:.6912\"/><stop offset=\"1\" style=\"stop-color:#e7b000;stop-opacity:.65\"/></linearGradient><circle style=\"opacity:.6;fill:url(#SVGID_00000181776900330098070380000005109494631055253137_);enable-background:new\" cx=\"870.3\" cy=\"370.2\" r=\"59.9\"/><path class=\"st12\" d=\"M917.1 357.6c-.4-.8-.8-1.5-1.3-2.4-4.8-7.4-12.7-12.7-21.8-13.6-11.3-1.1-22 4.6-28.1 14.4l-10.2 15.7-2.9 4.6c-6.3 9.4-19.6.8-14.3-9 2.5-4.2 8.1-5.3 11.9-2.5 1 .7 1.8 1.7 2.5 2.8l8.8-13.9c-4.5-4.1-10.2-6.7-16.2-6.6-19.2-.1-30.8 22.7-19.5 38.6 9.7 13.9 29.3 13.9 39.2.1l9.4-14.3c.7-1.1 2.2-3.5 3.1-4.5 1.8-2.7 3.4-5.3 6-7.3 9.2-6.6 21.6.3 21.7 11.8 0 10.2-10.2 17.2-19.5 13.2-3.9-1.7-6.2-5.3-8.3-8.5-.1-.3-.3-.4-.4-.4l-9.5 14c2 2.7 4.3 4.6 4.3 4.6 4.6 4.2 10.5 6.9 16.7 7.4 22.7 2.7 39.5-23.2 28.4-44.2z\"/><path class=\"st2\" d=\"M917.1 354.2c-.4-.8-.8-1.5-1.3-2.4-4.8-7.4-12.7-12.7-21.8-13.6-11.3-1.1-22 4.6-28.1 14.4l-10.2 15.7-2.9 4.6c-6.3 9.4-19.6.8-14.3-9 2.5-4.2 8.1-5.3 11.9-2.5 1 .7 1.8 1.7 2.5 2.8l8.8-13.9c-4.5-4.1-10.2-6.7-16.2-6.6-19.2-.1-30.8 22.7-19.5 38.6 9.7 13.9 29.3 13.9 39.2.1l9.4-14.3c.7-1.1 2.2-3.5 3.1-4.5 1.8-2.7 3.4-5.3 6-7.3 9.2-6.6 21.6.3 21.7 11.8 0 10.2-10.2 17.2-19.5 13.2-3.9-1.7-6.2-5.3-8.3-8.5-.1-.3-.3-.4-.4-.4l-9.5 14c2 2.7 4.3 4.6 4.3 4.6 4.6 4.2 10.5 6.9 16.7 7.4 22.7 2.7 39.5-23.2 28.4-44.2z\"/><g class=\"st13\"><linearGradient id=\"SVGID_00000114043658996406870330000009512734824236119484_\" gradientUnits=\"userSpaceOnUse\" x1=\"864.72\" y1=\"1086.437\" x2=\"874.264\" y2=\"1134.325\" gradientTransform=\"translate(0 -750)\"><stop offset=\"0\" style=\"stop-color:#ffed51;stop-opacity:0\"/><stop offset=\".615\" style=\"stop-color:#fff;stop-opacity:.63\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.5481\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.4468\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.3353\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.2164\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:9.297335e-02\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><path style=\"fill:url(#SVGID_00000114043658996406870330000009512734824236119484_)\" d=\"M917.1 354.2c-.4-.8-.8-1.5-1.3-2.4-4.8-7.4-12.7-12.7-21.8-13.6-11.3-1.1-22 4.6-28.1 14.4l-10.2 15.7-2.9 4.6c-6.3 9.4-19.6.8-14.3-9 2.5-4.2 8.1-5.3 11.9-2.5 1 .7 1.8 1.7 2.5 2.8l8.8-13.9c-4.5-4.1-10.2-6.7-16.2-6.6-19.2-.1-30.8 22.7-19.5 38.6 9.7 13.9 29.3 13.9 39.2.1l9.4-14.3c.7-1.1 2.2-3.5 3.1-4.5 1.8-2.7 3.4-5.3 6-7.3 9.2-6.6 21.6.3 21.7 11.8 0 10.2-10.2 17.2-19.5 13.2-3.9-1.7-6.2-5.3-8.3-8.5-.1-.3-.3-.4-.4-.4l-9.5 14c2 2.7 4.3 4.6 4.3 4.6 4.6 4.2 10.5 6.9 16.7 7.4 22.7 2.7 39.5-23.2 28.4-44.2z\"/></g><linearGradient id=\"SVGID_00000039110569456182536520000011083497455795668111_\" gradientUnits=\"userSpaceOnUse\" x1=\"870.699\" y1=\"1081.843\" x2=\"871.605\" y2=\"1150.125\" gradientTransform=\"translate(0 -750)\"><stop offset=\"0\" style=\"stop-color:#ffffa6\"/><stop offset=\"1\" style=\"stop-color:#ffdc00\"/></linearGradient><path style=\"fill:url(#SVGID_00000039110569456182536520000011083497455795668111_)\" d=\"M891.2 339.1c1 0 1.8 0 2.7.1 8.7.8 16.4 5.6 21 13.2.4.6.8 1.3 1.3 2.2 4.8 8.8 4.6 19.6-.6 28.6-5.3 9.1-14.3 14.6-24.4 14.6-1 0-2 0-3.1-.1-5.9-.6-11.6-3.2-16.1-7.3 0 0-1.8-1.8-3.8-3.9l8.4-12.2c2 3.1 4.5 6.7 8.3 8.3 1.8.8 3.9 1.3 5.9 1.3 8.1 0 14.8-6.9 14.8-15.3 0-4.2-1.7-8.1-4.6-11.1-2.8-2.7-6.6-4.2-10.2-4.2-2.9 0-5.9 1-8.4 2.7-2.5 1.8-4.1 4.3-5.7 6.7l-.4.7c-.7 1.1-2.4 3.4-3.1 4.6l-9.4 14.3c-4.6 6.3-11.3 9.9-18.8 9.9-7.4 0-14.4-3.6-18.8-10.1-5-7.1-5.6-16.2-1.7-24.4 1.8-3.8 4.6-7 8.1-9.2 3.6-2.5 7.8-3.6 12.2-3.6h.4c5.3 0 10.4 2 14.7 5.7l-7.7 11.9c-.6-.8-1.3-1.4-1.8-1.8-1.5-1.1-3.4-1.8-5.3-1.8-3.2 0-6.3 1.8-8.1 4.6-1.8 3.2-1.8 6.7-.3 9.5 1.7 2.9 4.9 4.9 8.3 4.9 3.1 0 5.9-1.7 7.8-4.5l2.9-4.6 10.2-15.7c6.3-8.7 15.4-14 25.3-14m0-1c-10.2 0-19.6 5.7-25.2 14.6l-10.2 15.7-2.9 4.6c-2 2.8-4.6 4.1-7 4.1-5.7 0-10.9-6.2-7.3-13.2 1.5-2.7 4.3-4.1 7.1-4.1 1.7 0 3.2.4 4.6 1.5 1 .7 1.8 1.7 2.5 2.8l8.8-13.9c-4.3-4.1-10.1-6.6-16-6.6h-.4c-19.2 0-30.5 22.8-19.5 38.6 4.9 7 12.2 10.5 19.5 10.5s14.6-3.4 19.6-10.4l9.4-14.3c.7-1.1 2.2-3.5 3.1-4.5 1.8-2.7 3.4-5.3 6-7.3 2.5-1.8 5.2-2.5 7.8-2.5 7.3 0 13.9 5.9 13.9 14.3 0 8.1-6.6 14.3-13.9 14.3-1.8 0-3.6-.4-5.5-1.1-3.9-1.7-6.2-5.3-8.3-8.5-.1-.3-.3-.4-.4-.4l-9.5 14c2 2.7 4.3 4.6 4.3 4.6 4.6 4.2 10.5 6.9 16.7 7.4 1.1.1 2.1.1 3.1.1 21.6 0 36.4-24.5 25.8-44.5-.4-.8-.8-1.5-1.3-2.4-4.8-7.4-12.7-12.7-21.8-13.6-1.2.2-2.2.2-3 .2z\"/><g class=\"st16\"><path class=\"st5\" d=\"M877.2 372.8c-.1-.3-.3-.4-.4-.4l-8.5 12.3 16.9-3.4c-3.5-1.6-5.9-5.1-8-8.5z\"/><path class=\"st5\" d=\"M919.9 374.5c1.4-6.6.7-13.7-2.8-20.3-.4-.8-.8-1.5-1.3-2.4-.7-1.1-1.5-2.2-2.4-3.2l-51.7 10.2-6.2 9.5-2.9 4.6c-6.3 9.4-19.6.8-14.3-9 .1-.3.3-.4.4-.6l-17.2 3.4c-.4 5.3 1 10.9 4.3 15.8 2.8 3.9 6.4 6.9 10.2 8.5l26-5.2c1-1 1.8-2.1 2.8-3.2l9.4-14.3c.7-1.1 2.2-3.5 3.1-4.5 1.8-2.7 3.4-5.3 6-7.3 9.2-6.6 21.6.3 21.7 11.8 0 3.9-1.5 7.4-3.9 9.8l18.8-3.6z\"/><path class=\"st5\" d=\"m852.8 364.2 2.5-3.9-5.3 1.1c.1.1.3.1.4.3.7.4 1.6 1.3 2.4 2.5z\"/></g><linearGradient id=\"SVGID_00000114049756952570617280000001476449193665149615_\" gradientUnits=\"userSpaceOnUse\" x1=\"912.13\" y1=\"1017.937\" x2=\"899.039\" y2=\"1060.231\" gradientTransform=\"translate(0 -750)\"><stop offset=\".615\" style=\"stop-color:#fff\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.87\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.7093\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.5322\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.3434\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:.1476\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><path style=\"fill:url(#SVGID_00000114049756952570617280000001476449193665149615_)\" d=\"M916.3 300.2c-1.3 5-8.1 7.6-15.3 5.7-7.3-2-12-7.6-10.8-12.7 1.3-5 8.1-7.6 15.3-5.7 7.3 1.9 12 7.6 10.8 12.7z\"/><linearGradient id=\"SVGID_00000140715867557809072710000007546171088760101767_\" gradientUnits=\"userSpaceOnUse\" x1=\"894.431\" y1=\"1079.569\" x2=\"890.398\" y2=\"1101.747\" gradientTransform=\"translate(0 -750)\"><stop offset=\".615\" style=\"stop-color:#fff\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.87\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.7093\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.5322\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.3434\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:.1476\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><ellipse style=\"fill:url(#SVGID_00000140715867557809072710000007546171088760101767_)\" cx=\"891.8\" cy=\"344.3\" rx=\"6.6\" ry=\"4.6\"/><linearGradient id=\"SVGID_00000129167465707965629690000014288866735698767281_\" gradientUnits=\"userSpaceOnUse\" x1=\"352.267\" y1=\"790.698\" x2=\"343.879\" y2=\"836.831\" gradientTransform=\"rotate(11.496 2475.947 3120.52)\"><stop offset=\".615\" style=\"stop-color:#fff\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.87\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.7093\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.5322\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.3434\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:.1476\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><path style=\"opacity:.6;fill:url(#SVGID_00000129167465707965629690000014288866735698767281_);enable-background:new\" d=\"M859.8 445.4c-1.1 5.3-7.3 8.4-14 7s-11.2-6.7-10.2-12c1.1-5.3 7.3-8.4 14-7 6.7 1.3 11.2 6.8 10.2 12z\"/><linearGradient id=\"SVGID_00000004510630995642333310000017757356531039032211_\" gradientUnits=\"userSpaceOnUse\" x1=\"-1147.538\" y1=\"964.971\" x2=\"-1147.538\" y2=\"870.724\" gradientTransform=\"matrix(-1 0 0 1 -767.98 -750)\"><stop offset=\"0\" style=\"stop-color:#c14211\"/><stop offset=\"1\" style=\"stop-color:#fd9809\"/></linearGradient><ellipse style=\"fill:url(#SVGID_00000004510630995642333310000017757356531039032211_)\" cx=\"379.6\" cy=\"119.5\" rx=\"80\" ry=\"89.4\"/><linearGradient id=\"SVGID_00000156560941368511812600000015574764464539672962_\" gradientUnits=\"userSpaceOnUse\" x1=\"-1133.775\" y1=\"971.769\" x2=\"-1133.775\" y2=\"758.737\" gradientTransform=\"matrix(-1 0 0 1 -767.98 -750)\"><stop offset=\"0\" style=\"stop-color:#c14211\"/><stop offset=\".434\" style=\"stop-color:#fb9509\"/><stop offset=\".829\" style=\"stop-color:#ffcd04\"/><stop offset=\".999\" style=\"stop-color:#fcee21\"/></linearGradient><path style=\"fill:url(#SVGID_00000156560941368511812600000015574764464539672962_)\" d=\"M285.7 118.4c0-49.4 38.1-88.5 82.4-88.5s77.8 39.1 77.8 88.5-35.9 89.4-80 89.4-80.2-40.1-80.2-89.4z\"/><linearGradient id=\"SVGID_00000078031607134686205970000000811523779741214883_\" gradientUnits=\"userSpaceOnUse\" x1=\"-1132.908\" y1=\"785.575\" x2=\"-1135.893\" y2=\"815.427\" gradientTransform=\"matrix(-1 0 0 1 -767.98 -750)\"><stop offset=\"0\" style=\"stop-color:#ffed51;stop-opacity:0\"/><stop offset=\".615\" style=\"stop-color:#fff\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.87\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.7093\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.5322\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.3434\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:.1476\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><path style=\"opacity:.64;fill:url(#SVGID_00000078031607134686205970000000811523779741214883_);enable-background:new\" d=\"M293.5 122.1c0-49.4 38.1-88.5 82.4-88.5s77.8 39.1 77.8 88.5-35.9 89.4-80 89.4c-44.3-.2-80.2-40.2-80.2-89.4z\"/><ellipse class=\"st21\" cx=\"374.8\" cy=\"117.6\" rx=\"80\" ry=\"89.4\"/><linearGradient id=\"SVGID_00000032637506091833919050000017767945198408504766_\" gradientUnits=\"userSpaceOnUse\" x1=\"-1113.516\" y1=\"775.286\" x2=\"-1178.44\" y2=\"950.283\" gradientTransform=\"matrix(-1 0 0 1 -767.98 -750)\"><stop offset=\"0\" style=\"stop-color:#fff\"/><stop offset=\".275\" style=\"stop-color:#ffffa6\"/><stop offset=\"1\" style=\"stop-color:#ffdc00\"/></linearGradient><ellipse style=\"fill:url(#SVGID_00000032637506091833919050000017767945198408504766_)\" cx=\"379.6\" cy=\"117\" rx=\"80\" ry=\"89.4\"/><path class=\"st2\" d=\"M301.2 117c.1-47 34.9-83.8 78.2-83.8S458 68.9 458 117s-35.1 87.5-78.3 87.5c-43.5 0-78.5-39.1-78.5-87.5z\"/><linearGradient id=\"SVGID_00000111183365688949187940000014600115373357592233_\" gradientUnits=\"userSpaceOnUse\" x1=\"373.488\" y1=\"842.243\" x2=\"382.902\" y2=\"887.58\" gradientTransform=\"translate(.932 -750)\"><stop offset=\"0\" style=\"stop-color:#ffed51;stop-opacity:0\"/><stop offset=\".615\" style=\"stop-color:#fff;stop-opacity:.5\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.435\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.3546\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.2661\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.1717\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:7.378837e-02\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><ellipse style=\"opacity:.65;fill:url(#SVGID_00000111183365688949187940000014600115373357592233_);enable-background:new\" cx=\"379.6\" cy=\"117\" rx=\"78.3\" ry=\"87.5\"/><g class=\"st4\"><path class=\"st5\" d=\"m304.7 148.2 154.8-33c-.1-9-1.6-17.8-3.8-26l-156.1 33.5c.5 8.8 2.3 17.6 5.1 25.5z\"/><linearGradient id=\"SVGID_00000116205499028721239160000000138688460727104150_\" gradientUnits=\"userSpaceOnUse\" x1=\"377.981\" y1=\"863.945\" x2=\"379.715\" y2=\"871.964\" gradientTransform=\"translate(.964 -750)\"><stop offset=\"0\" style=\"stop-color:#ffed51;stop-opacity:0\"/><stop offset=\".615\" style=\"stop-color:#fff\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.87\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.7093\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.5322\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.3434\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:.1476\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><path style=\"opacity:.64;fill:url(#SVGID_00000116205499028721239160000000138688460727104150_);enable-background:new\" d=\"m304.7 148.2 154.8-33c-.1-9-1.6-17.8-3.8-26l-156.1 33.5c.5 8.8 2.3 17.6 5.1 25.5z\"/><linearGradient id=\"SVGID_00000097492670471581250690000017799910988891625348_\" gradientUnits=\"userSpaceOnUse\" x1=\"377.981\" y1=\"863.945\" x2=\"379.715\" y2=\"871.964\" gradientTransform=\"translate(.964 -750)\"><stop offset=\"0\" style=\"stop-color:#ffed51;stop-opacity:0\"/><stop offset=\".615\" style=\"stop-color:#fff\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.87\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.7093\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.5322\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.3434\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:.1476\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><path style=\"opacity:.64;fill:url(#SVGID_00000097492670471581250690000017799910988891625348_);enable-background:new\" d=\"m304.7 148.2 154.8-33c-.1-9-1.6-17.8-3.8-26l-156.1 33.5c.5 8.8 2.3 17.6 5.1 25.5z\"/><path class=\"st5\" d=\"M449.4 90.5s6.1-3.1 3.1-10.4c-3-7.3 3.2 9 3.2 9l-6.3 1.4zM452.7 116.7s6.2-.8 6.9 6.6c0 0 .1-3.1.3-8l-7.2 1.4zM305.9 121.2s-6.9-1-6.4-6.1c0 0-.1 4.5.3 7.5l6.1-1.4zM304.7 148.2l5.4-1.1s-4.1 1.4-3.1 7.5l-2.3-6.4z\"/></g><ellipse class=\"st8\" cx=\"379.3\" cy=\"116.8\" rx=\"60.6\" ry=\"67.6\"/><linearGradient id=\"SVGID_00000112608298592027222750000013650668079614231945_\" gradientUnits=\"userSpaceOnUse\" x1=\"-1147.256\" y1=\"810.275\" x2=\"-1147.256\" y2=\"931.429\" gradientTransform=\"matrix(-1 0 0 1 -767.98 -750)\"><stop offset=\"0\" style=\"stop-color:#ffffa6\"/><stop offset=\"1\" style=\"stop-color:#ffdc00\"/></linearGradient><ellipse style=\"fill:url(#SVGID_00000112608298592027222750000013650668079614231945_)\" cx=\"379.3\" cy=\"116.8\" rx=\"56\" ry=\"62.7\"/><ellipse class=\"st10\" cx=\"379.6\" cy=\"117\" rx=\"54.6\" ry=\"61\"/><linearGradient id=\"SVGID_00000075130307924711432040000015088460214816351646_\" gradientUnits=\"userSpaceOnUse\" x1=\"-1120.937\" y1=\"783.876\" x2=\"-1160.677\" y2=\"919.486\" gradientTransform=\"matrix(-1 0 0 1 -767.98 -750)\"><stop offset=\"0\" style=\"stop-color:#ffcd04\"/><stop offset=\".532\" style=\"stop-color:#fd9809\"/><stop offset=\".746\" style=\"stop-color:#d96111\"/><stop offset=\".805\" style=\"stop-color:#da6510;stop-opacity:.9179\"/><stop offset=\".862\" style=\"stop-color:#dc700e;stop-opacity:.8405\"/><stop offset=\".916\" style=\"stop-color:#df830a;stop-opacity:.765\"/><stop offset=\".97\" style=\"stop-color:#e49e04;stop-opacity:.6912\"/><stop offset=\"1\" style=\"stop-color:#e7b000;stop-opacity:.65\"/></linearGradient><path style=\"opacity:.6;fill:url(#SVGID_00000075130307924711432040000015088460214816351646_);enable-background:new\" d=\"M324.9 119c0-38 23.4-60.8 52.9-60.8s52.1 25.8 52.5 58.4c.4 35.1-24.6 58.9-54.1 58.9-29.4.1-51.3-23.9-51.3-56.5z\"/><path class=\"st12\" d=\"M417.4 105.6c-.3-.8-.8-1.6-1.3-2.3-4.4-7.5-11.6-12.6-19.9-13.4-10.3-1.1-20 4.7-25.5 14.1l-9.3 15.4-2.7 4.5c-5.8 9.3-17.9.8-12.8-8.9 2.1-4.1 7.3-5.4 10.9-2.5.8.7 1.6 1.6 2.3 2.7l8-13.6c-4-4.1-9.3-6.5-14.8-6.5-17.5-.1-27.9 22.4-17.8 38.1 8.8 13.7 26.7 13.7 35.7.1l8.5-14.1c.6-1 2.1-3.4 2.7-4.5 1.6-2.7 3.1-5.2 5.4-7.1 8.3-6.4 19.8.3 19.9 11.6 0 10-9.3 16.9-17.6 13-3.5-1.6-5.6-5.1-7.5-8.5-.1-.3-.3-.3-.3-.4l-8.8 13.8c1.8 2.7 4 4.5 4 4.5 4.1 4.1 9.6 6.9 15.2 7.5 20.5 2.6 35.9-22.7 25.7-43.5z\"/><path class=\"st2\" d=\"M420.8 103.2c-.3-.8-.8-1.6-1.3-2.3-4.4-7.5-11.6-12.6-19.9-13.4-10.3-1.1-20 4.7-25.5 14.1l-9.3 15.4-2.7 4.5c-5.8 9.3-17.9.8-12.8-8.9 2.1-4.1 7.3-5.4 10.9-2.5.8.7 1.6 1.6 2.3 2.7l8-13.6c-4-4.1-9.3-6.5-14.8-6.5-17.5-.1-27.9 22.4-17.8 38.1 8.8 13.7 26.7 13.7 35.7.1l8.5-14.1c.6-1 2.1-3.4 2.7-4.5 1.6-2.7 3.1-5.2 5.4-7.1 8.3-6.4 19.8.3 19.9 11.6 0 10-9.3 16.9-17.6 13-3.5-1.6-5.6-5.1-7.5-8.5-.1-.3-.3-.3-.3-.4l-8.8 13.8c1.8 2.7 4 4.5 4 4.5 4.1 4.1 9.6 6.9 15.2 7.5 20.6 2.6 35.8-22.7 25.7-43.5z\"/><g class=\"st13\"><linearGradient id=\"SVGID_00000115494393243546663760000000760125520103910581_\" gradientUnits=\"userSpaceOnUse\" x1=\"361.917\" y1=\"836.223\" x2=\"371.198\" y2=\"882.788\" gradientTransform=\"translate(10.871 -750)\"><stop offset=\"0\" style=\"stop-color:#ffed51;stop-opacity:0\"/><stop offset=\".615\" style=\"stop-color:#fff;stop-opacity:.63\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.5481\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.4468\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.3353\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.2164\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:9.297335e-02\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><path style=\"fill:url(#SVGID_00000115494393243546663760000000760125520103910581_)\" d=\"M420.8 103.2c-.3-.8-.8-1.6-1.3-2.3-4.4-7.5-11.6-12.6-19.9-13.4-10.3-1.1-20 4.7-25.5 14.1l-9.3 15.4-2.7 4.5c-5.8 9.3-17.9.8-12.8-8.9 2.1-4.1 7.3-5.4 10.9-2.5.8.7 1.6 1.6 2.3 2.7l8-13.6c-4-4.1-9.3-6.5-14.8-6.5-17.5-.1-27.9 22.4-17.8 38.1 8.8 13.7 26.7 13.7 35.7.1l8.5-14.1c.6-1 2.1-3.4 2.7-4.5 1.6-2.7 3.1-5.2 5.4-7.1 8.3-6.4 19.8.3 19.9 11.6 0 10-9.3 16.9-17.6 13-3.5-1.6-5.6-5.1-7.5-8.5-.1-.3-.3-.3-.3-.4l-8.8 13.8c1.8 2.7 4 4.5 4 4.5 4.1 4.1 9.6 6.9 15.2 7.5 20.6 2.6 35.8-22.7 25.7-43.5z\"/></g><linearGradient id=\"SVGID_00000127007660549537327670000018405552382602942855_\" gradientUnits=\"userSpaceOnUse\" x1=\"369.417\" y1=\"831.213\" x2=\"370.309\" y2=\"898.479\" gradientTransform=\"translate(9.274 -750)\"><stop offset=\"0\" style=\"stop-color:#ffffa6\"/><stop offset=\"1\" style=\"stop-color:#ffdc00\"/></linearGradient><path style=\"fill:url(#SVGID_00000127007660549537327670000018405552382602942855_)\" d=\"M397.6 88.3c.8 0 1.7 0 2.5.1 7.9.8 14.8 5.6 19.2 13 .3.6.8 1.3 1.1 2.1 4.4 8.8 4.1 19.3-.6 28.1-4.8 9-13 14.4-22.2 14.4-.8 0-1.8 0-2.7-.1-5.4-.6-10.6-3.1-14.7-7.2 0 0-1.7-1.7-3.4-4l7.6-12c1.8 3.1 4 6.5 7.5 8 1.7.8 3.5 1.3 5.4 1.3 7.5 0 13.6-6.8 13.6-15.1 0-4.1-1.6-8-4.2-10.9-2.5-2.7-5.9-4.2-9.3-4.2-2.7 0-5.4.8-7.6 2.7s-3.8 4.4-5.2 6.8l-.3.7c-.7 1-2.1 3.2-2.7 4.5l-8.5 14.1c-4.1 6.2-10.4 9.7-17.1 9.7-6.9 0-13-3.7-17.1-9.9-4.5-7.1-5.1-16-1.6-23.9 1.7-3.8 4.2-6.9 7.3-9.2 3.2-2.4 7.1-3.7 11.2-3.7h.4c4.8 0 9.5 2.1 13.4 5.6l-6.9 11.7c-.6-.8-1.1-1.4-1.7-1.8-1.4-1.1-3.1-1.7-4.8-1.7-3 0-5.8 1.7-7.3 4.5-1.6 3.2-1.7 6.6-.3 9.5 1.6 3 4.5 4.8 7.5 4.8 2.8 0 5.4-1.6 7.1-4.5l2.7-4.5 9.3-15.4c5.2-8.2 13.7-13.5 22.4-13.5m0-.8c-9.3 0-17.9 5.6-23.1 14.4l-9.2 15.4-2.7 4.5c-1.7 2.8-4.1 4-6.4 4-5.1 0-10-6.1-6.6-13 1.4-2.7 4-4 6.5-4 1.6 0 3 .4 4.4 1.6.8.7 1.6 1.6 2.3 2.7l8-13.6c-4-4-9.2-6.5-14.7-6.5h-.4c-17.4 0-27.8 22.4-17.6 38.1 4.5 6.9 11.2 10.3 17.8 10.3s13.4-3.4 17.8-10.2l8.5-14.1c.6-1 2.1-3.4 2.7-4.5 1.6-2.7 3.1-5.2 5.4-7.1 2.3-1.7 4.7-2.5 7.1-2.5 6.5 0 12.7 5.8 12.7 14.1 0 8-5.9 14.1-12.7 14.1-1.6 0-3.2-.3-5.1-1.1-3.5-1.6-5.6-5.1-7.5-8.5-.1-.3-.3-.3-.3-.4l-8.8 13.8c1.8 2.7 4 4.5 4 4.5 4.1 4.1 9.6 6.9 15.2 7.5.8.1 2 .1 2.8.1 19.5 0 33.2-24.1 23.4-43.9-.3-.8-.8-1.6-1.3-2.3-4.4-7.5-11.6-12.6-19.9-13.4h-2.3z\"/><g class=\"st16\"><path class=\"st5\" d=\"M385.1 121.8c-.1-.3-.3-.3-.3-.4l-7.8 12.1 15.4-3.2c-3.4-2-5.4-5.4-7.3-8.5z\"/><path class=\"st5\" d=\"M423.9 123.3c1.3-6.5.6-13.6-2.7-20.2-.3-.8-.8-1.6-1.3-2.3-.7-1.1-1.4-2.1-2.1-3.2l-47 10-5.6 9.5-2.7 4.5c-5.8 9.3-17.9.8-12.8-8.9.1-.3.3-.3.3-.6l-15.7 3.2c-.3 5.2.8 10.7 4 15.5 2.5 4 5.8 6.8 9.3 8.5l23.7-5.1c.8-.8 1.7-2.1 2.5-3.2l8.5-14.1c.6-1 2.1-3.4 2.7-4.5 1.6-2.7 3.1-5.2 5.4-7.1 8.3-6.4 19.8.3 19.9 11.6 0 4-1.4 7.2-3.5 9.7l17.1-3.3z\"/><path class=\"st5\" d=\"m362.8 113 2.4-4-4.9 1c.1.1.3.1.3.3.6.6 1.5 1.7 2.2 2.7z\"/></g><linearGradient id=\"SVGID_00000169526517633929609150000010490876392809368487_\" gradientUnits=\"userSpaceOnUse\" x1=\"410.295\" y1=\"768.494\" x2=\"397.485\" y2=\"809.88\" gradientTransform=\"translate(2.984 -750)\"><stop offset=\".615\" style=\"stop-color:#fff\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.87\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.7093\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.5322\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.3434\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:.1476\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><path style=\"fill:url(#SVGID_00000169526517633929609150000010490876392809368487_)\" d=\"M416.4 50.1c-1.1 5.1-7.5 7.5-14 5.6-6.5-1.8-11-7.5-9.7-12.4 1.3-4.9 7.5-7.5 14-5.6 6.5 1.7 10.8 7.3 9.7 12.4z\"/><linearGradient id=\"SVGID_00000115516047764002388720000001848557801586400429_\" gradientUnits=\"userSpaceOnUse\" x1=\"397.943\" y1=\"828.578\" x2=\"393.989\" y2=\"850.328\" gradientTransform=\"translate(2.984 -750)\"><stop offset=\".615\" style=\"stop-color:#fff\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.87\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.7093\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.5322\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.3434\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:.1476\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><ellipse style=\"fill:url(#SVGID_00000115516047764002388720000001848557801586400429_)\" cx=\"398.3\" cy=\"92.9\" rx=\"5.9\" ry=\"4.5\"/><linearGradient id=\"SVGID_00000136403774749955477650000010149113965733414583_\" gradientUnits=\"userSpaceOnUse\" x1=\"-187.308\" y1=\"640.564\" x2=\"-195.468\" y2=\"685.447\" gradientTransform=\"rotate(11.496 2477.439 3135.343)\"><stop offset=\".615\" style=\"stop-color:#fff\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.87\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.7093\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.5322\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.3434\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:.1476\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><path style=\"opacity:.6;fill:url(#SVGID_00000136403774749955477650000010149113965733414583_);enable-background:new\" d=\"M363.2 190c-.8 5.1-6.6 8.2-12.7 6.9-6.1-1.4-10.3-6.8-9.3-11.9.8-5.1 6.6-8.2 12.7-6.9 6.2 1.3 10.3 6.8 9.3 11.9z\"/><linearGradient id=\"SVGID_00000171717815623327126840000011880241502032494504_\" gradientUnits=\"userSpaceOnUse\" x1=\"-1874.224\" y1=\"974.008\" x2=\"-1874.224\" y2=\"756.288\" gradientTransform=\"matrix(-1 0 0 1 -1252.819 -750)\"><stop offset=\"0\" style=\"stop-color:#c14211\"/><stop offset=\".434\" style=\"stop-color:#fb9509\"/><stop offset=\".829\" style=\"stop-color:#ffcd04\"/><stop offset=\".999\" style=\"stop-color:#fcee21\"/></linearGradient><path style=\"fill:url(#SVGID_00000171717815623327126840000011880241502032494504_)\" d=\"M541.9 119.6c0-50.4 28.8-91.4 79.5-90.5 45.2 1 79.5 39.9 79.5 90.5s-36.7 90.9-81.9 91.3c-51.1.4-77.1-40.7-77.1-91.3z\"/><path class=\"st21\" d=\"M558.8 119.6c0-50.4 32.9-90.5 62.7-90.5 45.2 0 79.5 39.9 79.5 90.5s-30.6 91.3-75.9 91.3c-29.3 0-66.3-40.7-66.3-91.3z\"/><linearGradient id=\"SVGID_00000155851215962754860470000011949818090938727555_\" gradientUnits=\"userSpaceOnUse\" x1=\"-1885.321\" y1=\"967.539\" x2=\"-1885.321\" y2=\"871.985\" gradientTransform=\"matrix(-1 0 0 1 -1252.819 -750)\"><stop offset=\"0\" style=\"stop-color:#c14211\"/><stop offset=\"1\" style=\"stop-color:#fd9809\"/></linearGradient><ellipse style=\"fill:url(#SVGID_00000155851215962754860470000011949818090938727555_)\" cx=\"632.5\" cy=\"120.7\" rx=\"67.7\" ry=\"90.6\"/><linearGradient id=\"SVGID_00000084510642865218395630000001802048656820722102_\" gradientUnits=\"userSpaceOnUse\" x1=\"-1867.91\" y1=\"781.695\" x2=\"-1903.913\" y2=\"960.587\" gradientTransform=\"matrix(-1 0 0 1 -1252.819 -750)\"><stop offset=\"0\" style=\"stop-color:#fff\"/><stop offset=\".275\" style=\"stop-color:#ffffa6\"/><stop offset=\"1\" style=\"stop-color:#ffdc00\"/></linearGradient><ellipse style=\"fill:url(#SVGID_00000084510642865218395630000001802048656820722102_)\" cx=\"632.5\" cy=\"118.2\" rx=\"67.7\" ry=\"90.6\"/><path class=\"st2\" d=\"M698.7 118.2c0-48.9-29.5-85-66.2-85s-66.3 36.1-66.3 85 29.6 88.6 66.2 88.6 66.3-39.6 66.3-88.6z\"/><linearGradient id=\"SVGID_00000001626583896655711150000016896201558559769525_\" gradientUnits=\"userSpaceOnUse\" x1=\"648.976\" y1=\"843.14\" x2=\"658.48\" y2=\"888.905\" gradientTransform=\"translate(-21.68 -750)\"><stop offset=\"0\" style=\"stop-color:#ffed51;stop-opacity:0\"/><stop offset=\".615\" style=\"stop-color:#fff;stop-opacity:.5\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.435\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.3546\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.2661\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.1717\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:7.378837e-02\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><ellipse style=\"opacity:.65;fill:url(#SVGID_00000001626583896655711150000016896201558559769525_);enable-background:new\" cx=\"632.5\" cy=\"118.2\" rx=\"66.2\" ry=\"88.6\"/><g class=\"st4\"><path class=\"st5\" d=\"m569 150 131.2-33.6c-.1-9.1-1.3-18-3.2-26.3l-132 33.7c.4 9.2 1.8 17.9 4 26.2z\"/><linearGradient id=\"SVGID_00000010293074147824513900000004612533212293445762_\" gradientUnits=\"userSpaceOnUse\" x1=\"653.327\" y1=\"864.253\" x2=\"655.381\" y2=\"873.754\" gradientTransform=\"translate(-21.653 -750)\"><stop offset=\"0\" style=\"stop-color:#ffed51;stop-opacity:0\"/><stop offset=\".615\" style=\"stop-color:#fff\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.87\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.7093\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.5322\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.3434\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:.1476\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><path style=\"opacity:.64;fill:url(#SVGID_00000010293074147824513900000004612533212293445762_);enable-background:new\" d=\"m569 150 131.2-33.6c-.1-9.1-1.3-18-3.2-26.3l-132 33.7c.4 9.2 1.8 17.9 4 26.2z\"/><linearGradient id=\"SVGID_00000178169729565664231010000015607827544577452166_\" gradientUnits=\"userSpaceOnUse\" x1=\"653.327\" y1=\"864.253\" x2=\"655.381\" y2=\"873.754\" gradientTransform=\"translate(-21.653 -750)\"><stop offset=\"0\" style=\"stop-color:#ffed51;stop-opacity:0\"/><stop offset=\".615\" style=\"stop-color:#fff\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.87\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.7093\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.5322\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.3434\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:.1476\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><path style=\"opacity:.64;fill:url(#SVGID_00000178169729565664231010000015607827544577452166_);enable-background:new\" d=\"m569 150 131.2-33.6c-.1-9.1-1.3-18-3.2-26.3l-132 33.7c.4 9.2 1.8 17.9 4 26.2z\"/><path class=\"st5\" d=\"M691.5 91.4s5.2-3.1 2.5-10.5c-2.5-7.3 2.8 9.3 2.8 9.3l-5.3 1.2zM694.3 117.9s5.2-1 5.8 6.6c0 0 .1-3.1.1-8.1l-5.9 1.5zM570.1 122.4s-5.9-1-5.3-6.2c0 0-.1 4.5.1 7.4l5.2-1.2zM569 150l4.5-1.1s-3.5 1.4-2.7 7.6L569 150z\"/></g><ellipse class=\"st8\" cx=\"632.2\" cy=\"118.1\" rx=\"51.1\" ry=\"68.4\"/><linearGradient id=\"SVGID_00000163072847778592184260000016020386367220616088_\" gradientUnits=\"userSpaceOnUse\" x1=\"-1885.04\" y1=\"810.698\" x2=\"-1885.04\" y2=\"933.531\" gradientTransform=\"matrix(-1 0 0 1 -1252.819 -750)\"><stop offset=\"0\" style=\"stop-color:#ffffa6\"/><stop offset=\"1\" style=\"stop-color:#ffdc00\"/></linearGradient><ellipse style=\"fill:url(#SVGID_00000163072847778592184260000016020386367220616088_)\" cx=\"632.2\" cy=\"118.1\" rx=\"47.5\" ry=\"63.5\"/><ellipse class=\"st10\" cx=\"632.5\" cy=\"118.2\" rx=\"46.1\" ry=\"61.8\"/><linearGradient id=\"SVGID_00000034776094407675243940000014817650089330730657_\" gradientUnits=\"userSpaceOnUse\" x1=\"-1863.682\" y1=\"748.626\" x2=\"-1892.681\" y2=\"931.466\" gradientTransform=\"matrix(-1 0 0 1 -1252.819 -750)\"><stop offset=\"0\" style=\"stop-color:#ffcd04\"/><stop offset=\".532\" style=\"stop-color:#fd9809\"/><stop offset=\".746\" style=\"stop-color:#d96111\"/><stop offset=\".805\" style=\"stop-color:#da6510;stop-opacity:.9179\"/><stop offset=\".862\" style=\"stop-color:#dc700e;stop-opacity:.8405\"/><stop offset=\".916\" style=\"stop-color:#df830a;stop-opacity:.765\"/><stop offset=\".97\" style=\"stop-color:#e49e04;stop-opacity:.6912\"/><stop offset=\"1\" style=\"stop-color:#e7b000;stop-opacity:.65\"/></linearGradient><path style=\"opacity:.6;fill:url(#SVGID_00000034776094407675243940000014817650089330730657_);enable-background:new\" d=\"M586.3 120.2c0-33 19.5-59.8 45-59.8 25.4 0 42.6 26.7 42.6 59.8 0 33-25.6 57.5-41.4 57.5-25.6.1-46.2-24.4-46.2-57.5z\"/><path class=\"st12\" d=\"M660.9 106.5c-.3-.8-.6-1.5-1-2.4-3.7-7.4-9.8-12.8-16.9-13.5-8.7-1.1-17 4.6-21.6 14.3l-8 15.6-2.4 4.5c-4.9 9.4-15.2.8-11-9 1.8-4.2 6.2-5.3 9.1-2.5.7.7 1.3 1.7 1.8 2.8l6.9-13.8c-3.4-4.1-8-6.6-12.5-6.6-14.9-.1-23.7 22.6-15 38.6 7.4 13.9 22.5 13.9 30.1.1l7.3-14.2c.6-1 1.7-3.5 2.4-4.5 1.3-2.7 2.5-5.2 4.5-7.3 7.2-6.6 16.7.3 16.9 11.7 0 10.1-7.9 17.1-14.9 13.1-2.9-1.7-4.8-5.2-6.5-8.6-.1-.3-.1-.3-.3-.4l-7.3 14c1.5 2.7 3.2 4.6 3.2 4.6 3.5 4.2 8 6.9 12.8 7.4 17.9 3.1 30.9-22.8 22.4-43.9z\"/><path class=\"st2\" d=\"M663.8 104.2c-.3-.8-.6-1.5-1-2.4-3.6-7.5-9.8-12.8-16.8-13.5-8.7-1.1-17 4.6-21.6 14.3l-8 15.6-2.4 4.5c-4.9 9.4-15.2.8-11-9 1.8-4.2 6.2-5.3 9.1-2.5.7.7 1.3 1.7 1.8 2.8l6.9-13.8c-3.4-4.1-8-6.6-12.5-6.6-14.9-.1-23.7 22.6-15 38.6 7.4 13.9 22.5 13.9 30.1.1l7.3-14.2c.6-1 1.7-3.5 2.4-4.5 1.3-2.7 2.5-5.2 4.5-7.3 7.2-6.6 16.7.3 16.9 11.7 0 10.1-7.9 17.1-14.9 13.1-2.9-1.7-4.8-5.2-6.5-8.6-.1-.3-.1-.3-.3-.4l-7.3 14c1.5 2.7 3.2 4.6 3.2 4.6 3.5 4.2 8 6.9 12.8 7.4 18 3 30.9-22.9 22.3-43.9z\"/><g class=\"st13\"><linearGradient id=\"SVGID_00000110435059965040202600000012832831862607367563_\" gradientUnits=\"userSpaceOnUse\" x1=\"632.793\" y1=\"837.965\" x2=\"641.958\" y2=\"883.954\" gradientTransform=\"translate(-10.34 -750)\"><stop offset=\"0\" style=\"stop-color:#ffed51;stop-opacity:0\"/><stop offset=\".615\" style=\"stop-color:#fff;stop-opacity:.63\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.5481\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.4468\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.3353\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.2164\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:9.297335e-02\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><path style=\"fill:url(#SVGID_00000110435059965040202600000012832831862607367563_)\" d=\"M664 104.2c-.3-.8-.6-1.5-1-2.4-3.7-7.4-9.8-12.8-16.9-13.5-8.7-1.1-17 4.6-21.6 14.3l-7.9 15.7-2.4 4.5c-4.9 9.4-15.2.8-11-9 1.8-4.2 6.2-5.3 9.1-2.5.7.7 1.3 1.7 1.8 2.8l6.9-13.8c-3.4-4.1-8-6.6-12.5-6.6-14.9-.1-23.7 22.6-15 38.6 7.4 13.9 22.5 13.9 30.1.1l7.3-14.2c.6-1 1.7-3.5 2.4-4.5 1.3-2.7 2.5-5.2 4.5-7.3 7.2-6.6 16.7.3 16.9 11.7 0 10.1-7.9 17.1-14.9 13.1-2.9-1.7-4.8-5.2-6.5-8.6-.1-.3-.1-.3-.3-.4l-7.3 14c1.5 2.7 3.2 4.6 3.2 4.6 3.5 4.2 8 6.9 12.8 7.4 17.9 2.9 31-23 22.3-44z\"/></g><linearGradient id=\"SVGID_00000053512120621187853890000012505416439166414224_\" gradientUnits=\"userSpaceOnUse\" x1=\"638.079\" y1=\"831.888\" x2=\"638.984\" y2=\"900.084\" gradientTransform=\"translate(-10.34 -750)\"><stop offset=\"0\" style=\"stop-color:#ffffa6\"/><stop offset=\"1\" style=\"stop-color:#ffdc00\"/></linearGradient><path style=\"fill:url(#SVGID_00000053512120621187853890000012505416439166414224_)\" d=\"M644 89.1c.7 0 1.4 0 2.1.1 6.6.8 12.6 5.6 16.3 13.2.3.6.6 1.3 1 2.2 3.7 8.8 3.5 19.7-.4 28.5-4.1 9.1-11 14.6-18.7 14.6-.8 0-1.5 0-2.4-.1-4.5-.6-9-3.1-12.4-7.3 0 0-1.5-1.7-2.8-3.9l6.5-12.1c1.5 3.1 3.4 6.6 6.5 8.3 1.4.8 2.9 1.3 4.5 1.3 6.3 0 11.4-6.9 11.4-15.3 0-4.2-1.3-8-3.5-11-2.1-2.7-5.1-4.2-8-4.2-2.4 0-4.5 1-6.5 2.7-1.8 1.8-3.1 4.4-4.5 6.7l-.3.7c-.6 1-1.7 3.4-2.4 4.5l-7.3 14.2c-3.5 6.3-8.7 10-14.5 10s-11.1-3.7-14.5-10.1c-3.8-7.2-4.4-16.3-1.1-24.3 1.4-3.8 3.7-7 6.2-9.3 2.8-2.4 5.9-3.7 9.4-3.7h.4c4.1 0 8 2 11.4 5.8l-5.9 11.9c-.4-.8-1-1.4-1.4-1.8-1.1-1.1-2.5-1.7-4.1-1.7-2.5 0-4.9 1.7-6.2 4.5-1.4 3.2-1.4 6.7-.1 9.6 1.3 2.9 3.8 4.9 6.3 4.9 2.4 0 4.5-1.7 6-4.5l2.2-4.5 8-15.6c4.2-8.9 11.2-14.3 18.8-14.3m0-.8c-8 0-15.2 5.8-19.5 14.6l-7.9 15.6-2.4 4.5c-1.5 2.8-3.5 4.1-5.3 4.1-4.5 0-8.4-6.2-5.6-13.1 1.1-2.7 3.4-4.1 5.5-4.1 1.3 0 2.5.4 3.7 1.5.7.7 1.3 1.7 1.8 2.8l6.9-13.8c-3.4-4.1-7.7-6.6-12.4-6.6h-.4c-14.7 0-23.6 22.8-14.9 38.6 3.8 7 9.4 10.5 15 10.5s11.4-3.4 15-10.3l7.3-14.2c.6-1 1.7-3.5 2.4-4.5 1.3-2.7 2.5-5.2 4.5-7.3 1.8-1.7 3.9-2.5 6-2.5 5.5 0 10.7 5.9 10.7 14.2 0 8.1-5.1 14.2-10.7 14.2-1.4 0-2.8-.3-4.2-1.1-2.9-1.7-4.8-5.2-6.5-8.6-.1-.3-.1-.3-.3-.4l-7.3 14c1.5 2.7 3.2 4.6 3.2 4.6 3.5 4.2 8 6.9 12.8 7.4.8.1 1.7.1 2.4.1 16.6 0 28.1-24.4 19.8-44.5-.3-.8-.6-1.5-1-2.4-3.7-7.4-9.8-12.8-16.9-13.5-.3.2-1 .2-1.7.2z\"/><g class=\"st16\"><path class=\"st5\" d=\"M633.3 123c-.1-.3-.1-.3-.3-.4l-6.6 12.2 13.1-3.4c-2.8-1.5-4.6-5-6.2-8.4z\"/><path class=\"st5\" d=\"M666.2 124.5c1-6.6.4-13.6-2.2-20.4-.3-.8-.6-1.5-1-2.4-.6-1.1-1.1-2.2-1.7-3.1l-39.8 10.1-4.8 9.4-2.4 4.5c-4.9 9.4-15.2.8-11-9 .1-.3.3-.3.3-.6l-13.2 3.4c-.3 5.2.7 10.8 3.2 15.7 2.1 3.9 4.9 6.9 8 8.6l20.1-5.2c.7-1 1.5-2.1 2.1-3.2l7.3-14.2c.6-1 1.7-3.5 2.4-4.5 1.3-2.7 2.5-5.2 4.5-7.3 7.2-6.6 16.7.3 16.9 11.7 0 3.8-1.1 7.3-3.1 9.8l14.4-3.3z\"/><path class=\"st5\" d=\"m614.5 114.1 2-3.9-4.1 1 .3.3c.6.7 1.3 1.7 1.8 2.6z\"/></g><linearGradient id=\"SVGID_00000110457165641720998970000015063762488463951001_\" gradientUnits=\"userSpaceOnUse\" x1=\"677.659\" y1=\"768.609\" x2=\"664.809\" y2=\"810.124\" gradientTransform=\"translate(-14.01 -750)\"><stop offset=\".615\" style=\"stop-color:#fff\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.87\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.7093\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.5322\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.3434\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:.1476\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><path style=\"fill:url(#SVGID_00000110457165641720998970000015063762488463951001_)\" d=\"M665 50.4c-1 5.1-6.3 7.6-11.8 5.8-5.6-2-9.3-7.6-8.3-12.8 1-5.1 6.3-7.6 11.8-5.8 5.6 2.1 9.2 7.6 8.3 12.8z\"/><linearGradient id=\"SVGID_00000053512770099180460960000012982033057313805742_\" gradientUnits=\"userSpaceOnUse\" x1=\"662.633\" y1=\"829.838\" x2=\"658.656\" y2=\"851.711\" gradientTransform=\"translate(-14.01 -750)\"><stop offset=\".615\" style=\"stop-color:#fff\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.87\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.7093\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.5322\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.3434\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:.1476\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><ellipse style=\"fill:url(#SVGID_00000053512770099180460960000012982033057313805742_)\" cx=\"646\" cy=\"94.3\" rx=\"5.1\" ry=\"4.6\"/><linearGradient id=\"SVGID_00000169539645767683693200000016131336932420653487_\" gradientUnits=\"userSpaceOnUse\" x1=\"85.27\" y1=\"590.916\" x2=\"77.177\" y2=\"635.429\" gradientTransform=\"rotate(11.496 2468.941 3050.928)\"><stop offset=\".615\" style=\"stop-color:#fff\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.87\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.7093\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.5322\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.3434\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:.1476\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><path style=\"opacity:.6;fill:url(#SVGID_00000169539645767683693200000016131336932420653487_);enable-background:new\" d=\"M621.5 195.5c-.8 5.2-5.6 8.4-10.7 7-5.2-1.4-8.7-6.7-7.9-12.1s5.6-8.4 10.7-7c5.3 1.4 8.6 6.7 7.9 12.1z\"/><linearGradient id=\"SVGID_00000162346118847855658270000006107299321937245858_\" gradientUnits=\"userSpaceOnUse\" x1=\"128.412\" y1=\"1197.238\" x2=\"128.412\" y2=\"1026.096\" gradientTransform=\"translate(0 -750)\"><stop offset=\"0\" style=\"stop-color:#c14211\"/><stop offset=\".434\" style=\"stop-color:#fb9509\"/><stop offset=\".829\" style=\"stop-color:#ffcd04\"/><stop offset=\".999\" style=\"stop-color:#fcee21\"/></linearGradient><path style=\"fill:url(#SVGID_00000162346118847855658270000006107299321937245858_)\" d=\"M152.1 367c0-51-10.1-88.6-20-88.6h-27.5v181h27.5c9.8-.1 20-41.4 20-92.4z\"/><path class=\"st21\" d=\"M127.1 367c0-51-10.1-88.6-20-88.6H105v181h2.1c9.9-.1 20-41.4 20-92.4z\"/><linearGradient id=\"SVGID_00000018946854270044106950000013073148109470461361_\" gradientUnits=\"userSpaceOnUse\" x1=\"103.466\" y1=\"1215.329\" x2=\"103.466\" y2=\"1121.23\" gradientTransform=\"translate(0 -750)\"><stop offset=\"0\" style=\"stop-color:#c14211\"/><stop offset=\"1\" style=\"stop-color:#fd9809\"/></linearGradient><ellipse style=\"fill:url(#SVGID_00000018946854270044106950000013073148109470461361_)\" cx=\"103.5\" cy=\"370\" rx=\"17.9\" ry=\"89.3\"/><linearGradient id=\"SVGID_00000109719282136706062460000007734728187574227108_\" gradientUnits=\"userSpaceOnUse\" x1=\"120.44\" y1=\"1033.215\" x2=\"85.354\" y2=\"1207.544\" gradientTransform=\"translate(0 -750)\"><stop offset=\"0\" style=\"stop-color:#fff\"/><stop offset=\".275\" style=\"stop-color:#ffffa6\"/><stop offset=\"1\" style=\"stop-color:#ffdc00\"/></linearGradient><ellipse style=\"fill:url(#SVGID_00000109719282136706062460000007734728187574227108_)\" cx=\"103.5\" cy=\"367.6\" rx=\"17.9\" ry=\"89.3\"/><path class=\"st2\" d=\"M121.1 367.6c0-48.3-7.8-83.8-17.6-83.8s-17.6 35.5-17.6 83.8 7.8 87.3 17.6 87.3 17.6-39.1 17.6-87.3z\"/><linearGradient id=\"SVGID_00000011738360019885625300000009793959135942767011_\" gradientUnits=\"userSpaceOnUse\" x1=\"98.42\" y1=\"1093.12\" x2=\"107.675\" y2=\"1137.689\" gradientTransform=\"translate(0 -750)\"><stop offset=\"0\" style=\"stop-color:#ffed51;stop-opacity:0\"/><stop offset=\".615\" style=\"stop-color:#fff;stop-opacity:.5\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.435\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.3546\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.2661\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.1717\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:7.378837e-02\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><ellipse style=\"opacity:.65;fill:url(#SVGID_00000011738360019885625300000009793959135942767011_);enable-background:new\" cx=\"103.5\" cy=\"367.4\" rx=\"17.6\" ry=\"87.3\"/><g class=\"st4\"><path class=\"st5\" d=\"m86.7 398.7 34.7-33.1c0-9-.4-17.8-.8-25.8L85.4 373c.3 9 .7 17.7 1.3 25.7z\"/><linearGradient id=\"SVGID_00000150804747794270570930000000960465739040882048_\" gradientUnits=\"userSpaceOnUse\" x1=\"101.613\" y1=\"1110.063\" x2=\"104.904\" y2=\"1125.282\" gradientTransform=\"translate(0 -750)\"><stop offset=\"0\" style=\"stop-color:#ffed51;stop-opacity:0\"/><stop offset=\".615\" style=\"stop-color:#fff\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.87\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.7093\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.5322\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.3434\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:.1476\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><path style=\"opacity:.64;fill:url(#SVGID_00000150804747794270570930000000960465739040882048_);enable-background:new\" d=\"m86.7 398.7 34.7-33.1c0-9-.4-17.8-.8-25.8L85.4 373c.3 9 .7 17.7 1.3 25.7z\"/><linearGradient id=\"SVGID_00000179607834346580392170000013293895171923619518_\" gradientUnits=\"userSpaceOnUse\" x1=\"101.613\" y1=\"1110.063\" x2=\"104.904\" y2=\"1125.282\" gradientTransform=\"translate(0 -750)\"><stop offset=\"0\" style=\"stop-color:#ffed51;stop-opacity:0\"/><stop offset=\".615\" style=\"stop-color:#fff\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.87\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.7093\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.5322\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.3434\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:.1476\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><path style=\"opacity:.64;fill:url(#SVGID_00000179607834346580392170000013293895171923619518_);enable-background:new\" d=\"m86.7 398.7 34.7-33.1c0-9-.4-17.8-.8-25.8L85.4 373c.3 9 .7 17.7 1.3 25.7z\"/><path class=\"st5\" d=\"M119.2 341s1.4-3.1.7-10.4c-.7-7.2.7 9 .7 9l-1.4 1.4zM119.9 367.3s1.4-1 1.5 6.6v-8.1l-1.5 1.5zM86.9 371.7s-1.5-1.1-1.4-6.2v7.4l1.4-1.2zM86.7 398.7l1.1-1.1s-1 1.4-.7 7.5l-.4-6.4z\"/></g><ellipse class=\"st8\" cx=\"103.6\" cy=\"367.3\" rx=\"13.5\" ry=\"67.4\"/><linearGradient id=\"SVGID_00000150061490513614335280000010058448970116200353_\" gradientUnits=\"userSpaceOnUse\" x1=\"103.602\" y1=\"1060.876\" x2=\"103.602\" y2=\"1181.84\" gradientTransform=\"translate(0 -750)\"><stop offset=\"0\" style=\"stop-color:#ffffa6\"/><stop offset=\"1\" style=\"stop-color:#ffdc00\"/></linearGradient><ellipse style=\"fill:url(#SVGID_00000150061490513614335280000010058448970116200353_)\" cx=\"103.6\" cy=\"367.3\" rx=\"12.6\" ry=\"62.5\"/><ellipse class=\"st10\" cx=\"103.5\" cy=\"367.6\" rx=\"12.2\" ry=\"60.8\"/><linearGradient id=\"SVGID_00000009574537282418701970000004140276987733056703_\" gradientUnits=\"userSpaceOnUse\" x1=\"124.839\" y1=\"999.255\" x2=\"95.868\" y2=\"1181.919\" gradientTransform=\"translate(0 -750)\"><stop offset=\"0\" style=\"stop-color:#ffcd04\"/><stop offset=\".532\" style=\"stop-color:#fd9809\"/><stop offset=\".746\" style=\"stop-color:#d96111\"/><stop offset=\".805\" style=\"stop-color:#da6510;stop-opacity:.9179\"/><stop offset=\".862\" style=\"stop-color:#dc700e;stop-opacity:.8405\"/><stop offset=\".916\" style=\"stop-color:#df830a;stop-opacity:.765\"/><stop offset=\".97\" style=\"stop-color:#e49e04;stop-opacity:.6912\"/><stop offset=\"1\" style=\"stop-color:#e7b000;stop-opacity:.65\"/></linearGradient><path style=\"opacity:.6;fill:url(#SVGID_00000009574537282418701970000004140276987733056703_);enable-background:new\" d=\"M115.8 369.5c0-32.5-4.4-58.9-11.1-58.9-3.1 0-8.6 26.4-8.6 58.9s6.2 58.9 7.5 58.9c6.7 0 12.2-26.3 12.2-58.9z\"/><path class=\"st12\" d=\"M116 353.7c-.1-.8-.1-1.5-.3-2.3-1-7.4-2.6-12.6-4.5-13.4-2.3-1.1-4.5 4.6-5.7 14.2l-2.1 15.4-.5 4.5c-1.2 9.2-4 .8-2.9-8.9.4-4.1 1.6-5.3 2.5-2.6.3.7.4 1.6.4 2.7l1.8-13.5c-1-4-2.1-6.6-3.3-6.4-4-.1-6.3 22.3-4 38.1 1.9 13.7 6 13.7 8.1.1l1.9-14.1c.1-1.1.4-3.4.5-4.4.4-2.6.7-5.2 1.2-7.1 1.8-6.4 4.5.3 4.5 11.5 0 10-2.1 16.9-4 12.8-.8-1.6-1.2-5.2-1.8-8.3 0-.3 0-.4-.1-.4l-1.9 13.8c.4 2.6 1 4.6 1 4.6 1 4.1 2.2 6.8 3.4 7.4 4.6 2.6 8-22.9 5.8-43.7z\"/><path class=\"st2\" d=\"M113 353.7c-.1-.8-.1-1.5-.3-2.3-1-7.4-2.6-12.6-4.5-13.4-2.3-1.1-4.5 4.6-5.7 14.2l-2.1 15.4-.5 4.5c-1.2 9.2-4 .8-2.9-8.9.4-4.1 1.6-5.3 2.5-2.6.3.7.4 1.6.4 2.7l1.8-13.5c-1-4-2.1-6.6-3.3-6.4-4-.1-6.3 22.3-4 38.1 1.9 13.7 6 13.7 8.1.1l1.9-14.1c.1-1.1.4-3.4.5-4.4.4-2.6.7-5.2 1.2-7.1 1.8-6.4 4.5.3 4.5 11.5 0 10-2.1 16.9-4 12.8-.8-1.6-1.2-5.2-1.8-8.3 0-.3 0-.4-.1-.4l-1.9 13.8c.4 2.6 1 4.6 1 4.6 1 4.1 2.2 6.8 3.4 7.4 4.7 2.6 8.2-22.9 5.8-43.7z\"/><g class=\"st13\"><linearGradient id=\"SVGID_00000057867802076250596970000006341429510634004367_\" gradientUnits=\"userSpaceOnUse\" x1=\"97.786\" y1=\"1087.159\" x2=\"106.532\" y2=\"1131.042\" gradientTransform=\"translate(0 -750)\"><stop offset=\"0\" style=\"stop-color:#ffed51;stop-opacity:0\"/><stop offset=\".615\" style=\"stop-color:#fff;stop-opacity:.63\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.5481\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.4468\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.3353\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.2164\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:9.297335e-02\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><path style=\"fill:url(#SVGID_00000057867802076250596970000006341429510634004367_)\" d=\"M113 353.7c-.1-.8-.1-1.5-.3-2.3-1-7.4-2.6-12.6-4.5-13.4-2.3-1.1-4.5 4.6-5.7 14.2l-2.1 15.4-.5 4.5c-1.2 9.2-4 .8-2.9-8.9.4-4.1 1.6-5.3 2.5-2.6.3.7.4 1.6.4 2.7l1.8-13.5c-1-4-2.1-6.6-3.3-6.4-4-.1-6.3 22.3-4 38.1 1.9 13.7 6 13.7 8.1.1l1.9-14.1c.1-1.1.4-3.4.5-4.4.4-2.6.7-5.2 1.2-7.1 1.8-6.4 4.5.3 4.5 11.5 0 10-2.1 16.9-4 12.8-.8-1.6-1.2-5.2-1.8-8.3 0-.3 0-.4-.1-.4l-1.9 13.8c.4 2.6 1 4.6 1 4.6 1 4.1 2.2 6.8 3.4 7.4 4.7 2.6 8.2-22.9 5.8-43.7z\"/></g><linearGradient id=\"SVGID_00000165927430444435453600000014431386565768902327_\" gradientUnits=\"userSpaceOnUse\" x1=\"103.17\" y1=\"1081.594\" x2=\"104.061\" y2=\"1148.747\" gradientTransform=\"translate(0 -750)\"><stop offset=\"0\" style=\"stop-color:#ffffa6\"/><stop offset=\"1\" style=\"stop-color:#ffdc00\"/></linearGradient><path style=\"fill:url(#SVGID_00000165927430444435453600000014431386565768902327_)\" d=\"M107.7 338.8c.3 0 .4 0 .5.1 1.8.8 3.3 5.5 4.2 13 .1.5.1 1.2.3 2.2 1 8.7 1 19.3-.1 28-1.1 9-2.9 14.4-4.9 14.4-.3 0-.4 0-.5-.1-1.1-.5-2.5-3.1-3.3-7.1 0 0-.4-1.8-.8-4l1.8-12c.4 3 1 6.6 1.8 8.2.4.8.8 1.2 1.1 1.2 1.8 0 3-6.8 3-15 0-4.1-.4-7.9-1-10.8-.5-2.6-1.4-4.1-2.1-4.1-.5 0-1.1 1-1.8 2.6-.4 1.8-.8 4.2-1.1 6.7l-.1.7c-.1 1.1-.4 3.3-.5 4.5l-2.1 14.2c-1 6.2-2.3 9.8-3.8 9.8s-2.9-3.6-3.8-9.8c-1.1-7-1.1-16-.4-23.9.4-3.7 1-7 1.6-9 .7-2.5 1.6-3.6 2.6-3.6 1.1 0 2.2 1.9 3 5.6l-1.6 11.8c-.1-.8-.3-1.4-.4-1.8-.4-1.1-.7-1.8-1.1-1.8-.7 0-1.2 1.8-1.6 4.5-.4 3.3-.4 6.7 0 9.4.4 2.9 1.1 4.8 1.8 4.8.5 0 1.1-1.6 1.6-4.4l.5-4.5 2.1-15.4c1.3-9.2 3.2-14.4 5.1-14.4m0-.8c-2.1 0-4 5.6-5.2 14.4l-2.1 15.4-.5 4.5c-.4 2.7-1 4-1.4 4-1.1 0-2.3-6.2-1.5-12.8.4-2.6 1-4 1.5-4 .4 0 .7.4 1 1.5.3.7.4 1.6.4 2.7l1.8-13.5c-1-4-2.1-6.4-3.3-6.4-4 0-6.2 22.4-4 38.1 1.1 7 2.6 10.4 4 10.4 1.5 0 3-3.3 4-10.1l1.9-14.1c.1-1.1.4-3.4.5-4.4.4-2.6.7-5.2 1.2-7.1.4-1.8 1.1-2.6 1.6-2.6 1.5 0 2.9 5.7 2.9 14.1 0 8.1-1.4 14.1-2.9 14.1-.4 0-.8-.4-1.1-1.1-.8-1.6-1.2-5.2-1.8-8.3 0-.3 0-.4-.1-.4l-1.9 13.8c.4 2.6 1 4.6 1 4.6 1 4.1 2.2 6.8 3.4 7.4.3.1.4.1.5.1 4.4 0 7.5-24.1 5.3-43.9-.1-.8-.1-1.5-.3-2.3-1-7.4-2.6-12.6-4.5-13.4 0-.7-.1-.7-.4-.7z\"/><g class=\"st16\"><path class=\"st5\" d=\"M105 372.2c0-.3 0-.4-.1-.4l-1.8 12 3.4-3.3c-.7-1.6-1.1-5.2-1.5-8.3z\"/><path class=\"st5\" d=\"M113.6 373.8c.3-6.4.1-13.4-.5-20-.1-.8-.1-1.5-.3-2.3-.1-1.1-.4-2.2-.4-3.1l-10.5 10-1.2 9.3-.5 4.5c-1.2 9.2-4 .8-2.9-8.9 0-.3 0-.4.1-.5l-3.6 3.3c-.1 5.2.3 10.7 1 15.6.5 4 1.2 6.8 2.1 8.3l5.3-5.1c.3-1 .4-2.1.5-3.3l1.9-14.1c.1-1.1.4-3.4.5-4.4.4-2.6.7-5.2 1.2-7.1 1.8-6.4 4.5.3 4.5 11.5 0 3.8-.4 7.2-.8 9.7l3.6-3.4z\"/><path class=\"st5\" d=\"m99.9 363.6.5-4-1.1 1.1c0 .1 0 .1.1.3.1.5.4 1.5.5 2.6z\"/></g><linearGradient id=\"SVGID_00000067953119776888461150000006911111614193331121_\" gradientUnits=\"userSpaceOnUse\" x1=\"118.803\" y1=\"1019.533\" x2=\"106.198\" y2=\"1060.257\" gradientTransform=\"translate(0 -750)\"><stop offset=\".615\" style=\"stop-color:#fff\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.87\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.7093\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.5322\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.3434\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:.1476\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><path style=\"fill:url(#SVGID_00000067953119776888461150000006911111614193331121_)\" d=\"M112.9 300.7c-.3 4.9-1.6 7.5-3.1 5.6-1.5-1.9-2.5-7.5-2.2-12.6.3-4.9 1.6-7.5 3.1-5.6 1.5 2.1 2.5 7.6 2.2 12.6z\"/><linearGradient id=\"SVGID_00000093141906343319502270000001392762947088198845_\" gradientUnits=\"userSpaceOnUse\" x1=\"110.396\" y1=\"1079.984\" x2=\"106.549\" y2=\"1101.143\" gradientTransform=\"translate(0 -750)\"><stop offset=\".615\" style=\"stop-color:#fff\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.87\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.7093\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.5322\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.3434\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:.1476\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><ellipse style=\"fill:url(#SVGID_00000093141906343319502270000001392762947088198845_)\" cx=\"107.8\" cy=\"344\" rx=\"1.4\" ry=\"4.6\"/><linearGradient id=\"SVGID_00000082326800524340213890000009608244510643041460_\" gradientUnits=\"userSpaceOnUse\" x1=\"-382.301\" y1=\"940.697\" x2=\"-389.98\" y2=\"982.929\" gradientTransform=\"rotate(11.496 2475.947 3120.52)\"><stop offset=\".615\" style=\"stop-color:#fff\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.87\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.7093\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.5322\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.3434\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:.1476\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><path style=\"opacity:.6;fill:url(#SVGID_00000082326800524340213890000009608244510643041460_);enable-background:new\" d=\"M101.4 443.6c-.3 5.2-1.5 8.3-2.9 7-1.4-1.4-2.3-6.7-2.1-11.9s1.5-8.3 2.9-7c1.3 1.3 2.3 6.7 2.1 11.9z\"/><linearGradient id=\"SVGID_00000018198738924678225450000017504580567284008093_\" gradientUnits=\"userSpaceOnUse\" x1=\"-618.043\" y1=\"949.058\" x2=\"-618.043\" y2=\"775.443\" gradientTransform=\"matrix(-1 0 0 1 240.83 -750)\"><stop offset=\"0\" style=\"stop-color:#c14211\"/><stop offset=\".434\" style=\"stop-color:#fb9509\"/><stop offset=\".829\" style=\"stop-color:#ffcd04\"/><stop offset=\".999\" style=\"stop-color:#fcee21\"/></linearGradient><path style=\"fill:url(#SVGID_00000018198738924678225450000017504580567284008093_)\" d=\"M855 211.4h28V27.7h-28c-9.9 0-20.3 38.2-20.3 89.9s10.5 93.7 20.3 93.8z\"/><path class=\"st21\" d=\"M880.5 211.4h2.1V27.7h-2.1c-9.9 0-20.3 38.2-20.3 89.9s10.4 93.7 20.3 93.8z\"/><linearGradient id=\"SVGID_00000008853272070646443550000007974711496508305540_\" gradientUnits=\"userSpaceOnUse\" x1=\"-643.322\" y1=\"967.411\" x2=\"-643.322\" y2=\"871.952\" gradientTransform=\"matrix(-1 0 0 1 240.83 -750)\"><stop offset=\"0\" style=\"stop-color:#c14211\"/><stop offset=\"1\" style=\"stop-color:#fd9809\"/></linearGradient><ellipse style=\"fill:url(#SVGID_00000008853272070646443550000007974711496508305540_)\" cx=\"884.2\" cy=\"120.6\" rx=\"18.3\" ry=\"90.6\"/><linearGradient id=\"SVGID_00000016794612122320106900000000243328654753418907_\" gradientUnits=\"userSpaceOnUse\" x1=\"-626.1\" y1=\"782.67\" x2=\"-661.693\" y2=\"959.519\" gradientTransform=\"matrix(-1 0 0 1 240.83 -750)\"><stop offset=\"0\" style=\"stop-color:#fff\"/><stop offset=\".275\" style=\"stop-color:#ffffa6\"/><stop offset=\"1\" style=\"stop-color:#ffdc00\"/></linearGradient><ellipse style=\"fill:url(#SVGID_00000016794612122320106900000000243328654753418907_)\" cx=\"884.2\" cy=\"118.2\" rx=\"18.3\" ry=\"90.6\"/><path class=\"st2\" d=\"M884.2 206.8c9.9 0 17.8-39.7 17.8-88.7s-7.9-85-17.8-85-17.8 36.1-17.8 85 7.8 88.7 17.8 88.7z\"/><linearGradient id=\"SVGID_00000003088326820822227970000015639347669211456409_\" gradientUnits=\"userSpaceOnUse\" x1=\"-648.444\" y1=\"843.43\" x2=\"-639.056\" y2=\"888.643\" gradientTransform=\"matrix(-1 0 0 1 240.83 -750)\"><stop offset=\"0\" style=\"stop-color:#ffed51;stop-opacity:0\"/><stop offset=\".615\" style=\"stop-color:#fff;stop-opacity:.5\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.435\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.3546\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.2661\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.1717\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:7.378837e-02\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><ellipse style=\"opacity:.65;fill:url(#SVGID_00000003088326820822227970000015639347669211456409_);enable-background:new\" cx=\"884.2\" cy=\"118.1\" rx=\"17.8\" ry=\"88.7\"/><g class=\"st4\"><path class=\"st5\" d=\"m902.4 123.8-35.5-33.7c-.4 8.4-.8 17.1-.8 26.2l35.3 33.6c.3-8.2.9-16.9 1-26.1z\"/><linearGradient id=\"SVGID_00000028292242162154206620000005644508441160127927_\" gradientUnits=\"userSpaceOnUse\" x1=\"-645.263\" y1=\"860.631\" x2=\"-641.925\" y2=\"876.07\" gradientTransform=\"matrix(-1 0 0 1 240.83 -750)\"><stop offset=\"0\" style=\"stop-color:#ffed51;stop-opacity:0\"/><stop offset=\".615\" style=\"stop-color:#fff\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.87\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.7093\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.5322\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.3434\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:.1476\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><path style=\"opacity:.64;fill:url(#SVGID_00000028292242162154206620000005644508441160127927_);enable-background:new\" d=\"m902.4 123.8-35.5-33.7c-.4 8.4-.8 17.1-.8 26.2l35.3 33.6c.3-8.2.9-16.9 1-26.1z\"/><linearGradient id=\"SVGID_00000098931113512056130220000016147740571630565002_\" gradientUnits=\"userSpaceOnUse\" x1=\"-645.263\" y1=\"860.631\" x2=\"-641.925\" y2=\"876.07\" gradientTransform=\"matrix(-1 0 0 1 240.83 -750)\"><stop offset=\"0\" style=\"stop-color:#ffed51;stop-opacity:0\"/><stop offset=\".615\" style=\"stop-color:#fff\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.87\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.7093\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.5322\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.3434\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:.1476\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><path style=\"opacity:.64;fill:url(#SVGID_00000098931113512056130220000016147740571630565002_);enable-background:new\" d=\"m902.4 123.8-35.5-33.7c-.4 8.4-.8 17.1-.8 26.2l35.3 33.6c.3-8.2.9-16.9 1-26.1z\"/><path class=\"st5\" d=\"M866.7 90.1s1.4-16.6.7-9.2.7 10.5.7 10.5l-1.4-1.3zM866 116.4v8.2c.1-7.6 1.6-6.7 1.6-6.7l-1.6-1.5zM902.4 123.8v-7.5c.1 5.1-1.4 6.2-1.4 6.2l1.4 1.3zM900.7 156.3c.3-6.2-.7-7.6-.7-7.6l1.1 1.1-.4 6.5z\"/></g><ellipse class=\"st8\" cx=\"884\" cy=\"118\" rx=\"13.7\" ry=\"68.4\"/><linearGradient id=\"SVGID_00000156566569721037369580000014276897872904739232_\" gradientUnits=\"userSpaceOnUse\" x1=\"-643.18\" y1=\"810.726\" x2=\"-643.18\" y2=\"933.437\" gradientTransform=\"matrix(-1 0 0 1 240.83 -750)\"><stop offset=\"0\" style=\"stop-color:#ffffa6\"/><stop offset=\"1\" style=\"stop-color:#ffdc00\"/></linearGradient><ellipse style=\"fill:url(#SVGID_00000156566569721037369580000014276897872904739232_)\" cx=\"884\" cy=\"118\" rx=\"12.7\" ry=\"63.4\"/><ellipse class=\"st10\" cx=\"884.2\" cy=\"118.2\" rx=\"12.3\" ry=\"61.7\"/><linearGradient id=\"SVGID_00000101074986749270573980000017567945307146396841_\" gradientUnits=\"userSpaceOnUse\" x1=\"-621.646\" y1=\"748.217\" x2=\"-651.036\" y2=\"933.521\" gradientTransform=\"matrix(-1 0 0 1 240.83 -750)\"><stop offset=\"0\" style=\"stop-color:#ffcd04\"/><stop offset=\".532\" style=\"stop-color:#fd9809\"/><stop offset=\".746\" style=\"stop-color:#d96111\"/><stop offset=\".805\" style=\"stop-color:#da6510;stop-opacity:.9179\"/><stop offset=\".862\" style=\"stop-color:#dc700e;stop-opacity:.8405\"/><stop offset=\".916\" style=\"stop-color:#df830a;stop-opacity:.765\"/><stop offset=\".97\" style=\"stop-color:#e49e04;stop-opacity:.6912\"/><stop offset=\"1\" style=\"stop-color:#e7b000;stop-opacity:.65\"/></linearGradient><path style=\"opacity:.6;fill:url(#SVGID_00000101074986749270573980000017567945307146396841_);enable-background:new\" d=\"M884 180c1.4 0 7.6-26.8 7.6-59.8s-5.7-59.8-8.8-59.8c-6.8 0-11.2 26.8-11.2 59.8S877.4 180 884 180z\"/><path class=\"st12\" d=\"M877.2 148.5c1.3-.6 2.5-3.3 3.5-7.5 0 0 .4-2 1-4.7l-2-14c-.1.1-.1.3-.1.4-.4 3.3-1 6.9-1.7 8.5-1.8 4.1-4-3-4-13 0-11.5 2.7-18.3 4.5-11.6.6 2 1 4.5 1.3 7.2.1 1 .4 3.4.6 4.4l2 14.3c2.1 13.7 6.2 13.7 8.2-.1 2.3-16-.1-38.8-4.1-38.7-1.3-.1-2.4 2.4-3.4 6.5l1.8 13.7c.1-1.1.3-2.1.4-2.8.8-2.8 2-1.7 2.4 2.5 1.1 9.8-1.7 18.3-3 8.9l-.6-4.5-2.1-15.6c-1.3-9.6-3.5-15.6-5.8-14.3-1.8.8-3.7 6.1-4.5 13.6-.1.8-.1 1.6-.3 2.3-2 21.2 1.4 47.1 5.9 44.5z\"/><path class=\"st2\" d=\"M880.2 148.5c1.3-.6 2.5-3.3 3.5-7.5 0 0 .4-2 1-4.7l-2-14c-.1.1-.1.3-.1.4-.4 3.3-1 6.9-1.7 8.5-1.8 4.1-4-3-4-13 0-11.5 2.7-18.3 4.5-11.6.6 2 1 4.5 1.3 7.2.1 1 .4 3.4.6 4.4l2 14.3c2.1 13.7 6.2 13.7 8.2-.1 2.3-16-.1-38.8-4.1-38.7-1.3-.1-2.4 2.4-3.4 6.5l1.8 13.7c.1-1.1.3-2.1.4-2.8.8-2.8 2-1.7 2.4 2.5 1.1 9.8-1.7 18.3-3 8.9l-.6-4.5-2.1-15.6c-1.3-9.6-3.5-15.6-5.8-14.3-1.8.8-3.7 6.1-4.5 13.6-.1.8-.1 1.6-.3 2.3-2.2 21.2 1.4 47.1 5.9 44.5z\"/><g class=\"st13\"><linearGradient id=\"SVGID_00000069385148036655246210000006268448485972535228_\" gradientUnits=\"userSpaceOnUse\" x1=\"-649.11\" y1=\"837.388\" x2=\"-640.238\" y2=\"881.905\" gradientTransform=\"matrix(-1 0 0 1 240.83 -750)\"><stop offset=\"0\" style=\"stop-color:#ffed51;stop-opacity:0\"/><stop offset=\".615\" style=\"stop-color:#fff;stop-opacity:.63\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.5481\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.4468\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.3353\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.2164\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:9.297335e-02\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><path style=\"fill:url(#SVGID_00000069385148036655246210000006268448485972535228_)\" d=\"M880.2 148.5c1.3-.6 2.5-3.3 3.5-7.5 0 0 .4-2 1-4.7l-2-14c-.1.1-.1.3-.1.4-.4 3.3-1 6.9-1.7 8.5-1.8 4.1-4-3-4-13 0-11.5 2.7-18.3 4.5-11.6.6 2 1 4.5 1.3 7.2.1 1 .4 3.4.6 4.4l2 14.3c2.1 13.7 6.2 13.7 8.2-.1 2.3-16-.1-38.8-4.1-38.7-1.3-.1-2.4 2.4-3.4 6.5l1.8 13.7c.1-1.1.3-2.1.4-2.8.8-2.8 2-1.7 2.4 2.5 1.1 9.8-1.7 18.3-3 8.9l-.6-4.5-2.1-15.6c-1.3-9.6-3.5-15.6-5.8-14.3-1.8.8-3.7 6.1-4.5 13.6-.1.8-.1 1.6-.3 2.3-2.2 21.2 1.4 47.1 5.9 44.5z\"/></g><linearGradient id=\"SVGID_00000064349050872268086810000006465352601430294178_\" gradientUnits=\"userSpaceOnUse\" x1=\"-643.592\" y1=\"831.742\" x2=\"-642.689\" y2=\"899.865\" gradientTransform=\"matrix(-1 0 0 1 240.83 -750)\"><stop offset=\"0\" style=\"stop-color:#ffffa6\"/><stop offset=\"1\" style=\"stop-color:#ffdc00\"/></linearGradient><path style=\"fill:url(#SVGID_00000064349050872268086810000006465352601430294178_)\" d=\"M879.9 89.2c2 0 3.8 5.2 5.1 14.3l2.1 15.6.6 4.5c.4 2.8 1 4.4 1.7 4.4s1.4-2 1.7-5c.3-2.8.3-6.4 0-9.6-.3-2.8-1-4.5-1.7-4.5-.3 0-.7.6-1 1.7-.1.4-.3 1-.3 1.8l-1.7-11.9c.8-3.7 2-5.7 3-5.7s1.8 1.1 2.5 3.7c.7 2.3 1.3 5.5 1.7 9.2.8 8.1.7 17.1-.3 24.2-1 6.4-2.3 10.1-3.8 10.1-1.6 0-3-3.7-3.8-9.9l-2-14.3c-.1-1.1-.4-3.5-.6-4.5l-.1-.7c-.3-2.4-.7-5-1.1-6.8-.6-1.7-1.1-2.7-1.7-2.7-.7 0-1.6 1.6-2.1 4.2-.6 3-1 6.8-1 10.9 0 8.4 1.3 15.3 3 15.3.3 0 .8-.4 1.1-1.3.8-1.7 1.4-5.2 1.7-8.4l1.7 12.2c-.4 2.3-.8 4-.8 4-1 4.1-2.3 6.7-3.4 7.2-.1.1-.3.1-.6.1-2.1 0-4-5.5-5-14.6-1-8.9-1-19.5-.1-28.5.1-1 .1-1.7.3-2.3 1-7.6 2.5-12.3 4.2-13.2.3.5.4.5.7.5m0-1c-.3 0-.3 0-.8.3-1.8.8-3.7 6.1-4.5 13.6-.1.8-.1 1.6-.3 2.3-2.3 20.1 1 44.5 5.4 44.5.1 0 .3 0 .6-.1 1.3-.6 2.5-3.3 3.5-7.5 0 0 .4-2 1-4.7l-2-14c-.1.1-.1.3-.1.4-.4 3.3-1 6.9-1.7 8.5-.3.8-.8 1.1-1.1 1.1-1.6 0-3-6.1-3-14.3 0-8.4 1.4-14.3 3-14.3.6 0 1.1.8 1.7 2.5.6 2 1 4.5 1.3 7.2.1 1 .4 3.4.6 4.4l2 14.3c1 6.9 2.5 10.3 4.1 10.3s3-3.5 4.1-10.5c2.3-15.9-.1-38.7-4.1-38.7-1.1 0-2.3 2.4-3.3 6.5l1.8 13.7c.1-1.1.3-2.1.4-2.8.3-1 .6-1.6 1-1.6.6 0 1.1 1.4 1.6 4.1.8 6.9-.3 13-1.6 13-.4 0-1-1.3-1.4-4.1l-.6-4.5-2.1-15.6c-1.5-8.2-3.5-14-5.5-14z\"/><g class=\"st16\"><path class=\"st5\" d=\"m881 131.3 3.5 3.4-1.7-12.3c-.1.1-.1.3-.1.4-.4 3.4-.8 6.9-1.7 8.5z\"/><path class=\"st5\" d=\"M877.6 128.2c-.4-2.4-.8-5.9-.8-9.8 0-11.5 2.7-18.3 4.5-11.6.6 2 1 4.5 1.3 7.2.1 1 .4 3.4.6 4.4l2 14.3c.3 1.1.3 2.3.6 3.3l5.4 5.1c.8-1.7 1.6-4.5 2.1-8.5.7-5 1-10.5 1-15.7l-3.7-3.4c.1.3.1.3.1.6 1.1 9.8-1.7 18.3-3 8.9l-.6-4.5-1.3-9.5L875 98.8c-.1 1-.3 2-.4 3.1-.1.8-.1 1.6-.3 2.3-.7 6.7-.8 13.7-.6 20.3l3.9 3.7z\"/><path class=\"st5\" d=\"M888.3 111.4c.1-.1.1-.1.1-.3l-1.1-1 .6 4c-.1-1 .2-2 .4-2.7z\"/></g><linearGradient id=\"SVGID_00000065065647385912843600000015373768046259625618_\" gradientUnits=\"userSpaceOnUse\" x1=\"-627.7\" y1=\"768.813\" x2=\"-640.487\" y2=\"810.126\" gradientTransform=\"matrix(-1 0 0 1 240.83 -750)\"><stop offset=\".615\" style=\"stop-color:#fff\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.87\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.7093\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.5322\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.3434\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:.1476\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><path style=\"fill:url(#SVGID_00000065065647385912843600000015373768046259625618_)\" d=\"M876.8 37.7c1.6-1.8 3 .7 3.1 5.7.3 5.1-.7 10.8-2.3 12.7-1.6 1.8-3-.7-3.1-5.7-.1-5.1.7-10.8 2.3-12.7z\"/><linearGradient id=\"SVGID_00000020365273617699219810000004679270870894305717_\" gradientUnits=\"userSpaceOnUse\" x1=\"-636.35\" y1=\"830.104\" x2=\"-640.252\" y2=\"851.57\" gradientTransform=\"matrix(-1 0 0 1 240.83 -750)\"><stop offset=\".615\" style=\"stop-color:#fff\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.87\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.7093\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.5322\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.3434\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:.1476\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><ellipse style=\"fill:url(#SVGID_00000020365273617699219810000004679270870894305717_)\" cx=\"879.8\" cy=\"94.3\" rx=\"1.4\" ry=\"4.7\"/><linearGradient id=\"SVGID_00000152982298527572448550000012987047861035374780_\" gradientUnits=\"userSpaceOnUse\" x1=\"-1163.734\" y1=\"845.843\" x2=\"-1171.523\" y2=\"888.685\" gradientTransform=\"scale(-1 1) rotate(11.496 2355.527 1924.26)\"><stop offset=\".615\" style=\"stop-color:#fff\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.87\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.7093\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.5322\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.3434\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:.1476\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><path style=\"opacity:.6;fill:url(#SVGID_00000152982298527572448550000012987047861035374780_);enable-background:new\" d=\"M888.4 183.2c1.4-1.4 2.7 1.7 3 6.9.3 5.2-.7 10.6-2.1 12-1.4 1.4-2.7-1.7-3-6.9-.2-5.2.8-10.5 2.1-12z\"/><linearGradient id=\"SVGID_00000168806004746340882080000008700071725083686575_\" gradientUnits=\"userSpaceOnUse\" x1=\"614.098\" y1=\"1213.354\" x2=\"614.098\" y2=\"1119.53\" gradientTransform=\"translate(0 -750)\"><stop offset=\"0\" style=\"stop-color:#c14211\"/><stop offset=\"1\" style=\"stop-color:#fd9809\"/></linearGradient><ellipse style=\"fill:url(#SVGID_00000168806004746340882080000008700071725083686575_)\" cx=\"614.1\" cy=\"368.4\" rx=\"79.7\" ry=\"89\"/><linearGradient id=\"SVGID_00000120522440661243499610000008416953623716663226_\" gradientUnits=\"userSpaceOnUse\" x1=\"627.719\" y1=\"1220.122\" x2=\"627.719\" y2=\"1008.046\" gradientTransform=\"translate(0 -750)\"><stop offset=\"0\" style=\"stop-color:#c14211\"/><stop offset=\".434\" style=\"stop-color:#fb9509\"/><stop offset=\".829\" style=\"stop-color:#ffcd04\"/><stop offset=\".999\" style=\"stop-color:#fcee21\"/></linearGradient><path style=\"fill:url(#SVGID_00000120522440661243499610000008416953623716663226_)\" d=\"M707.4 367.1c0-49.2-38-88.1-82-88.1S548 318 548 367.1s35.7 89 79.7 89c44.1 0 79.7-39.7 79.7-89z\"/><linearGradient id=\"SVGID_00000088115614429547808260000003858640736211221640_\" gradientUnits=\"userSpaceOnUse\" x1=\"628.62\" y1=\"1034.759\" x2=\"625.648\" y2=\"1064.477\" gradientTransform=\"translate(0 -750)\"><stop offset=\"0\" style=\"stop-color:#ffed51;stop-opacity:0\"/><stop offset=\".615\" style=\"stop-color:#fff\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.87\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.7093\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.5322\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.3434\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:.1476\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><path style=\"opacity:.64;fill:url(#SVGID_00000088115614429547808260000003858640736211221640_);enable-background:new\" d=\"M699.7 370.8c0-49.2-38-88.1-82-88.1s-77.4 39-77.4 88.1c0 49.1 35.7 89 79.7 89s79.7-39.8 79.7-89z\"/><ellipse class=\"st21\" cx=\"618.8\" cy=\"366.5\" rx=\"79.7\" ry=\"89\"/><linearGradient id=\"SVGID_00000111177752478632062460000003508506494400275868_\" gradientUnits=\"userSpaceOnUse\" x1=\"648.004\" y1=\"1024.534\" x2=\"583.371\" y2=\"1198.746\" gradientTransform=\"translate(0 -750)\"><stop offset=\"0\" style=\"stop-color:#fff\"/><stop offset=\".275\" style=\"stop-color:#ffffa6\"/><stop offset=\"1\" style=\"stop-color:#ffdc00\"/></linearGradient><ellipse style=\"fill:url(#SVGID_00000111177752478632062460000003508506494400275868_)\" cx=\"614.1\" cy=\"365.9\" rx=\"79.7\" ry=\"89\"/><path class=\"st2\" d=\"M692.2 365.9c-.1-46.8-34.7-83.5-77.8-83.5s-78.2 35.5-78.2 83.5 34.9 87.1 78.1 87.1c43-.1 77.9-39.1 77.9-87.1z\"/><linearGradient id=\"SVGID_00000134242943916063539800000004221236677093332116_\" gradientUnits=\"userSpaceOnUse\" x1=\"608.963\" y1=\"1091.194\" x2=\"618.335\" y2=\"1136.327\" gradientTransform=\"translate(0 -750)\"><stop offset=\"0\" style=\"stop-color:#ffed51;stop-opacity:0\"/><stop offset=\".615\" style=\"stop-color:#fff;stop-opacity:.5\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.435\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.3546\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.2661\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.1717\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:7.378837e-02\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><ellipse style=\"opacity:.65;fill:url(#SVGID_00000134242943916063539800000004221236677093332116_);enable-background:new\" cx=\"614.1\" cy=\"365.9\" rx=\"78.1\" ry=\"87.1\"/><g class=\"st4\"><path class=\"st5\" d=\"M539.7 396.9 693.9 364c-.1-9-1.5-17.7-3.8-25.9l-155.6 33.3c.7 9 2.3 17.5 5.2 25.5z\"/><linearGradient id=\"SVGID_00000023984974337109679410000008820284076667870344_\" gradientUnits=\"userSpaceOnUse\" x1=\"613.619\" y1=\"1112.758\" x2=\"615.345\" y2=\"1120.741\" gradientTransform=\"translate(0 -750)\"><stop offset=\"0\" style=\"stop-color:#ffed51;stop-opacity:0\"/><stop offset=\".615\" style=\"stop-color:#fff\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.87\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.7093\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.5322\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.3434\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:.1476\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><path style=\"opacity:.64;fill:url(#SVGID_00000023984974337109679410000008820284076667870344_);enable-background:new\" d=\"M539.7 396.9 693.9 364c-.1-9-1.5-17.7-3.8-25.9l-155.6 33.3c.7 9 2.3 17.5 5.2 25.5z\"/><linearGradient id=\"SVGID_00000041286538919905046420000011615289750291968432_\" gradientUnits=\"userSpaceOnUse\" x1=\"613.619\" y1=\"1112.758\" x2=\"615.345\" y2=\"1120.741\" gradientTransform=\"translate(0 -750)\"><stop offset=\"0\" style=\"stop-color:#ffed51;stop-opacity:0\"/><stop offset=\".615\" style=\"stop-color:#fff\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.87\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.7093\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.5322\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.3434\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:.1476\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><path style=\"opacity:.64;fill:url(#SVGID_00000041286538919905046420000011615289750291968432_);enable-background:new\" d=\"M539.7 396.9 693.9 364c-.1-9-1.5-17.7-3.8-25.9l-155.6 33.3c.7 9 2.3 17.5 5.2 25.5z\"/><path class=\"st5\" d=\"M683.7 339.5s6.1-3.1 3.1-10.4 3.2 9 3.2 9l-6.3 1.4zM686.9 365.4s6.2-.9 6.9 6.6c0 0 .1-3.1.3-8.1l-7.2 1.5zM540.7 370s-6.9-1.1-6.3-6.1c0 0-.1 4.6.3 7.4l6-1.3zM539.7 396.9l5.4-1.1s-4 1.3-3.1 7.6l-2.3-6.5z\"/></g><ellipse class=\"st8\" cx=\"614.4\" cy=\"365.7\" rx=\"60.3\" ry=\"67.3\"/><linearGradient id=\"SVGID_00000047771417472433642390000008336530895056030386_\" gradientUnits=\"userSpaceOnUse\" x1=\"614.368\" y1=\"1059.352\" x2=\"614.368\" y2=\"1179.962\" gradientTransform=\"translate(0 -750)\"><stop offset=\"0\" style=\"stop-color:#ffffa6\"/><stop offset=\"1\" style=\"stop-color:#ffdc00\"/></linearGradient><ellipse style=\"fill:url(#SVGID_00000047771417472433642390000008336530895056030386_)\" cx=\"614.4\" cy=\"365.7\" rx=\"55.8\" ry=\"62.3\"/><ellipse class=\"st10\" cx=\"614.1\" cy=\"365.9\" rx=\"54.3\" ry=\"60.7\"/><linearGradient id=\"SVGID_00000052792312443876472690000014177076774774058652_\" gradientUnits=\"userSpaceOnUse\" x1=\"640.548\" y1=\"1033.063\" x2=\"600.987\" y2=\"1168.064\" gradientTransform=\"translate(0 -750)\"><stop offset=\"0\" style=\"stop-color:#ffcd04\"/><stop offset=\".532\" style=\"stop-color:#fd9809\"/><stop offset=\".746\" style=\"stop-color:#d96111\"/><stop offset=\".805\" style=\"stop-color:#da6510;stop-opacity:.9179\"/><stop offset=\".862\" style=\"stop-color:#dc700e;stop-opacity:.8405\"/><stop offset=\".916\" style=\"stop-color:#df830a;stop-opacity:.765\"/><stop offset=\".97\" style=\"stop-color:#e49e04;stop-opacity:.6912\"/><stop offset=\"1\" style=\"stop-color:#e7b000;stop-opacity:.65\"/></linearGradient><path style=\"opacity:.6;fill:url(#SVGID_00000052792312443876472690000014177076774774058652_);enable-background:new\" d=\"M668.4 367.8c0-37.8-23.3-60.6-52.7-60.6-29.4 0-51.9 25.8-52.2 58.1-.4 35.1 24.4 58.7 53.8 58.7 29.3.2 51.1-23.7 51.1-56.2z\"/><path class=\"st12\" d=\"M658.3 354.5c-.4-.8-.8-1.5-1.2-2.3-4.3-7.4-11.5-12.5-19.8-13.4-10.2-1.1-20 4.7-25.5 14.2l-9.3 15.4-2.7 4.5c-5.8 9.2-17.8.8-12.8-8.9 2.2-4 7.3-5.4 10.8-2.6.8.7 1.6 1.6 2.3 2.7l8.1-13.5c-4-4-9.3-6.5-14.8-6.5-17.4-.1-27.9 22.3-17.8 38 8.8 13.6 26.6 13.6 35.5.1l8.4-14c.5-1.1 2-3.4 2.7-4.5 1.6-2.6 3.1-5.3 5.4-7 8.4-6.3 19.7.3 19.8 11.5 0 10-9.2 16.9-17.7 12.8-3.5-1.6-5.5-5.1-7.6-8.4-.1-.3-.3-.4-.4-.4l-8.8 13.8c1.8 2.6 3.9 4.6 3.9 4.6 4 4 9.6 6.9 15.1 7.4 21.2 2.4 36.5-22.9 26.4-43.5z\"/><path class=\"st2\" d=\"M656.6 352.2c-.4-.8-.8-1.5-1.2-2.3-4.3-7.4-11.5-12.5-19.8-13.4-10.2-1.1-20 4.7-25.5 14.2l-9.3 15.4-2.7 4.5c-5.8 9.2-17.8.8-12.8-8.9 2.2-4 7.3-5.4 10.8-2.6.8.7 1.6 1.6 2.3 2.7l8.1-13.5c-4-4-9.3-6.5-14.8-6.5-17.4-.1-27.9 22.3-17.8 38 8.8 13.6 26.6 13.6 35.5.1l8.4-14c.5-1.1 2-3.4 2.7-4.5 1.6-2.6 3.1-5.3 5.4-7 8.4-6.3 19.7.3 19.8 11.5 0 10-9.2 16.9-17.7 12.8-3.5-1.6-5.5-5.1-7.6-8.4-.1-.3-.3-.4-.4-.4l-8.8 13.8c1.8 2.6 3.9 4.6 3.9 4.6 4 4 9.6 6.9 15.1 7.4 21.1 2.5 36.5-23 26.4-43.5z\"/><g class=\"st13\"><linearGradient id=\"SVGID_00000139283187237353731280000014885987761087962286_\" gradientUnits=\"userSpaceOnUse\" x1=\"608.698\" y1=\"1085.177\" x2=\"617.936\" y2=\"1131.533\" gradientTransform=\"translate(0 -750)\"><stop offset=\"0\" style=\"stop-color:#ffed51;stop-opacity:0\"/><stop offset=\".615\" style=\"stop-color:#fff;stop-opacity:.63\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.5481\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.4468\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.3353\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.2164\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:9.297335e-02\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><path style=\"fill:url(#SVGID_00000139283187237353731280000014885987761087962286_)\" d=\"M656.6 352.2c-.4-.8-.8-1.5-1.2-2.3-4.3-7.4-11.5-12.5-19.8-13.4-10.2-1.1-20 4.7-25.5 14.2l-9.3 15.4-2.7 4.5c-5.8 9.2-17.8.8-12.8-8.9 2.2-4 7.3-5.4 10.8-2.6.8.7 1.6 1.6 2.3 2.7l8.1-13.5c-4-4-9.3-6.5-14.8-6.5-17.4-.1-27.9 22.3-17.8 38 8.8 13.6 26.6 13.6 35.5.1l8.4-14c.5-1.1 2-3.4 2.7-4.5 1.6-2.6 3.1-5.3 5.4-7 8.4-6.3 19.7.3 19.8 11.5 0 10-9.2 16.9-17.7 12.8-3.5-1.6-5.5-5.1-7.6-8.4-.1-.3-.3-.4-.4-.4l-8.8 13.8c1.8 2.6 3.9 4.6 3.9 4.6 4 4 9.6 6.9 15.1 7.4 21.1 2.5 36.5-23 26.4-43.5z\"/></g><linearGradient id=\"SVGID_00000178884820123233053960000016587021395542863021_\" gradientUnits=\"userSpaceOnUse\" x1=\"614.09\" y1=\"1080.196\" x2=\"614.978\" y2=\"1147.16\" gradientTransform=\"translate(0 -750)\"><stop offset=\"0\" style=\"stop-color:#ffffa6\"/><stop offset=\"1\" style=\"stop-color:#ffdc00\"/></linearGradient><path style=\"fill:url(#SVGID_00000178884820123233053960000016587021395542863021_)\" d=\"M633 337.3c.8 0 1.8 0 2.6.1 7.8.8 14.8 5.5 19.1 12.8.4.5.8 1.2 1.1 2.2 4.3 8.8 4 19.3-.5 28.1-4.7 9-12.9 14.3-22.1 14.3-.9 0-1.8 0-2.7-.1-5.4-.5-10.5-3.1-14.6-7.1 0 0-1.8-1.8-3.4-3.9l7.7-12c1.8 3.1 4 6.5 7.6 8.1 1.8.8 3.5 1.2 5.4 1.2 7.4 0 13.5-6.7 13.5-15 0-4-1.5-8-4.2-10.8-2.6-2.6-5.9-4.2-9.3-4.2-2.7 0-5.4.9-7.7 2.6-2.3 1.9-3.8 4.3-5.3 6.7l-.4.7c-.7 1.1-2 3.2-2.7 4.5l-8.4 14c-4 6.2-10.4 9.7-17.1 9.7-6.9 0-12.9-3.6-17.1-9.8-4.6-7-5-15.9-1.5-23.7 1.8-3.8 4.2-6.9 7.3-9.2 3.2-2.4 7-3.6 11.1-3.6h.4c4.7 0 9.4 2 13.4 5.7l-6.9 11.6c-.5-.8-1.1-1.3-1.8-1.9-1.3-1.1-3.1-1.8-4.7-1.8-3 0-5.8 1.8-7.3 4.6-1.6 3.2-1.8 6.6-.3 9.4 1.5 3 4.5 4.7 7.6 4.7 2.8 0 5.4-1.6 7-4.5l2.7-4.5 9.3-15.4c5.1-8.3 13.3-13.5 22.2-13.5m0-1c-9.3 0-17.8 5.5-22.9 14.3l-9.3 15.4-2.7 4.5c-1.8 2.8-4 4-6.3 4-5.1 0-10-6.1-6.6-12.8 1.3-2.6 4-4 6.5-4 1.5 0 3 .4 4.3 1.5.8.7 1.6 1.6 2.3 2.7l8.1-13.5c-4-4-9-6.5-14.6-6.5h-.4c-17.3 0-27.6 22.3-17.7 38 4.5 6.9 11.1 10.2 17.8 10.2 6.6 0 13.4-3.4 17.8-10.1l8.4-14c.5-1.1 2-3.4 2.7-4.5 1.6-2.6 3.1-5.3 5.4-7 2.3-1.8 4.7-2.6 7-2.6 6.5 0 12.7 5.8 12.7 14 0 8-5.9 14-12.7 14-1.6 0-3.2-.4-5-1.1-3.5-1.6-5.5-5.1-7.6-8.4-.1-.3-.3-.4-.4-.4l-8.8 13.5c1.8 2.6 3.9 4.6 3.9 4.6 4 4 9.6 6.9 15.1 7.4.9.1 1.9.1 2.8.1 19.4 0 33-24 23.3-43.7-.4-.8-.8-1.5-1.2-2.3-4.3-7.4-11.5-12.5-19.8-13.4-.4.2-1.3.1-2.1.1z\"/><g class=\"st16\"><path class=\"st5\" d=\"M620.3 370.5c-.1-.3-.3-.4-.4-.4l-7.7 12 15.4-3.2c-3.3-1.8-5.3-5.2-7.3-8.4z\"/><path class=\"st5\" d=\"M659 372c1.2-6.5.5-13.5-2.6-20.1-.4-.8-.8-1.5-1.2-2.3-.7-1.1-1.3-2.2-2.2-3.2l-46.8 10-5.5 9.3-2.7 4.5c-5.8 9.2-17.8.8-12.8-8.9.1-.3.3-.4.4-.5L570 364c-.4 5.3.8 10.7 3.9 15.5 2.6 3.9 5.8 6.7 9.3 8.4l23.6-5c.9-.9 1.8-2 2.6-3.2l8.4-14c.5-1.1 2-3.4 2.7-4.5 1.6-2.6 3.1-5.3 5.4-7 8.4-6.3 19.7.3 19.8 11.5 0 3.9-1.3 7.1-3.5 9.7L659 372z\"/><path class=\"st5\" d=\"m598.2 361.9 2.4-4-4.9 1.1c.1.1.3.1.3.3.8.6 1.5 1.5 2.2 2.6z\"/></g><linearGradient id=\"SVGID_00000037674932861007708120000011184289846726532789_\" gradientUnits=\"userSpaceOnUse\" x1=\"652.642\" y1=\"1017.737\" x2=\"639.89\" y2=\"1058.937\" gradientTransform=\"translate(0 -750)\"><stop offset=\".615\" style=\"stop-color:#fff\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.87\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.7093\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.5322\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.3434\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:.1476\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><path style=\"fill:url(#SVGID_00000037674932861007708120000011184289846726532789_)\" d=\"M655.8 299.2c-1.1 5-7.4 7.6-13.9 5.5-6.5-1.9-10.9-7.6-9.7-12.4 1.2-4.9 7.4-7.6 13.9-5.5 6.4 1.9 10.7 7.4 9.7 12.4z\"/><linearGradient id=\"SVGID_00000065068067869112513660000009997822772378869684_\" gradientUnits=\"userSpaceOnUse\" x1=\"636.115\" y1=\"1078.039\" x2=\"632.178\" y2=\"1099.691\" gradientTransform=\"translate(0 -750)\"><stop offset=\".615\" style=\"stop-color:#fff\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.87\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.7093\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.5322\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.3434\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:.1476\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><ellipse style=\"fill:url(#SVGID_00000065068067869112513660000009997822772378869684_)\" cx=\"633.5\" cy=\"342.3\" rx=\"5.9\" ry=\"4.6\"/><linearGradient id=\"SVGID_00000170980341967884824330000013770477787387898532_\" gradientUnits=\"userSpaceOnUse\" x1=\"102.439\" y1=\"838.627\" x2=\"94.315\" y2=\"883.309\" gradientTransform=\"rotate(11.496 2475.947 3120.52)\"><stop offset=\".615\" style=\"stop-color:#fff\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.87\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.7093\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.5322\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.3434\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:.1476\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><path style=\"opacity:.6;fill:url(#SVGID_00000170980341967884824330000013770477787387898532_);enable-background:new\" d=\"M604.7 441.6c-.9 5.1-6.6 8.2-12.7 6.9s-10.2-6.7-9.2-11.9c.9-5.1 6.6-8.2 12.7-6.9 5.9 1.5 10.1 6.8 9.2 11.9z\"/><linearGradient id=\"SVGID_00000161606995183953696130000005001286236835045040_\" gradientUnits=\"userSpaceOnUse\" x1=\"373.774\" y1=\"1220.182\" x2=\"373.774\" y2=\"1002.018\" gradientTransform=\"translate(0 -750)\"><stop offset=\"0\" style=\"stop-color:#c14211\"/><stop offset=\".434\" style=\"stop-color:#fb9509\"/><stop offset=\".829\" style=\"stop-color:#ffcd04\"/><stop offset=\".999\" style=\"stop-color:#fcee21\"/></linearGradient><path style=\"fill:url(#SVGID_00000161606995183953696130000005001286236835045040_)\" d=\"M453.4 365.5c0-50.5-28.9-91.6-79.6-90.7-45.3 1.1-79.6 40-79.6 90.7s36.7 91.1 82 91.6c51.2.5 77.2-40.9 77.2-91.6z\"/><path class=\"st21\" d=\"M436.4 365.5c0-50.5-32.8-90.7-62.8-90.7-45.3 0-79.6 40-79.6 90.7s30.7 91.6 75.9 91.6c29.3 0 66.5-40.9 66.5-91.6z\"/><linearGradient id=\"SVGID_00000067198624404654856660000003762018793141117851_\" gradientUnits=\"userSpaceOnUse\" x1=\"362.606\" y1=\"1213.7\" x2=\"362.606\" y2=\"1117.95\" gradientTransform=\"translate(0 -750)\"><stop offset=\"0\" style=\"stop-color:#c14211\"/><stop offset=\"1\" style=\"stop-color:#fd9809\"/></linearGradient><ellipse style=\"fill:url(#SVGID_00000067198624404654856660000003762018793141117851_)\" cx=\"362.6\" cy=\"366.7\" rx=\"67.8\" ry=\"90.8\"/><linearGradient id=\"SVGID_00000021831943765534306960000013985734356606635167_\" gradientUnits=\"userSpaceOnUse\" x1=\"380.078\" y1=\"1027.496\" x2=\"344.001\" y2=\"1206.752\" gradientTransform=\"translate(0 -750)\"><stop offset=\"0\" style=\"stop-color:#fff\"/><stop offset=\".275\" style=\"stop-color:#ffffa6\"/><stop offset=\"1\" style=\"stop-color:#ffdc00\"/></linearGradient><ellipse style=\"fill:url(#SVGID_00000021831943765534306960000013985734356606635167_)\" cx=\"362.6\" cy=\"364.3\" rx=\"67.8\" ry=\"90.8\"/><path class=\"st2\" d=\"M429.1 364.3c0-49.1-29.6-85.2-66.3-85.2-36.6 0-66.5 36.2-66.5 85.2s29.8 88.8 66.3 88.8c36.7-.1 66.5-39.7 66.5-88.8z\"/><linearGradient id=\"SVGID_00000021838342429109744940000006117897939555136409_\" gradientUnits=\"userSpaceOnUse\" x1=\"357.393\" y1=\"1089.069\" x2=\"366.916\" y2=\"1134.927\" gradientTransform=\"translate(0 -750)\"><stop offset=\"0\" style=\"stop-color:#ffed51;stop-opacity:0\"/><stop offset=\".615\" style=\"stop-color:#fff;stop-opacity:.5\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.435\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.3546\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.2661\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.1717\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:7.378837e-02\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><ellipse style=\"opacity:.65;fill:url(#SVGID_00000021838342429109744940000006117897939555136409_);enable-background:new\" cx=\"362.6\" cy=\"364.2\" rx=\"66.3\" ry=\"88.8\"/><g class=\"st4\"><path class=\"st5\" d=\"m299.2 395.8 131.4-33.6c-.1-9.2-1.3-18.1-3.3-26.3L295 369.7c.3 9.2 1.8 18 4.2 26.1z\"/><linearGradient id=\"SVGID_00000122000914418740267200000005862818114164846984_\" gradientUnits=\"userSpaceOnUse\" x1=\"361.863\" y1=\"1110.201\" x2=\"363.921\" y2=\"1119.72\" gradientTransform=\"translate(0 -750)\"><stop offset=\"0\" style=\"stop-color:#ffed51;stop-opacity:0\"/><stop offset=\".615\" style=\"stop-color:#fff\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.87\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.7093\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.5322\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.3434\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:.1476\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><path style=\"opacity:.64;fill:url(#SVGID_00000122000914418740267200000005862818114164846984_);enable-background:new\" d=\"m299.2 395.8 131.4-33.6c-.1-9.2-1.3-18.1-3.3-26.3L295 369.7c.3 9.2 1.8 18 4.2 26.1z\"/><linearGradient id=\"SVGID_00000161630755346828274360000017483166965293107848_\" gradientUnits=\"userSpaceOnUse\" x1=\"361.863\" y1=\"1110.201\" x2=\"363.921\" y2=\"1119.72\" gradientTransform=\"translate(0 -750)\"><stop offset=\"0\" style=\"stop-color:#ffed51;stop-opacity:0\"/><stop offset=\".615\" style=\"stop-color:#fff\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.87\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.7093\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.5322\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.3434\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:.1476\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><path style=\"opacity:.64;fill:url(#SVGID_00000161630755346828274360000017483166965293107848_);enable-background:new\" d=\"m299.2 395.8 131.4-33.6c-.1-9.2-1.3-18.1-3.3-26.3L295 369.7c.3 9.2 1.8 18 4.2 26.1z\"/><path class=\"st5\" d=\"M421.9 337.3s5.2-3.2 2.5-10.5c-2.5-7.3 2.8 9.3 2.8 9.3l-5.3 1.2zM424.6 363.8s5.3-.9 5.7 6.6c0 0 .1-3.2.1-8.2l-5.8 1.6zM300.1 368.4s-5.8-1.1-5.3-6.2c0 0-.1 4.5.1 7.4l5.2-1.2zM299.2 395.8l4.5-1.2s-3.5 1.5-2.7 7.6l-1.8-6.4z\"/></g><ellipse class=\"st8\" cx=\"362.9\" cy=\"363.9\" rx=\"51.2\" ry=\"68.6\"/><linearGradient id=\"SVGID_00000012438746912666685000000004831366246735323017_\" gradientUnits=\"userSpaceOnUse\" x1=\"362.872\" y1=\"1056.539\" x2=\"362.872\" y2=\"1179.623\" gradientTransform=\"translate(0 -750)\"><stop offset=\"0\" style=\"stop-color:#ffffa6\"/><stop offset=\"1\" style=\"stop-color:#ffdc00\"/></linearGradient><ellipse style=\"fill:url(#SVGID_00000012438746912666685000000004831366246735323017_)\" cx=\"362.9\" cy=\"363.9\" rx=\"47.5\" ry=\"63.6\"/><ellipse class=\"st10\" cx=\"362.6\" cy=\"364.3\" rx=\"46.3\" ry=\"62\"/><linearGradient id=\"SVGID_00000078766162398859731370000011941330780183762848_\" gradientUnits=\"userSpaceOnUse\" x1=\"384.182\" y1=\"994.334\" x2=\"355.123\" y2=\"1177.547\" gradientTransform=\"translate(0 -750)\"><stop offset=\"0\" style=\"stop-color:#ffcd04\"/><stop offset=\".532\" style=\"stop-color:#fd9809\"/><stop offset=\".746\" style=\"stop-color:#d96111\"/><stop offset=\".805\" style=\"stop-color:#da6510;stop-opacity:.9179\"/><stop offset=\".862\" style=\"stop-color:#dc700e;stop-opacity:.8405\"/><stop offset=\".916\" style=\"stop-color:#df830a;stop-opacity:.765\"/><stop offset=\".97\" style=\"stop-color:#e49e04;stop-opacity:.6912\"/><stop offset=\"1\" style=\"stop-color:#e7b000;stop-opacity:.65\"/></linearGradient><path style=\"opacity:.6;fill:url(#SVGID_00000078766162398859731370000011941330780183762848_);enable-background:new\" d=\"M408.9 366.3c0-33.1-19.5-60-45.1-60-25.5 0-42.8 26.9-42.8 60s25.7 57.6 41.5 57.6c25.8-.2 46.4-24.6 46.4-57.6z\"/><path class=\"st12\" d=\"M402 352.5c-.4-.8-.5-1.5-1.1-2.4-3.6-7.4-9.8-12.8-16.9-13.6-8.8-1.2-17 4.7-21.7 14.4l-8 15.7-2.4 4.5c-4.9 9.3-15.2.8-11-9 1.9-4.3 6.2-5.5 9.2-2.5.7.7 1.3 1.6 1.9 2.8l6.9-13.8c-3.5-4.1-8-6.6-12.5-6.5-14.9-.1-23.8 22.7-15.2 38.7 7.4 14 22.6 14 30.2.1l7.3-14.2c.5-1.1 1.7-3.5 2.4-4.4 1.3-2.7 2.5-5.3 4.5-7.3 7.2-6.5 16.8.3 16.9 11.7 0 10.2-7.8 17.2-15 13.2-2.9-1.6-4.8-5.3-6.4-8.5-.1-.3-.1-.4-.3-.5l-7.3 14.1c1.5 2.7 3.3 4.7 3.3 4.7 3.5 4.3 8.1 6.9 12.9 7.4 17.9 2.3 31-23.6 22.3-44.6z\"/><path class=\"st2\" d=\"M398.8 350.1c-.4-.8-.5-1.5-1.1-2.4-3.6-7.4-9.8-12.8-16.9-13.6-8.8-1.2-17 4.7-21.7 14.4l-8 15.7-2.4 4.5c-4.9 9.3-15.2.8-11-9 1.9-4.3 6.2-5.5 9.2-2.5.7.7 1.3 1.6 1.9 2.8l6.9-13.8c-3.5-4.1-8-6.6-12.5-6.5-14.9-.1-23.8 22.7-15.2 38.7 7.4 14 22.6 14 30.2.1l7.3-14.2c.5-1.1 1.7-3.5 2.4-4.4 1.3-2.7 2.5-5.3 4.5-7.3 7.2-6.5 16.8.3 16.9 11.7 0 10.2-7.8 17.2-15 13.2-2.9-1.6-4.8-5.3-6.4-8.5-.1-.3-.1-.4-.3-.5l-7.3 14.1c1.5 2.7 3.3 4.7 3.3 4.7 3.5 4.3 8.1 6.9 12.9 7.4 17.7 2.3 30.8-23.5 22.3-44.6z\"/><g class=\"st13\"><linearGradient id=\"SVGID_00000016064973548568524260000014696060180894939027_\" gradientUnits=\"userSpaceOnUse\" x1=\"357.061\" y1=\"1083.859\" x2=\"366.245\" y2=\"1129.941\" gradientTransform=\"translate(0 -750)\"><stop offset=\"0\" style=\"stop-color:#ffed51;stop-opacity:0\"/><stop offset=\".615\" style=\"stop-color:#fff;stop-opacity:.63\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.5481\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.4468\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.3353\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.2164\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:9.297335e-02\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><path style=\"fill:url(#SVGID_00000016064973548568524260000014696060180894939027_)\" d=\"M398.8 350.1c-.4-.8-.5-1.5-1.1-2.4-3.6-7.4-9.8-12.8-16.9-13.6-8.8-1.2-17 4.7-21.7 14.4l-8 15.7-2.4 4.5c-4.9 9.3-15.2.8-11-9 1.9-4.3 6.2-5.5 9.2-2.5.7.7 1.3 1.6 1.9 2.8l6.9-13.8c-3.5-4.1-8-6.6-12.5-6.5-14.9-.1-23.8 22.7-15.2 38.7 7.4 14 22.6 14 30.2.1l7.3-14.2c.5-1.1 1.7-3.5 2.4-4.4 1.3-2.7 2.5-5.3 4.5-7.3 7.2-6.5 16.8.3 16.9 11.7 0 10.2-7.8 17.2-15 13.2-2.9-1.6-4.8-5.3-6.4-8.5-.1-.3-.1-.4-.3-.5l-7.3 14.1c1.5 2.7 3.3 4.7 3.3 4.7 3.5 4.3 8.1 6.9 12.9 7.4 17.7 2.3 30.8-23.5 22.3-44.6z\"/></g><linearGradient id=\"SVGID_00000029745523078962368340000004390727562759889543_\" gradientUnits=\"userSpaceOnUse\" x1=\"362.425\" y1=\"1077.771\" x2=\"363.331\" y2=\"1146.106\" gradientTransform=\"translate(0 -750)\"><stop offset=\"0\" style=\"stop-color:#ffffa6\"/><stop offset=\"1\" style=\"stop-color:#ffdc00\"/></linearGradient><path style=\"fill:url(#SVGID_00000029745523078962368340000004390727562759889543_)\" d=\"M378.6 335.1c.7 0 1.5 0 2.1.1 6.6.8 12.6 5.6 16.2 13.2.4.5.5 1.3.9 2.3 3.6 8.9 3.5 19.7-.5 28.6-4.1 9.2-11 14.6-18.7 14.6-.8 0-1.5 0-2.4-.1-4.5-.5-9-3.2-12.4-7.3 0 0-1.5-1.7-2.8-4l6.4-12.2c1.5 3.1 3.5 6.6 6.4 8.4 1.5.8 2.9 1.3 4.5 1.3 6.4 0 11.4-6.9 11.4-15.3 0-4.3-1.3-8.1-3.5-11-2.1-2.7-5.1-4.3-8-4.3-2.4 0-4.5.9-6.4 2.7-1.9 1.9-3.2 4.4-4.4 6.8l-.4.7c-.5 1.1-1.7 3.5-2.4 4.5l-7.3 14.2c-3.5 6.4-8.8 10-14.5 10-5.7 0-11.2-3.6-14.5-10.1-3.9-7.2-4.4-16.2-1.2-24.3 1.5-3.7 3.6-7 6.2-9.3 2.8-2.4 6-3.6 9.3-3.6h.4c4.1 0 8.1 2 11.3 5.7l-6 12c-.5-.8-.9-1.5-1.5-1.9-1.2-1.2-2.5-1.7-4.1-1.7-2.5 0-4.9 1.7-6.2 4.5-1.5 3.3-1.5 6.8-.1 9.6 1.3 2.9 3.7 4.9 6.4 4.9 2.4 0 4.5-1.6 6.1-4.4l2.3-4.5 8-15.7c4.9-9.1 11.9-14.4 19.4-14.4m0-1c-8 0-15.2 5.7-19.5 14.6l-8 15.7-2.4 4.5c-1.5 2.8-3.5 4.1-5.3 4.1-4.4 0-8.4-6.2-5.6-13.2 1.2-2.7 3.5-4.1 5.5-4.1 1.3 0 2.5.5 3.6 1.5.7.7 1.3 1.6 1.9 2.8l6.9-13.8c-3.5-4.1-7.7-6.5-12.4-6.5h-.4c-14.8 0-23.7 22.9-15 38.7 3.7 7 9.4 10.5 15.2 10.5 5.6 0 11.3-3.5 15.2-10.2l7.3-14.2c.5-1.1 1.7-3.5 2.4-4.4 1.3-2.7 2.5-5.3 4.5-7.3 1.9-1.7 4-2.5 6.1-2.5 5.5 0 10.8 5.8 10.8 14.2 0 8.2-5.1 14.2-10.8 14.2-1.5 0-2.8-.4-4.3-1.2-2.9-1.6-4.8-5.3-6.4-8.5-.1-.3-.1-.4-.3-.5l-7.3 14.1c1.5 2.7 3.3 4.7 3.3 4.7 3.5 4.3 8.1 6.9 12.9 7.4.8.1 1.6.1 2.4.1 16.6 0 28.1-24.5 19.9-44.5-.4-.8-.5-1.5-1.1-2.4-3.6-7.4-9.8-12.8-16.9-13.6-.6-.2-1.4-.2-2.2-.2z\"/><g class=\"st16\"><path class=\"st5\" d=\"M367.9 369c-.1-.3-.1-.4-.3-.5l-6.5 12.2 13.2-3.5c-2.9-1.5-4.6-4.9-6.4-8.2z\"/><path class=\"st5\" d=\"M400.9 370.6c1.1-6.5.5-13.7-2.3-20.3-.4-.8-.5-1.5-1.1-2.4-.5-1.2-1.2-2.3-1.7-3.2L356 354.9l-4.8 9.4-2.4 4.5c-4.9 9.3-15.2.8-11-9 .1-.3.3-.4.3-.5l-13.2 3.5c-.4 5.3.7 10.9 3.3 15.8 2.1 4 4.9 6.9 8 8.5l20.1-5.2c.7-.9 1.5-2.1 2.1-3.3l7.3-14.2c.5-1.1 1.7-3.5 2.4-4.4 1.3-2.7 2.5-5.3 4.5-7.3 7.2-6.5 16.8.3 16.9 11.7 0 3.9-1.2 7.3-3.1 9.8l14.5-3.6z\"/><path class=\"st5\" d=\"m349 360.2 2-4-4.1 1.1.3.3c.6.5 1.2 1.4 1.8 2.6z\"/></g><linearGradient id=\"SVGID_00000042709876683342692700000017294883521975005853_\" gradientUnits=\"userSpaceOnUse\" x1=\"396.797\" y1=\"1014.373\" x2=\"383.921\" y2=\"1055.972\" gradientTransform=\"translate(0 -750)\"><stop offset=\".615\" style=\"stop-color:#fff\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.87\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.7093\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.5322\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.3434\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:.1476\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><path style=\"fill:url(#SVGID_00000042709876683342692700000017294883521975005853_)\" d=\"M398.1 296.1c-.9 5.1-6.4 7.6-11.8 5.7-5.6-2-9.3-7.6-8.2-12.8.9-5.1 6.4-7.6 11.8-5.7 5.3 1.9 9.1 7.8 8.2 12.8z\"/><linearGradient id=\"SVGID_00000096742577340401768410000016811717701965525921_\" gradientUnits=\"userSpaceOnUse\" x1=\"381.838\" y1=\"1075.741\" x2=\"377.853\" y2=\"1097.658\" gradientTransform=\"translate(0 -750)\"><stop offset=\".615\" style=\"stop-color:#fff\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.87\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.7093\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.5322\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.3434\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:.1476\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><ellipse style=\"fill:url(#SVGID_00000096742577340401768410000016811717701965525921_)\" cx=\"379.2\" cy=\"340.1\" rx=\"5.1\" ry=\"4.7\"/><linearGradient id=\"SVGID_00000065794068496801925690000004489227041332286638_\" gradientUnits=\"userSpaceOnUse\" x1=\"-141.131\" y1=\"888.056\" x2=\"-149.24\" y2=\"932.66\" gradientTransform=\"rotate(11.496 2475.947 3120.52)\"><stop offset=\".615\" style=\"stop-color:#fff\"/><stop offset=\".665\" style=\"stop-color:#fffefa;stop-opacity:.87\"/><stop offset=\".727\" style=\"stop-color:#fffdea;stop-opacity:.7093\"/><stop offset=\".795\" style=\"stop-color:#fffad1;stop-opacity:.5322\"/><stop offset=\".868\" style=\"stop-color:#fff7ae;stop-opacity:.3434\"/><stop offset=\".943\" style=\"stop-color:#fff282;stop-opacity:.1476\"/><stop offset=\"1\" style=\"stop-color:#ffee5b;stop-opacity:0\"/></linearGradient><path style=\"opacity:.6;fill:url(#SVGID_00000065794068496801925690000004489227041332286638_);enable-background:new\" d=\"M354.5 441.6c-.8 5.3-5.6 8.4-10.8 7-5.2-1.5-8.6-6.8-7.8-12.1.8-5.3 5.6-8.4 10.8-7 5.1 1.3 8.6 6.7 7.8 12.1z\"/></svg>",
                    "width": 1000,
                    "height": 500,
                    "mimetype": "svg+xml"
                });
            }, true);

            var fetch_i_g_shopbtn_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/shopbtn.svg', {
                    "data": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"128\" height=\"128\"><radialGradient id=\"a\" cx=\"65.51\" cy=\"64.66\" r=\"60.06\" gradientUnits=\"userSpaceOnUse\"><stop offset=\".92\"/><stop offset=\".99\" stop-opacity=\"0\"/></radialGradient><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" fill=\"url(#a)\" d=\"M125.92 64.83c-.08 33.02-28.93 59.53-60.55 59.53-32.35 0-60.42-25.98-60.27-59.05C5.24 32.6 31 5 65.5 5c32.87 0 60.5 26.93 60.42 59.87zM65.22 9.5c-30.3-.1-54.95 24.23-55.1 54.37-.15 30.95 24.58 56.24 55.06 56.3 30.2.05 55.28-24.74 55.5-54.85.24-30.68-24.63-55.7-55.47-55.82z\"/><linearGradient id=\"b\" gradientUnits=\"userSpaceOnUse\" x1=\"93.73\" y1=\"113.67\" x2=\"37\" y2=\"15.41\"><stop offset=\"0\" stop-color=\"#242424\"/><stop offset=\".99\" stop-color=\"#8A8A8A\"/></linearGradient><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" fill=\"url(#b)\" d=\"M123 64.83c-.1 31.37-27.5 56.55-57.54 56.55-30.73 0-57.4-24.7-57.26-56.1.14-31.12 24.6-57.34 57.4-57.34 31.22 0 57.47 25.58 57.4 56.9zM65.3 12.26c-28.76-.1-52.2 23-52.33 51.65-.14 29.4 23.36 53.48 52.3 53.5 28.7.08 52.53-23.5 52.75-52.1.2-29.12-23.42-52.9-52.7-53z\"/><linearGradient id=\"c\" gradientUnits=\"userSpaceOnUse\" x1=\"37.33\" y1=\"17.18\" x2=\"92.15\" y2=\"112.12\"><stop offset=\"0\" stop-color=\"#FFF\"/><stop offset=\".99\" stop-color=\"#B8B8B8\"/></linearGradient><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" fill=\"url(#c)\" d=\"M64.73 9.6c30.63.1 55.33 24.96 55.1 55.43-.22 29.9-25.14 54.53-55.13 54.47-30.27-.05-54.83-23.73-54.68-54.47C10.16 35.1 34.65 9.5 64.72 9.6zm12.2 16.32L38.06 65.56c12.87 12.64 26.1 25.6 39.26 38.55V82.3l-18-17.76 17.6-15.62v-23z\"/><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M77.16 25.92V48.9l-17.6 15.62c6.62 6.54 12.4 12.25 18 17.76v21.83L38.28 65.6l38.86-39.64z\"/></svg>",
                    "width": 128,
                    "height": 128,
                    "mimetype": "svg+xml",
                    "ignoreStageResolution": true
                });
            }, true);

            var fetch_i_g_ballloader_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/ballloader.svg', {
                    "data": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"563\" height=\"563\" style=\"enable-background:new 0 0 563 563\" xml:space=\"preserve\"><circle cx=\"281.5\" cy=\"281.5\" r=\"281.5\"/><path d=\"M366 422H197c-5.5 0-10-4.5-10-10 0 0-2.7-36.6 0-44.5 9.6-28.3 58.5-48.8 58.5-86 0-34.8-49.9-53.7-59.5-82-2.7-7.9 0-44.5 0-44.5 0-5.5 4.5-10 10-10h171c5.5 0 10 4.5 10 10 0 0 2.7 36.6 0 44.5-9.6 28.3-60.5 48.5-60.5 82 0 39.8 49.9 57.7 59.5 86 2.7 7.9 0 44.5 0 44.5 0 5.5-4.5 10-10 10z\" style=\"fill:none;stroke:#fff;stroke-width:20;stroke-miterlimit:10\"/><path d=\"M350 427.8c9.3-9.3 9.3-13.3 0-22.6l-51.7-51.7c-9.3-9.3-24.3-9.3-33.6 0L213 405.2c-9.3 9.3-9.3 13.3 0 22.6h137z\" style=\"fill:#fff\"/></svg>",
                    "width": 563,
                    "height": 563,
                    "mimetype": "svg+xml"
                });
            }, true);

            var fetch_i_g_finger_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/finger.svg', {
                    "data": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1210\" height=\"808\"><linearGradient id=\"a\" gradientUnits=\"userSpaceOnUse\" x1=\"166.756\" y1=\"813.583\" x2=\"-35.314\" y2=\"906.893\" gradientTransform=\"matrix(2.0197 0 0 -2.0197 774.944 2268.6)\"><stop offset=\"0\" stop-color=\"#F9AD81\" stop-opacity=\"0\"/><stop offset=\".04\" stop-color=\"#F9AD81\" stop-opacity=\".05\"/><stop offset=\".24\" stop-color=\"#F9AD81\" stop-opacity=\".34\"/><stop offset=\".44\" stop-color=\"#F9AD81\" stop-opacity=\".57\"/><stop offset=\".62\" stop-color=\"#F9AD81\" stop-opacity=\".76\"/><stop offset=\".78\" stop-color=\"#F9AD81\" stop-opacity=\".89\"/><stop offset=\".91\" stop-color=\"#F9AD81\" stop-opacity=\".97\"/><stop offset=\"1\" stop-color=\"#F9AD81\"/></linearGradient><path d=\"M281.2 33.4c-94.5-42.7-205.7-.7-248.4 93.8-41.9 92.9-2.1 202.2 89.6 246.4l918.7 420.1-2.9 6.4 165.6-336.6L281.2 33.4z\" style=\"fill:url(#a)\"/><linearGradient id=\"b\" gradientUnits=\"userSpaceOnUse\" x1=\"148.528\" y1=\"815.959\" x2=\"-5.532\" y2=\"891.568\" gradientTransform=\"matrix(2.0197 0 0 -2.0197 774.944 2268.6)\"><stop offset=\"0\" stop-opacity=\"0\"/><stop offset=\"1\"/></linearGradient><path d=\"M1035.3 806.5 116.6 386.4C15.1 340.1-29.5 220.3 16.8 118.9s166.1-146 267.5-99.7c1 .4 1.9.9 2.9 1.4L1210 450.7l-6.1 12.8L281.1 33.3c-94.7-42.2-205.7.3-247.9 95-41.2 92.5-1.7 200.9 89.3 245.2l918.7 420.1-5.9 12.9z\" style=\"fill:url(#b)\"/><path d=\"M346.2 151.2C342.1 124.4 235.1 40 185.5 40S36.6 262.5 68.9 294.8 239 352.2 258 343.9c19.1-8.4 92.2-165.8 88.2-192.7z\" style=\"fill:#f9decf\"/><path d=\"M236.4 267.9c0 26.5 9 52.2 25.5 72.9 23.5-23.6 87.5-163.2 84.2-189.2-61.5 3.6-109.6 54.6-109.7 116.3z\" style=\"fill:#ebebeb\"/></svg>",
                    "width": 1210,
                    "height": 808,
                    "mimetype": "svg+xml"
                });
            }, true);

            var fetch_i_g_shoparrow_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/shoparrow.svg', {
                    "data": "<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" preserveAspectRatio=\"none\" width=\"146\" height=\"128\"><defs><path fill=\"#FFF\" d=\"M106.55 31.4q-.036.48-.05.95-.525 19.39-7.8 30.75l-.1.1q-.494.85-1.15 1.65-1.866 2.438-4.05 4.5-2.26 2.141-2.35 5.2-.088 3.128 2.05 5.4 2.134 2.261 5.2 2.35 3.126.081 5.4-2.05 3.016-2.838 5.6-6.2V74q1.094-1.35 1.95-2.75l-.05.1q9.446-13.925 10.25-37.7l25.2 3.75L118.9 0 81.5 27.65l25.05 3.75M68.7 89.5h-7.8v15.25H45.4V89.5h-7.8v37.55h7.8V109.9h15.5v17.15h7.8V89.5M26.6 83q-6.65-1.5-11.95-1.5-6.6 0-10.6 3.35Q0 88.15 0 93.6q0 4.1 2.45 7.2 1.65 2.05 4.85 4.25 1.65 1.05 3.55 2.15l2.95 1.65q3.6 2 4.85 3.55 1.3 1.45 1.3 3.55 0 2.75-2 4.3-2.05 1.65-5.65 1.65-5.1 0-12.2-3.05v7.65q7.05 1.45 12.35 1.45 8.05 0 12.6-3.45 4.65-3.55 4.65-9.7 0-4.35-2.45-7.35-.95-1.2-2.5-2.4-2.4-2-6.3-4.2l-3.2-1.75q-3.6-2-4.8-3.4-1.3-1.35-1.3-3.2 0-2.2 1.8-3.55 1.9-1.35 4.85-1.35 3.95 0 10.8 2.55V83m117.1 8.8q-2.95-2.3-9.8-2.3h-13.05v37.55h7.65v-14.7h3.25q7.05 0 11-3.4 3.9-3.4 3.9-9.45 0-5.4-2.95-7.7m-15.2 2.85h3.05q7.15 0 7.15 5.65 0 3.15-2.35 5-2.35 1.9-6.35 1.9h-1.5V94.65M94.75 88.6q-.85 0-1.75.05-7.5.45-12.1 5.25-5.1 5.35-5.1 14.35v.25q0 8.85 5.1 14.1Q86 128 94.55 128q8.95 0 14.1-5.3 5.15-5.35 5.15-14.5 0-8.95-5.15-14.3-5.15-5.3-13.9-5.3M93 93.85q.85-.15 1.75-.15 4.85 0 7.85 4 2.95 3.95 2.95 10.45 0 6.8-2.95 10.7-2.95 4-7.95 4-4.75 0-7.7-4.05-2.85-3.9-2.9-10.3v-.25q0-6.6 2.95-10.55 2.35-3.2 6-3.85Z\" id=\"a\"/></defs><use xlink:href=\"#a\"/></svg>",
                    "width": 146,
                    "height": 128,
                    "mimetype": "svg+xml",
                    "ignoreStageResolution": true
                });
            }, true);

            var fetch_i_g_coach_malone_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/coach_malone.svg', {
                    "data": "<svg version=\"1.1\" id=\"Layer_7\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0\" y=\"0\" width=\"600\" height=\"600\" style=\"enable-background:new 0 0 600 600\" xml:space=\"preserve\"><style>.st0{fill:#fff}.st4{fill:#2b415c}.st7{fill:#ff8991}.st8{fill:#b5e1ee}.st9{fill:#507197}.st10{fill:#17293e}.st11{fill:#231f20}.st12{fill:#ffcf9e}.st14{fill:#cf9268}.st15{fill:#fbeecf}.st17{fill:#725344}.st19{fill:#841b25}.st20{fill:#f86e76}.st21{fill:#7c5d50}.st22{fill:#d06e44}.st23{opacity:.25}.st24{fill:#413749}.st26{fill-rule:evenodd;clip-rule:evenodd;fill:#321108}</style><path class=\"st0\" d=\"M312.1 583c-72.4 0-139-46.4-164.2-114.3-14.3-38.6-14.5-82-.4-120.6 7.8-21.4 19.8-41.2 35.2-58 2.8-3.1 23.5-19.8 21-23.3-.5-.7-4.5-1.4-5.5-2.3-1.7-1.4-2.6-3.1-3.3-5.2-1.4-4.5-1.4-9.8-1-14.4.3-3.3 2.1-7 2-10.1 0 .7.6-1.8.6-1.8-.1-.3-3.3-1.8-3.9-2.3-3.7-3.5-3.4-7.9-2-12.3 3.8-12 9.7-23.7 16.8-34.1 2.7-3.9 6.1-7.1 7.2-11.6.7-2.8 1-5.8 1.4-8.7.5-2.9 1.4-6 .9-8.6-.5-2.5-2.1-4.2-1.7-7 .4-2.8 2-5.6 3.1-8.2-11.7 8.9-37 19.7-50 8.4-8.2-7.1-5.7-21.1-3.4-30.2 2.9-11.2 8.9-19.6 19-25.4 8.1-4.6 16.3-8.3 25.3-11.1C215 80 221 78.5 227 77.4c2.2-.4 4.3-.8 6.5-1.1.7-.1 3.4-.1 3.9-.6.7-.6 1.1-4.9 1.4-6.1 4.1-16 10.2-33.8 21.4-46.4 14.5-16.3 42.9-15.8 62.7-14 23.5 2.2 50.4 8.2 68.5 24.3 20.2 18 8 38.9 3.7 60.8-1.1 5.8-1.9 11.7-2.5 17.6-.4 4.4-2.4 12.6-.9 16.9 1 2.9 5.3 4 7.7 6.4 3.1 3.2 4.9 7.4 5.8 11.7 1.4 7.1.7 14.9.8 22.1.1 7.3-.5 14.1-3.1 21-1.1 3-2.5 5.9-4 8.8-1 1.8-5.2 6.9-5.4 8.7-.2 3.1 5.7 10.7 7 13.9 4.3 11.1 6 24.4-1.6 34.5 55.7 31.9 90.1 93.7 88 157.9-1.9 57.7-33.2 111.7-82 142.4-27.5 17.5-60 26.8-92.8 26.8z\"/><path d=\"M476.8 408c0 68.5-43.9 131.4-108.1 155-65 23.9-139.9 3.5-184.1-49.7-44.2-53.3-50.1-131.1-14.3-190.4 35.7-59.1 106.3-90.3 174-76.7 66.8 13.4 119.8 68.6 130.5 135.8 1.3 8.5 2 17.2 2 26z\" style=\"fill:#25a3b3\"/><path d=\"M361.2 280c25.1 0 49.6 5.7 72.1 16.7-54.2-59.4-146-70.8-212.9-26.3C158 312 131 392.8 156.3 463.5c14.4 40.3 44.6 74 83 92.8-36.9-40.5-51.4-98-38.2-151.2 11.1-44.9 41.5-83.7 82.2-105.6 23.9-12.8 50.8-19.5 77.9-19.5z\" style=\"fill:#078395\"/><defs><path id=\"SVGID_1_\" d=\"M476.8 408c0 68.5-43.9 131.4-108.1 155-65 23.9-139.9 3.5-184.1-49.7-44.2-53.3-50.1-131.1-14.3-190.4 35.7-59.1 106.3-90.3 174-76.7 66.8 13.4 119.8 68.6 130.5 135.8 1.3 8.5 2 17.2 2 26z\"/></defs><clipPath id=\"SVGID_2_\"><use xlink:href=\"#SVGID_1_\" style=\"overflow:visible\"/></clipPath><g style=\"clip-path:url(#SVGID_2_)\"><path class=\"st0\" d=\"M254.6 363.6c.6 9.3-.8 19 6 26.2 3.5 3.8 9.2 11.8 15 11.3 3.1-.3 6.4-3.9 8.9-5.6 4-2.7 8-5.4 11.9-8.2 7.8-5.7 15.3-11.7 22.6-18.1 14.5-12.9 27.8-27.2 39.2-42.9 5.7-7.8 10.8-16 15.4-24.5 4.6-8.3 9.9-17.3 9.4-27.1 1.9 2.5 4.8 4.5 6.3 7.3 1.9 3.6-.2 6.7-1.4 10.3-3.5 10.7-6.8 21.4-10.1 32.1-6.9 22-13.9 43.9-20.8 65.9-14.2 45-27.7 90.2-41.5 135.3-3.4 11.3-6.9 22.6-10.3 33.8-2.1 7-3.1 15.1-5.9 21.9-1.3 3.2-1.9 3.4-5.3 3.1-4.7-.4-9.4-1.1-14.1-1.6-11.4-1.2-22.9-2.5-34.3-3.7-10-1.1-20-2.5-30-3-8.2-.4-7.4-3.9-8.8-11.1-.9-4.4-2.8-8.6-3-13.1-.2-4.7 1.2-9.2 2.1-13.7 2.4-11.2 4.2-22.5 6.5-33.8 4.9-24.4 10.3-48.7 16.3-72.9 2.9-11.7 6-23.4 10-34.8 3.6-11 7.9-24.3 15.9-33.1z\"/><path class=\"st4\" d=\"M141.9 459.6c.8-12.6 3.4-26.1 12.8-35.2 9.6-9.2 23.1-15.4 34.5-22.2 12.2-7.2 23.4-13 32.7-23.7 8.5-9.7 17.1-20.9 29.2-26.4.6 3.5 2.2 7 2.2 10.5 0 3.2-1.5 5.5-2.8 8.4-3.8 8.3-6.7 17-9.8 25.5-6.1 16.8-11.6 33.8-16.5 51-9.8 34.1-17.1 69-20.7 104.4-20.6-30.8-41.1-61.5-61.6-92.3zM383.1 276.3c8.3 3.8-2.5 30.2-4.3 36-6.5 20.9-15.9 40.5-25.2 60.3-19.4 41-35.2 82.6-46.1 126.6-6.3 25.2-11.4 50.7-16.1 76.2 39.6-1 79.5-3.3 119.2-2.9 6.2.1 15 2.1 20.4-1.7 2.6-1.8 4.7-5.3 6.7-7.7 3.6-4.1 7.1-8.3 10.7-12.4 12.6-14.7 25.2-29.4 37.9-44.1 5.4-6.2 10.9-12.4 16.2-18.6 5.3-6.2 3.2-13.3 2.2-20.8-2.5-19.4-2.8-39.2-4.1-58.7-.6-9.3-1.2-18.6-1.9-27.9-.4-5.5 1.1-17.4-2.7-21.5-2-2.1-7.3-3-10.1-4.1-4.5-1.8-9.1-3.7-13.6-5.5-9.2-3.7-18.3-7.4-27.5-11-9.3-3.7-18.5-7.9-27.9-11.2-2.2-.8-6.1-1.1-7.1-3.4-1.2-2.7-.1-6.9-1.3-10.1-3.1-8.2-6.1-16.6-9.2-24.8-3-7.8-6.8-16.9-16.9-15.8.1 1.1.3 2.1.7 3.1z\"/><path d=\"M247.3 424.8c3.2 5.6 12.1 15.3 9.5 21.9-3 7.8-8.5 15.1-12 22.8-7.6 16.9-13.8 34.4-18.4 52.4-4.3 16.8-8.9 35.9-8.5 53.3.1 6.7 10.2 5.5 15.5 6.4 9.9 1.7 19.7 3.4 29.6 5.1-2.4-23.7-1.5-47.7.9-71.4 1.2-11.4 2.7-22.8 4.7-34.1 1.6-9 2.6-18.6 5.1-27.4 2.7-9.7 10.1-13.6 17.7-19.4 2.7-2 4.5-2.9 3.6-6.3s-4.3-7.8-6.5-10.6c-10.8-14-33.3-6.9-41.2 7.3z\" style=\"fill:#e04b56\"/><path d=\"M296.1 430.1c-3.3-5.1-6.2-12.3-10.9-16.3-3.7-3.2-9.7-3.9-14.4-3.8-4.4.1-10.1 1.2-13.8 3.8-4.2 2.9-5.8 8-8.3 12.2 7.1-7.7 18.1-11.7 27.5-5.5 9.3 6.2-2.2 13.4-4.4 21-5.4-3.2-12.7-.8-14.8 5.3 3.3-1.5 11.3-3.8 13.1.8.7 1.8-1.8 6.8-2.3 8.8-1 3.8-1.9 7.5-2.8 11.3-3.6 15.2-6.7 30.6-9 46.1-2.3 15.3-3.9 30.8-4 46.3 0 5.9-.4 12.3.3 18.2.7 6.1 6 6.8 10.9 9.1-2.9-30-1.2-60.6 3.1-90.4 2-13.7 4.1-27.8 7.9-41.1 1.7-6 3.5-11 8.1-15.3 4.3-4 9.4-6.9 13.8-10.5z\" style=\"fill:#cf2a3b\"/><path class=\"st7\" d=\"M259.9 446.6c-9.2 22.3-16 45.8-20.7 69.4-2.4 12.1-4.6 24.3-7.7 36.3-1.3 5.2-2.9 10.3-4.3 15.5-.6 2.1-.8 6.2-3.3 4.4-3.9-2.8-.7-21.2-.3-25.2 1-12.3 4-24.2 7.8-36 3.9-12.1 8.4-23.8 13.3-35.5.9-2.1 12.3-30.4 15.2-28.9zM259 420.6c-.8 3.7 10.3 18.4 1.1 17.4-10.5-1.1-8.8-21-1.1-17.4z\"/><path class=\"st8\" d=\"M228.7 435.8c-5.3 24.4-10.6 48.9-15.9 73.3-2.5 11.5-5.7 22.9-8 34.4-2.3 11.4 1.5 20.5 3.9 31.5 2.5-45.1 13.3-89.2 23.6-133.1 1 1.8 2 3.5 3 5.3 3.8-4.3 7.7-8.5 11.5-12.8 3.4 4.1 6.9 8.1 10.3 12.2 1.8-8.2-6-15.5-9.8-21.9-3.6 3.7-7.3 8.8-11.6 11.8-3.1 2.4-3.5 1.8-7-.7zM307.6 452.6c-8.1-6-18.3-9.7-23.4 1.5-5.2 11.4-6.6 25.8-8.6 38.1-4.8 29.4-6.1 59.6-2.8 89.2-2.3 0-6.3 1.3-8.4.4-2.7-1.2-2.2-2.3-2.2-5.2-.2-9.2-.4-18.5-.1-27.7.5-21.1 2.3-42.2 5.7-63.1 1.7-10.1 3.9-20.1 6.2-30.1.8-3.5 1.2-7.3 3.3-10.3 2.4-3.3 6.6-5.1 9.8-7.4 3.6-2.5 8.1-9 12.2-5.9 4.6 3.4 8.1 15.4 8.3 20.5z\"/><path class=\"st9\" d=\"M250.8 353.6c-25.2 24.8-48.5 54-59.6 88.1 10-4.3 21.7-4.3 32.2-2.2-10 .3-34.9.1-40.1 11.6 6.8-20.3 16.2-40 27.7-58.1 10.2-15.8 22.8-30.9 39.8-39.4zM222.3 441.7c-10.9 1.5-21.5 5.2-30.6 11.5-3.7 2.5-8.3 5.8-9.5 10.4-1.3 4.7.2 11.2.4 16.1 1.1 23.2 1.9 52.7 14.9 72.9-4.6-24-9-48.3-10.7-72.7-.3-4.3-1.3-9.5-.4-13.7.9-4.2 4.1-6.5 7.5-8.9 9-6.2 17.8-13 28.4-15.6zM142.1 459.7c1-8.3 3.1-17.2 7.3-24.6 4-6.9 11.8-11.5 17.9-16.3 14.1-11.1 28.6-21.9 44.9-29.6-14.8 12.2-29.5 24.4-44.3 36.5-5.1 4.2-10.3 7.4-12.3 14-2.9 9.4-4.7 19.4-7.1 28.9-2.1-2.9-4.2-5.9-6.4-8.9zM384.8 277.2c5.2 10.6-.2 30.6-3 41.2-3.4 12.7-8 25.2-12.8 37.5-9.7 25-21.6 49-32 73.7-10.6 25.4-18.3 51.6-25.3 78.2-3.5 13.2-6.7 26.4-9.8 39.7-1.6 6.7-3.2 13.4-4.5 20.2-1 5.4-.4 6.8-6.1 7.3 8-52.7 20.2-105.8 38.9-155.7 17.6-46.7 53.1-90.2 54.6-142.1zM410.1 325.1c21 8.5 42.1 17 63.1 25.5 8.9 3.6 17.9 7.1 26.8 10.6 6.9 2.7 2.3 8.7 1.1 14.5-31-15.9-62-31.7-92.9-47.6.6-1 1.3-2 1.9-3z\"/><path class=\"st9\" d=\"M382.3 273.4c13.2.3 15.2 11.6 19.1 22.2 2.1 5.8 5 11.3 7 17.1 2.3 6.7.6 11.1-1.1 17.7-3.2-11.2-6.8-22.4-11.1-33.2-2.3-6.5-6.4-21-13.9-23.8zM328.8 445.6c13-1.9 25.9-4 38.9-5.8 5.3-.7 11.5-.8 16.6-2.5 4.7-1.6 4.4-3.8 4.8-8.4-20.1 5.6-40.2 11.1-60.3 16.7z\"/><path class=\"st10\" d=\"M317.7 574.6c16.1-19.5 31.1-40 44.8-61.2 6.5-10.1 12.8-20.4 18.1-31.2 5.4-10.9 8.8-22.6 14-33.6-12.3-.7-24.7-1.5-37-2.2 6.9-1.4 13.8-2.9 20.7-4.3 4.6-1 10.3-.9 14.6-2.5 4.5-1.7 4.7-6.4 5.8-10.8 1.6-6.6 2.5-13.3 3.8-19.9 2.6-14.1 5.2-28.1 6.9-42.3 1.8-14.1 3.8-28.8 1.1-42.9-5 30.2-10.2 60.4-16.5 90.3-1.3 6-1.9 13.6-4.6 19.1-2 4.2-7 4-11.4 4.8-15 2.8-29.9 5.6-44.9 8.4 16.7 2.1 33.5 4.2 50.2 6.2-15.9 30.2-31.8 60.5-49.4 89.8-1.3 2.2-26.3 44.9-28.8 43.9 4.6 2 8-11.6 12.6-11.6zM250.8 353.6c-14.4 30.4-24.9 63-33.1 95.6-8.3 33.3-13.5 67.6-13.6 102 6.8-35.1 13.5-70.2 22-104.9 4.2-17.1 8.8-34.1 14.2-50.9 2.5-7.9 4.9-15.9 8.3-23.4 1.2-2.8 3.9-5.9 4.2-8.9.3-3.2-1.4-6.5-2-9.5z\"/><path class=\"st8\" d=\"M232.7 430.6c3-12.4 7.1-25.3 14.4-36 2.2-3.2 7.5-7 8.5-10.8 1.2-4.8-2.1-13.6-2.9-18.5-5.2 12.4-10.5 24.6-14.7 37.5-1.9 5.7-3.6 11.4-5.7 17-1.8 4.4-4.4 8.2.4 10.8z\"/><path class=\"st11\" d=\"M253.4 364c-14.4 28.5-21.9 60.5-28.9 91.5-2 8.7-18.2 97.1-20.9 96.7 2.4-35.4 9.6-70.3 18.8-104.5 4.5-16.8 9.5-33.4 15.6-49.7 2.4-6.6 5.1-13 7.5-19.6 1.7-4.4 3.5-11.8 7.9-14.4zM252 352.1c-16.4 11.5-29 27.1-39.5 43.9-3 4.7-26.8 50.4-28.7 49.6 4.9-21 15.4-40.2 28.5-57.2 6.5-8.3 13.6-16 21.3-23.2 4.6-4.2 11.5-13.2 18.4-13.1zM182.6 451c11.8-8.1 26.1-9 40-9.5-7.9 2.4-15.3 4.5-22.4 9-5.5 3.5-12.2 11.2-18.6 12.7 6.4-10.4 17.1-18.6 29.2-21.2.3 1 .4 1.9.3 2.9-5.5-.2-11.3.4-16.6 1.9-4.1 1.1-7.8 3.5-11.9 4.2zM194.6 545.4c-11.6-24.4-16.8-53.7-12.2-80.5 3 3.9 1.9 10.7 2.1 15.3.3 7.6 1 15.2 1.7 22.7.7 7.3 1.6 14.8 3.4 22 1.7 6.8 5.2 13.5 5 20.5z\"/><path class=\"st11\" d=\"M214.9 387.5c-15.6 10.7-31.2 21.4-47.1 31.7-6.8 4.4-13.4 9.3-17.6 16.5-1.3 2.3-7.6 21.9-8.3 21.8-.3-8.4.6-17.6 4.4-25.2 4.5-9 14.9-13.6 23.2-18.6 9.7-5.8 19.6-11.4 29.1-17.4 3.4-2.2 11.8-10.2 16.3-8.8zM384.6 276.5c5.1 22.1-11 55.3-21.3 76.9-11.3 23.9-23.6 47-32.5 71.9-8.9 24.8-15.9 50.2-22.4 75.7-1.8 7-16.9 76.4-17.6 76.3 4.6-53.2 17.3-106.4 37.3-155.9 9.9-24.5 22.4-47.6 34.1-71.3 5.7-11.5 11-23.4 15.2-35.5 2.2-6.2 4.3-12.5 5.5-18.9 1-4.4-1.4-21.2 1.7-19.2z\"/><path class=\"st11\" d=\"M382.8 273.5c12.1-1.5 15.3 11.4 18.7 20.2 2.8 7.3 6.4 14.4 9.1 21.7 2.4 6.6-.7 14-1.8 20.6-1.6 9.3-16.1 100.9-20.8 100.1 3.5-39.7 12.8-78.5 20.8-117.4.1 1.5-2.2-5.5-2.7-6.7l-2.7-7.5c-2-5.4-4-10.9-5.8-16.4-1.3-3.8-2-8.3-5.1-11.2-3-2.6-7-1.2-9.7-3.4zM385.9 437.1c-16.9 3.3-33.9 6.6-50.8 9.9-.1-.7-.2-1.4 0-2.1 16.8 2 33.5 4 50.3 6.1-20.2 45.6-44.6 89.6-75.2 129.2-1.6-1.1 32.5-57 35.8-62.7 12.5-21.5 24.7-43.3 35.4-65.8.6.7 1 1.5 1.3 2.4-18.2-2.7-36.5-5.4-54.7-8 11.1-1.8 22.3-3.6 33.4-5.4 5.1-.8 10.3-1.5 15.5-2.5 1.9-.5 7.4-2.8 9-1.1z\"/><path class=\"st11\" d=\"M411.4 324.4c-.4 1.1 26.6 10.5 29 11.4 5.5 2 54 18.4 52.4 22.6-16-2.9-31-9.7-45.8-16.2-7.6-3.3-15.1-6.7-22.6-10.3-.2-.1-13.7-6.8-13-7.5zM277.3 445.8c-9.6-7-17.2-4.9-22.4 5.5-5.5 11.2-9.7 23.4-13.9 35.2-4.5 12.7-8.3 25.6-11.9 38.6-1.1 3.9-9.1 38.5-10.7 38.3.3-28.5 9.9-55.8 20.6-82 4.8-11.8 9.7-24.3 16.6-35.2 2.6-4.1 5.9-6.9 11.1-6.3 3.3.4 9.5 2.4 10.6 5.9z\"/><path class=\"st11\" d=\"M278.4 443c-7.4 20.5-8.9 42.9-10.7 64.5-.5 6.4-3.4 68.9-6.7 68.8-2.3-26.2.2-52.6 4.1-78.6 1.7-11.3 3.9-22.5 6.3-33.7 1.2-5.8 1.7-17.2 7-21zM275.1 404.1c-8.1 4-14.6 10.2-20.8 16.7-2 2.1-15.6 18.5-17.9 17 2.8-10 10.1-17.4 18.2-23.5 4.6-3.5 14.4-12.2 20.5-10.2zM278.3 404c14.5 11.3 29.8 28.7 30.1 48.1-2.7.8-13-23-14.5-25.8-2.4-4.2-5-8.4-8-12.2-2.5-3-6.7-6.2-7.6-10.1zM232.8 417.2c-.1 5.9 1.4 11.8 1.3 17.7 0 3.1-.7 8-3.6 3.2-2.3-3.7-2.8-19 2.3-20.9z\"/><path class=\"st11\" d=\"M373.7 327.5c-9.6 22.4-19.9 44.4-30.2 66.5-9.6 20.5-19.6 41-33.6 59-3-1.8 28.6-58.5 31.8-64.5 5.7-10.8 11.3-21.7 16.9-32.6 2.8-5.4 5.5-10.8 8.3-16.2 1.2-2.4 4-11.5 6.8-12.2zM248.6 426.4l6 9.6c.9 1.4 1.8 2.8 2.7 4.3.9 1.5 3.3 3.2.5 3.2 5.3-7.6 14.8-5.2 20.7.2-3.7.3-.3-1.4 1.2-2.6 1.7-1.4 3.4-2.8 5.2-4.2 3.4-2.8 6.9-5.6 10.3-8.3-.1.8-.3 1.6-.6 2.4-4.5-8.9-12.4-18.7-23.4-18.2-6 .2-11.4 3.5-15.9 7.2-.3.1-7 5.8-6.7 6.4zm-.5 0c1.2-9.2 15.3-18 23.6-18.6 10.5-.8 18.4 7 23.7 15.2 2.1 3.2 4.2 6.5 1.5 9.7-3 3.6-9.6 6.6-13.4 9.4-1.6 1.2-4 3.8-6.1 3.8-1.8-.1-4.4-2.4-6.1-3.2-5.1-2.2-9.4-1.9-12.9 2.9-3.4-6.5-6.8-12.8-10.3-19.2z\"/></g><path class=\"st12\" d=\"M232.6 129.1c-7.9 67.2-15.9 134.4-23.8 201.6 14.4-2 28.7-4.1 43.1-6.1 1.5 17 2.9 34.1 4 51.1.5 7.6 2.4 12.5 7.9 17.8 4.6 4.4 9 10 15.6 6.8 7.5-3.6 14.2-10.1 20.6-15.3 6.5-5.3 12.9-10.9 19.1-16.6 12.2-11.2 23.9-23.1 34.7-35.8 10.4-12.2 20.2-25.7 26.3-40.7 3.1-7.6 1.9-14.1.2-22-1.9-9-3.6-18.1-5.4-27.1-1.4-7-3.8-14-4.7-21.1-1.1-8.2 5.7-12 10.1-18.2 8.4-12 14.1-26.7 14.6-41.4.2-6.1-.1-16.6-6.5-19.9-5.4-2.8-10.7 2.2-13.9 6.1-3.4 4.1-6.7 9.2-8.6 14.1-1.3 3.5-1 5.9-4.7 7.5-3.2 1.4-7.4.8-10.8 1.4 2.8-8.4 4.1-17.2 4.1-26 0-7.3.1-18.4-3-25.1-2.2-4.7-8.8-7.4-12.5-11.3-2-2.1-5.4-9.4-8-9.9-2-.3-6.7 1.9-8.5 2.4-4.4 1.1-8.8 2.2-13.1 3.4-8.3 2.2-16.5 4.4-24.8 6.8-17.4 5.3-34.7 11.6-52 17.5z\"/><path class=\"st12\" d=\"M362.8 281.3s-6.1 53.9-108.6 71.4\"/><path d=\"M365.5 167c-.6 20.4-1.2 40.8-1.8 61.1l-.9 30.6c-.1 4.6-.3 9.3-.4 13.9-.1 3.4.6 8-.5 11.4-2 5.9-11.2 9.9-16.3 12.5-7.8 4-16.2 6.9-24.5 9.7-18.4 6.2-37.2 11.1-56.2 15-9.5 2-19.1 3.7-28.6 5.4-4.3.7-8.7 1.4-13 2.2-3.2.5-7.3 2.3-10.6 2-7.2-.7-3.4-10.1-2.9-15 1.1-9.7 2.1-19.5 3.1-29.2 1-9.6 1.5-19.3 2.9-28.9.4-2.8.3-4.7 2.6-6.2 2.7-1.9 8.8-2.2 12.1-3 19.3-5 38.5-10.3 57.8-15.1 19.5-4.9 41-6.1 51.7-25.4 4.6-8.3 7-17.8 8.4-27.2.4-2.7 0-6.5 1.9-8.6 2.5-2.8 11.6-4 15.2-5.2z\" style=\"fill:#f0cdad\"/><path class=\"st14\" d=\"M362.8 281.3c-.1 8.3-15.1 15.1-21.3 18-8.9 4.2-18.3 7.1-27.7 9.8-22.2 6.4-44.7 11.3-67.4 15.7 1.9-.4 3.7-.7 5.6-1.1.7 12.6 1.5 25.1 2.2 37.7 43.2-7.6 101.2-30.6 108.6-80.1M290.9 138.2c12.4-8.5 35.1-11 43.3 4.5-3.2.5-7.4-2.7-10.3-3.8-3.8-1.5-7.7-2.9-11.8-3.4-4-.5-8.3-.3-12.2.6-2.4.4-6.5 3-9 2.1zM233.9 138.7c12.4-8.5 35.1-11 43.3 4.5-3.2.5-7.4-2.7-10.3-3.8-3.8-1.5-7.7-2.9-11.8-3.4-4-.5-8.3-.3-12.2.6-2.4.5-6.5 3.1-9 2.1z\"/><path class=\"st15\" d=\"M295 175.8c8 2.2 15.3 1.3 23.1-1 1.5-.4 6-2.7 7.4-1.9 2.4 1.3-.7 3.6-2 4.5-4.8 3.5-10.7 3.7-16.4 3-3-.3-11.1-.9-12.1-4.6zM276.1 263.4c-5.7 5.5-15.8 10-23.9 8.4-2.7-.5-10.6-3.5-6.1-5.4 3.8-1.6 10.9.7 15 .7 4.8-.1 10.4-4.8 15-3.7z\"/><path class=\"st11\" d=\"M336 132.9c-10.1-8.6-20.6-10.5-33.4-10.5-3.7 0-13.8 0-16.5-3.3-2.9-3.6 3.6-8.7 6.5-10.4 9.9-5.9 22.9-.8 31.3 5.5 1.2 1 17.3 17 12.1 18.7zM231.9 133.4c3.3-8.5 12.1-14.5 20.8-16.4 5.3-1.1 19.7 3.9 14.9 11.8-3.3 5.5-12.5 3-17.4 2.4-3.3-.3-16.6 4.4-18.3 2.2z\"/><path d=\"M352.7 127.6c4.1 14.3-.1 30.1-5.3 43.6 6.7 1.9 14.3 1.5 18.6-4.5 3.2-4.5 5.4-10.7 8-15.7s-.7-6.6-4.8-9.7c-5.7-4.3-11-9-16.5-13.7\" style=\"fill:#ae9d95\"/><path class=\"st17\" d=\"M331.5 98.2c3.3 7.3 10.2 17.5 18.9 20.6-3.8-2.7-1.4 2.1-.8 3.6.8 2 1.8 3.8 3 5.6 2.4 3.5 5.5 6.6 8.7 9.4 2.7 2.3 5.5 4.4 8.5 6.2.7.5 3.3 1.4 3.8 2.2-.1-.1-.2-.1-.3-.2 6.5 1.6 11.9-2.5 9.4-9-2.2-5.8-6.6-11.3-10.2-16.2-5-6.9-11-13.1-17.9-18.2-8-5.9-13.6-6.2-22.4-3.8M379.6 206.3c7.4 9.9 16 24.4 12.5 37.3-1 3.7-8.3 15.8-13.9 14-.7-.2-2.9-14.6-3.6-17.4-1.6-6.9-4.3-14-4.4-21.2-.1-6 5.2-8.7 9.4-12.7\"/><path d=\"M339.5 97.4c-22 5.7-44.5 10.6-66.1 17.9-10 3.3-19.9 7-29.8 10.6-3.7 1.3-7.5 3.1-11.4 3.4-5 .4-6.3-3-10.3-4.1-3.3-.9-10.2 4.1-13.1 5.5-4.5 2.1-8.8 4.3-13.2 6.6-5.6 2.9-17.1 9.2-21.9 1.7-3.2-5-.2-15.5 1.7-20.6 2.8-7.4 8.1-13.5 14.8-17.6 7.7-4.8 17-7.3 25.7-9.6 5-1.3 10-2.3 15-3.2 3.2-.6 10.6 0 13.3-1.8 4-2.8 4.1-11.1 5.4-15.4 2.7-8.6 5.3-18.1 9.5-26.1 2-3.8 5-6.6 7.7-9.9 2.6-3.2 4.9-7.3 8.5-9.5 6.6-4.1 17-2.1 24.5-2.9 10.1-1.1 20-3 30-.5 8.7 2.2 17.3 4.7 26 6.7 18.7 4.3 41.7 14.6 35.4 37.9-3.1 11.3-6.6 22-8.1 33.7-1.5 11.4-2 23.1-1.6 34.5-3.3-3.9-4.8-8.7-7.1-13.1-2.4-4.6-5.8-8.3-9.7-11.7-6.8-5.7-15.6-14-25.2-12.5\" style=\"fill:#c73b46\"/><path class=\"st19\" d=\"M221.2 123.8c-3.6-11.2-12.7-24.2-26.1-22.6-12 1.4-18.3 12.9-21.2 23.4-1.2 4.2-3 10.8-.2 14.7 2.6 3.6 7.8 3.1 11.7 2.3 13.3-2.4 24.6-11 35.8-17.8z\"/><path class=\"st20\" d=\"M245 117.6c-8.6 5-14.8 3.7-20-4.7-4.3-6.8-8.9-13.8-17.5-15.2 21.6-10 46.9-9.4 70.2-9.3-14.8-1.9-29.9-1.7-44.7.3-7.3 1-14.5 2.4-21.5 4.3-3.5.9-7 2-10.4 3.1-1.5.5-3 1-4.5 1.6-.3.1-3.5 1.4-3.4 1.3-1.1.4-2.4 1.4-3.5 1.9 13.4-3.8 25 2.7 30.7 14.6 2.4 4.9 4 10.4 9.9 12 6.3 1.7 12.2-1.8 17.6-4.4 12.9-6.3 27.4-9.8 41.2-13.7 15.8-4.4 31.7-8.5 47.6-12.3-31.2 3.6-62.6 8.8-91.7 20.5z\"/><path class=\"st20\" d=\"M173 135.1s.8-33.2 25.1-31.7c0 0-19.8 5.9-25.1 31.7zM246 84.3c5.4-14.5 9.9-29.7 18.5-42.7 3.9-6 9-12.1 15.4-15.5 7.3-3.9 16-4.2 24.1-4.4 17.8-.4 34.4 1.4 51.4 7 12.2 4 28 9.5 33.7 22.2-25.3-15.2-56.6-25.3-86.5-23-13.2 1-24.7 5.4-33.4 15.5C259 55.4 252.3 70 246 84.3z\"/><path class=\"st19\" d=\"M330.5 93.7c4.7-19.6 23-78.9 52-51.3 4.7 4.5 9.9 9.9 9.3 16.8-.7 7.7-4.1 15.8-5.7 23.4-3.7 17-7.6 35.1-4 52.4-11.4-18-28.9-39.1-51.6-41.3z\"/><path class=\"st11\" d=\"M370.3 218.4c2.3 10.2 4.7 20.3 7 30.4 2.2 9.6 6 20.1 6.5 30 .4 7.9-4.9 16.1-8.3 22.9-4.3 8.5-9.3 16.6-14.7 24.5-21.8 31.5-50.8 56.1-83.8 75.2-.7-1.1 26.4-22.1 29.3-24.5 10.8-9.1 21.4-18.5 31.3-28.6 19.1-19.6 35.8-42.3 44.1-68.7.1-3.1-2.5-12.4-3.5-17.4-1.2-6.3-2.4-12.6-3.6-18.8-.9-4.7-1.7-9.5-2.9-14.2-.6-2.4-3.2-8.6-1.4-10.8zM275.4 401.4c-6.5-2.4-12.8-6.7-17.2-12.1-4-5-4.2-10.6-4.8-16.7-.4-4.8-5.5-48.7-1.2-49 5.3 19.6 4.7 40.2 5.2 60.3-.3-1 2.6 3.8 3.3 4.8 1.3 1.7 2.7 3.3 4.3 4.7 3 2.9 8.3 4.5 10.4 8zM233.4 129.6c-4.5 33.9-8.7 67.9-12.4 102-1 8.9-9.2 98.6-12.7 98.3.1-34.9 4.4-69.4 9.3-103.9 2.4-17 4.9-34 7.6-51 1.3-8.5 2.7-17 4.2-25.5.9-5.1.6-15.6 4-19.9z\"/><path class=\"st11\" d=\"M209.3 330.8c28.2-5 56.1-11 83.7-18.8 12-3.4 24-6.8 35.7-11 3.4-1.2 32.8-14.8 32.9-14.6-18.6 17.8-45 24.4-69.4 30.2-14.4 3.4-28.8 6.4-43.3 9-7.9 1.4-15.8 2.4-23.7 3.7-4.7.7-11.2 3.2-15.9 1.5zM364.6 218.8c1 21.7 4.3 44.5-1.9 65.8-4.6-.1-1.1-36.6-.8-40.7.3-4.6.6-9.1.7-13.7.1-3-.5-9.2 2-11.4zM396.4 164.3c0-9.3-1.6-29.3-16-23.3-11.3 4.7-14.7 21.8-16 32.6.8.1 3.7-10.6 4.3-12.1 1.9-5 4.4-10.3 8.6-13.8 8.8-7.5 13.7.9 14.8 9.4 1.4 10.3-.8 21.1-4.4 30.8-2.3 6.3-5.5 12.4-9.4 18-1.2 1.6-11.9 13.1-11.8 13.4 18.4-10.9 31-33.6 29.9-55z\"/><path class=\"st0\" d=\"M241.3 249.7c.9 3.4 1.6 15.1 4.9 16.9 3.5 1.8 14.6-2.1 18-2.8 7.7-1.5 33.3-5.2 34.7-16-19.2.1-38.4.5-57.6 1.9z\"/><path class=\"st11\" d=\"M244.7 263c-4.2-3.1-5.7-9.6-3.4-14.2 4.2 3.1 5.7 9.6 3.4 14.2zM300.5 248.8c-16 13.8-40.4 23.6-61.6 17.9.1-2.2 33.2-6.4 37.2-7.6 4.7-1.4 9.1-3.1 13.4-5.5 2.9-1.7 7.4-5.2 11-4.8zM379 205.3c10.5 12.5 26.9 46.9.4 51.4-.3-.8 6.2-7.9 7.1-9.6 2.2-4.3 3-9 2.6-13.8-.4-5.4-2.3-10.8-4.4-15.7-1.6-3.8-5.5-8.1-5.7-12.3zM333.3 99.2c2.1 7.7 9.9 13.1 16.7 16.5 4.7 2.4 14.6 4.7 16.2 10.5-9.2 0-17.2-5-23.8-11-2.8-2.7-12.9-11.4-9.1-16z\"/><path class=\"st11\" d=\"M349.2 118.9c2.4 8 10.3 12.5 16.4 17.4 1.3 1.1 9.3 7.3 7.7 9.1-3.5 4-29.2-19.9-24.1-26.5z\"/><path class=\"st11\" d=\"M353.3 129.5c3.2 13 6.3 33.3-5.8 42.8-2.1-6 2.3-13.8 3.6-19.5 1.7-7.5-.9-16.2 2.2-23.3z\"/><path class=\"st11\" d=\"M347.3 171.7c7.6-1.3 12.3-4.7 19-7.7-.7 8.3-12.7 14.9-19 7.7zM343.8 95.6c16.2 7.7 41.2 22.9 38.7 44-1.1.2-6.7-11.1-8.1-13.1-3.2-4.7-6.6-9.3-10.6-13.4-3.4-3.5-7.1-6.9-11-9.9-3-2.2-7.2-4.2-9-7.6zM172.6 136.1c-.6-18.2 10.1-42.7 32.6-35.3 10.2 3.4 13 11.8 17.7 20.4 2.2 3.9 4.4 6.3 9 6.7 1.7.2 10.8-2.1 11.2-1.4-6.3 4.5-15.7 7.3-21.8 1-6.5-6.8-6.6-17-15.6-21.9-8.2-4.5-18.2-1.8-24.1 5.1-3.2 3.8-5.3 8.7-6.5 13.5-1 3.5-.3 8.8-2.5 11.9z\"/><path class=\"st11\" d=\"M173.1 137.2c3.5 15.4 41.8-15.9 44.9-10.9-6.6 7.7-16 11.8-25.4 14.7-4.5 1.4-9.7 2.8-14.4 1.5-1.5-.4-7.3-2.9-5.1-5.3zM242.4 126.2c15.1-8.1 31.3-14.2 47.6-19.3 16.4-5.1 33.3-9.6 50.5-9.6-33 8.3-65 20.5-98.1 28.9z\"/><path class=\"st11\" d=\"M193.2 98.7c21.1-11.5 45.9-14.5 69.6-15 26-.6 56.4 4.3 80.9 13.1-.5 1.8-38.8-5.4-42.7-6-13.9-1.9-27.8-3.2-41.8-3.3-12.9 0-25.8 1-38.5 3.4-5.1 1-9.9 2.2-14.7 4-3.9 1.6-8.5 4.2-12.8 3.8z\"/><path class=\"st11\" d=\"M380.8 129.8c-.2-12.8.5-25.7 2.7-38.3 1.9-10.8 7.5-22 7.2-33-.6-20.6-31.5-28.4-47.5-31.8-19.8-4.2-47.1-7.4-65.8 2.5-9.4 5-14.7 14.6-19.3 23.8-1.8 3.6-12.5 32-12.7 32 3-20.1 10.3-50.2 29.9-60.6 18.7-9.9 45.7-6.6 65.5-2.5 17.7 3.7 51.8 13.3 52.4 35.9.3 11.7-6 23.2-8.2 34.5-1.4 7-2.3 14.2-2.9 21.3-.4 4.6.9 12-1.3 16.2z\"/><path class=\"st0\" d=\"M288.1 144c-6.6 8.5-4.4 22.5 4.7 28.1 9 5.6 21.8 4.8 30.5-1 7.3-4.8 14.8-19.4 5.7-26.1-10.7-7.5-29.8-5.4-40.9-1z\"/><path class=\"st21\" d=\"M326.3 151.8c0 13.8-25.9 13.8-25.9 0-.1-13.7 25.9-13.7 25.9 0z\"/><path class=\"st22\" d=\"M323.4 156.3c0 7.6-18.7 7.6-18.6 0 .1-7.7 18.6-7.5 18.6 0z\"/><path class=\"st11\" d=\"M326.5 151.8c-.5 15.3-27.7 15.4-28.2 0-.5-16.7 28.8-16.9 28.2 0zm-.5 0c-.4-11-23.1-10.6-23.7 0-.6 12.1 24.1 12.5 23.7 0z\"/><path class=\"st11\" d=\"M321.7 151.4c0 7.1-15.2 7.1-15.2 0s15.2-7.1 15.2 0z\"/><path class=\"st0\" d=\"M312.9 149.4c0 4.5-8.5 4.5-8.5 0s8.5-4.5 8.5 0z\"/><g class=\"st23\"><path class=\"st24\" d=\"M284.9 150.9c14.1-6.2 31.7-7 45.3 1 0-8.3-16.8-9.3-23.3-9.8-6.8-.5-21.4-1-22 8.8z\"/></g><path class=\"st11\" d=\"M285.4 149.8c-6.1 34.8 52.7 28.7 44-1 2.4 3.4-1.6-.2-2.9-.7-2-.9-4-1.7-6.1-2.3-4.5-1.3-9.3-1.7-14-1.6-9.1.1-18.2 2.3-26.8 5.1 3.8-7.8 8-15.8 14.9-21.3.4.4-7.7 15.9-8.6 18.4-1-1-2-1.9-2.9-2.9 13.6-6.4 29.3-7.4 43.3-1.6 5.9 2.5 9.3 5.3 8.8 12-.4 5.7-2.4 11.5-6.6 15.6-7.9 7.7-22 9.3-32.1 5.7-5.6-2-9.7-5.8-11.5-11.5-.9-3-3.3-12 .5-13.9z\"/><path class=\"st0\" d=\"M232.7 144c-5.7 8.3-4.4 21.9 3.9 28 8.4 6.1 21 4.5 28.7-1.9 6.1-5.1 11.7-18.8 4.2-24.9-9.3-7.5-26.8-5.6-36.8-1.2z\"/><path class=\"st21\" d=\"M266.8 151.8c0 13.6-23.1 13.6-23.2 0 0-13.6 23.2-13.5 23.2 0z\"/><path class=\"st22\" d=\"M264.3 156.3c0 7.5-16.6 7.5-16.6 0s16.6-7.5 16.6 0z\"/><path class=\"st11\" d=\"M267.1 151.8c-.6 16.5-27.7 14.2-25.3-2.1 2.2-15.2 25.9-13.3 25.3 2.1zm-.5 0c-.4-11.7-22.8-9.9-20.8 1.7 1.9 10.8 21.2 9.6 20.8-1.7z\"/><path class=\"st11\" d=\"M262.7 151.4c0 7-13.6 7-13.6 0 .1-7 13.6-7 13.6 0z\"/><path class=\"st0\" d=\"M253.6 149.4c0 3.8-6.6 3.8-6.6 0 .1-3.8 6.6-3.9 6.6 0z\"/><g class=\"st23\"><path class=\"st24\" d=\"M229.9 150.9c12.5-6.1 28.5-6.9 40.5 1 0-11.2-39.7-15.9-40.5-1z\"/></g><path class=\"st11\" d=\"M230.4 149.7c-2 13.1 5.2 24.9 19.4 24 13.3-.8 23.2-11.6 19.7-25.1 2 3.1-1.7-.3-2.9-.9-1.9-1-3.9-1.8-6-2.3-3.8-1.1-7.7-1.4-11.6-1.3-8.3.2-16.5 2.5-24.2 5.4 1.1-2.5 8.3-21.7 9.8-21.3-.3 6.1-1.8 12.2-3.4 18.1-1.1-1-2.1-1.9-3.2-2.9 12-6.1 26.2-7.4 38.6-1.7 5.6 2.6 8.8 5.4 8.5 11.9-.3 5.4-2.1 11.3-5.7 15.4-7.2 8.2-21.4 10.5-31.1 5.5-4.7-2.4-7.7-6.8-8.9-11.9-.5-2.7-2.3-11.2 1-12.9z\"/><path d=\"M270 215.3c11.3 0 19.2 5.2 29.4 10.3 10.4 3.1 22 .7 31.1-4.8 2.4 24.6-34.6 28.7-51.2 28.8-13.1.1-26.3-1.3-39.4-1.1-6.5.1-13 .6-19.4 1.9-4 .8-12 1.7-14.2 5.8-3.3-12.5 1-26.5 11.6-34.2\" style=\"fill:#735445\"/><path class=\"st11\" d=\"M270 215.1c5.3 0 10.7.7 15.6 2.8 5 2.1 9.3 5.6 14.5 7 10.8 3 22.2-.4 31.4-6.2 4.6 31.8-41.9 33-62.7 32.8-12.3-.1-24.7-.3-37 .5-4.6.3-9.6.3-14.1 1.6-2.8.8-5.5 2.6-8.4 3.1-7.1 1.4-6.6-5.7-5.8-11.5 1.3-9.6 5.8-18.1 14.1-23.3-.3-.4-8.6 12.8-9.2 14.7-2 6.2-2.1 12.9-.2 19.2-1.3.1-2.6.1-3.9.2 1.2-7.3 15-7.8 20.4-8.4 14.1-1.5 28.1-1.4 42.2-.7 14.2.7 29.1 1.4 42.8-3.4 9.6-3.4 20.6-10.8 19.6-22.4.7.2 1.3.5 1.9.9-9.9 5.8-22.5 7.9-33.4 3.9-5.2-1.9-9.2-5.9-14.4-7.8-4.3-1.5-9.7-.6-13.4-3z\"/><path class=\"st12\" d=\"M226.8 183.6c7.4-6.6 14.6-13.6 22.3-19.7 4.6-3.6 12.4-7.8 13.5-14.1 1.3-7.4-2.6-16.3-2.8-23.8-.1-4.3.2-4.6 4.1-5.9 5.2-1.6 10.5-3 15.7-4.5-.2 15.7-.3 31.5-.5 47.2l-.3 23.6c-.1 5.5 1.9 13.9-.5 19-1.9 4-9 7.4-12.8 9.3-5.8 2.8-13 3.2-19.2 4.3-6.9 1.2-13.9 3.1-21 3.9-7.7.8-15.4-.8-23-1.4 4.4-8.8 8.9-17.5 13-26.4 1.4-3.1 3-8.8 5.8-11 2.3-1.8 2.9-1.1 5.7-.5z\"/><path class=\"st12\" d=\"M259.6 126.7c.6 5.1 1 10.2 2 15.3.6 3.2 2.4 8 .2 10.8-1.9 2.4-7 3.1-9.6 4.4-5 2.5-9.8 6.1-14.1 9.7-17 14.1-28.9 33.6-35.6 54.5 21.5 3.2 43.3-1.7 64.3-6\"/><path class=\"st11\" d=\"M259.8 126.6c.8 6.2 1.5 12.5 2.6 18.6.6 3.4 2.1 6.2-1 8.7s-8.1 3.7-11.6 5.9c-4.5 2.8-8.7 6.1-12.6 9.6-15.5 14-26.2 32.8-32.3 52.6-.7-1.1-1.3-2.2-2-3.3 11 1.5 22.2 1 33.2-.1 3-.3 30.4-4.4 30.7-3.1-21.7 6.4-45.1 12-67.8 7.8 10.3-30.5 31.2-61.4 63.1-71.7-1.3 2-1.1-5-1.2-6.3-.2-2.7-.4-5.4-.8-8.1-.1-2.2-2.2-8.8-.3-10.6z\"/><path class=\"st15\" d=\"M208.7 216.4c8.5-25.5 27.1-55 55.4-60.7.5 1.2-15.7 11.9-17.5 13.4-6.4 5.1-12.4 10.7-17.7 16.9-4.6 5.4-9 11.1-12.3 17.4-1.9 3.7-3.8 11-7.9 13z\"/><g class=\"st23\"><path class=\"st24\" d=\"M347.1 99.3c-22.5 5.3-43.2 12.4-63.9 23-4.5 2.3-8.8 4.8-12.8 7.8-3.6 2.7-6.7 7.3-11.1 8.6-4.2 1.3-9.3.8-13.7 1.7-5.3 1.1-10.5 2.8-14.9 6 .9-4.5.5-10 3-14 2.3-3.7 7.7-5.7 11.4-7.5 10.7-4.8 22-8.8 32.9-12.9 12.5-4.6 25.2-8.7 38.2-11.7 5.9-1.4 11.8-2.3 17.8-3.4 6.6-1.2 7.4-.9 13.1 2.4z\"/></g><path class=\"st26\" d=\"M281.1 38.6c-10.4 7.9-13.9 23.6-5.7 34.3 8.2 10.7 24.2 11.5 34.6 3.6s13.9-23.6 5.7-34.3c-8.3-10.6-24.2-11.5-34.6-3.6z\"/><path d=\"M282.7 40.9c-9.4 7.2-12.3 21.6-4.4 31 7.6 9.1 21.8 9.2 30.6 1.9 8.9-7.3 11.4-21.2 3.8-30.3-7.4-8.9-21.1-9.3-30-2.6z\" style=\"fill-rule:evenodd;clip-rule:evenodd;fill:#ff6000\"/><path class=\"st26\" d=\"M278.3 72.3c-1.8-2.1 1.5-4.3 2.6-5.8 1.9-2.6 3.3-5.6 4-8.7-4-.4-7.9-.8-11.9-1.2-.4-4 10.4-.9 12.2-.7.4-3.2.2-6.5-.8-9.6-.6-1.8-3-4.6-.6-6.2 1.5 2.5 2.6 5.2 3.1 8 .3 1.4-.3 5.9.4 7 .8 1.2 4.7 2.6 6.3 1.8 3.7-1.7 2.5-22.9 6.6-21.1l-3.6 21.3c3.9.4 6.5 2.3 9-.9 1-1.3 1-3.7 1.7-5.2 1.3-2.8 3.4-5.3 5.6-7.4 1.8 2.2-1.2 4.2-2.4 5.8-1.8 2.6-3.1 5.6-3.7 8.7 3.8.4 7.6.8 11.3 1.2.5 3.9-9.9 1-11.7.8-.4 3.1-.1 6.1.8 9 .6 2 2.6 4.1.2 5.8-1.6-2.8-2.6-5.9-3-9.1-.1-.9.4-4.9-.4-5.7-.9-.9-6.1-1.4-7.2-.8-3.5 2.1-1.7 22.7-6.2 20.9l3.6-21.3c-3.8-.4-6-2.1-8.5.9-1 1.3-1.1 3.7-1.9 5.2-1 2.6-3.3 5.2-5.5 7.3z\"/><path d=\"M291.9 80.8c-3.4 0 1.8-16.3 1.6-19.2 0-.5.7-2 .4-2.4-.4-.7-5.9-1.2-6.7-.8-1.6 1-2.3 6-3.3 7.7-1.5 2.6-3.5 4.9-5.7 6.9-2.8-3 5.1-11 6-14.8-2.5-.3-8.6.3-10.6-1.1-5.1-3.7 9.5-2.1 11.1-1.8.5-4.3-.8-7.2-1.8-11.1-.5-1.9-1.2-3.6 1-4.9 3 4.7 2.3 9.2 3.9 14 .6 1.9 1 3.6 4.3 3 2-.4 1.4-.2 2.5-2 2.8-4.8.4-11.6 2.5-16.4.5-1.1 1.5-4.8 3.7-2.4.2.2-.4 2.1-.4 2.3.2 3.1-1.2 7.1-1.7 10.2-.3 1.5-2.1 6.9-1.4 8.2.4.7 2.7 1.2 3.9 1.2 3 0 2.8.5 4.3-2.3 2.4-4.6 3.4-8.4 7.5-12.3 2.8 3.2-4.6 10.9-5.6 14.8 2.4.3 8.2-.3 10.1 1.1 5.1 3.6-9.1 2.1-10.6 1.9-.4 3.8 4.4 12.8.4 15-.9-1.6-1.7-3.2-2.3-4.9-.9-2.6-.2-6.3-1.2-8.6-.7-1.8-3.4-3.8-6.2-2.4-4.7 2.3-.4 21.1-5.7 21.1zm-.4-1.1c2.3.6 2.5-18.7 5-20.6 1.6-1.3 6.9-.6 8.2.9.7.7.3 4.6.4 5.5.3 3 1.2 5.9 2.6 8.5 1.3-1.2-1.2-6.1-1.5-7.8-.4-2.2-.4-4.6-.1-6.8 1.6.2 11.1 2.8 11.6.2l-11.4-1.2c.5-2.7 1.4-5.4 2.8-7.7.9-1.5 4.7-4.6 3.8-6.4-2 2-3.9 4.3-5.1 6.9-.8 1.8-.8 5-2.2 6.3-2.4 2.3-6.6.4-9.5-.1 1.2-7.1 2.4-14.3 3.6-21.4-2.4-.6-2.4 18.8-5.1 20.9-1.7 1.3-6.6 0-7.7-1.4-.7-.8-.1-4.8-.2-5.7-.4-3.2-1.4-6.3-3-9.2-1.3 1.5 1.4 5.6 1.8 7.2.2 1 1.3 7.6.2 8.4-1.7 1.2-11.4-4-12.2-.3 4 .4 8 .8 12 1.3-.5 2.7-1.6 5.5-3.1 7.8-.9 1.4-4.9 4.7-4 6.4 2.1-2 4-4.3 5.4-6.9.8-1.6.9-4.2 2.1-5.6 2.6-2.9 5.6-1.3 9.3-.7-1.3 7.2-2.5 14.4-3.7 21.5z\" style=\"fill:#321108\"/><path class=\"st11\" d=\"M249.5 277.7c5.6-4.3 15.1-5.6 21.7-2.9-5.7 4.3-15.2 5.6-21.7 2.9z\"/></svg>",
                    "width": 600,
                    "height": 600,
                    "mimetype": "svg+xml"
                });
            }, true);

            var ref_i_g_ball_golden_svg = "/assets/ball_golden.eb60f4f7.svg";

            var ref_i_g_ballshine_svg = "/assets/ballshine.1d3d5163.svg";

            var ref_i_g_ball_silver_svg = "/assets/ball_silver.5dc9691a.svg";

            var ref_i_g_ball_bronze_svg = "/assets/ball_bronze.dd738c0c.svg";

            var ref_i_s_hit01_mp3 = "/assets/hit01.3b82d2b4.mp3";

            var ref_i_s_hit02_mp3 = "/assets/hit02.6e179026.mp3";

            var ref_i_s_hit03_mp3 = "/assets/hit03.282cd1ca.mp3";

            var ref_i_s_hit04_mp3 = "/assets/hit04.2166c678.mp3";

            var ref_i_s_hit05_mp3 = "/assets/hit05.c8ce3074.mp3";

            var ref_i_s_hit06_mp3 = "/assets/hit06.107d176f.mp3";

            var ref_i_s_hit07_mp3 = "/assets/hit07.103ee7a3.mp3";

            var ref_i_s_throw01_mp3 = "/assets/throw01.d2028765.mp3";

            var ref_i_s_throw02_mp3 = "/assets/throw02.c6ed11de.mp3";

            var ref_i_s_netdirect_mp3 = "/assets/netdirect.055b6f45.mp3";

            var ref_i_s_net_mp3 = "/assets/net.8a99ef8d.mp3";

            var ref_i_s_awww1_mp3 = "/assets/awww1.4bc1e235.mp3";

            var ref_i_s_awww2_mp3 = "/assets/awww2.1779c702.mp3";

            var ref_i_s_clap1_mp3 = "/assets/clap1.5f944314.mp3";

            var ref_i_s_clap2_mp3 = "/assets/clap2.a08ae8aa.mp3";

            var ref_i_s_clap3_mp3 = "/assets/clap3.c2007be4.mp3";

            var ref_i_s_clap4_mp3 = "/assets/clap4.26ed9534.mp3";

            var ref_i_s_clap5_mp3 = "/assets/clap5.d5e6d3e5.mp3";

            var ref_i_s_powerup_gold_ball_activate_mp3 = "/assets/powerup_gold_ball_activate.7d925cd7.mp3";

            var ref_i_s_powerup_silver_ball_activate_mp3 = "/assets/powerup_silver_ball_activate.94ca442b.mp3";

            var ref_i_s_powerup_bronze_ball_activate_mp3 = "/assets/powerup_bronze_ball_activate.c8421708.mp3";

            var ref_i_s_powerup_aim_boost_on_mp3 = "/assets/powerup_aim_boost_on.864cc500.mp3";

            var ref_i_s_powerup_coin_boost_on_mp3 = "/assets/powerup_coin_boost_on.a0337b0f.mp3";

            var ref_i_s_powerup_score_boost_on_mp3 = "/assets/powerup_score_boost_on.4d5c16e3.mp3";

            var ref_i_s_powerup_focus_boost_on_mp3 = "/assets/powerup_focus_boost_on.8303d72a.mp3";

            var ref_i_s_powerup_aim_boost_off_mp3 = "/assets/powerup_aim_boost_off.fb0024ae.mp3";

            var ref_i_s_powerup_coin_boost_off_mp3 = "/assets/powerup_coin_boost_off.dccb9924.mp3";

            var ref_i_s_powerup_score_boost_off_mp3 = "/assets/powerup_score_boost_off.77b54f70.mp3";

            var ref_i_s_powerup_focus_boost_off_mp3 = "/assets/powerup_focus_boost_off.0bb3f9d1.mp3";

            var ref_i_s_prize_claim_mp3 = "/assets/prize_claim.c0731537.mp3";

            var ref_i_s_prize_won_mp3 = "/assets/prize_won.ef5ca034.mp3";

            var ref_i_s_ding_mp3 = "/assets/ding.f89ece60.mp3";

            var ref_i_s_coinpickup_mp3 = "/assets/coinpickup.0388488c.mp3";

            var ref_i_s_music_mp3 = "/assets/music.227f914c.mp3";

            var ref_i_g_ball_svg = "/assets/ball.7fdcb40e.svg";

            var ref_i_g_skin_tennis_png = "/assets/skin_tennis.62267cc7.png";

            var ref_i_g_skin_tennis_shine_png = "/assets/skin_tennis_shine.41aa983d.png";

            var ref_i_g_skin_bowling_png = "/assets/skin_bowling.d8ddbeb6.png";

            var ref_i_g_skin_bowling_shine_png = "/assets/skin_bowling_shine.a755176c.png";

            var ref_i_g_skin_mellon_png = "/assets/skin_mellon.7bc8b7c3.png";

            var ref_i_g_skin_mellon_shine_png = "/assets/skin_mellon_shine.3c321fe1.png";

            var ref_i_g_skin_beach_png = "/assets/skin_beach.e2648982.png";

            var ref_i_g_skin_beach_shine_png = "/assets/skin_beach_shine.e87613af.png";

            var ref_i_g_skin_foodball_png = "/assets/skin_foodball.d624bb49.png";

            var ref_i_g_skin_foodball_shine_png = "/assets/skin_foodball_shine.711b0e5a.png";

            var ref_i_g_skin_8ball_png = "/assets/skin_8ball.30e9eb52.png";

            var ref_i_g_skin_8ball_shine_png = "/assets/skin_8ball_shine.eada248a.png";

            var ref_i_g_skin_basketball_png = "/assets/skin_basketball.39e6c3df.png";

            var ref_i_g_skin_basketball_shine_png = "/assets/skin_basketball_shine.677427cf.png";

            var ref_i_g_skin_eye_png = "/assets/skin_eye.4ad0fdbc.png";

            var ref_i_g_skin_eye_shine_png = "/assets/skin_eye_shine.78dfdb83.png";

            var ref_i_g_skin_face_png = "/assets/skin_face.64337837.png";

            var ref_i_g_skin_face_shine_png = "/assets/skin_face_shine.c76e11cc.png";

            var ref_i_g_drink_aim_svg = "/assets/drink_aim.62553b53.svg";

            var ref_i_g_drink_coin_svg = "/assets/drink_coin.fa836c28.svg";

            var ref_i_g_drink_points_svg = "/assets/drink_points.0e011f09.svg";

            var ref_i_g_drink_rim_svg = "/assets/drink_rim.7bd461b8.svg";

            Host.bootstrapper.load( /*#__PURE__*/ function() {
                var _ref = _asyncToGenerator( /*#__PURE__*/ regeneratorRuntime.mark(function _callee(resolve) {
                    return regeneratorRuntime.wrap(function _callee$(_context) {
                        while (1) {
                            switch (_context.prev = _context.next) {
                                case 0:
                                    if (!Host.bootstrapper.hasPreInitializationPromise) {
                                        _context.next = 3;
                                        break;
                                    }
                                    _context.next = 3;
                                    return Host.bootstrapper.preInitializationPromise;
                                case 3:
                                    Host.GameRemoteDataKeys.push('highscore.v1');
                                    Host.Preferences.GetInt('highscore.v1', resolve);
                                case 5:
                                case "end":
                                    return _context.stop();
                            }
                        }
                    }, _callee);
                }));
                return function(_x) {
                    return _ref.apply(this, arguments);
                };
            }(), true);

            Host.bootstrapper.load( /*#__PURE__*/ function() {
                var _ref = _asyncToGenerator( /*#__PURE__*/ regeneratorRuntime.mark(function _callee(resolve) {
                    return regeneratorRuntime.wrap(function _callee$(_context) {
                        while (1) {
                            switch (_context.prev = _context.next) {
                                case 0:
                                    if (!Host.bootstrapper.hasPreInitializationPromise) {
                                        _context.next = 3;
                                        break;
                                    }
                                    _context.next = 3;
                                    return Host.bootstrapper.preInitializationPromise;
                                case 3:
                                    Host.GameRemoteDataKeys.push('ballcount.v2');
                                    Host.Preferences.GetInt('ballcount.v2', resolve);
                                case 5:
                                case "end":
                                    return _context.stop();
                            }
                        }
                    }, _callee);
                }));
                return function(_x) {
                    return _ref.apply(this, arguments);
                };
            }(), true);

            Host.bootstrapper.load( /*#__PURE__*/ function() {
                var _ref = _asyncToGenerator( /*#__PURE__*/ regeneratorRuntime.mark(function _callee(resolve) {
                    return regeneratorRuntime.wrap(function _callee$(_context) {
                        while (1) {
                            switch (_context.prev = _context.next) {
                                case 0:
                                    if (!Host.bootstrapper.hasPreInitializationPromise) {
                                        _context.next = 3;
                                        break;
                                    }
                                    _context.next = 3;
                                    return Host.bootstrapper.preInitializationPromise;
                                case 3:
                                    Host.GameRemoteDataKeys.push('tutorial.v5');
                                    Host.Preferences.GetBool('tutorial.v5', resolve);
                                case 5:
                                case "end":
                                    return _context.stop();
                            }
                        }
                    }, _callee);
                }));
                return function(_x) {
                    return _ref.apply(this, arguments);
                };
            }(), true);

            Host.bootstrapper.load( /*#__PURE__*/ function() {
                var _ref = _asyncToGenerator( /*#__PURE__*/ regeneratorRuntime.mark(function _callee(resolve) {
                    return regeneratorRuntime.wrap(function _callee$(_context) {
                        while (1) {
                            switch (_context.prev = _context.next) {
                                case 0:
                                    if (!Host.bootstrapper.hasPreInitializationPromise) {
                                        _context.next = 3;
                                        break;
                                    }
                                    _context.next = 3;
                                    return Host.bootstrapper.preInitializationPromise;
                                case 3:
                                    Host.GameRemoteDataKeys.push('ballskin.v2');
                                    Host.Preferences.GetString('ballskin.v2', resolve);
                                case 5:
                                case "end":
                                    return _context.stop();
                            }
                        }
                    }, _callee);
                }));
                return function(_x) {
                    return _ref.apply(this, arguments);
                };
            }(), true);

            Host.bootstrapper.load( /*#__PURE__*/ function() {
                var _ref = _asyncToGenerator( /*#__PURE__*/ regeneratorRuntime.mark(function _callee(resolve) {
                    return regeneratorRuntime.wrap(function _callee$(_context) {
                        while (1) {
                            switch (_context.prev = _context.next) {
                                case 0:
                                    if (!Host.bootstrapper.hasPreInitializationPromise) {
                                        _context.next = 3;
                                        break;
                                    }
                                    _context.next = 3;
                                    return Host.bootstrapper.preInitializationPromise;
                                case 3:
                                    Host.GameRemoteDataKeys.push('coins.v2');
                                    Host.Preferences.GetInt('coins.v2', resolve);
                                case 5:
                                case "end":
                                    return _context.stop();
                            }
                        }
                    }, _callee);
                }));
                return function(_x) {
                    return _ref.apply(this, arguments);
                };
            }(), true);

            Host.bootstrapper.load( /*#__PURE__*/ function() {
                var _ref = _asyncToGenerator( /*#__PURE__*/ regeneratorRuntime.mark(function _callee(resolve) {
                    return regeneratorRuntime.wrap(function _callee$(_context) {
                        while (1) {
                            switch (_context.prev = _context.next) {
                                case 0:
                                    if (!Host.bootstrapper.hasPreInitializationPromise) {
                                        _context.next = 3;
                                        break;
                                    }
                                    _context.next = 3;
                                    return Host.bootstrapper.preInitializationPromise;
                                case 3:
                                    Host.GameRemoteDataKeys.push('unlocked.v1');
                                    Host.Preferences.GetString('unlocked.v1', resolve);
                                case 5:
                                case "end":
                                    return _context.stop();
                            }
                        }
                    }, _callee);
                }));
                return function(_x) {
                    return _ref.apply(this, arguments);
                };
            }(), true);

            Host.bootstrapper.load( /*#__PURE__*/ function() {
                var _ref = _asyncToGenerator( /*#__PURE__*/ regeneratorRuntime.mark(function _callee(resolve) {
                    return regeneratorRuntime.wrap(function _callee$(_context) {
                        while (1) {
                            switch (_context.prev = _context.next) {
                                case 0:
                                    if (!Host.bootstrapper.hasPreInitializationPromise) {
                                        _context.next = 3;
                                        break;
                                    }
                                    _context.next = 3;
                                    return Host.bootstrapper.preInitializationPromise;
                                case 3:
                                    Host.GameRemoteDataKeys.push('spawnTime.v3');
                                    Host.Preferences.GetFloat('spawnTime.v3', resolve);
                                case 5:
                                case "end":
                                    return _context.stop();
                            }
                        }
                    }, _callee);
                }));
                return function(_x) {
                    return _ref.apply(this, arguments);
                };
            }(), true);

            Host.bootstrapper.load( /*#__PURE__*/ function() {
                var _ref = _asyncToGenerator( /*#__PURE__*/ regeneratorRuntime.mark(function _callee(resolve) {
                    return regeneratorRuntime.wrap(function _callee$(_context) {
                        while (1) {
                            switch (_context.prev = _context.next) {
                                case 0:
                                    if (!Host.bootstrapper.hasPreInitializationPromise) {
                                        _context.next = 3;
                                        break;
                                    }
                                    _context.next = 3;
                                    return Host.bootstrapper.preInitializationPromise;
                                case 3:
                                    Host.GameRemoteDataKeys.push('spawnCoin.v3');
                                    Host.Preferences.GetInt('spawnCoin.v3', resolve);
                                case 5:
                                case "end":
                                    return _context.stop();
                            }
                        }
                    }, _callee);
                }));
                return function(_x) {
                    return _ref.apply(this, arguments);
                };
            }(), true);

            Host.bootstrapper.load( /*#__PURE__*/ function() {
                var _ref = _asyncToGenerator( /*#__PURE__*/ regeneratorRuntime.mark(function _callee(resolve) {
                    return regeneratorRuntime.wrap(function _callee$(_context) {
                        while (1) {
                            switch (_context.prev = _context.next) {
                                case 0:
                                    if (!Host.bootstrapper.hasPreInitializationPromise) {
                                        _context.next = 3;
                                        break;
                                    }
                                    _context.next = 3;
                                    return Host.bootstrapper.preInitializationPromise;
                                case 3:
                                    return _context.abrupt("return", XS.data._load('coinsMigrated', 'coinsMigrated', 'Bool', resolve));
                                case 4:
                                case "end":
                                    return _context.stop();
                            }
                        }
                    }, _callee);
                }));
                return function(_x) {
                    return _ref.apply(this, arguments);
                };
            }(), true);

            Host.bootstrapper.load( /*#__PURE__*/ function() {
                var _ref = _asyncToGenerator( /*#__PURE__*/ regeneratorRuntime.mark(function _callee(resolve) {
                    return regeneratorRuntime.wrap(function _callee$(_context) {
                        while (1) {
                            switch (_context.prev = _context.next) {
                                case 0:
                                    if (!Host.bootstrapper.hasPreInitializationPromise) {
                                        _context.next = 3;
                                        break;
                                    }
                                    _context.next = 3;
                                    return Host.bootstrapper.preInitializationPromise;
                                case 3:
                                    return _context.abrupt("return", XS.data._load('powerUps', 'powerUps', 'Object', resolve));
                                case 4:
                                case "end":
                                    return _context.stop();
                            }
                        }
                    }, _callee);
                }));
                return function(_x) {
                    return _ref.apply(this, arguments);
                };
            }(), true);

            Host.bootstrapper.load( /*#__PURE__*/ function() {
                var _ref = _asyncToGenerator( /*#__PURE__*/ regeneratorRuntime.mark(function _callee(resolve) {
                    return regeneratorRuntime.wrap(function _callee$(_context) {
                        while (1) {
                            switch (_context.prev = _context.next) {
                                case 0:
                                    if (!Host.bootstrapper.hasPreInitializationPromise) {
                                        _context.next = 3;
                                        break;
                                    }
                                    _context.next = 3;
                                    return Host.bootstrapper.preInitializationPromise;
                                case 3:
                                    return _context.abrupt("return", XS.data._load('powerUpTips', 'powerUpTips', 'Object', resolve));
                                case 4:
                                case "end":
                                    return _context.stop();
                            }
                        }
                    }, _callee);
                }));
                return function(_x) {
                    return _ref.apply(this, arguments);
                };
            }(), true);

            Host.bootstrapper.load( /*#__PURE__*/ function() {
                var _ref = _asyncToGenerator( /*#__PURE__*/ regeneratorRuntime.mark(function _callee(resolve) {
                    return regeneratorRuntime.wrap(function _callee$(_context) {
                        while (1) {
                            switch (_context.prev = _context.next) {
                                case 0:
                                    if (!Host.bootstrapper.hasPreInitializationPromise) {
                                        _context.next = 3;
                                        break;
                                    }
                                    _context.next = 3;
                                    return Host.bootstrapper.preInitializationPromise;
                                case 3:
                                    return _context.abrupt("return", XS.data._load('tutorialGames', 'tutorialGames', 'Int', resolve));
                                case 4:
                                case "end":
                                    return _context.stop();
                            }
                        }
                    }, _callee);
                }));
                return function(_x) {
                    return _ref.apply(this, arguments);
                };
            }(), true);

            Host.bootstrapper.load( /*#__PURE__*/ function() {
                var _ref = _asyncToGenerator( /*#__PURE__*/ regeneratorRuntime.mark(function _callee(resolve) {
                    return regeneratorRuntime.wrap(function _callee$(_context) {
                        while (1) {
                            switch (_context.prev = _context.next) {
                                case 0:
                                    if (!Host.bootstrapper.hasPreInitializationPromise) {
                                        _context.next = 3;
                                        break;
                                    }
                                    _context.next = 3;
                                    return Host.bootstrapper.preInitializationPromise;
                                case 3:
                                    return _context.abrupt("return", XS.data._load('selectedDrink', 'selectedDrink', 'Int', resolve));
                                case 4:
                                case "end":
                                    return _context.stop();
                            }
                        }
                    }, _callee);
                }));
                return function(_x) {
                    return _ref.apply(this, arguments);
                };
            }(), true);

            Host.bootstrapper.load( /*#__PURE__*/ function() {
                var _ref = _asyncToGenerator( /*#__PURE__*/ regeneratorRuntime.mark(function _callee(resolve) {
                    return regeneratorRuntime.wrap(function _callee$(_context) {
                        while (1) {
                            switch (_context.prev = _context.next) {
                                case 0:
                                    if (!Host.bootstrapper.hasPreInitializationPromise) {
                                        _context.next = 3;
                                        break;
                                    }
                                    _context.next = 3;
                                    return Host.bootstrapper.preInitializationPromise;
                                case 3:
                                    return _context.abrupt("return", XS.data._load('selectedBall', 'selectedBall', 'Int', resolve));
                                case 4:
                                case "end":
                                    return _context.stop();
                            }
                        }
                    }, _callee);
                }));
                return function(_x) {
                    return _ref.apply(this, arguments);
                };
            }(), true);

            Host.bootstrapper.load( /*#__PURE__*/ function() {
                var _ref = _asyncToGenerator( /*#__PURE__*/ regeneratorRuntime.mark(function _callee(resolve) {
                    return regeneratorRuntime.wrap(function _callee$(_context) {
                        while (1) {
                            switch (_context.prev = _context.next) {
                                case 0:
                                    if (!Host.bootstrapper.hasPreInitializationPromise) {
                                        _context.next = 3;
                                        break;
                                    }
                                    _context.next = 3;
                                    return Host.bootstrapper.preInitializationPromise;
                                case 3:
                                    return _context.abrupt("return", XS.data._load('coins', 'coins.v3', 'Int', resolve));
                                case 4:
                                case "end":
                                    return _context.stop();
                            }
                        }
                    }, _callee);
                }));
                return function(_x) {
                    return _ref.apply(this, arguments);
                };
            }(), true);

            Host.bootstrapper.load( /*#__PURE__*/ function() {
                var _ref = _asyncToGenerator( /*#__PURE__*/ regeneratorRuntime.mark(function _callee(resolve) {
                    return regeneratorRuntime.wrap(function _callee$(_context) {
                        while (1) {
                            switch (_context.prev = _context.next) {
                                case 0:
                                    if (!Host.bootstrapper.hasPreInitializationPromise) {
                                        _context.next = 3;
                                        break;
                                    }
                                    _context.next = 3;
                                    return Host.bootstrapper.preInitializationPromise;
                                case 3:
                                    return _context.abrupt("return", XS.data._load('highscore', 'highscore.v1', 'Int', resolve));
                                case 4:
                                case "end":
                                    return _context.stop();
                            }
                        }
                    }, _callee);
                }));
                return function(_x) {
                    return _ref.apply(this, arguments);
                };
            }(), true);

            Host.bootstrapper.load( /*#__PURE__*/ function() {
                var _ref = _asyncToGenerator( /*#__PURE__*/ regeneratorRuntime.mark(function _callee(resolve) {
                    return regeneratorRuntime.wrap(function _callee$(_context) {
                        while (1) {
                            switch (_context.prev = _context.next) {
                                case 0:
                                    if (!Host.bootstrapper.hasPreInitializationPromise) {
                                        _context.next = 3;
                                        break;
                                    }
                                    _context.next = 3;
                                    return Host.bootstrapper.preInitializationPromise;
                                case 3:
                                    return _context.abrupt("return", XS.data._load('ballcount', 'ballcount.v2', 'Int', resolve));
                                case 4:
                                case "end":
                                    return _context.stop();
                            }
                        }
                    }, _callee);
                }));
                return function(_x) {
                    return _ref.apply(this, arguments);
                };
            }(), true);

            Host.bootstrapper.load( /*#__PURE__*/ function() {
                var _ref = _asyncToGenerator( /*#__PURE__*/ regeneratorRuntime.mark(function _callee(resolve) {
                    return regeneratorRuntime.wrap(function _callee$(_context) {
                        while (1) {
                            switch (_context.prev = _context.next) {
                                case 0:
                                    if (!Host.bootstrapper.hasPreInitializationPromise) {
                                        _context.next = 3;
                                        break;
                                    }
                                    _context.next = 3;
                                    return Host.bootstrapper.preInitializationPromise;
                                case 3:
                                    return _context.abrupt("return", XS.data._load('unlocked', 'unlocked.v1', 'String', resolve));
                                case 4:
                                case "end":
                                    return _context.stop();
                            }
                        }
                    }, _callee);
                }));
                return function(_x) {
                    return _ref.apply(this, arguments);
                };
            }(), true);

            var fetch_i_g_close_x_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/close_x.svg', {
                    "data": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"96\" height=\"96\" xml:space=\"preserve\"><path fill=\"#AAAAAB\" d=\"M96 14 82 0 48 34 14 0 0 14l34 34L0 82l14 14 34-34 34 34 14-14-34-34z\"/></svg>",
                    "width": 96,
                    "height": 96,
                    "mimetype": "svg+xml"
                });
            }, true);

            var ref_i_web_fbinstant_msg_notyou_png = "/assets/notyou.46520d16.png";

            var ref_i_web_fbinstant_msg_beat_png = "/assets/beat.eccbcdbd.png";

            var ref_i_web_fbinstant_msg_unstoppable_png = "/assets/unstoppable.1b131a4d.png";

            var ref_i_web_fbinstant_msg_winalltime_png = "/assets/winalltime.156dcca0.png";

            var ref_i_web_fbinstant_msg_cantbeatme_png = "/assets/cantbeatme.e16459cb.png";

            var ref_i_web_fbinstant_msg_stopwinning_png = "/assets/stopwinning.5f57f47d.png";

            var fetch_i_g_IAP_Remove_ADS_adsicon_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/IAP/Remove ADS/adsicon.svg', {
                    "data": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"340.9\" height=\"303.1\"><defs><style>.cls-2{fill:#ff7f3f}.cls-3{fill:#008296}</style></defs><g id=\"Layer_2\" data-name=\"Layer 2\"><g id=\"Remove_ADS\" data-name=\"Remove ADS\"><path d=\"M329.5 156.9c-5.7-5.1-12.7-7.3-19.6-9.9-.1-2.6-.1-5.2-.4-7.8-.8-7.5-2.9-14.7-4.3-22.1 2.6 1.1 4 3.3 5.5 5.4s3.1 5.4 4.7 8.1c3 4.8 6.8 6.5 11.6 5.2a11.1 11.1 0 0 0 8-10.6 21.7 21.7 0 0 0-4.9-14.2 38.5 38.5 0 0 0-19-12.6c-4.8-1.4-9.8-1.8-14.7-2.8-.5-1.1-.8-2.3-1.4-3.4-8.8-17.7-20.2-33.4-35.6-45.8-38.4-31.1-82-42.9-130.1-30.2-54.9 14.4-90 50.3-105.6 104.9a102.5 102.5 0 0 0-4.3 34L37.9 109l-18.5 46.1c-6 15.5-12.1 30.9-18 46.4-1.4 3.6-2.2 7.3-.2 10.8a11.9 11.9 0 0 0 10.7 6.5c4.4.2 6.9-2.6 9.1-6s2.5-7.4 5.1-10.4c.4 1 .7 1.9 1.1 2.8 11.5 31.9 31.1 57.5 60.2 75.5s59.7 25.2 93.3 21.4a146.4 146.4 0 0 0 59.5-20c25.3-15 43.7-36.4 56.3-62.9 8.6-1.2 17.2-2.6 25.1-6.8 21.5-11.6 25.5-39.6 7.9-55.5Zm-267.6-6.7c.1-1.4-.2-3 1.2-4.1-1.3-5-2.9-9.8-4.7-14.7 1.8 4.9 3.4 9.7 4.7 14.7 2.8 7.1 5.5 14.3 8.3 21.4.9 2.2.5 2.9-1.9 2.8h-7a102.9 102.9 0 0 1-.6-20.1Zm158.5 93.9c-20.8 13.2-43.5 18.7-67.9 15.3-41.6-5.8-69.7-29-85-68l-.6-2.2c14.1-.4 11-2.4 15.8 10.1 1.8 4.5 3.5 9.1 5.7 13.4 3 5.9 8.5 7.8 14.1 5.4s8.8-8.1 7-14.2c-4.5-15-11.4-29-16.9-43.5-6.3-16.2-13.5-32-19.3-48.3a16.6 16.6 0 0 1-.6-2.1c2.7-2.7 4.1-6.3 6.1-9.4s2.2-1.9 3.7-.3l45.8 46c8.2 7.8 16.3 15.5 23.7 23.9 9.2 8.7 18.2 17.7 26.9 27l-23.9.6c-2.1.1-3.2-.7-3.2-3 .1-8.2.1-16.4.2-24.6-7.4-8.4-15.5-16.1-23.7-23.9-.9 2.1-.4 4.2-.4 6.3 0 17.1-.2 34.1.3 51.2.3 9.6 4.4 12.9 14.1 13 12.3.1 24.6.1 37-.1 5.6-.2 11.2-.5 16.5-2.8 9 8 17.1 17.1 25.9 25.4 2.5 2.4.6 3.6-1.3 4.8Zm-17.1-73.8-50.8-50.6a12.5 12.5 0 0 1-.8-1.2c.6-.3 1.3-.9 1.9-.9 10.1-.1 20.2-.7 30.2 1.6a23.1 23.1 0 0 1 17.4 15.4 63.9 63.9 0 0 1 2.1 35.7Zm44.1 43.7-24.7-24.5c-4.6-4-8.9-8.2-13.1-12.6 4.2 4.4 8.5 8.6 13.1 12.6 2.1-2.6 2.6-5.9 3.5-9 4.6-16.5 4.5-33-1.1-49.3-7.2-20.9-21.4-31.8-43.5-32.6-14-.5-28-.2-42-.3a9.8 9.8 0 0 0-6.2 2l-24.6-24.1c-3.2-3.2-3.1-3.2.5-5.6 45.1-29.9 112.6-18.9 144 34.2l2.5 3.8c8.2-8 18.1-11.1 28.7-12.3-10.6 1.2-20.5 4.3-28.7 12.3-3.3 4.7-6.3 9.5-7.1 15.4-1.8 12.7 2.5 22.9 13.2 30.2 1.9 1.4 4 2.5 6 3.7-.5 6.8-.3 13.6-2.5 20.1-4.8-4.8-9.1-6-13.6-3.6s-6.6 7.9-5.4 14 3.3 9.1 6.1 13.2c1 1.5 2.6 2.6 2.9 4.6-1.4 2.5-3 4.9-4.4 7.4s-2.1 1.9-3.6.4Zm63.8-19.3a11.8 11.8 0 0 1-6 3.5c1.4-8.7 3.8-17.2 4.6-26-1-2.1-3-2.9-4.9-3.5 1.9.6 3.9 1.4 4.9 3.5 8.2 4.9 8.9 15.8 1.4 22.5Z\" style=\"fill:#fff\"/><g id=\"jLOV3u.tif\"><path class=\"cls-2\" d=\"M296.8 208c-12.6 26.5-30.9 47.9-56.3 63a145.8 145.8 0 0 1-59.5 19.9c-33.6 3.8-64.6-3.7-93.3-21.4S39.1 226 27.5 194.1c-.3-1-.7-1.9-1-2.8.6-3.7 2.1-7.1 3.3-10.7.7-2.1 2-2.8 4.2-2.8 11.1.2 22.2.2 33.3.2a14.1 14.1 0 0 0 .6 2.2c15.2 39 43.3 62.3 85 68.1 24.3 3.3 47-2.2 67.8-15.4 2-1.2 3.9-2.3 1.3-4.7-8.8-8.4-16.8-17.4-25.9-25.4a122 122 0 0 0-16.9-16.8c-8.6-9.3-17.6-18.2-26.9-26.9-7.4-8.5-15.5-16.2-23.6-23.9-15.3-15.4-30.6-30.7-45.8-46.1-1.6-1.6-2.5-1.5-3.8.4s-3.3 6.6-6 9.3l-1.9-3.2c-3.8-7-9.2-11.1-17.5-10.6s-12.6 5.7-15.4 12.8l-18.6 46.1c-.6-11.6 1.2-22.9 4.3-34C39.6 55.3 74.8 19.4 129.7 5c48.1-12.6 91.7-.9 130.1 30.2 15.3 12.5 26.8 28.2 35.6 45.8.5 1.1.9 2.3 1.4 3.4h-4.5c-13.4.7-26.1 3.1-36.2 12.9-.8-1.2-1.7-2.5-2.4-3.7-31.4-53.1-99-64.1-144.1-34.3-3.6 2.4-3.7 2.5-.5 5.6l24.6 24.2a241.8 241.8 0 0 0 18.3 18.3 9.4 9.4 0 0 0 .9 1.2l50.8 50.5a249.7 249.7 0 0 0 19.3 19.2l24.8 24.5c1.5 1.5 2.5 1.7 3.6-.3s2.9-5 4.4-7.4c1-.1 1.5.7 2.1 1.3a49.9 49.9 0 0 0 18.5 9.4c6.7 1.9 13.6 1.9 20.4 2.2Z\"/><path class=\"cls-3\" d=\"M296.8 208c-6.8-.3-13.7-.3-20.4-2.2a49.9 49.9 0 0 1-18.5-9.4c-.6-.6-1.1-1.4-2.1-1.3-.3-2-1.9-3.2-3-4.7a35.2 35.2 0 0 1-6-13.2c-1.2-6.1.8-11.6 5.3-13.9s8.8-1.3 13.6 3.6c2.2 5 4 10.3 7.4 14.6 6.7 8.8 21.2 11.1 32.4 5.5 2.4-.4 4.3-1.9 6.1-3.5 7.5-6.7 6.8-17.5-1.4-22.5-1.2-2.4-3.6-3.1-5.8-3.7-12-3.6-24.3-6.3-36.1-10.5l-6.1-3.7c-10.7-7.4-14.9-17.5-13.2-30.3.8-5.8 3.8-10.7 7.1-15.4 10.1-9.8 22.8-12.2 36.2-12.9h4.5c4.8 1.1 9.8 1.4 14.6 2.9a37.8 37.8 0 0 1 19 12.6 21.5 21.5 0 0 1 4.9 14.2 11.1 11.1 0 0 1-7.9 10.6c-4.9 1.2-8.6-.4-11.6-5.3-1.7-2.6-3.1-5.4-4.8-8s-2.9-4.4-5.5-5.4a6.7 6.7 0 0 0-3.9-2.7 27.5 27.5 0 0 0-26 3.4c-5.8 3.9-6.3 11.6-1.6 16.6a18.7 18.7 0 0 0 7.8 5 282.7 282.7 0 0 0 28.4 7.5c6.9 2.7 14 4.8 19.6 9.9 17.6 15.9 13.6 44-7.9 55.5-7.8 4.1-16.4 5.5-25.1 6.7ZM67.3 178c-11.1 0-22.2 0-33.3-.2-2.2 0-3.5.7-4.2 2.8-1.2 3.6-2.7 7-3.3 10.7-2.6 3-3 7-5.1 10.3s-4.8 6.3-9.2 6.1a12.3 12.3 0 0 1-10.7-6.5c-1.9-3.6-1.2-7.3.2-10.9l18-46.4 18.6-46.1c2.8-7.1 7.3-12.2 15.4-12.8s13.7 3.6 17.5 10.6l1.9 3.2c.2.7.3 1.5.5 2.2 5.9 16.3 13.1 32 19.3 48.2 5.6 14.5 12.5 28.6 16.9 43.5 1.9 6.2-.9 11.7-6.9 14.3s-11.2.4-14.1-5.5a131.4 131.4 0 0 1-5.7-13.4c-4.9-12.5-1.8-10.5-15.8-10.1Zm-3.8-43.1c-2.1-7.9-5.1-15.5-8.1-23.5-1.8 1.8-2 3.7-2.6 5.4-4.8 13-9.5 25.9-14.3 38.8-1.2 3.1-.2 3.8 2.7 3.7 7.2-.2 14.4-.2 21.6-.3h7.1c2.3.1 2.8-.6 1.9-2.8-2.9-7-5.6-14.1-8.3-21.3Z\"/><path class=\"cls-2\" d=\"M310.2 135.8a282.7 282.7 0 0 1-28.4-7.5 18.7 18.7 0 0 1-7.8-5c-4.7-5-4.2-12.7 1.6-16.6a27.5 27.5 0 0 1 26-3.4 6.7 6.7 0 0 1 3.9 2.7c1.5 7.3 3.5 14.6 4.3 22.1.3 2.5.3 5.1.4 7.7Z\"/><path class=\"cls-3\" d=\"M133.7 89.2a9.6 9.6 0 0 1 6.3-2.1c14 .1 28-.2 41.9.3 22.2.8 36.4 11.8 43.5 32.6 5.6 16.4 5.7 32.8 1.1 49.3-.8 3.1-1.4 6.4-3.5 9a249.7 249.7 0 0 1-19.3-19.2 62.6 62.6 0 0 0-2.2-35.6c-2.9-8.3-8.8-13.4-17.3-15.5s-20.1-1.6-30.2-1.6c-.7 0-1.3.6-2 1a241.8 241.8 0 0 1-18.3-18.2ZM196.1 202.8c-5.2 2.3-10.9 2.6-16.5 2.7-12.3.3-24.7.3-37 .2-9.7-.1-13.8-3.5-14.1-13.1-.5-17-.3-34.1-.3-51.2 0-2-.5-4.2.5-6.2 8.1 7.7 16.2 15.4 23.6 23.9 0 8.2-.1 16.4-.2 24.6 0 2.2 1.1 3 3.3 2.9l23.8-.6a122 122 0 0 1 16.9 16.8Z\"/><path class=\"cls-2\" d=\"M265.7 166.9c2.2-6.6 2-13.4 2.6-20.1 11.8 4.2 24.1 6.9 36.1 10.5 2.2.6 4.6 1.3 5.8 3.7-.8 8.8-3.3 17.3-4.7 26-11.2 5.6-25.7 3.3-32.4-5.5-3.4-4.3-5.2-9.6-7.4-14.6ZM62.8 159c-7.2.1-14.4.1-21.6.3-2.9.1-3.9-.6-2.7-3.7 4.8-12.9 9.5-25.8 14.3-38.8.6-1.7.8-3.6 2.6-5.4 3 8 6 15.6 8.1 23.5-1.5 1.1-1.1 2.7-1.2 4.1a111.2 111.2 0 0 0 .5 20Z\"/></g></g></g></svg>",
                    "width": 340.9,
                    "height": 303.1,
                    "mimetype": "svg+xml"
                });
            }, true);

            var fetch_i_g_star_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/star.svg', {
                    "data": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"563\" height=\"563\" style=\"enable-background:new 0 0 563 563\" xml:space=\"preserve\"><path d=\"M295.6 536.8 261 460.9l-50 66.8-8-83.1-69.1 47 19.4-81.2-80.6 22.1 44.7-70.6-83.3-5.3 65.2-52.3-77-32 78.6-28.3-62.4-55.3 83.5-1.3-41-72.6 79.3 25.9-15.3-82 66.5 50.3 12.3-82.6 46.6 69.2 38.4-74.2 21.6 80.6 60.4-57.7-5.8 83.3 75.9-35-32.5 77 83.1-8.5-55.7 62.3 81.3 18.9-73 40.7 70.7 44.3-82.1 15 52.4 64.9-82.5-12.5 28.5 78.4-73.9-38.6 1.5 83.5-57.3-60.6-25.8 79.4zm-28.2-134.5 23.5 51.6 17.4-54 39 41.1-1-56.7 50.2 26.2-19.4-53.3 56 8.5-35.6-44.1 55.8-10.2-48-30.1 49.5-27.7-55.2-12.6 37.8-42.3-56.4 5.8 22.1-52.2-51.5 23.7 3.9-56.6-41 39.2-14.7-54.8-26.1 50.4-31.6-47-8.3 56.1-45.2-34.2 10.3 55.7-53.9-17.6 27.9 49.3-56.7.8 42.4 37.6-53.4 19.2 52.3 21.8-44.3 35.5 56.6 3.6-30.4 47.9 54.7-15-13.2 55.2 46.9-31.9 5.4 56.4 34.2-45.3z\" style=\"fill:#f7e16a\"/></svg>",
                    "width": 563,
                    "height": 563,
                    "mimetype": "svg+xml"
                });
            }, true);

            var embed__i_g_button_ad_bw_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('/i/g/button_ad_bw.svg', {
                    "data": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"64\" height=\"64\" style=\"enable-background:new 0 0 64 64\" xml:space=\"preserve\"><path d=\"M51.9 2H12.1C6.5 2 2 6.5 2 12.1v39.8C2 57.5 6.5 62 12.1 62h39.8C57.5 62 62 57.5 62 51.9V12.1C62 6.5 57.5 2 51.9 2zM13.2 53.9V10.1l38 21.9-38 21.9z\" style=\"fill:#fff\"/></svg>",
                    "width": 64,
                    "height": 64,
                    "mimetype": "svg+xml"
                });
            }, true);

            var ref_i_g_IAP_Remove_ADS_radialight_bg_svg = "/assets/radialight_bg.d6714ead.svg";

            var ref_i_g_IAP_Remove_ADS_ballonfire_svg = "/assets/ballonfire.3fabfb47.svg";

            var ref_i_g_IAP_Remove_ADS_star_svg = "/assets/star.32032ff9.svg";

            var ref_i_g_IAP_Remove_ADS_gift_svg = "/assets/gift.9b0c1782.svg";

            var ref_i_g_IAP_Remove_ADS_drinks_svg = "/assets/drinks.9073c9c5.svg";

            var ref_i_g_IAP_Remove_ADS_greenbutton_dude_svg = "/assets/greenbutton_dude.d401ba1f.svg";

            var fetch_i_g_padlock_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/padlock.svg', {
                    "data": "<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0\" y=\"0\" width=\"128\" height=\"128\" style=\"enable-background:new 0 0 128 128\" xml:space=\"preserve\"><style>.st0{fill:#63370b}.st2{fill:#8f9aa2}</style><path class=\"st0\" d=\"M27.1 114.9c-.1 0-.2-.1-.3-.1-.2-.1-.4-.1-.6-.2-3.8-1.3-6-5.3-5.1-9.3l12.3-55.2c.4-2 1.7-3.8 3.5-5 1.8-1.2 3.9-1.5 6-1.1h.1l.2-1c0-.1.1-.2.1-.3l4.5-20.2C51.2 7.1 66.6-2.7 82.1.7c7.6 1.7 14 6.2 18.1 12.7 4.2 6.5 5.5 14.3 3.9 21.8l-4.7 21.5 1.6.4c.4.1.6.2.9.3 3.8 1.3 6 5.3 5.1 9.3l-12.2 55.2c-.4 2-1.7 3.8-3.5 5-1.8 1.2-3.9 1.5-6 1.1-.1-.2-58.2-13.1-58.2-13.1zM82 52.8l1.8-8.1c0-.1.1-.2.1-.3l2.9-13.1c.6-2.9.1-5.8-1.5-8.4-1.6-2.5-4.1-4.3-6.9-4.9l.6-2.9-.7 2.9c-2.9-.6-5.9-.1-8.4 1.5s-4.2 4.1-4.9 7L60.3 48 82 52.8z\"/><path d=\"M81.5 3.6C67.6.5 53.7 9.3 50.6 23.2l-7.7 34.4 11.6 2.6 7.7-34.4c.8-3.6 3-6.8 6.2-8.8s6.9-2.7 10.6-1.9c3.7.8 6.8 3 8.8 6.2 2 3.2 2.7 6.9 1.9 10.6L82 66.3l4.8 1.1 6.8 1.5 7.6-34.5c3.1-13.8-5.7-27.8-19.7-30.8z\" style=\"fill:#bfcdd8\"/><path class=\"st2\" d=\"M44.5 50.4 56.1 53l2-9.1c-4-.1-8.1-.2-12.1-.1l-1.5 6.6zM86.7 45.3l-3.1 13.8 4.8 1.1 6.8 1.5L98.7 46c-4-.2-8-.4-12-.7z\"/><path d=\"M27.1 111.9c-2.4-.8-3.8-3.4-3.3-5.9l12.3-55.1c.3-1.3 1.1-2.4 2.2-3.2 1.1-.7 2.5-1 3.8-.7l58.1 12.9c.2 0 .4.1.6.2 2.4.8 3.8 3.4 3.3 5.9l-12.2 55.2c-.3 1.3-1.1 2.4-2.2 3.2-1.1.7-2.5 1-3.8.7L27.7 112c-.2 0-.4-.1-.6-.1z\" style=\"fill:#ffb744\"/><path d=\"M88.3 122.2c1.1-.7 1.9-1.8 2.1-3L102 66.8c.5-2.4-.8-4.8-3.2-5.6-.2-.1-.4-.1-.6-.2l-27.5-6.1-13.6 61.8 27.4 6.1c1.4.3 2.7.1 3.8-.6z\" style=\"opacity:.5;fill:#c87f00\"/><path class=\"st0\" d=\"M77.9 83.3c1.5-6.9-2.8-13.7-9.7-15.2-6.9-1.5-13.7 2.8-15.2 9.7-1 4.7.7 9.4 4 12.3l-2.5 11.3c-.7 3.2 1.3 6.4 4.5 7.1l.4.1c3.2.7 6.4-1.3 7.1-4.5L69 92.8c4.4-1.3 7.9-4.8 8.9-9.5z\"/></svg>",
                    "width": 128,
                    "height": 128,
                    "mimetype": "svg+xml"
                });
            }, true);

            var fetch_i_g_clock_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/clock.svg', {
                    "data": "<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0\" y=\"0\" width=\"128\" height=\"128\" style=\"enable-background:new 0 0 128 128\" xml:space=\"preserve\"><style>.st0{fill:#005e60}.st0,.st2{fill-rule:evenodd;clip-rule:evenodd}.st2,.st3{fill:#00dcda}.st4{fill-rule:evenodd;clip-rule:evenodd;fill:#fff}</style><path class=\"st0\" d=\"M63.9.3c35.4 0 64 28.6 64 64s-28.6 64-64 64-64-28.6-64-64 28.6-64 64-64z\"/><path d=\"M63.9 4.8c32.9 0 59.5 26.6 59.5 59.5s-26.6 59.5-59.5 59.5S4.4 97.1 4.4 64.3 31 4.8 63.9 4.8z\" style=\"fill-rule:evenodd;clip-rule:evenodd;fill:#009d9d\"/><path class=\"st2\" d=\"M10.8 51.4c1.4 0 2.5 1.1 2.5 2.5s-1.1 2.5-2.5 2.5-2.5-1-2.5-2.4 1.1-2.6 2.5-2.6z\"/><path class=\"st3\" d=\"M12.4 49.7c-.2 0-.3 0-.5-.1-1-.3-1.7-1.3-1.3-2.4.1-.4 2.5-9.3 10.1-18.5 7.1-8.5 20-19 41.8-20.3 1 0 2 .7 2 1.8 0 1-.7 2-1.8 2-16.4 1-29.5 7.3-39 18.9-7.1 8.6-9.4 17-9.4 17.1-.3.9-1.1 1.5-1.9 1.5z\"/><path class=\"st2\" d=\"M116.7 76.9c-1.4 0-2.5-1.1-2.5-2.5s1.1-2.5 2.5-2.5 2.5 1.1 2.5 2.5c.1 1.4-1.1 2.5-2.5 2.5z\"/><path class=\"st3\" d=\"M115.2 78.6c.2 0 .3 0 .5.1 1 .3 1.7 1.3 1.3 2.4-.1.4-2.5 9.3-10.1 18.5-7.1 8.5-20 19-41.8 20.3-1 0-2-.7-2-1.8 0-1 .7-2 1.8-2 16.4-1 29.5-7.3 39-18.9 7.1-8.6 9.4-17 9.4-17.1.3-.9 1.1-1.5 1.9-1.5z\"/><path class=\"st0\" d=\"M63.9 16.4c26.4 0 47.8 21.4 47.8 47.8S90.3 112 63.9 112 16 90.7 16 64.3c0-26.4 21.4-47.9 47.9-47.9z\"/><path class=\"st4\" d=\"M63.9 21.3c23.8 0 43.1 19.3 43.1 43.1s-19.3 43.1-43.1 43.1-43.2-19.3-43.2-43.1S40 21.3 63.9 21.3z\"/><path d=\"M63.9 29.5c19.3 0 34.9 15.6 34.9 34.9s-15.6 35-34.9 35S29 83.7 29 64.4c0-19.2 15.6-34.9 34.9-34.9z\" style=\"fill-rule:evenodd;clip-rule:evenodd;fill:#e3f7f5\"/><path class=\"st0\" d=\"M29.2 60.4c2.3 0 4.1 1.8 4.1 4.1s-1.8 4.1-4.1 4.1-4.1-1.8-4.1-4.1 1.9-4.1 4.1-4.1zM63.8 94.7c2.3 0 4.1 1.8 4.1 4.1s-1.8 4.1-4.1 4.1-4.1-1.8-4.1-4.1 1.8-4.1 4.1-4.1zM98.2 60.4c2.3 0 4.1 1.8 4.1 4.1s-1.8 4.1-4.1 4.1-4.1-1.8-4.1-4.1 1.8-4.1 4.1-4.1zM63.9 25.7c2.3 0 4.1 1.8 4.1 4.1s-1.8 4.1-4.1 4.1-4.1-1.8-4.1-4.1 1.9-4.1 4.1-4.1zM94.6 74.2 70.8 63.6c-.3-2.2-1.5-4-3.3-5.1V41.7c0-2-1.7-3.7-3.7-3.7s-3.7 1.7-3.7 3.7v17c-1.9 1.2-3.1 3.4-3.1 5.7 0 3.8 3.1 6.9 6.9 6.9 1.3 0 2.6-.4 3.6-1L91.6 81c1.9.8 4 0 4.9-1.9.8-1.9 0-4.1-1.9-4.9z\"/><path class=\"st4\" d=\"M63.8 61.2c1.9 0 3.4 1.5 3.4 3.4S65.7 68 63.8 68s-3.4-1.5-3.4-3.4c0-1.8 1.5-3.4 3.4-3.4z\"/></svg>",
                    "width": 128,
                    "height": 128,
                    "mimetype": "svg+xml"
                });
            }, true);

            Host.bootstrapper.load( /*#__PURE__*/ function() {
                var _ref = _asyncToGenerator( /*#__PURE__*/ regeneratorRuntime.mark(function _callee(resolve) {
                    return regeneratorRuntime.wrap(function _callee$(_context) {
                        while (1) {
                            switch (_context.prev = _context.next) {
                                case 0:
                                    if (!Host.bootstrapper.hasPreInitializationPromise) {
                                        _context.next = 3;
                                        break;
                                    }
                                    _context.next = 3;
                                    return Host.bootstrapper.preInitializationPromise;
                                case 3:
                                    return _context.abrupt("return", XS.data._load('goals', 'goals.v1', 'Object', resolve));
                                case 4:
                                case "end":
                                    return _context.stop();
                            }
                        }
                    }, _callee);
                }));
                return function(_x) {
                    return _ref.apply(this, arguments);
                };
            }(), true);

            var fetch_i_g_care_package_0_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/care_package_0.svg', {
                    "data": "<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0\" y=\"0\" width=\"563\" height=\"563\" style=\"enable-background:new 0 0 563 563\" xml:space=\"preserve\"><style>.st1,.st15,.st16,.st18{fill-rule:evenodd;clip-rule:evenodd;fill:#debc8a}.st15,.st16,.st18{fill:#3e2119}.st16,.st18{fill:#61392f}.st18{fill:#f5e1bb}</style><path d=\"m12.5 339.9 271.8-162.7c5.6-3.3 15.5-2.6 22.3 1.6l249.1 151.9c6.6 4.1 7.4 10 1.9 13.2L294.1 502.6c-5.3 3.1-15 2.5-21.6-1.4L15.1 352.8c-6.8-3.9-8-9.7-2.6-12.9z\" style=\"opacity:.5;fill-rule:evenodd;clip-rule:evenodd;fill:#998d9d;enable-background:new\"/><path class=\"st1\" d=\"M27.7 339.2 272.9 482s10.7 5.5 21.6-.5 230.1-139.4 230.1-139.4 9.6-7.1 9.6-15.3V241s.3-15.3-20-26.8-108.4-65.3-108.4-65.3v-26.3L301 59.4s-19.2-9.8-44.7 4.2S32.9 189.4 32.9 189.4s-21.1 9-20 42.1c1 33.2 4.7 88.9 4.7 88.9s-.2 10.8 10.1 18.8z\"/><path d=\"M283.5 495.1c-8.3 0-14.4-2.9-15.5-3.5-.2-.1-.3-.2-.5-.3L22.3 348.5c-.4-.2-.8-.5-1.2-.8C8 337.6 6.8 324.2 6.7 320.9c-.3-4.3-3.7-57.2-4.7-89-1.2-36.7 21.2-49.8 25.8-52.1C36.5 174.9 226.2 67.6 251.1 54c10.7-5.9 21.8-8.8 32.8-8.8 12.8 0 21.1 4.1 22 4.5.2.1.4.2.7.4l104.8 63.2c3.3 2 5.2 5.5 5.2 9.3v20.2c19.2 11.7 85.8 52.3 102.9 61.9 24.6 13.9 25.5 33.3 25.5 36.2v85.8c0 13.1-11.7 22.3-14 24.1-.3.2-.5.4-.8.5-9 5.4-219.5 133.5-230.5 139.6-5 2.8-10.5 4.2-16.2 4.2z\" style=\"fill-rule:evenodd;clip-rule:evenodd;fill:#613b13\"/><path class=\"st1\" d=\"M27.7 339.2 272.9 482s10.7 5.5 21.6-.5 230.1-139.4 230.1-139.4 9.6-7.1 9.6-15.3V241s.3-15.3-20-26.8-108.4-65.3-108.4-65.3v-26.3L301 59.4s-19.2-9.8-44.7 4.2S32.9 189.4 32.9 189.4s-21.1 9-20 42.1c1 33.2 4.7 88.9 4.7 88.9s-.2 10.8 10.1 18.8z\"/><linearGradient id=\"SVGID_1_\" gradientUnits=\"userSpaceOnUse\" x1=\"40.047\" y1=\"401.029\" x2=\"389.345\" y2=\"401.029\" gradientTransform=\"matrix(1 0 0 -1 0 563)\"><stop offset=\".065\" style=\"stop-color:#dcb987\"/><stop offset=\".25\" style=\"stop-color:#d9b481\"/><stop offset=\".951\" style=\"stop-color:#cfa66e\"/></linearGradient><path d=\"m42.8 192.6 232.7-129c4.6-2.7 12.8-2.2 18.3 1.3l91 53.1c5.4 3.4 6.1 8.2 1.5 10.9L161.2 260.4c-4.4 2.6-12.3 2.1-17.8-1.1l-98.5-56c-5.5-3.3-6.5-8-2.1-10.7z\" style=\"fill-rule:evenodd;clip-rule:evenodd;fill:url(#SVGID_1_)\"/><path d=\"m172.8 291.9 223.5-133.8c4.6-2.7 12.8-2.2 18.3 1.3l98.7 61.3c5.4 3.4 6.1 8.2 1.5 10.9L292.3 362c-4.4 2.6-12.3 2.1-17.8-1.1L175 302.5c-5.6-3.2-6.6-8-2.2-10.6z\" style=\"fill-rule:evenodd;clip-rule:evenodd;fill:#dbb885\"/><linearGradient id=\"SVGID_2_\" gradientUnits=\"userSpaceOnUse\" x1=\"196.89\" y1=\"282.894\" x2=\"550.427\" y2=\"331.032\" gradientTransform=\"matrix(1 0 0 -1 0 563)\"><stop offset=\".065\" style=\"stop-color:#dcb987\"/><stop offset=\".25\" style=\"stop-color:#d9b481\"/><stop offset=\".951\" style=\"stop-color:#cfa66e\"/></linearGradient><path d=\"m172.8 291.9 223.5-133.8c4.6-2.7 12.8-2.2 18.3 1.3l98.7 61.3c5.4 3.4 6.1 8.2 1.5 10.9L292.3 362c-4.4 2.6-12.3 2.1-17.8-1.1L175 302.5c-5.6-3.2-6.6-8-2.2-10.6z\" style=\"fill-rule:evenodd;clip-rule:evenodd;fill:url(#SVGID_2_)\"/><path d=\"M155 274.4 405.9 123v25l-252 150.6 1.1-24.2z\" style=\"fill-rule:evenodd;clip-rule:evenodd;fill:#90663c\"/><path d=\"m294 367.8 228.3-131.6c4.7-2.9 8.5-.7 8.4 4.8l-.9 82.2c-.1 5.5-3.9 12.3-8.7 15.2L293 477.3c-4.7 2.9-8.5.7-8.4-4.8l.8-89.4c0-5.6 3.9-12.4 8.6-15.3z\" style=\"fill-rule:evenodd;clip-rule:evenodd;fill:#c5975a\"/><path d=\"m237.2 313.4 76.7-44.5c5.6-3.2 15.5-2.9 22.1.8l35.3 22.4c6.6 3.6 7.5 9.2 1.9 12.4l-74.3 42.7c-5.6 3.2-15.5 2.9-22.1-.8l-37.7-20.7c-6.7-3.6-7.5-9.1-1.9-12.3z\" style=\"fill-rule:evenodd;clip-rule:evenodd;fill:#ebebeb\"/><path d=\"m237.2 310.1 76.7-44.5c5.6-3.2 15.5-2.9 22.1.8l35.3 22.4c6.6 3.6 7.5 9.2 1.9 12.4l-74.3 42.7c-5.6 3.2-15.5 2.9-22.1-.8l-37.7-20.7c-6.7-3.5-7.5-9.1-1.9-12.3z\" style=\"fill-rule:evenodd;clip-rule:evenodd;fill:#fff\"/><ellipse cx=\"292.6\" cy=\"199.4\" rx=\"89.3\" ry=\"61.2\" style=\"opacity:.45;fill-rule:evenodd;clip-rule:evenodd;fill:#512f15;enable-background:new\"/><path d=\"M268.7 479.4 32.9 342c-4.5-2.4-8.1-8.8-8-14.2l-5-97.4c.1-5.4 3.9-7.8 8.4-5.4l242.5 142.9c4.5 2.4 8.1 8.8 8 14.2l-1.7 91.8c-.1 5.5-3.9 7.9-8.4 5.5z\" style=\"fill-rule:evenodd;clip-rule:evenodd;fill:#eacea7\"/><path d=\"m63.9 268 196.5 109.7c2 1.1 3.7 3 3.7 4.3l-1.6 59.1c0 1.2-1.6 1.3-3.7.2L65 328.1c-2-1.1-3.7-3-3.7-4.3l-1.3-54c0-1.3 1.9-2.9 3.9-1.8z\" style=\"fill-rule:evenodd;clip-rule:evenodd;fill:#d5aa70\"/><path d=\"M19.1 218.4s-.9 13.4.6 14.8c1.5 1.4 133.7 67.5 133.7 67.5l1.1-26-127.9-73.6\" style=\"fill:#eacea7\"/><path style=\"opacity:.25;fill-rule:evenodd;clip-rule:evenodd;fill:#512f15;enable-background:new\" d=\"m154.5 274.7-.7 23.9L447 174l-41.1-26v-24.9z\"/><ellipse transform=\"rotate(-87.159 278.738 200.189) scale(1.00003)\" class=\"st15\" cx=\"278.7\" cy=\"200.2\" rx=\"56.7\" ry=\"89.3\"/><path transform=\"rotate(-87.159 279.187 192.151) scale(1.00003)\" class=\"st15\" d=\"M272.6 102.8h13.1v178.7h-13.1z\"/><ellipse transform=\"rotate(-87.159 279.462 185.607) scale(1.00003)\" class=\"st16\" cx=\"279.5\" cy=\"185.6\" rx=\"56.7\" ry=\"89.3\"/><ellipse transform=\"rotate(-87.159 279.761 185.622) scale(1.00003)\" cx=\"279.8\" cy=\"185.6\" rx=\"49.9\" ry=\"78.7\" style=\"fill-rule:evenodd;clip-rule:evenodd;fill:#ff6000\"/><path class=\"st16\" d=\"M358.9 192.6c.2-1.5.2-2.8.2-4.3-17.3-2.1-35.4-7.5-48.9-16l31.6-17.9-4.9-3.4-31.6 17.9c-12.9-9.7-20.4-21.5-21.7-33.1-2.4-.1-4.1-.3-6.5-.3 1.4 12.7 8.7 25.9 22.9 36.4l-20.3 11.5-53.7-37.9-5.3 2.9 53.7 37.9-21.8 12.3c-14.6-9.7-33.2-15.8-52.4-18-.2 1.5-.2 3-.1 4.6 17.3 2.2 34 7.7 47.2 16.5l-30.2 17.1 4.9 3.4 30.1-17c11.8 9 18.4 19.6 20.1 30.4 2.4.2 4.8.3 7.2.4-1.7-11.9-9-23.8-22.1-33.7l21.8-12.3 53.7 37.9 5.3-2.9-53.7-37.9 20.4-11.5c15 9 34.9 14.8 54.1 17z\"/><path class=\"st1\" d=\"M262.8 442.7 61.3 324.6 44 335.4l217.8 125.7z\"/><path class=\"st18\" d=\"M52.2 333.2 259 452.7c2.1 1.2 2.2 3.2.3 4.3-2 1.2-5.3 1.1-7.4-.1L45 337.5c-2.1-1.2-2.2-3.2-.3-4.3 2.1-1.2 5.4-1.2 7.5 0zM166.5 298.7l109.6 63.7c2.2 1.2 2.2 3.1.2 4.2-2.1 1.1-5.5 1-7.6-.3l-109.6-63.7c-2.2-1.2-2.2-3.1-.2-4.2 2-1 5.4-.9 7.6.3z\"/><path d=\"M309.7 64.8S290.5 55 265 69 41.6 194.9 41.6 194.9s-21.1 9-20 42.1c1 33.2 4.7 88.9 4.7 88.9s-.2 9.7 8.6 17.5l-7.2-4.2c-10.3-7.9-10.1-18.7-10.1-18.7s-3.6-55.8-4.7-88.9c-1-33.2 20-42.1 20-42.1s197.8-112 223.4-126c25.5-14 44.7-4.2 44.7-4.2l8.7 5.5z\" style=\"fill:#fbe7bc\"/><path d=\"m64.6 322.4-1-54.2s-4.4-2.4-4.4-1.1l1.1 57.5c0 1.2 1.6 3.1 3.7 4.3L257.8 442c2 1.1 3.7 1.1 3.7-.2l.1-2.3L68.2 326.6c-2-1.1-3.6-3-3.6-4.2z\" style=\"fill:#90683e\"/><path d=\"m52.7 262-.5-16.2L152.6 300c.3.1.5.2.8.2.6 0 1.1-.3 1.4-.9.4-.8.1-1.8-.7-2.2L38.5 234.5l5.2 99.4 18.6-9.8 9.8-21.2 155.8 55.7L52.7 262z\" style=\"opacity:.75;fill:#9d7956;enable-background:new\"/><path d=\"m35.5 201.2 120 65.4c2.1 1.2 2.2 3.1.3 4.3-2 1.2-5.3 1.3-7.4.1l-120-65.4c-2.1-1.2-2.2-3.1-.3-4.3 1.9-1.2 5.3-1.3 7.4-.1z\" style=\"fill-rule:evenodd;clip-rule:evenodd;fill:#fbe7bc\"/></svg>",
                    "width": 563,
                    "height": 563,
                    "mimetype": "svg+xml"
                });
            }, true);

            var fetch_i_g_care_package_1_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/care_package_1.svg', {
                    "data": "<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0\" y=\"0\" width=\"563\" height=\"563\" style=\"enable-background:new 0 0 563 563\" xml:space=\"preserve\"><style>.st3,.st9{fill-rule:evenodd;clip-rule:evenodd}.st3{opacity:.25;clip-path:url(#SVGID_2_);fill:none;stroke:#a38265;stroke-miterlimit:10}.st9{fill:#61392f}</style><path d=\"m9 367.9 273.8-158.5c5.6-3.2 15.5-2.4 22.2 1.9l246.6 155.3c6.5 4.2 7.2 10.1 1.7 13.2L287.8 534.5c-5.3 3-15 2.3-21.6-1.7L11.4 380.9c-6.7-4-7.9-9.8-2.4-13z\" style=\"opacity:.5;fill-rule:evenodd;clip-rule:evenodd;fill:#998d9d;enable-background:new\"/><path d=\"M274.5 526.3c-5.3 0-10.4-1.3-14.4-3.7L21.8 379.7c-4.5-2.7-7.4-6.7-8.2-11.2-.2-.7-.2-1.4-.2-2.2V183.1c0-.6.1-1.2.2-1.8.7-4.8 3.8-9.1 8.7-11.9l245-141.2c4-2.3 9-3.6 14.2-3.6 5.3 0 10.4 1.3 14.4 3.7l238.3 142.8c5.2 3.1 8.3 8.1 8.4 13.3 0 .4.1.7.1 1.1v182.8c0 1.4-.3 2.8-.9 4-1.3 3.7-4.1 6.9-8 9.1l-245 141.2c-4 2.4-9.1 3.7-14.3 3.7z\" style=\"fill-rule:evenodd;clip-rule:evenodd;fill:#613b13\"/><defs><path id=\"SVGID_1_\" d=\"M534 185.8h-.1c.4-2.2-.9-4.6-3.8-6.3L291.7 36.7c-5.2-3.1-13.7-3.1-19.1-.1l-245 141.2c-2.6 1.5-4 3.5-4.1 5.5v183.2c.1 1.9 1.4 3.8 3.8 5.2l238.3 142.8c5.2 3.1 13.7 3.1 19.1.1l245-141.2c2.4-1.4 3.7-3.1 4-4.9h.1V185.8z\"/></defs><clipPath id=\"SVGID_2_\"><use xlink:href=\"#SVGID_1_\" style=\"overflow:visible\"/></clipPath><path d=\"M534 185.8h-.1c.4-2.2-.9-4.6-3.8-6.3L291.7 36.7c-5.2-3.1-13.7-3.1-19.1-.1l-245 141.2c-2.6 1.5-4 3.5-4.1 5.5v183.2c.1 1.9 1.4 3.8 3.8 5.2l238.3 142.8c5.2 3.1 13.7 3.1 19.1.1l245-141.2c2.4-1.4 3.7-3.1 4-4.9h.1V185.8z\" style=\"clip-path:url(#SVGID_2_);fill-rule:evenodd;clip-rule:evenodd;fill:#e8cda1\"/><path class=\"st3\" d=\"M31.8 180.5 278.2 38.3c2.1-1.2 5.4-1.2 7.4 0L522.8 179c2 1.2 1.9 3.1-.1 4.2l-241.6 141c-2 1.2-5.3 1.2-7.3.1l-242-139.5c-2.1-1.2-2.1-3.1 0-4.3z\"/><path class=\"st3\" d=\"M31.8 180.5 278.2 38.3c2.1-1.2 5.4-1.2 7.4 0L522.8 179c2 1.2 1.9 3.1-.1 4.2l-241.6 141c-2 1.2-5.3 1.2-7.3.1l-242-139.5c-2.1-1.2-2.1-3.1 0-4.3z\"/><linearGradient id=\"SVGID_3_\" gradientUnits=\"userSpaceOnUse\" x1=\"151.93\" y1=\"458.339\" x2=\"151.93\" y2=\"226.537\"><stop offset=\".065\" style=\"stop-color:#dcb987\"/><stop offset=\".274\" style=\"stop-color:#dfbe8e\"/><stop offset=\".951\" style=\"stop-color:#e8cda1\"/></linearGradient><path d=\"m42.6 201 218.7 129.5c3.6 2.1 6.5 7.7 6.5 12.4v158c0 4.7-2.9 6.8-6.5 4.7L42.6 376.1c-3.6-2.1-6.5-7.7-6.5-12.4v-158c-.1-4.8 2.9-6.9 6.5-4.7z\" style=\"clip-path:url(#SVGID_2_);fill-rule:evenodd;clip-rule:evenodd;fill:url(#SVGID_3_)\"/><path d=\"m528.4 198.7.6 160.5c0 4.8-3 10.4-6.8 12.6L292.4 504c-3.8 2.2-6.9.1-6.9-4.7l-.6-160.5c0-4.8 3-10.4 6.8-12.6L521.5 194c3.8-2.2 6.9-.1 6.9 4.7z\" style=\"clip-path:url(#SVGID_2_);fill-rule:evenodd;clip-rule:evenodd;fill:#bd8b49\"/><linearGradient id=\"SVGID_4_\" gradientUnits=\"userSpaceOnUse\" x1=\"30.258\" y1=\"181.275\" x2=\"524.287\" y2=\"181.275\"><stop offset=\".065\" style=\"stop-color:#dcb987\"/><stop offset=\".521\" style=\"stop-color:#d0a66e\"/><stop offset=\".951\" style=\"stop-color:#c6985b\"/></linearGradient><path d=\"M31.8 180.5 278.2 38.3c2.1-1.2 5.4-1.2 7.4 0L522.8 179c2 1.2 1.9 3.1-.1 4.2l-241.6 141c-2 1.2-5.3 1.2-7.3.1l-242-139.5c-2.1-1.2-2.1-3.1 0-4.3z\" style=\"clip-path:url(#SVGID_2_);fill-rule:evenodd;clip-rule:evenodd;fill:url(#SVGID_4_)\"/><g style=\"clip-path:url(#SVGID_2_)\"><ellipse transform=\"rotate(-87.768 280.131 175.223) scale(.99996)\" cx=\"280.1\" cy=\"175.2\" rx=\"74.5\" ry=\"115.4\" style=\"fill-rule:evenodd;clip-rule:evenodd;fill:#00808e\"/><ellipse transform=\"rotate(-87.768 279.655 174.544) scale(.99996)\" class=\"st9\" cx=\"279.7\" cy=\"174.5\" rx=\"67.8\" ry=\"106.9\"/><ellipse transform=\"rotate(-87.768 280.037 174.559) scale(.99996)\" cx=\"280\" cy=\"174.6\" rx=\"59.7\" ry=\"94.2\" style=\"fill-rule:evenodd;clip-rule:evenodd;fill:#ff6000\"/><path class=\"st9\" d=\"M374.7 181.8c.2-1.8.2-3.3.2-5.2-20.7-2.2-42.4-8.5-58.6-18.6l37.6-21.8-5.9-4.1-37.7 21.9c-15.6-11.4-24.6-25.5-26.4-39.3-2.9-.2-4.9-.3-7.8-.3 1.8 15.2 10.8 30.8 27.9 43.2l-24.1 14-64.7-44.7-6.2 3.6 64.7 44.7-25.9 15.1c-17.6-11.4-39.8-18.4-62.9-20.9-.1 1.8-.2 3.6-.1 5.5 20.8 2.4 40.8 8.8 56.8 19.1l-35.8 20.8 5.9 4.1 35.8-20.8c14.2 10.7 22.3 23.3 24.4 36.2-.3 5 7.8 5.9 8.6.3-2.2-14.3-11.1-28.3-26.8-40.1l26-15.1 64.7 44.7 6.2-3.6-64.7-44.7 24.2-14.1c17.8 11 41.7 17.7 64.6 20.1z\"/></g><path d=\"m50.5 220.9 115.5 67c1.9 1.1 3.5 4 3.5 6.4v72c0 2.4-1.5 3.5-3.5 2.4l-115.5-67c-1.9-1.1-3.5-4-3.5-6.4v-72c0-2.5 1.6-3.5 3.5-2.4z\" style=\"clip-path:url(#SVGID_2_);fill-rule:evenodd;clip-rule:evenodd;fill:#008190\"/><path d=\"m47.3 221.8 115.5 67c1.9 1.1 3.5 4 3.5 6.4v72c0 2.4-1.5 3.5-3.5 2.4l-115.5-67c-1.9-1.1-3.5-4-3.5-6.4v-72c.1-2.5 1.6-3.5 3.5-2.4z\" style=\"clip-path:url(#SVGID_2_);fill-rule:evenodd;clip-rule:evenodd;fill:#fff\"/><path d=\"M534.2 185c.4-2.2-.9-4.6-3.8-6.3L292.2 35.9c-4-2.4-9.8-2.9-14.8-1.7 1.6.4 3.1 1 4.4 1.7l238.3 142.8c2.9 1.7 4.1 4 3.8 6.3h.1v182.8h-.1c-.3 1.8-1.6 3.6-4 4.9l-245 141.2c-1.3.7-2.8 1.3-4.3 1.7 4.9 1.2 10.7.6 14.7-1.7l245-141.2c2.4-1.4 3.7-3.1 4-4.9h.1V185h-.2z\" style=\"clip-path:url(#SVGID_2_);fill:#e0a96c\"/><path d=\"m529.9 363.2-245 141.2c-5.3 3.1-13.9 3.1-19.1-.1L27.5 361.5c-2.4-1.5-3.7-3.3-3.8-5.2v10.4c.1 1.9 1.4 3.8 3.8 5.2l238.3 142.8c5.2 3.1 13.7 3.1 19.1.1l245-141.2c2.4-1.4 4.1-4 4.4-5.8v-9.6c-.2 1.8-2 3.6-4.4 5z\" style=\"opacity:.75;clip-path:url(#SVGID_2_);fill:#a06624\"/><path d=\"M291.7 36.6c-5.2-3.1-13.7-3.1-19.1-.1l-245 141.2c-2.6 1.5-4 3.5-4.1 5.5v183.2c.1 1.9 1.4 3.8 3.8 5.2l9.4 5.7c-2.4-1.5-3.7-3.4-3.8-5.3V188.8c.1-2 1.4-4 4.1-5.5L282 42.2c5.3-3.1 13.9-3.1 19.1.1\" style=\"clip-path:url(#SVGID_2_);fill:#f5e1bb\"/><path style=\"opacity:.5;clip-path:url(#SVGID_2_);fill:#a06624\" d=\"m292 326 53.8 49.4-50.1 122 42.1-119.7z\"/><path d=\"M21.4 181.6c2-1.1 4.9-1.2 6.5-.3l244.5 144.6c1.6.9 1.2 2.5-.8 3.6s-4.9 1.2-6.5.3L20.6 185.2c-1.6-.9-1.2-2.6.8-3.6z\" style=\"clip-path:url(#SVGID_2_);fill-rule:evenodd;clip-rule:evenodd;fill:#f5e1bb\"/><path style=\"opacity:.5;clip-path:url(#SVGID_2_);fill-rule:evenodd;clip-rule:evenodd;fill:#a06624\" d=\"m483.4 322.2 40.4-129.4h-.1l-68.1 183-68.8 36.5 72.3-33.1 20.7-50.3 39.8 40.4z\"/><path style=\"opacity:.25;clip-path:url(#SVGID_2_);fill:#b37d3e\" d=\"m455.6 375.8-68.8 36.5-40.8-37L292.9 504l229-132.4-46.9-48.1z\"/><linearGradient id=\"SVGID_5_\" gradientUnits=\"userSpaceOnUse\" x1=\"441.439\" y1=\"376.735\" x2=\"377.622\" y2=\"153.891\"><stop offset=\"0\" style=\"stop-color:#a36e3a;stop-opacity:.5\"/><stop offset=\".489\" style=\"stop-color:#caa474;stop-opacity:.7712\"/><stop offset=\".901\" style=\"stop-color:#e8cda1\"/></linearGradient><path d=\"m292 326.2 94.8 86.2 68.8-36.6 68.2-183L292 326.2z\" style=\"clip-path:url(#SVGID_2_);fill-rule:evenodd;clip-rule:evenodd;fill:url(#SVGID_5_)\"/><linearGradient id=\"SVGID_6_\" gradientUnits=\"userSpaceOnUse\" x1=\"386.778\" y1=\"302.55\" x2=\"523.759\" y2=\"302.55\"><stop offset=\".065\" style=\"stop-color:#dcb987\"/><stop offset=\".274\" style=\"stop-color:#dfbe8e\"/><stop offset=\".951\" style=\"stop-color:#e8cda1\"/></linearGradient><path style=\"opacity:.5;clip-path:url(#SVGID_2_);fill-rule:evenodd;clip-rule:evenodd;fill:url(#SVGID_6_)\" d=\"m386.8 412.3 65.1-38.5 71.9-181-68.2 183z\"/><linearGradient id=\"SVGID_7_\" gradientUnits=\"userSpaceOnUse\" x1=\"477.913\" y1=\"348.859\" x2=\"518.977\" y2=\"348.859\"><stop offset=\".065\" style=\"stop-color:#dcb987\"/><stop offset=\".274\" style=\"stop-color:#dfbe8e\"/><stop offset=\".951\" style=\"stop-color:#e8cda1\"/></linearGradient><path style=\"opacity:.5;fill-rule:evenodd;clip-rule:evenodd;fill:url(#SVGID_7_)\" d=\"m519 368.9-39.2-40-1.9 4.3z\"/></svg>",
                    "width": 563,
                    "height": 563,
                    "mimetype": "svg+xml"
                });
            }, true);

            var fetch_i_g_care_package_2_svg = Host.bootstrapper.load(function() {
                return XS.assets.__importATL('i/g/care_package_2.svg', {
                    "data": "<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0\" y=\"0\" width=\"600\" height=\"600\" style=\"enable-background:new 0 0 600 600\" xml:space=\"preserve\"><style>.st7{fill:#f1e5c8}.st12{fill:#f5e1bb}.st32{fill-rule:evenodd;clip-rule:evenodd;fill:#ff6000}.st33,.st35{clip-path:url(#SVGID_6_);fill:#60392e}.st35{fill:#fca532}</style><path d=\"m56.4 402.3 193.8-113.6c31.4-18.4 82.3-18.4 113.6.2l193 114.3c31.3 18.5 31.2 48.5-.2 67L362.9 583.7c-31.4 18.4-82.3 18.4-113.6-.2l-193-114.3c-31.4-18.5-31.3-48.5.1-66.9z\" style=\"opacity:.5;fill-rule:evenodd;clip-rule:evenodd;fill:#998d9d;enable-background:new\"/><path d=\"M305.1 582.2c-21.1 0-42.2-4.9-60.5-15.6-9.1-5.3-18.1-10.7-27.2-16.1-28.6-17-57.2-33.9-85.8-50.9-5.3-3.1-11.7-8.7-17.6-10.4-6.2-1.8-15.3 0-21.8 0-9 0-17.3-2-23.2-9.5-3.5-4.5-5.1-9.8-5.3-15.5-.2-6.1-.5-4.9-5.4-9.2-10.8-9.7-16.6-21.3-16.5-35.8.1-11.7 0-23.4 0-35.1 0-26.6-.1-53.3-.1-79.9 0-2 .6-5.1 0-7-1.2-3.5-7.3-7.3-9.8-10.4-8.9-11-10.6-23-10.6-36.6-.1-12.4.3-24.7.4-37.1.1-11.9-.5-24 .2-35.8 1.1-19.5 14.1-33.4 30.2-43 19-11.4 38.2-22.4 57.3-33.6 30-17.6 60.1-35.3 90.1-52.9 16.3-9.6 32.4-20 49.2-28.7 39.2-20.4 88.8-16.3 126.1 5.8 23 13.6 46 27.3 69 40.9 29.1 17.2 58.2 34.5 87.3 51.7 18.9 11.2 45.1 22.4 55.3 42.9 6.2 12.5 4.3 28.2 4.4 41.9.1 15.3.2 30.6.2 45.9 0 9.3.6 18.6-3 27.4-2.7 6.6-7 12.5-12.1 17.4-3 2.9-7 4.6-8.1 8.2-1.8 6.1 0 15.4 0 21.7v20.8c.1 25-.7 50.2-.1 75.2.8 31.4-26.6 44.2-49.9 57.8-49.2 28.9-98.8 57-147.5 86.6-20.1 12-41.6 18.9-65.2 18.9z\" style=\"fill:#613b13\"/><defs><path id=\"SVGID_1_\" d=\"M557.3 234.2 53.2 231l.3 188c-1.5 12.1 5.6 24.6 21.4 33.9l177.7 105.3c28.8 17.1 75.7 17.2 104.6.2l178.4-104.7c15.9-9.3 23.1-21.9 21.5-34.2l.2-185.3z\"/></defs><clipPath id=\"SVGID_2_\"><use xlink:href=\"#SVGID_1_\" style=\"overflow:visible\"/></clipPath><path d=\"M557.3 234.2 53.2 231l.3 188c-1.5 12.1 5.6 24.6 21.4 33.9l177.7 105.3c28.8 17.1 75.7 17.2 104.6.2l178.4-104.7c15.9-9.3 23.1-21.9 21.5-34.2l.2-185.3z\" style=\"clip-path:url(#SVGID_2_);fill-rule:evenodd;clip-rule:evenodd;fill:#ff6000\"/><path d=\"m557.3 176.7-504.1-3.2.3 188c-1.5 12.1 5.6 24.6 21.4 33.9l177.7 105.3c28.8 17.1 75.7 17.2 104.6.2l178.4-104.7c15.9-9.3 23.1-21.9 21.5-34.2l.2-185.3z\" style=\"clip-path:url(#SVGID_2_);fill-rule:evenodd;clip-rule:evenodd;fill:#61392e\"/><path d=\"m557.3 158.5-504.1-3.2.3 188c-1.5 12.1 5.6 24.6 21.4 33.9l177.7 105.3c28.8 17.1 75.7 17.2 104.6.2L535.6 378c15.9-9.3 23.1-21.9 21.5-34.2l.2-185.3z\" style=\"clip-path:url(#SVGID_2_);fill-rule:evenodd;clip-rule:evenodd;fill:#e5c89b\"/><path d=\"M545.4 438.8 358.9 549.7c-10.7 5.7-20.9.9-20.9-10.7l-.2-137.7c-.4-5.8 10.5-5.9 14.5-8.2l191.6-110.7c4-2.3 7.6.6 7.9 6.4L552 424c.2 3.5-1.9 11.9-6.6 14.8z\" style=\"opacity:.2;clip-path:url(#SVGID_2_);fill-rule:evenodd;clip-rule:evenodd;fill:#61392e\"/><path class=\"st7\" d=\"M331.4 544.3c0-14 0-96.3-.1-111.1-.3-8.5 4.5-16.6 12.8-19.1 0 0-.1-.8.2-1.9-20.9 6.4-44.7 6.4-65.7.2 0 0 0 2.8.1 2.9l-.1.7c8.4 2.3 14 7 14 17.8.3 15.1.4 95.6.2 111.5 0 18.8-33.4 16-33.9 16.4 34.5 14.8 74.8 12.5 104.5-6.8 0-.2-31.6 14.9-32-10.6z\" style=\"opacity:.25;clip-path:url(#SVGID_2_)\"/><path d=\"m53.7 280.4-.3 139.3c-.5 10.3 4.7 20.7 15.5 29.4-6-7.1-8.8-14.8-8.4-22.5l.3-139.3\" style=\"opacity:.5;clip-path:url(#SVGID_2_);fill:#f5e1bb\"/><path d=\"m33.5 217.1 188.3-67.3c30.6-17 83.6-15.8 118.6 2.7l215.4 108.7c34.9 18.5 38.5 47.4 7.9 64.4L375.4 436c-30.6 17-83.6 15.8-118.6-2.7L41.5 281.4c-35-18.5-38.5-47.3-8-64.3z\" style=\"opacity:.4;clip-path:url(#SVGID_2_);fill-rule:evenodd;clip-rule:evenodd;fill:#564d66\"/><path d=\"m56.8 225.8 193.7-113.7c31.4-18.5 82.3-18.4 113.6.2l193 114.4c31.3 18.6 31.2 48.6-.2 67L363.1 407.4c-31.4 18.5-82.3 18.4-113.6-.2l-193-114.4c-31.3-18.5-31.2-48.5.3-67z\" style=\"fill-rule:evenodd;clip-rule:evenodd;fill:#9d7641\"/><path d=\"m580.1 251.2-.2-72.7-92-.3-124.1-73.6c-31.3-18.6-82.2-18.6-113.6-.2L126.6 177l-92.9-.4-.8 73.8c-.6 12.5 7.2 25.2 23.4 34.8l193 114.4c31.3 18.6 82.2 18.6 113.6.2L556.5 286c16.3-9.5 24.2-22.2 23.6-34.8z\" style=\"fill-rule:evenodd;clip-rule:evenodd;fill:#debc8a\"/><path class=\"st12\" d=\"m33.4 176.9-.4 73.7c-.5 10.3 4.7 20.7 15.5 29.4-6-7.1-8.8-14.8-8.4-22.5l.4-73.7M580 177.2l.4 73.7c.5 10.3-4.7 20.7-15.5 29.4 6-7.1 8.8-14.8 8.4-22.5l-.4-73.7\"/><path d=\"M57.2 144.3 250.7 30.7c31.4-18.4 82.2-18.3 113.4.2l192.7 114.2c31.3 18.5 31.2 48.5-.2 66.9L363.2 325.5c-31.4 18.4-82.2 18.3-113.4-.2L57 211.2c-31.3-18.6-31.2-48.5.2-66.9z\" style=\"fill-rule:evenodd;clip-rule:evenodd;fill:#f1e5c8\"/><linearGradient id=\"SVGID_3_\" gradientUnits=\"userSpaceOnUse\" x1=\"46.795\" y1=\"175.836\" x2=\"567.029\" y2=\"175.836\"><stop offset=\".021\" style=\"stop-color:#f9e3b8\"/><stop offset=\".092\" style=\"stop-color:#f5deb2\"/><stop offset=\".668\" style=\"stop-color:#dab580\"/><stop offset=\".953\" style=\"stop-color:#d0a56d\"/></linearGradient><path d=\"m69.3 143.6 184.1-108c29.9-17.5 78.2-17.5 108 .2l183.4 108.7c29.8 17.6 29.7 46.1-.2 63.7L360.4 316.1c-29.9 17.5-78.2 17.5-108-.2L69.1 207.3c-29.8-17.6-29.7-46.2.2-63.7z\" style=\"fill-rule:evenodd;clip-rule:evenodd;fill:url(#SVGID_3_)\"/><g style=\"opacity:.5\"><path d=\"M156.1 343.6c-4.5.2-8.4-3.2-8.9-7.8-4.3-44.6 14.1-76.1 30.3-94.6 17.4-19.9 35.8-29.4 36.6-29.8 4.2-2.1 9.4-.4 11.5 3.8 2.1 4.2.5 9.4-3.8 11.5-.2.1-16.6 8.6-31.8 26.2-20 23.2-28.7 50.5-25.8 81.2.4 4.7-3 8.9-7.7 9.4-.1.1-.3.1-.4.1z\" style=\"fill:#8c6239\"/></g><linearGradient id=\"SVGID_4_\" gradientUnits=\"userSpaceOnUse\" x1=\"347.738\" y1=\"369.956\" x2=\"548.129\" y2=\"255.475\"><stop offset=\".021\" style=\"stop-color:#debc8a\"/><stop offset=\".626\" style=\"stop-color:#c7995c\"/><stop offset=\".947\" style=\"stop-color:#bd8b49\"/></linearGradient><path d=\"m559.8 278.3-216 126.4c-4 2.3-7.6-.6-7.9-6.4l-.2-42.4c-.4-5.8 2.6-12.5 6.6-14.8l216-124c4-2.3 7.6.6 7.9 6.4l.2 40c.4 5.8-2.6 12.5-6.6 14.8z\" style=\"opacity:.75;fill-rule:evenodd;clip-rule:evenodd;fill:url(#SVGID_4_)\"/><ellipse cx=\"40.4\" cy=\"176.3\" rx=\"6\" ry=\"13.3\" style=\"opacity:.75;fill:#fff\"/><path class=\"st7\" d=\"M330.4 390.1c0-14 0-22-.1-36.9-.3-8.5 4.5-16.6 12.8-19.1 0 0-.1-.8.2-1.9-20.9 6.4-44.7 6.4-65.7.2 0 0 0 2.8.1 2.9l-.1.7c8.4 2.3 14 7 14 17.8.3 15.1.4 21.3.2 37.2 0 18.8-33.6 13.3-33.6 13.3 34.5 14.8 73.1 12 104.4-4-.1 0-32.2 8-32.2-10.2z\" style=\"opacity:.45\"/><path d=\"M135.6 325.5c1.9-1.1 4.1-1.8 6.5-1.8 4.2 0 8 2 10.4 5.2 2.1-9.1 5.2-17.5 9.3-25.3l-19 .1c-2.9 6.7-5.4 13.9-7.2 21.8z\" style=\"opacity:.5;fill:#758293\"/><path d=\"m227.9 353.9-41.4-38.6-49.4.5-27.2 38c-.7.7-3.7 6.1-2.7 10.8l22.4 111c1.5 7.6 8.5 13.7 15.7 13.7l101.1-.5c7.1 0 11.6-6.2 10.1-13.8l-22.4-111c-.8-4-3.2-7.6-6.2-10.1zm-56.6 11.2c-6.3 0-12.6-5.5-14-12.4s2.6-12.5 9-12.5c6.3 0 12.6 5.5 14 12.4 1.4 6.9-2.6 12.5-9 12.5z\" style=\"opacity:.25;fill:#61392e\"/><path d=\"m209.6 340-35.7-38.8-52.7.3-37.1 37.8c-.9.7-5.2 6.1-5.2 10.8V461c0 7.6 6.1 13.7 13.7 13.7h107.6c7.6 0 13.7-6.1 13.7-13.7V350.1c.1-4-1.6-7.6-4.3-10.1zm-62.5 8.2c-7.3 0-13.2-6-13.2-13.4s5.9-13.4 13.2-13.4c7.3 0 13.2 6 13.2 13.4-.1 7.4-6 13.4-13.2 13.4z\" style=\"fill:#758293\"/><path d=\"m206.1 343.4-35.7-38.8-52.7.3-37.1 37.8c-.9.7-5.2 6.1-5.2 10.8v110.9c0 7.6 6.1 13.7 13.7 13.7h107.6c7.6 0 13.7-6.1 13.7-13.7V353.5c.2-4-1.5-7.6-4.3-10.1zm-62.5 8.2c-7.3 0-13.2-6-13.2-13.4s5.9-13.4 13.2-13.4c7.3 0 13.2 6 13.2 13.4 0 7.5-5.9 13.4-13.2 13.4z\" style=\"fill:#ebebeb\"/><path d=\"m117.6 304.9-37.1 37.8c-.9.7-5.2 6.1-5.2 10.8v110.9c0 7.6 6.1 13.7 13.7 13.7h4.2c-5.6-1.8-9.6-7-9.6-13.1V354.2c0-4.7 4.3-10 5.2-10.8l37.6-38.5\" style=\"fill:#fff\"/><path d=\"M143.7 311c-14.8 0-26.8 12.2-26.8 27.2s12 27.2 26.8 27.2 26.8-12.2 26.8-27.2c-.1-15-12.1-27.2-26.8-27.2zm0 42.2c-8.1 0-14.7-6.7-14.7-14.9 0-8.3 6.6-14.9 14.7-14.9s14.7 6.7 14.7 14.9-6.6 14.9-14.7 14.9z\" style=\"fill:#db8\"/><path d=\"M144 343.6c-4.5 0-8.3-3.5-8.6-8.1-2.5-44.8 17.1-75.5 34-93.4 18.2-19.2 36.9-28 37.7-28.3 4.3-2 9.4-.1 11.4 4.2s.1 9.4-4.2 11.4c-.2.1-16.9 8-32.8 25-20.9 22.4-30.6 49.3-28.9 80.2.3 4.7-3.4 8.8-8.1 9h-.5z\" style=\"fill:#d54200\"/><path d=\"M213 220c-2.3-4.2-7.5-5.8-11.7-3.5-.5.2-7 3.9-15.8 11.1 1.3-.8 2.1-1.3 2.3-1.4 4.2-2.3 9.5-.7 11.7 3.5 1.7 3.2.8 7-1.2 9.6 6.3-5 15.4-9.7 15.5-9.8 4.2-2.2 1.5-5.3-.8-9.5z\" style=\"opacity:.5;fill:#6f2005\"/><ellipse transform=\"rotate(-1.307 305.93 161.292) scale(.99996)\" cx=\"306\" cy=\"161.3\" rx=\"141.9\" ry=\"88.6\" style=\"fill-rule:evenodd;clip-rule:evenodd;fill:#00808e\"/><ellipse transform=\"rotate(-1.174 305.407 153.603) scale(1.00001)\" cx=\"305.4\" cy=\"153.6\" rx=\"131.4\" ry=\"80.6\" style=\"fill-rule:evenodd;clip-rule:evenodd;fill:#61392f\"/><g style=\"opacity:.25\"><ellipse transform=\"rotate(-1.307 352.175 173.231) scale(.99996)\" cx=\"352.2\" cy=\"173.2\" rx=\"141.9\" ry=\"88.6\" style=\"fill-rule:evenodd;clip-rule:evenodd;fill:#61392e\"/></g><ellipse transform=\"matrix(.9995 -.03308 .03308 .9995 -4.336 10.202)\" class=\"st32\" cx=\"306.2\" cy=\"136.1\" rx=\"115.9\" ry=\"74.7\"/><ellipse transform=\"matrix(.9995 -.03308 .03308 .9995 -4.336 10.202)\" class=\"st32\" cx=\"306.2\" cy=\"136.1\" rx=\"115.9\" ry=\"74.7\"/><defs><ellipse id=\"SVGID_5_\" transform=\"matrix(.9997 -.023 .023 .9997 -3.053 7.07)\" cx=\"305.9\" cy=\"136.3\" rx=\"115.8\" ry=\"74.6\"/></defs><clipPath id=\"SVGID_6_\"><use xlink:href=\"#SVGID_5_\" style=\"overflow:visible\"/></clipPath><path class=\"st33\" d=\"m378.2 198.6 7.6-7.4s-.2-.6-.6-1.6c-2.8 1.7-5.7 3.4-8.8 4.9.6 1.4 1.2 2.8 1.8 4.1z\"/><path d=\"M311.4 61.7c-20.6-.4-40.3 2.8-57.5 8.6 81.7-10 125.9 104.5 131.3 119.3 21.1-13.1 34.9-31.2 36.4-51.3 3-41.2-46.3-75.5-110.2-76.6z\" style=\"clip-path:url(#SVGID_6_);fill:none\"/><path class=\"st35\" d=\"M225.2 192.7s45.7-158.4 166-112.9c0 0-120.3-62.5-175 107.9l9 5z\"/><path class=\"st35\" d=\"M191.4 136.3s86-57 114.1 81.4l10.6-.4s-15.9-144-124.8-88v7zM335.5 56.4s-30.7-3.8 97 67.5l.7 7s-130.9-69.9-104-75l6.3.5z\"/><path class=\"st33\" d=\"M187.4 136.3s86-57 114.1 81.4l10.6-.4s-15.9-144-124.8-88v7zM331.5 56.4s-30.7-3.8 97 67.5l.7 7s-130.9-69.9-104-75l6.3.5z\"/><path class=\"st35\" d=\"M257.9 70.3c-4.1 1.4-8.1 2.9-11.9 4.6 28.5-5.1 83.9 3.5 134.4 119.7 3-1.5 6-3.2 8.8-4.9-5.4-14.9-49.6-129.5-131.3-119.4z\"/><path class=\"st33\" d=\"M221.2 192.7s45.7-158.4 166-112.9c0 0-120.3-62.5-175 107.9l9 5z\"/><path class=\"st33\" d=\"M253.9 70.3c-4.1 1.4-8.1 2.9-11.9 4.6 28.5-5.1 83.9 3.5 134.4 119.7 3-1.5 6-3.2 8.8-4.9-5.4-14.9-49.6-129.5-131.3-119.4z\"/><ellipse transform=\"rotate(-27.439 243.326 106.5)\" cx=\"243.3\" cy=\"106.5\" rx=\"37.1\" ry=\"22\" style=\"opacity:.25;fill:#fcab7e\"/><ellipse transform=\"rotate(-27.439 240.965 103.765)\" cx=\"241\" cy=\"103.8\" rx=\"27.8\" ry=\"16.2\" style=\"opacity:.5;fill:#f9bda0\"/><path d=\"M192.6 139.1c3.2-41.3 57.6-74.1 121.5-73.3 48.3.6 88.2 20.3 103.4 47.7-13.2-29.8-54.8-51.6-105.7-52.3-63.9-.8-118.3 32-121.5 73.3-.8 10.1 1.6 19.8 6.5 28.6-3.4-7.5-4.9-15.6-4.2-24z\" style=\"fill:#fcab7e\"/><path d=\"M353 66.5c27.6 14 44.5 36.2 42.6 60.9-3.2 41.3-57.6 74.1-121.5 73.3-14.5-.2-28.2-2.1-40.7-5.4 18.5 9.3 41.7 15 67.3 15.4 63.9.8 118.3-32 121.5-73.3 2.5-31.9-26.4-59.6-69.2-70.9z\" style=\"opacity:.25;fill:#564d66\"/><ellipse transform=\"rotate(-15.269 171.657 175.003)\" cx=\"171.7\" cy=\"175\" rx=\"5.4\" ry=\"12.1\" style=\"opacity:.75;fill:#1dd8d8\"/></svg>",
                    "width": 600,
                    "height": 600,
                    "mimetype": "svg+xml"
                });
            }, true);

            var ref_i_g_care_package_0_svg = "/assets/care_package_0.d2e53746.svg";

            var ref_i_g_care_package_1_svg = "/assets/care_package_1.25c36770.svg";

            var ref_i_g_care_package_2_svg = "/assets/care_package_2.70ecfd5f.svg";

            //unsloppify: assignments and for-in loops in this program. They were
            //unsloppify: already global, but now are explicitly declared as such
            //unsloppify: 
            var n;
            var _activePowerUps;
            var angle;
            var _highlight;
            Host.bootstrapper.mnemonicMap[ref_i_g_ball_golden_svg] = "i/g/ball_golden.svg";
            Host.bootstrapper.mnemonicMap[ref_i_g_ballshine_svg] = "i/g/ballshine.svg";
            Host.bootstrapper.mnemonicMap[ref_i_g_ball_silver_svg] = "i/g/ball_silver.svg";
            Host.bootstrapper.mnemonicMap[ref_i_g_ball_bronze_svg] = "i/g/ball_bronze.svg";
            Host.bootstrapper.mnemonicMap[ref_i_s_hit01_mp3] = "i/s/hit01.mp3";
            Host.bootstrapper.mnemonicMap[ref_i_s_hit02_mp3] = "i/s/hit02.mp3";
            Host.bootstrapper.mnemonicMap[ref_i_s_hit03_mp3] = "i/s/hit03.mp3";
            Host.bootstrapper.mnemonicMap[ref_i_s_hit04_mp3] = "i/s/hit04.mp3";
            Host.bootstrapper.mnemonicMap[ref_i_s_hit05_mp3] = "i/s/hit05.mp3";
            Host.bootstrapper.mnemonicMap[ref_i_s_hit06_mp3] = "i/s/hit06.mp3";
            Host.bootstrapper.mnemonicMap[ref_i_s_hit07_mp3] = "i/s/hit07.mp3";
            Host.bootstrapper.mnemonicMap[ref_i_s_throw01_mp3] = "i/s/throw01.mp3";
            Host.bootstrapper.mnemonicMap[ref_i_s_throw02_mp3] = "i/s/throw02.mp3";
            Host.bootstrapper.mnemonicMap[ref_i_s_netdirect_mp3] = "i/s/netdirect.mp3";
            Host.bootstrapper.mnemonicMap[ref_i_s_net_mp3] = "i/s/net.mp3";
            Host.bootstrapper.mnemonicMap[ref_i_s_awww1_mp3] = "i/s/awww1.mp3";
            Host.bootstrapper.mnemonicMap[ref_i_s_awww2_mp3] = "i/s/awww2.mp3";
            Host.bootstrapper.mnemonicMap[ref_i_s_clap1_mp3] = "i/s/clap1.mp3";
            Host.bootstrapper.mnemonicMap[ref_i_s_clap2_mp3] = "i/s/clap2.mp3";
            Host.bootstrapper.mnemonicMap[ref_i_s_clap3_mp3] = "i/s/clap3.mp3";
            Host.bootstrapper.mnemonicMap[ref_i_s_clap4_mp3] = "i/s/clap4.mp3";
            Host.bootstrapper.mnemonicMap[ref_i_s_clap5_mp3] = "i/s/clap5.mp3";
            Host.bootstrapper.mnemonicMap[ref_i_s_powerup_gold_ball_activate_mp3] = "i/s/powerup_gold_ball_activate.mp3";
            Host.bootstrapper.mnemonicMap[ref_i_s_powerup_silver_ball_activate_mp3] = "i/s/powerup_silver_ball_activate.mp3";
            Host.bootstrapper.mnemonicMap[ref_i_s_powerup_bronze_ball_activate_mp3] = "i/s/powerup_bronze_ball_activate.mp3";
            Host.bootstrapper.mnemonicMap[ref_i_s_powerup_aim_boost_on_mp3] = "i/s/powerup_aim_boost_on.mp3";
            Host.bootstrapper.mnemonicMap[ref_i_s_powerup_coin_boost_on_mp3] = "i/s/powerup_coin_boost_on.mp3";
            Host.bootstrapper.mnemonicMap[ref_i_s_powerup_score_boost_on_mp3] = "i/s/powerup_score_boost_on.mp3";
            Host.bootstrapper.mnemonicMap[ref_i_s_powerup_focus_boost_on_mp3] = "i/s/powerup_focus_boost_on.mp3";
            Host.bootstrapper.mnemonicMap[ref_i_s_powerup_aim_boost_off_mp3] = "i/s/powerup_aim_boost_off.mp3";
            Host.bootstrapper.mnemonicMap[ref_i_s_powerup_coin_boost_off_mp3] = "i/s/powerup_coin_boost_off.mp3";
            Host.bootstrapper.mnemonicMap[ref_i_s_powerup_score_boost_off_mp3] = "i/s/powerup_score_boost_off.mp3";
            Host.bootstrapper.mnemonicMap[ref_i_s_powerup_focus_boost_off_mp3] = "i/s/powerup_focus_boost_off.mp3";
            Host.bootstrapper.mnemonicMap[ref_i_s_prize_claim_mp3] = "i/s/prize_claim.mp3";
            Host.bootstrapper.mnemonicMap[ref_i_s_prize_won_mp3] = "i/s/prize_won.mp3";
            Host.bootstrapper.mnemonicMap[ref_i_s_ding_mp3] = "i/s/ding.mp3";
            Host.bootstrapper.mnemonicMap[ref_i_s_coinpickup_mp3] = "i/s/coinpickup.mp3";
            Host.bootstrapper.mnemonicMap[ref_i_s_music_mp3] = "i/s/music.mp3";
            Host.bootstrapper.mnemonicMap[ref_i_g_ball_svg] = "i/g/ball.svg";
            Host.bootstrapper.mnemonicMap[ref_i_g_skin_tennis_png] = "i/g/skin_tennis.png";
            Host.bootstrapper.mnemonicMap[ref_i_g_skin_tennis_shine_png] = "i/g/skin_tennis_shine.png";
            Host.bootstrapper.mnemonicMap[ref_i_g_skin_bowling_png] = "i/g/skin_bowling.png";
            Host.bootstrapper.mnemonicMap[ref_i_g_skin_bowling_shine_png] = "i/g/skin_bowling_shine.png";
            Host.bootstrapper.mnemonicMap[ref_i_g_skin_mellon_png] = "i/g/skin_mellon.png";
            Host.bootstrapper.mnemonicMap[ref_i_g_skin_mellon_shine_png] = "i/g/skin_mellon_shine.png";
            Host.bootstrapper.mnemonicMap[ref_i_g_skin_beach_png] = "i/g/skin_beach.png";
            Host.bootstrapper.mnemonicMap[ref_i_g_skin_beach_shine_png] = "i/g/skin_beach_shine.png";
            Host.bootstrapper.mnemonicMap[ref_i_g_skin_foodball_png] = "i/g/skin_foodball.png";
            Host.bootstrapper.mnemonicMap[ref_i_g_skin_foodball_shine_png] = "i/g/skin_foodball_shine.png";
            Host.bootstrapper.mnemonicMap[ref_i_g_skin_8ball_png] = "i/g/skin_8ball.png";
            Host.bootstrapper.mnemonicMap[ref_i_g_skin_8ball_shine_png] = "i/g/skin_8ball_shine.png";
            Host.bootstrapper.mnemonicMap[ref_i_g_skin_basketball_png] = "i/g/skin_basketball.png";
            Host.bootstrapper.mnemonicMap[ref_i_g_skin_basketball_shine_png] = "i/g/skin_basketball_shine.png";
            Host.bootstrapper.mnemonicMap[ref_i_g_skin_eye_png] = "i/g/skin_eye.png";
            Host.bootstrapper.mnemonicMap[ref_i_g_skin_eye_shine_png] = "i/g/skin_eye_shine.png";
            Host.bootstrapper.mnemonicMap[ref_i_g_skin_face_png] = "i/g/skin_face.png";
            Host.bootstrapper.mnemonicMap[ref_i_g_skin_face_shine_png] = "i/g/skin_face_shine.png";
            Host.bootstrapper.mnemonicMap[ref_i_g_drink_aim_svg] = "i/g/drink_aim.svg";
            Host.bootstrapper.mnemonicMap[ref_i_g_drink_coin_svg] = "i/g/drink_coin.svg";
            Host.bootstrapper.mnemonicMap[ref_i_g_drink_points_svg] = "i/g/drink_points.svg";
            Host.bootstrapper.mnemonicMap[ref_i_g_drink_rim_svg] = "i/g/drink_rim.svg";
            Host.bootstrapper.mnemonicMap[ref_i_web_fbinstant_msg_notyou_png] = "i/web/fbinstant_msg/notyou.png";
            Host.bootstrapper.mnemonicMap[ref_i_web_fbinstant_msg_beat_png] = "i/web/fbinstant_msg/beat.png";
            Host.bootstrapper.mnemonicMap[ref_i_web_fbinstant_msg_unstoppable_png] = "i/web/fbinstant_msg/unstoppable.png";
            Host.bootstrapper.mnemonicMap[ref_i_web_fbinstant_msg_winalltime_png] = "i/web/fbinstant_msg/winalltime.png";
            Host.bootstrapper.mnemonicMap[ref_i_web_fbinstant_msg_cantbeatme_png] = "i/web/fbinstant_msg/cantbeatme.png";
            Host.bootstrapper.mnemonicMap[ref_i_web_fbinstant_msg_stopwinning_png] = "i/web/fbinstant_msg/stopwinning.png";
            Host.bootstrapper.mnemonicMap[ref_i_g_IAP_Remove_ADS_radialight_bg_svg] = "i/g/IAP/Remove ADS/radialight_bg.svg";
            Host.bootstrapper.mnemonicMap[ref_i_g_IAP_Remove_ADS_ballonfire_svg] = "i/g/IAP/Remove ADS/ballonfire.svg";
            Host.bootstrapper.mnemonicMap[ref_i_g_IAP_Remove_ADS_star_svg] = "i/g/IAP/Remove ADS/star.svg";
            Host.bootstrapper.mnemonicMap[ref_i_g_IAP_Remove_ADS_gift_svg] = "i/g/IAP/Remove ADS/gift.svg";
            Host.bootstrapper.mnemonicMap[ref_i_g_IAP_Remove_ADS_drinks_svg] = "i/g/IAP/Remove ADS/drinks.svg";
            Host.bootstrapper.mnemonicMap[ref_i_g_IAP_Remove_ADS_greenbutton_dude_svg] = "i/g/IAP/Remove ADS/greenbutton_dude.svg";
            Host.bootstrapper.mnemonicMap[ref_i_g_care_package_0_svg] = "i/g/care_package_0.svg";
            Host.bootstrapper.mnemonicMap[ref_i_g_care_package_1_svg] = "i/g/care_package_1.svg";
            Host.bootstrapper.mnemonicMap[ref_i_g_care_package_2_svg] = "i/g/care_package_2.svg"; //fswatch ~/Files/Git/frvr-games/Games/ ~/Files/Git/frvr-games/Shared/ | xargs -n1 ~/Files/basketball-instant.sh 
            //Force content background color
            XS.stageContainer.setBackgroundColor(0xa8dad9); //0x202020)
            //Set bottom margin to fit socal sharing bottom bar on web.
            //XS.styles.margins.bottom = 0
            //Forces everything to render each frame
            XS.dirty = true;
            stage.orientationMode = "fixed";
            stage.orientation = "portrait"; //LEGACY_COORD_SYSTEM = true
            window.botServerPath = Config.backendPath;
            (function(scope) { // "dependency inversion" container
                scope.DI = function() {
                    var map = {};
                    var ClassesMap = {};
                    this.bind = function(key) {
                        return {
                            toConstantValue: function toConstantValue(value) {
                                map[key] = value;
                            },
                            to: function to(value) {
                                map[key] = value;
                                ClassesMap[key] = {
                                    value: value
                                };
                                return {
                                    asSingleton: function asSingleton(forceCreation) {
                                        if (forceCreation) {
                                            map[key] = new ClassesMap[key].value();
                                            delete ClassesMap[key];
                                        } else {
                                            ClassesMap[key].singleton = true;
                                        }
                                    }
                                };
                            }
                        };
                    };
                    this.unbind = function(key) {
                        delete map[key];
                    };
                    this.isBound = function(key) {
                        return map.hasOwnProperty(key);
                    };
                    this.get = function(key) {
                        if (this.isBound(key)) {
                            if (ClassesMap[key]) {
                                if (ClassesMap[key].singleton) {
                                    map[key] = new ClassesMap[key].value();
                                    delete ClassesMap[key];
                                } else {
                                    return new ClassesMap[key].value();
                                }
                            }
                            return map[key];
                        }
                        log.error("no binding found for #", key);
                    };
                    return this;
                }.call(scope);
            })(window);
            (function(scope) {
                scope.DIKeys = { // goals
                    goalsStats: "goalsStats",
                    goalsConfig: "goalsConfig",
                    goalsModel: "goalsModel",
                    goalsPopup: "goalsPopup",
                    powerUps: "powerUps",
                    powerUpPrize: "powerUpPrize_", // Used to identify singe prizes "powerUpPrize_drinkAim"
                    powerUpPrizes: "powerUpPrizes", // social
                    socialModel: "SocialModel",
                    UIShareScreen: "UIShareScreen",
                    UIGameOverScreen: "UIGameOverScreen",
                    UILeaderboardScreen: "UILeaderBoardScreen",
                    UIRotatingSprite: "UIRotatingSprite",
                    UIButton: "UIButton",
                    UIDefaultFont: "UIdefaultFont",
                    UIPhoto: "UIPhoto",
                    UIUserBadge: "UserBadge",
                    UIOpponentBadge: "UIOpponent",
                    BumpAnimation: "BumpAnimation",
                    UIShadowLabel: "UIShadowLabel", // utils
                    utilsPreloadAssets: "preloadAssetsPromise",
                    utilsOnNextFrame: "utilsOnNextFrame"
                };
            })(window); // -----------------------------------------------------------------------------
            // -----------------------------------------------------------------------------
            // -----------------------------------------------------------------------------
            // -----------------------------------------------------------------------------
            // GUI
            // Most of our games and components solve the same problems again and again (buttons, don't-click-if-drag, etc)
            // Instead of solving these problems in every game or components, we're going to start building a general, minimal, robust and versatile GUI library that works with the new 
            // new coordinate system and PIXI.Graphics, to make stuff that looks good and works with localization and variable content without needs a bunch of manual tweaking in every game
            //
            // Design Goals:
            // - Make it easy to make it look good
            // - Make it flexible and reusable 
            // - Have sane defaults and automatic choices, that can be overridden or changed by the using code
            // - Don't require the user to tweak and tune the layouts for the vast majority of cases (no magical values etc)
            // - Don't try to solve every problem - just extend little by little
            window.GUI = function() {};
            GUI.util = {};
            /**
             * GUI.util.applyDefaults
             * Merge an "options" hash (which may be undefined) and a "defaults" hash (which may not be undefined) without changing the passed in objects
             */
            GUI.util.applyDefaults = function(options, defaults) {
                var result = {};
                options = options || {};
                for ( //unsloppify: is this variable declared anywhere?
                    n in defaults) {
                    result[n] = defaults[n];
                }
                for ( //unsloppify: is this variable declared anywhere?
                    n in options) {
                    result[n] = options[n];
                }
                return result;
            };
            GUI.util.updateTextWithHandler = function(label, text, cb, scope) {
                if (label.text === text) return; // need to wait next frame to get correct label boundaries
                label.setText(text);
                if (cb) {
                    if (scope) cb = cb.bind(scope);
                    XS.once("render", cb);
                }
            };
            /**
             * GUI.Button
             * A flexible button with either text, image or both
             * Makes sure text is sized to stay inside button, layouts nicely, etc
             */
            GUI.Button = Container.expand(function(textOrImage, options) {
                Container.call(this);
                var self = this;
                this.options = GUI.util.applyDefaults(options, {
                    radius: 20,
                    hPadding: options && !isNaN(options.hPadding) || options && !isNaN(options.padding) || 25,
                    vPadding: options && isNaN(options.vPadding) || options && !isNaN(options.padding) || 15,
                    imageSpacing: 15,
                    imageScale: 1,
                    fontSize: 40,
                    shadow: false,
                    shadowColor: 0x0079b8,
                    color: '#000000',
                    backgroundColor: 0xffffff,
                    activeColor: 0x000000
                });
                this._disable = false;
                this.foreground = new Graphics();
                this.foreground.visible = false;
                this.foreground.alpha = 0.1;
                if (this.options.shadow) {
                    this.shadow = new Graphics();
                    self.addChild(this.shadow);
                }
                this.background = new Graphics();
                this.background.interactive = true;
                this.background.buttonMode = true; // TODO: Don't fire the click if there was a drag between up and down
                this.background.on('down', function(e) {
                    if (self._disable) return;
                    self.foreground.visible = true;
                });
                this.background.on('up', function(e) {
                    if (self._disable) return;
                    self.emit('click', e);
                    self.foreground.visible = false;
                }); // new Text2("1000", {weight:400, fill:"#FFFFFF", size:70,maxWidth:210,dropShadow:true})
                var image = this.options.image; // Text button
                if (typeof textOrImage === 'string' || textOrImage instanceof Host.Localize.LocalizedString) {
                    this.text = textOrImage;
                } else {
                    image = textOrImage;
                }
                this.setImage(image);
                if (this.text) {
                    var maxWidth;
                    if (this.options.width) {
                        if (this.options.imagePosition === undefined || this.options.imagePosition == 'left' || this.options.imagePosition == 'right') {
                            maxWidth = this.options.width - this.image.width - this.options.imageSpacing - 2 * this.options.hPadding;
                        } else {
                            maxWidth = this.options.width - 2 * this.options.hPadding;
                        }
                    }
                    this.label = new Text2(textOrImage, {
                        size: this.options.fontSize,
                        fill: this.options.color,
                        maxWidth: maxWidth,
                        weight: this.options.weight
                    });
                }
                this.addChild(this.background);
                this.addChild(this.foreground);
                if (this.label) {
                    this.addChild(this.label);
                }
                if (this.image) {
                    this.addChild(this.image);
                }
                this.onResize();
            });
            Object.defineProperty(GUI.Button.prototype, 'width', {
                get: function get() {
                    return this.options.width || this.getLocalBounds().width;
                },
                set: function set(w) {
                    this.options.width = w;
                    this.onResize();
                }
            });
            Object.defineProperty(GUI.Button.prototype, 'height', {
                get: function get() {
                    return this.options.height || this.getLocalBounds().height;
                },
                set: function set(h) {
                    this.options.height = h;
                    this.onResize();
                }
            });
            GUI.Button.prototype.onResize = function() {
                var labelWidth = this.label ? this.label.width : 0;
                var labelHeight = this.label ? this.label.height : 0;
                var imageWidth = this.image ? this.image.width : 0;
                var imageHeight = this.image ? this.image.height : 0;
                this._width = this.options.width || imageWidth + this.options.imageSpacing + labelWidth + 2 * this.options.hPadding;
                this._height = this.options.height || Math.max(labelHeight, imageHeight) + 2 * this.options.vPadding;
                this.drawBackground(this._width, this._height);
                if (this.image) {
                    if (this.label) { // Image and label: Complex
                        var imageAndText = {
                            width: this.label.width + this.options.imageSpacing + this.image.width,
                            height: this.label.height + this.options.imageSpacing + this.image.height
                        }; //console.log("size: Both heights", imageAndText)
                        //console.log("size: image", this.image.dimensions)
                        //console.log("size: label", this.label.dimensions)
                        var bg = {
                            width: this.background.width,
                            height: this.background.height
                        };
                        switch (this.options.imagePosition) { // [Image]
                            // My Text 
                            case 'top':
                                this.image.x = Math.round((bg.width - this.image.width) / 2);
                                this.image.y = Math.round((bg.height - imageAndText.height) / 2);
                                this.label.x = Math.round((bg.width - this.label.width) / 2);
                                this.label.y = this.image.y + this.image.height + this.options.imageSpacing;
                                break; // My Text 
                                // [Image]
                            case 'bottom':
                                this.label.x = Math.round((bg.width - this.label.width) / 2);
                                this.label.y = Math.round((bg.height - imageAndText.height) / 2);
                                this.image.x = Math.round((bg.width - this.image.width) / 2);
                                this.image.y = this.label.y + this.label.height + this.options.imageSpacing;
                                break; // My Text [Image]
                            case 'right':
                                this.label.x = Math.round((this.background.width - imageAndText.width) / 2); // Center both in button
                                this.label.y = Math.round((this.background.height - this.label.height) / 2); // vertical center
                                this.image.x = this.label.x + this.label.width + this.options.imageSpacing;
                                this.image.y = Math.round((this.background.height - this.image.height) / 2); // vertical center
                                break; // [Image] My Text
                            case 'left':
                            default:
                                this.image.x = Math.round((this.background.width - imageAndText.width) / 2); // Center both in button
                                this.image.y = Math.round((this.background.height - this.image.height) / 2); // vertical center
                                this.label.x = this.image.x + this.image.width + this.options.imageSpacing;
                                this.label.y = Math.round((this.background.height - this.label.height) / 2); // vertical center
                                break;
                        }
                    } else { // Image, no label: Ignore image position and center the image 
                        this.image.x = (this.background.width - this.image.width) / 2;
                        this.image.y = (this.background.height - this.image.height) / 2;
                    }
                } else { // Only text
                    if (this.label) {
                        this.label.x = Math.round((this.background.width - this.label.width) / 2);
                        this.label.y = Math.round((this.background.height - this.label.height) / 2);
                    }
                }
            };
            GUI.Button.prototype.disable = function() {
                this._disable = true;
            };
            GUI.Button.prototype.enable = function() {
                this._disable = false;
            };
            GUI.Button.prototype.drawBackground = function(w, h) {
                this.background.clear();
                this.background.beginFill(this.options.backgroundColor);
                this.background.drawRoundedRect(0, 0, w, h, this.options.radius);
                this.foreground.clear();
                this.foreground.beginFill(this.options.activeColor);
                this.foreground.drawRoundedRect(0, 0, w, h, this.options.radius);
                if (this.shadow) {
                    this.shadow.clear();
                    this.shadow.beginFill(this.options.shadowColor);
                    this.shadow.drawRoundedRect(0, 4, w, h + (this.options.shadowHeight || 4), this.options.radius);
                }
            };
            GUI.Button.prototype.setText = function(text) {
                this.label.setText(text);
                this.onResize();
            };
            GUI.Button.prototype.setImage = function(image) {
                var changed = false;
                if (this.image) {
                    this.image.parent.removeChild(image);
                    this.image = null;
                    changed = true;
                } // Texture, Canvas or Image: Create a Sprite
                if (image && (image instanceof HTMLImageElement || image instanceof HTMLCanvasElement || image instanceof Texture)) {
                    changed = true;
                    this.image = new Sprite(image);
                    if (this.options.imageScale !== 1) {
                        this.image.scale.set(this.options.imageScale);
                    } else if (this.options.width || this.options.height) {
                        this.image.scale.set(1);
                        var scale = Math.min(this.options.height ? (this.options.height - 2 * this.options.vPadding) / this.image.height : 1, this.options.width ? (this.options.width - this.options.hPadding) / this.image.width : 1);
                        if (scale > 0) {
                            this.image.scale.set(scale);
                        }
                    }
                    this.image.resolution = this.image.scale.x;
                    this.image.applyResolution();
                } // Sprite: Just use Sprite directly
                if (!this.image && image && image instanceof Sprite) {
                    this.image = image;
                }
                if (changed) {
                    this.onResize();
                }
            };
            /** 
             * GUI.Dialog
             */
            GUI.Dialog = ContainerFixedSize.expand(function(width, height, options) {
                ContainerFixedSize.call(this, width, height);
                var self = this;
                options = options || {};
                self.options = GUI.util.applyDefaults(options, {
                    radius: 26,
                    width: width,
                    height: height,
                    margin: 30,
                    hPadding: options.hPadding || options.padding || 45,
                    vPadding: options.vPadding || options.padding || 25,
                    backgroundColor: 0xffffff,
                    darkenOpacity: 0.6,
                    fadeInDuration: 0.5,
                    fadeOutDuration: 0.5,
                    showCloseX: false,
                    closeXHPadding: 30,
                    closeXVPadding: 30
                });
                var darken = self.darken = new Graphics();
                darken.beginFill(this.options.darkenColor || 0x000000, this.options.darkenOpacity);
                darken.drawRect(0, 0, 200, 200);
                self.background = new Graphics();
                self.addChild(self.background); // Handle close X in upper right hand corner
                if (self.options.showCloseX) {
                    self.closeX = new Sprite(fetch_i_g_close_x_svg()); // TODO: Make sure this gets rolled in
                    self.closeX.scale.set(0.5);
                    self.closeX.anchor.set(1, 0);
                    var closeXAlpha = 0.7;
                    self.closeX.alpha = closeXAlpha;
                    self.addChild(self.closeX);
                    self.closeX.on('down', function() {
                        self.closeX.alpha = 0.5;
                    });
                    self.closeX.on('up', function() {
                        self.closeX.alpha = closeXAlpha;
                        self.cancel();
                    });
                }
                self.setSize(this.options.width, this.options.height);
            });
            /**
             * Dialog width, when used by children of the dialog (unaffected by scale)
             */
            Object.defineProperty(GUI.Dialog.prototype, 'innerWidth', {
                get: function get() {
                    return this.width / this.scale.x;
                }
            });
            /**
             * Dialog height, when used by children of the dialog (unaffected by scale)
             */
            Object.defineProperty(GUI.Dialog.prototype, 'innerHeight', {
                get: function get() {
                    return this.height / this.scale.y;
                }
            });
            GUI.Dialog.prototype.setSize = function(w, h) {
                this.background.clear();
                this.background.beginFill(this.options.backgroundColor);
                this.background.drawRoundedRect(0, 0, w, h, this.options.radius);
                this.onResize();
            };
            GUI.Dialog.prototype.onResize = function() {
                this.x = -this.width / 2;
                this.y = -this.height / 2;
                if (this.closeX) {
                    this.closeX.x = this.innerWidth - this.options.closeXHPadding;
                    this.closeX.y = this.options.closeXVPadding;
                }
                this.y += this.options.offsetY || 0;
            };
            GUI.Dialog.prototype.resizeHandler = function() {
                var fitScale = Math.min((XS.gui.width - XS.gui.margins.left - XS.gui.margins.right - this.options.margin) / (this.options.width || this.width), (XS.gui.height - XS.gui.margins.top - XS.gui.margins.bottom - this.options.margin) / (this.options.height || this.height), 1);
                this.scale.set(fitScale);
                this.onResize(); // Fit the darken layer to the full screen, even though it's a child of this group
                if (this.darken) {
                    if (this.parent) {
                        var size = this.parent.toLocalSize(XS.gui.dimensions);
                        this.darken.width = size.x;
                        this.darken.height = size.y;
                        var upperLeft = new Point(0, 0);
                        var p = this.parent.toLocal(upperLeft);
                        this.darken.x = p.x;
                        this.darken.y = p.y;
                    }
                }
            };
            GUI.Dialog.prototype.addButton = function(text, options) {
                var button = text instanceof GUI.Button ? text : new GUI.Button(text, options);
                this.addChild(button);
                return button;
            };
            GUI.Dialog.prototype.isOpen = function() {
                return this._open;
            };
            GUI.Dialog.prototype.open = function(callback) {
                this._open = true;
                this.onCloseCallback = callback; // TODO: Animate dialog in
                //console.warn("Open GUI.Dialog!")
                var self = this;

                function onOpen() {
                    self.emit('open', self);
                    XS.on('resize', self.resizeHandler.bind(self));
                }
                if (self.darken) {
                    XS.gui.center.addChild(self.darken);
                    self.darken.alpha = 0;
                    new Tween(self.darken, {
                        alpha: this.options.darkenOpacity
                    }, this.options.fadeInDuration);
                }
                XS.gui.center.addChild(self);
                self.resizeHandler(); //self.scale.set( 0.8 )
                //new Tween( self.scale, { x: 1.1, y: 1.1 }, 0.6, Tween.easeout ).call(function() {
                //	new Tween( self.scale, { x: 1, y: 1 }, 0.1, Tween.easeinout ).call(function() {
                //		onOpen()
                //	})
                //})
                onOpen();
            };
            /**
             * Cancels (closes) dialog, without triggering previous callbacks)
             * @param {callback} - Optional callback that is called when dialog has closed
             */
            GUI.Dialog.prototype.cancel = function(callback) {
                this._open = false;
                var self = this;
                XS.off('resize', self.resizeHandler.bind(self));
                self.emit('close', self);
                if (self.parent) {
                    self.parent.removeChild(self);
                }
                if (self.darken) {
                    self.darken.alpha = 0;
                    new Tween(self.darken, {
                        alpha: 0
                    }, this.options.fadeOutDuration).call(function() {
                        if (self.darken.parent) {
                            self.darken.parent.removeChild(self.darken);
                        }
                    });
                }
            };
            GUI.Dialog.prototype.close = function(callback) {
                this._open = false;
                var self = this;

                function onClose() {
                    callback && callback();
                    if (!self.options.manualCloseCallback) {
                        self.onCloseCallback && self.onCloseCallback();
                    }
                    self.cancel();
                } // TODO: Animate dialog out
                //this.scale.set( 1 )
                //new Tween( self.scale, { x: 1.1, y: 1.1 }, 0.2 ).call(function() {
                //	new Tween( self.scale, { x: 1, y: 1 }, 0.2 ).call(function() {
                //		onClose()
                //	})
                //})
                onClose();
            };
            GUI.SpeechBubble = Container.expand(function(text, options) {
                Container.call(this);
                this.options = GUI.util.applyDefaults(options, {
                    radius: 40,
                    fontSize: 40,
                    padding: 40
                }); //this.textbox = new Rectangle( this.options.padding, this.options.padding, this.options.width-2*this.options.padding, this.options.height-2*this.options.padding )
                this.text = new Text2(text, {
                    size: this.options.fontSize
                }); // Textbox stuff is for flowing in the future - not working yet
                this.text.x = this.options.padding; // this.textbox.x + (this.textbox.width-this.text.width)/2 
                this.text.y = this.options.padding; // this.textbox.y
                if (!this.options.width) {
                    this.options.width = this.text.width + 2 * this.options.padding;
                }
                if (!this.options.height) {
                    this.options.height = this.text.height + 2 * this.options.padding;
                }
                this.tail = new Graphics();
                this.background = new Graphics();
                this.addChild(this.tail);
                this.addChild(this.background);
                this.addChild(this.text);
                this.onResize();
            });
            GUI.SpeechBubble.prototype.onResize = function() {
                this.drawBackground(this.options.width, this.options.height);
                this.drawTail(this.options.width, this.options.height);
            };
            GUI.SpeechBubble.prototype.drawBackground = function(w, h) {
                this.background.clear();
                this.background.beginFill(0xffffff);
                this.background.drawRoundedRect(0, 0, w, h, this.options.radius);
                this.background.endFill();
            };
            GUI.SpeechBubble.prototype.drawTail = function(w, h) {
                this.tail.x = w - this.options.radius / 2;
                this.tail.y = h - this.options.radius / 2;
                var target = new Point(100, 100);
                var topLeft = new Point(-20, 20);
                var topRight = new Point(20, -20);
                this.tail.clear();
                this.tail.beginFill(0xffffff); // rounded
                //var cp = new Point( 0, target.y/2 )
                //var cp2 = new Point( cp.x+50, cp.y+50 )
                //this.tail.moveTo( topRight.x, topRight.y )
                //this.tail.quadraticCurveTo( cp.x, cp.y, target.x, target.y)
                //this.tail.quadraticCurveTo( cp2.x, cp2.y, topLeft.x, topLeft.y)
                //this.tail.lineTo( topRight.x, topRight.y )
                // straight
                this.tail.moveTo(topRight.x, topRight.y);
                this.tail.lineTo(target.x, target.y);
                this.tail.lineTo(topLeft.x, topLeft.y);
                this.tail.lineTo(topRight.x, topRight.y);
                this.tail.endFill();
            };
            GUI.ProgressBar = Container.expand(function(width, height, options) {
                Container.call(this);
                this.options = GUI.util.applyDefaults(options, {
                    width: width,
                    height: height,
                    color: 0x79df60,
                    labelColor: "#ffffff",
                    backgroundColor: 0x316e7d,
                    fontSize: 20,
                    value: 0.7, // value is a progress value between 0 and 1
                    radius: height,
                    padding: 2,
                    weight: 500,
                    caption: ""
                });
                this.label = new Text2(this.options.caption, {
                    size: this.options.fontSize,
                    fill: this.options.labelColor,
                    weight: this.options.weight
                });
                this.background = new Graphics();
                this.foreground = new Graphics();
                this.foregroundMask = new Graphics();
                this.centerPoint = new Point(this.options.width * 0.5, this.options.height * 0.5);
                this.fgCont = new Container(); // Containers has more adequate behaviour rather than Graphics
                this.bgCont = new Container(); // Containers has more adequate behaviour rather than Graphics
                this.addChild(this.bgCont);
                this.addChild(this.fgCont);
                this.bgCont.addChild(this.background);
                this.fgCont.addChild(this.foreground);
                this.fgCont.addChild(this.foregroundMask);
                this.foreground.mask = this.foregroundMask;
                this.addChild(this.label);
                this.render();
                this.updateValue();
            });
            GUI.ProgressBar.prototype.render = function() {
                var opts = this.options;
                var x = opts.padding || 0;
                var y = opts.padding || 0;
                var w = opts.width - x * 2;
                var h = opts.height - y * 2; // foreground + mask
                drawRoundedRect(this.foregroundMask, 0, 0, 0, w, h, opts.radius);
                drawRoundedRect(this.foreground, opts.color, 0, 0, w, h, opts.radius); // background
                drawRoundedRect(this.background, opts.backgroundColor, 0, 0, opts.width, opts.height, opts.radius + opts.padding);
                this.fgCont.x = (this.bgCont.width - this.fgCont.width) * 0.5;
                this.fgCont.y = (this.bgCont.height - this.fgCont.height) * 0.5;

                function drawRoundedRect(ctx, color, x, y, width, height, radius) {
                    ctx.clear();
                    ctx.beginFill(color);
                    if (!isNaN(radius) && radius > 0) {
                        ctx.drawRoundedRect(x, y, width, height, radius);
                    } else {
                        ctx.drawRect(x, y, width, height);
                    }
                    ctx.endFill();
                }
                this.updateCaption();
            };
            GUI.ProgressBar.prototype.updateCaption = function() {
                this.label.x = this.centerPoint.x - this.label.width * 0.5;
                this.label.y = this.centerPoint.y - this.label.height * 0.5;
            };
            GUI.ProgressBar.prototype.updateValue = function() {
                var percentValue = Math.max(0, Math.min(1, this.options.value));
                this.foreground.x = percentValue * this.foreground.width - this.foreground.width;
            };
            Object.defineProperty(GUI.ProgressBar.prototype, 'value', {
                get: function get() {
                    return this.options.value;
                },
                set: function set(value) {
                    this.options.value = value;
                    this.updateValue();
                }
            });
            Object.defineProperty(GUI.ProgressBar.prototype, 'caption', {
                get: function get() {
                    return this.options.caption;
                },
                set: function set(value) {
                    this.options.caption = value;
                    GUI.util.updateTextWithHandler(this.label, value, this.updateCaption, this);
                }
            }); // -----------------------------------------------------------------------------
            /**
             * @author Alexander Slavschik
             * @description Logging with #tags and levels of verbosity (default level is errors-only)
             */
            window.log = function(_prefix) {
                var _level = 2; // error level on production
                function slc(p) {
                    return Array.prototype.slice.call(p);
                }

                function Logger(prfxs, sfxs) {
                    prfxs = prfxs || [];
                    sfxs = sfxs || [];
                    var exports = {};
                    var pref = prfxs.join("/");
                    var suff = sfxs.join(": ");

                    function tagLog(tag, color, params) {
                        params = [suff].concat(params);
                        var idd = params.map(function(item) {
                            switch (typeof item) {
                                case "string":
                                    return "%s";
                                case "boolean":
                                    return "%o";
                                case "number":
                                    return (0 ^ item) === item ? "%i" : "%f";
                                default:
                                    return "%O";
                            }
                        });
                        var isArray = Array.isArray(color);
                        var tagFormat = "background-color:" + (isArray ? color[0] : color) + "; color:white";
                        var textFormat = isArray ? "color: " + color[1] : "";
                        window.console.log.apply(console, [pref + ": %c #%s %c " + idd.join(" "), tagFormat, tag, textFormat].concat(params));
                    }

                    function trace() {
                        if (_level >= 6) {
                            tagLog("trace", ["#999", "#aaa"], slc(arguments));
                        }
                    }

                    function debug() {
                        if (_level >= 5) tagLog("debug", ["#0e7c1c", "#117d16"], slc(arguments));
                    }

                    function warn() {
                        if (_level >= 4) tagLog("warn", ["#ffcd84", "#ff5b0c"], slc(arguments));
                    }

                    function error() {
                        if (_level >= 3) tagLog("error", ["#f31", "#f00"], slc(arguments));
                    }

                    function info() {
                        if (_level >= 2) tagLog("info", ["#4454FF", "#4454FF"], slc(arguments));
                    }

                    function fatal() {
                        if (_level >= 1) tagLog("fatal", "#7c002a", slc(arguments));
                    }
                    exports.fork = function(suffix) {
                        return new Logger(prfxs, sfxs.concat([suffix]));
                    };
                    exports.tagLog = tagLog;
                    exports.trace = trace;
                    exports.debug = debug;
                    exports.warn = warn;
                    exports.error = error;
                    exports.info = info;
                    exports.fatal = fatal;
                    return exports;
                }
                var globalLogger = new Logger([_prefix]);
                globalLogger.setLevel = function(level) {
                    _level = level;
                };
                globalLogger.setPrefix = function(prefix) {
                    _prefix = prefix;
                };
                return globalLogger;
            }("Game");
            log.setPrefix("Basketball");
            window._abGoldenBall = !XS.is.slow; //false // FIXME
            //unsloppify: assignment to global object 'window'
            window.game = function() {
                var _playerOnlineOpts, _tournamentStatusOpts; // Shared
                var contextUpdateTemplates = {
                    player_online: [function(context) {
                        return {
                            name: 'player_online-1',
                            image: ref_i_web_fbinstant_msg_notyou_png,
                            x: 268,
                            y: 23,
                            w: 187,
                            h: 187,
                            radius: 17,
                            msg: Host.Localize.Translate('{name} is playing Basketball! Join the tournament! ðð', context, 'Stared playing in multi user context upsell text').toString()
                        };
                    }, function(context) {
                        return {
                            name: 'player_online-2',
                            image: ref_i_web_fbinstant_msg_beat_png,
                            x: 168,
                            y: 32,
                            w: 164,
                            h: 164,
                            radius: 17,
                            msg: Host.Localize.Translate('{name} is waiting for you to throw! ððð', context, 'Stared playing in multi user context upsell text').toString()
                        };
                    }, function(context) {
                        return {
                            name: 'player_online-3',
                            image: ref_i_web_fbinstant_msg_unstoppable_png,
                            x: 268,
                            y: 23,
                            w: 187,
                            h: 187,
                            radius: 22,
                            msg: Host.Localize.Translate('Nobody can beat {name} at Basketballð±ð', context, 'Stared playing in multi user context upsell text').toString()
                        };
                    }],
                    tournament_status: [function(context) {
                        return {
                            name: 'tournament_status-1',
                            image: ref_i_web_fbinstant_msg_winalltime_png,
                            x: 99,
                            y: 18,
                            w: 177,
                            h: 177,
                            radius: 22,
                            msg: Host.Localize.Translate('{name} is in the lead! ðð±', context, 'Stared playing in multi user context upsell text').toString()
                        };
                    }, function(context) {
                        return {
                            name: 'tournament_status-2',
                            image: ref_i_web_fbinstant_msg_cantbeatme_png,
                            x: 178,
                            y: 18,
                            w: 124,
                            h: 124,
                            radius: 22,
                            msg: Host.Localize.Translate('{name} is winning now! ðâ', context, 'Stared playing in multi user context upsell text').toString()
                        };
                    }, function(context) {
                        return {
                            name: 'tournament_status-3',
                            image: ref_i_web_fbinstant_msg_stopwinning_png,
                            x: 175,
                            y: 57,
                            w: 150,
                            h: 150,
                            radius: 22,
                            msg: Host.Localize.Translate('{name} just beat your highscore!! ðð', context, 'Stared playing in multi user context upsell text').toString()
                        };
                    }]
                };
                var playerOnlineOpts = (_playerOnlineOpts = {
                    action: 'CUSTOM',
                    cta: 'Play', //image: imgUrl,
                    //text: message,
                    data: {},
                    strategy: 'LAST',
                    notification: 'PUSH',
                    template: 'got_new_best_score_timeframe'
                }, _playerOnlineOpts["data"] = {
                    __logEvent: {
                        id: 'load_from_share',
                        data: {
                            method: 'updateAsync',
                            type: 'player_online_message',
                            user_intent: '',
                            template: 'template'
                        }
                    }
                }, _playerOnlineOpts);
                var tournamentStatusOpts = (_tournamentStatusOpts = {
                    action: 'CUSTOM',
                    cta: 'Play', //image: imgUrl,
                    //text: message,
                    data: {},
                    strategy: 'IMMEDIATE_CLEAR',
                    notification: 'PUSH',
                    template: 'got_new_best_score_timeframe'
                }, _tournamentStatusOpts["data"] = {
                    __logEvent: {
                        id: 'load_from_share',
                        data: {
                            method: 'updateAsync',
                            type: 'tournament_status_message',
                            user_intent: '',
                            template: 'template'
                        }
                    }
                }, _tournamentStatusOpts);

                function postTemplate(template, opts, callback) {
                    var t = template;

                    function handleUpdateAsyncSuccess() {
                        if (typeof callback === 'function') callback();
                    }

                    function handleUpdateAsyncError(err) {
                        window.onerror && window.onerror('postTemplate > updateAsync:' + err.message, err);
                        if (typeof callback === 'function') callback(err);
                    }

                    function handlePost(err, imageOpts) {
                        if (err) {
                            window.onerror && window.onerror('composeImage > preloadImages: ' + (err.message || err.toString()), err);
                            return;
                        }
                        opts.image = XS.composeImage(imageOpts);
                        var __logEvent = opts.data.__logEvent;
                        opts.template = t.name; // iOS does not support LAST
                        if (XS.is.iOS && opts.strategy == 'LAST' && FBInstant.context.getType() != 'SOLO') {
                            opts.strategy = 'IMMEDIATE';
                        }
                        __logEvent.data.template = t.name;
                        XS.track.send(__logEvent.data.type, __logEvent.data);
                        return FBInstant.updateAsync(opts).then(handleUpdateAsyncSuccess).catch(handleUpdateAsyncError);
                    }
                    if (typeof FBInstant === 'undefined' || !FBInstant.player || !FBInstant.player.getPhoto || !FBInstant.player.getPhoto()) return;
                    var imageOpts = {
                        width: 500,
                        height: 260,
                        return: 'url',
                        parts: [{
                            image: t.image
                        }, {
                            image: FBInstant.player.getPhoto(),
                            x: t.x,
                            y: t.y,
                            w: t.w,
                            h: t.h,
                            clip: 'roundedrect',
                            radius: t.radius
                        }]
                    };
                    opts.text = t.msg || '';
                    XS.composeImage.preloadImages(imageOpts, handlePost);
                } // postPlayerOnlineMessage
                function postPlayerOnlineMessage(callback) {
                    var templates = contextUpdateTemplates.player_online;
                    var template = templates[Math.floor(Math.random() * templates.length)]({
                        name: FBInstant.player.getName()
                    });
                    postTemplate(template, playerOnlineOpts, callback);
                } // postTournamentStatusMessage
                function postTournamentStatusMessage(callback) {
                    var templates = contextUpdateTemplates.tournament_status;
                    var template = templates[Math.floor(Math.random() * templates.length)]({
                        name: FBInstant.player.getName()
                    });
                    postTemplate(template, tournamentStatusOpts, callback);
                }
                XS.on('social:new_highscore', postTournamentStatusMessage);
                XS.on('FBContextChange', function() {
                    postPlayerOnlineMessage();
                }); // used for analytics
                var __gameMode = "practice";
                var __coinsThisGame = 0;
                var __levelId = "first_throw";
                var __powerUpSelectorSwitched = false; // Make sure we send the right events to the right places 
                // if (XS.track.providers && XS.track.providers.ga) {
                // 	XS.track.providers.ga.whitelist.push.apply(XS.track.providers.ga.whitelist, ["game_loaded", "game_play_start", "game_continue_used", "game_end", "ad_rewarded_show", "ad_mandatory_show", "cross_promotion_success"]);
                // }
                //if( XS.track.providers && XS.track.providers.fbi ) {
                //	XS.track.providers.fbi.whitelist.push.apply(XS.track.providers.fbi.whitelist, ["game_loaded", "game_play_start", "game_end"])
                //}
                //var rewardVideo = null;
                var isPlayingInTournament = false; // Basketball version number for analytics segmentation
                if (XS.is.facebookInstant) {
                    XS.track.customEvent('BasketballVersionAB', 1, {
                        version: Config.version
                    });
                } // Load remote config - TODO: Is this necessary to handle in the game anymore?
                if (!XS.is.facebookInstant) {
                    XS.loadConfig(Config.id);
                } // TODO: Isn't this handled with track now?
                var plays = 0;

                function trackPlay() {
                    plays++;
                    gax('send', 'event', Config.id, 'Games Played', plays);
                }

                function numberWithCommas(x) {
                    return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, " ");
                }
                /**
                 * scoreBucket sorts scores into range buckets for analytics
                 */
                function scoreBucket(score) {
                    if (score == 0) return 0;
                    else if (score >= 1 && score <= 5) return 1;
                    else if (score >= 6 && score <= 14) return 6;
                    else if (score >= 15 && score <= 30) return 15;
                    else if (score >= 31 && score <= 45) return 31;
                    else if (score >= 46 && score <= 100) return 46;
                    else return 100;
                }

                function getTrackData(gameEnd) {
                    var data = {
                        game_mode: __gameMode
                    };
                    if (gameEnd) {
                        data.range_score = scoreBucket(basketball.getTotalPoints());
                        data.coins = __coinsThisGame;
                        data.score = basketball.getTotalPoints();
                        data.shots = basketball.getTotalHoops();
                        data.max_score = basketball.getBestScoreInSession();
                        data.total_game_session = basketball.getTotalGamesPlayed(); // This changes the level id after the first game
                        if (__levelId == 'first_throw') __levelId = '00';
                    }
                    if (XS.is.facebookInstant && Social.Instant) { //if( __gameMode == 'practice' ) {
                        //	data.active_multiplayer = TODO: Add for realtime multiplayer!
                        //}
                        data.context_type = FBInstant.context.getType();
                    }
                    return data;
                }
                var data = { //muteSounds:Host.Preferences.QuickBool("sound.v1"),
                    //muteMusic:Host.Preferences.QuickBool("music.v1"),
                    highscore: Host.Preferences.QuickInt("highscore.v1"),
                    ballcount: Host.Preferences.QuickInt("ballcount.v2"),
                    hideTutorial: Host.Preferences.QuickBool("tutorial.v5"),
                    ballSkinId: Host.Preferences.QuickString("ballskin.v2"),
                    coins: Host.Preferences.QuickInt("coins.v2"),
                    unlocked: Host.Preferences.QuickString("unlocked.v1"),
                    spawnTime: Host.Preferences.QuickFloat("spawnTime.v3"),
                    spawnCoin: Host.Preferences.QuickInt("spawnCoin.v3")
                };
                if (_abGoldenBall) {
                    XS.data.addIntWithLocalKey('coins', 'coins.v3', {
                        default: 0,
                        remote: true,
                        merge: XS.data.merge.higherIsBetter
                    });
                    XS.data.addBool('coinsMigrated', {
                        default: false,
                        remote: true,
                        merge: XS.data.merge.trueIsBetter
                    });
                    XS.data.addIntWithLocalKey('highscore', 'highscore.v1', {
                        remote: true,
                        default: 0,
                        merge: XS.data.merge.higherIsBetter
                    });
                    XS.data.addIntWithLocalKey('ballcount', 'ballcount.v2', {
                        remote: true,
                        default: 0,
                        merge: XS.data.merge.higherIsBetter
                    }); //XS.d_ata.addIntWithLocalKey( 'tutorial', 'tutorial.v6', { remote: true, default: 0, merge: XS.data.merge.trueIsBetter } )
                    XS.data.addObject('powerUps', {
                        default: {},
                        remote: true,
                        merge: XS.data.merge.recursive({
                            number: XS.data.merge.higherIsBetter
                        })
                    });
                    XS.data.addObject('powerUpTips', {
                        default: {},
                        remote: true,
                        merge: XS.data.merge.recursive({
                            boolean: XS.data.merge.trueIsBetter
                        })
                    });
                    XS.data.addStringWithLocalKey('unlocked', 'unlocked.v1', {
                        default: "{}",
                        remote: true,
                        merge: XS.data.merge.longerIsBetter
                    });
                    XS.data.addInt('tutorialGames', {
                        default: 0,
                        remote: true,
                        merge: XS.data.merge.higherIsBetter
                    });
                    XS.data.addInt('selectedDrink', {
                        default: 0
                    });
                    XS.data.addInt('selectedBall', {
                        default: 0
                    }); //XS.d_ata.addInt( 'goldBalls', { default: 0, remote: true, merge: XS.data.merge.higherIsBetter } ) 
                    //XS.d_ata.addInt( 'silverBalls', { default: 0, remote: true, merge: XS.data.merge.higherIsBetter } ) 
                    //XS.d_ata.addInt( 'bronzeBalls', { default: 0, remote: true, merge: XS.data.merge.higherIsBetter } ) 
                    //XS.d_ata.addInt( 'doOverTokens', { default: 0, remote: true, merge: XS.data.merge.higherIsBetter } ) 
                    //XS.d_ata.addInt( 'drinkTime', { default: 0, remote: true, merge: XS.data.merge.higherIsBetter } ) 
                    //XS.d_ata.addInt( 'drinkAim', { default: 0, remote: true, merge: XS.data.merge.higherIsBetter } ) 
                    //XS.d_ata.addInt( 'drinkCoin', { default: 0, remote: true, merge: XS.data.merge.higherIsBetter } ) 
                    //XS.d_ata.addInt( 'drinkPoints', { default: 0, remote: true, merge: XS.data.merge.higherIsBetter } ) 
                    //XS.d_ata.addInt( 'drinkRim', { default: 0, remote: true, merge: XS.data.merge.higherIsBetter } ) 
                    //XS.d_ata.addInt( 'drinkSpeed', { default: 0, remote: true, merge: XS.data.merge.higherIsBetter } ) 
                    //XS.d_ata.addBool( 'tutorialBallGold', { default: false, remote: true, merge: XS.data.merge.trueIsBetter } )
                    //XS.d_ata.addBool( 'tutorialBallSilver', { default: false, remote: true, merge: XS.data.merge.trueIsBetter } )
                    //XS.d_ata.addBool( 'tutorialBallBronze', { default: false, remote: true, merge: XS.data.merge.trueIsBetter } )
                    //XS.d_ata.addBool( 'tutorialDrinkTime', { default: false, remote: true, merge: XS.data.merge.trueIsBetter } )
                    //XS.d_ata.addBool( 'tutorialDrinkAim', { default: false, remote: true, merge: XS.data.merge.trueIsBetter } )
                    //XS.d_ata.addBool( 'tutorialDrinkCoin', { default: false, remote: true, merge: XS.data.merge.trueIsBetter } )
                    //XS.d_ata.addBool( 'tutorialDrinkPoints', { default: false, remote: true, merge: XS.data.merge.trueIsBetter } )
                    //XS.d_ata.addBool( 'tutorialDrinkRim', { default: false, remote: true, merge: XS.data.merge.trueIsBetter } )
                    //XS.d_ata.addBool( 'tutorialDrinkSpeed', { default: false, remote: true, merge: XS.data.merge.trueIsBetter } )
                    // Migrate old coins to new ones (so we can roll back the version and not wreck the economy)
                    if (!XS.data.coinsMigrated) {
                        var oldCoins = data.coins.get();
                        if (XS.data.coins < oldCoins) {
                            XS.data.coins = oldCoins;
                            XS.data.coinsMigrated = true;
                        }
                    }
                } // Introduce the powerups in this order
                XS.abtest.setup(function() {
                    XS.abtest.when("ab_prize_pacing_2", "more", function() {});
                });
                /**
                 * Power Up Definitions
                 */
                var powerUps;
                if (_abGoldenBall) {
                    powerUps = {
                        ballGold: {
                            image: fetch_i_g_ball_golden_svg(),
                            name: Host.Localize.Translate("Gold Ball", {}, "Special basketball that gives a big score bonus when used"),
                            namePlural: Host.Localize.Translate("Gold Balls", {}, "Special basketballs that gives a big score bonus when used"),
                            desc: Host.Localize.Translate("3x score for one shot", {}, "Explanation for gold ball"), //property: 'goldBalls',
                            scoreMultiplier: 3,
                            bonusName: Host.Localize.Translate("Gold Bonus!", {}, "A bonus applied when scoring with a golden ball"),
                            shots: 1,
                            ballSkin: {
                                id: "golden-bonus",
                                coinCost: 0,
                                ballGraphics: ref_i_g_ball_golden_svg,
                                ballShine: ref_i_g_ballshine_svg, // FIXME: Make proper ballshine
                                name: Host.Localize.Translate("Gold Ball", {}, "Nickname of a basketball that is golden")
                            }, //tutorialProperty: 'tutorialBallGold',
                            tutorialTip: Host.Localize.Translate("Gold basketballs give you\n3x score for one shot!\n\nTap it before your shot to use it!", {}, "Tutorial tip for special basketball"),
                            awardPerAd: 1
                        },
                        ballSilver: {
                            image: fetch_i_g_ball_silver_svg(),
                            name: Host.Localize.Translate("Silver Ball", {}, "Special basketball that gives a medium score bonus when used"),
                            namePlural: Host.Localize.Translate("Silver Balls", {}, "Special basketballs that gives a medium score bonus when used"),
                            desc: Host.Localize.Translate("2x score for one shot", {}, "Explanation for silver ball"), //property: 'silverBalls',
                            scoreMultiplier: 2,
                            bonusName: Host.Localize.Translate("Silver Bonus!", {}, "A bonus applied when scoring with a silver ball"),
                            shots: 1,
                            ballSkin: {
                                id: "silver-bonus",
                                coinCost: 0,
                                ballGraphics: ref_i_g_ball_silver_svg,
                                ballShine: ref_i_g_ballshine_svg, // FIXME: Make proper ballshine
                                name: Host.Localize.Translate("Silver Ball", {}, "Nickname of a basketball that is silver colored")
                            }, //tutorialProperty: 'tutorialBallSilver',
                            tutorialTip: Host.Localize.Translate("Silver basketballs give you\n2x score for one shot!\n\nTap it before your shot to use it!", {}, "Tutorial tip for special basketball"),
                            awardPerAd: 2
                        },
                        ballBronze: {
                            image: fetch_i_g_ball_bronze_svg(),
                            name: Host.Localize.Translate("Bronze Ball", {}, "Special basketball that gives a small score bonus when used"),
                            namePlural: Host.Localize.Translate("Bronze Balls", {}, "Special basketballs that gives a small score bonus when used"),
                            desc: Host.Localize.Translate("1.5x score for one shot", {}, "Explanation for bronze ball"), //property: 'bronzeBalls',
                            scoreMultiplier: 1.5,
                            bonusName: Host.Localize.Translate("Bronze Bonus!", {}, "A bonus applied when scoring with a bronze ball"),
                            shots: 1,
                            ballSkin: {
                                id: "bronze-bonus",
                                coinCost: 0,
                                ballGraphics: ref_i_g_ball_bronze_svg,
                                ballShine: ref_i_g_ballshine_svg, // FIXME: Make proper ballshine
                                name: Host.Localize.Translate("Bronze Ball", {}, "Nickname of a basketball that is bronze colored")
                            }, //tutorialProperty: 'tutorialBallBronze',
                            tutorialTip: Host.Localize.Translate("Bronze basketballs give you\n+50% score for one shot!\n\nTap it before your shot to use it!", {}, "Tutorial tip for special basketball"),
                            awardPerAd: 3
                        },
                        drinkAim: {
                            image: fetch_i_g_drink_aim_svg(),
                            name: Host.Localize.Translate("Aim Booster", {}, "Name of powerup in the form of a sports drink"),
                            namePlural: Host.Localize.Translate("Aim Boosters", {}, "Name of powerup in the form of a sports drink"),
                            desc: Host.Localize.Translate("Slows The Basket", {}, "Explanation for powerup sports drink"),
                            descLong: Host.Localize.Translate("Slows a moving hoop for 20 seconds", {}, "Tutorial tool tip about a basketball rim"), //property: 'drinkAim',
                            speedMultiplier: 0.4,
                            duration: 20,
                            barColor: 0xeee12e, //tutorialProperty: 'tutorialDrinkAim',
                            tutorialTip: Host.Localize.Translate("The Aim Boost slows down the movement\nof the hoop for 20 seconds!\n\nTap it to activate it!", {}, "Tutorial tip for power up shaped like a sports drink"),
                            awardPerAd: 1
                        },
                        drinkCoin: {
                            image: fetch_i_g_drink_coin_svg(),
                            name: Host.Localize.Translate("Coin Booster", {}, "Name of powerup in the form of a sports drink"),
                            namePlural: Host.Localize.Translate("Coin Boosters", {}, "Name of powerup in the form of a sports drink"),
                            desc: Host.Localize.Translate("Earn More Coins", {}, "Explanation for powerup sports drink"),
                            descLong: Host.Localize.Translate("3x coin bonus for 60 seconds", {}, "Tutorial tool tip about a basketball rim"), //property: 'drinkCoin',
                            coinMultiplier: 3,
                            duration: 60, //barColor: 0x69d4fd,
                            barColor: 0x3796d8, //tutorialProperty: 'tutorialDrinkCoin',
                            tutorialTip: Host.Localize.Translate("The Coin Boost gives you 3x coins\nfor 60 seconds!\n\nTap it to activate it!", {}, "Tutorial tip for power up shaped like a sports drink"),
                            awardPerAd: 1
                        },
                        drinkPoints: {
                            image: fetch_i_g_drink_points_svg(),
                            name: Host.Localize.Translate("Score Booster", {}, "Name of powerup in the form of a sports drink"),
                            namePlural: Host.Localize.Translate("Score Boosters", {}, "Name of powerup in the form of a sports drink"),
                            desc: Host.Localize.Translate("Get More Points", {}, "Explanation for powerup sports drink"),
                            descLong: Host.Localize.Translate("+50% score bonus for 20 seconds", {}, "Tutorial tool tip about a basketball rim"), //property: 'drinkPoints',
                            scoreMultiplier: 1.5, // TODO: Tune this
                            duration: 20,
                            barColor: 0xbc5ed9, //tutorialProperty: 'tutorialDrinkPoints',
                            tutorialTip: Host.Localize.Translate("The Points Boost gives you +50% points\nfor 20 seconds!\n\nTap it to activate it!", {}, "Tutorial tip for power up shaped like a sports drink"),
                            awardPerAd: 1
                        },
                        drinkRim: {
                            image: fetch_i_g_drink_rim_svg(),
                            name: Host.Localize.Translate("Focus Booster", {}, "Name of powerup in the form of a sports drink"),
                            namePlural: Host.Localize.Translate("Focus Boosters", {}, "Name of powerup in the form of a sports drink"),
                            desc: Host.Localize.Translate("Easier To Hit", {}, "Explanation for powerup sports drink"),
                            descLong: Host.Localize.Translate("Expands the hoop for 20 seconds", {}, "Tutorial tool tip about a basketball rim"), //property: 'drinkRim',
                            activate: function activate() {
                                basketball.hoop.setRimScale(1.12, true);
                            },
                            deactivate: function deactivate() {
                                basketball.hoop.setRimScale(1, true);
                            },
                            duration: 20, //barColor: 0xc8e87b,
                            //barColor: 0x95cf3d,
                            barColor: 0x00ff00, //tutorialProperty: 'tutorialDrinkRim',
                            tutorialTip: Host.Localize.Translate("The Hoop Boost makes the hoop\n bigger for 20 seconds!\n\nTap it to activate it!", {}, "Tutorial tip for power up shaped like a sports drink"),
                            awardPerAd: 1
                        } //drinkSpeed: {
                        //	name: Host.Localize.Translate("Speed Adjuster",{},"Name of powerup in the form of a sports drink"),
                        //	desc: Host.Localize.Translate("?????", {}, "Explanation for powerup sports drink"),
                        //},
                        //drinkTime: {
                        //	name: Host.Localize.Translate("Free Throw Drink",{},"Name of powerup in the form of a sports drink"),
                        //	desc: Host.Localize.Translate("All You Can Shoot!", {}, "Explanation for powerup sports drink"),
                        //},
                    };
                    DI.bind(DIKeys.powerUps).toConstantValue(powerUps); // TODO: add initialization directly in di.config
                    for ( //unsloppify: is this variable declared anywhere?
                        n in powerUps) {
                        powerUps[n].id = n;
                        XS.data.powerUps[n] = XS.data.powerUps[n] || 0;
                        XS.data.powerUpTips[n] = XS.data.powerUpTips[n] || false;
                    }
                } //data.highscore.set(0)
                if (data.spawnTime.get() == 0 && data.spawnCoin.get() == 0) {
                    data.spawnCoin.set(5);
                }
                var sounds = {
                    hits: [XS.Sound.get(ref_i_s_hit01_mp3, 1.2), XS.Sound.get(ref_i_s_hit02_mp3, 1.2), XS.Sound.get(ref_i_s_hit03_mp3, 1.2), XS.Sound.get(ref_i_s_hit04_mp3, 1.2), XS.Sound.get(ref_i_s_hit05_mp3, 1.2), XS.Sound.get(ref_i_s_hit06_mp3, 1.2), XS.Sound.get(ref_i_s_hit07_mp3, 1.2)],
                    throws: [XS.Sound.get(ref_i_s_throw01_mp3, 1.2), XS.Sound.get(ref_i_s_throw02_mp3, 1.2)],
                    netDirect: XS.Sound.get(ref_i_s_netdirect_mp3, 1),
                    net: XS.Sound.get(ref_i_s_net_mp3, 1),
                    awww: [XS.Sound.get(ref_i_s_awww1_mp3, 1.0), XS.Sound.get(ref_i_s_awww2_mp3, 1.0)],
                    clap: [XS.Sound.get(ref_i_s_clap1_mp3, 1.0), XS.Sound.get(ref_i_s_clap2_mp3, 1.0), XS.Sound.get(ref_i_s_clap3_mp3, 1.0), XS.Sound.get(ref_i_s_clap4_mp3, 1.0), XS.Sound.get(ref_i_s_clap5_mp3, 1.0)],
                    powerups: {
                        on_ballGold: XS.Sound.get(ref_i_s_powerup_gold_ball_activate_mp3, 1.0),
                        on_ballSilver: XS.Sound.get(ref_i_s_powerup_silver_ball_activate_mp3, 1.0),
                        on_ballBronze: XS.Sound.get(ref_i_s_powerup_bronze_ball_activate_mp3, 1.0),
                        on_drinkAim: XS.Sound.get(ref_i_s_powerup_aim_boost_on_mp3, 1.0),
                        on_drinkCoin: XS.Sound.get(ref_i_s_powerup_coin_boost_on_mp3, 1.0),
                        on_drinkPoints: XS.Sound.get(ref_i_s_powerup_score_boost_on_mp3, 1.0),
                        on_drinkRim: XS.Sound.get(ref_i_s_powerup_focus_boost_on_mp3, 1.0),
                        off_drinkAim: XS.Sound.get(ref_i_s_powerup_aim_boost_off_mp3, 1.0),
                        off_drinkCoin: XS.Sound.get(ref_i_s_powerup_coin_boost_off_mp3, 1.0),
                        off_drinkPoints: XS.Sound.get(ref_i_s_powerup_score_boost_off_mp3, 1.0),
                        off_drinkRim: XS.Sound.get(ref_i_s_powerup_focus_boost_off_mp3, 1.0)
                    },
                    onPowerUp: function onPowerUp(id) {
                        var theSound = sounds.powerups["on_" + id];
                        theSound && theSound.play();
                    },
                    offPowerUp: function offPowerUp(id) {
                        var theSound = sounds.powerups["off_" + id];
                        theSound && theSound.play();
                    },
                    prize_claim: XS.Sound.get(ref_i_s_prize_claim_mp3, 1),
                    prize_won: XS.Sound.get(ref_i_s_prize_won_mp3, 1),
                    ding: XS.Sound.get(ref_i_s_ding_mp3, 1),
                    coinpickup: XS.Sound.get(ref_i_s_coinpickup_mp3, 1)
                };
                var gameMusic = XS.Music.get(ref_i_s_music_mp3, .7);
                XS.backgroundMusic = gameMusic;
                /*stage.background.gradient = {
                            		type:"radial",
                            		stops:[
                            			[0.000, '#a3dbda'],
                            			[1.000, '#a8dad9']
                            		],
                            		multiplier:3,
                            		verticalOffset:0
                            	}*/
                stage.background.disabled = true;
                var ballSkins = [{
                    id: "default",
                    coinCost: 0,
                    ballGraphics: ref_i_g_ball_svg,
                    ballShine: ref_i_g_ballshine_svg,
                    name: Host.Localize.Translate("Classic", {}, "Nickname referring to a basketball that looks like an ordinary basketball (as opposed to looking like bowling balls, etc)")
                }, {
                    id: "tennis",
                    coinCost: 5,
                    ballGraphics: ref_i_g_skin_tennis_png,
                    ballShine: ref_i_g_skin_tennis_shine_png,
                    name: Host.Localize.Translate("Fuzzy", {}, "Nickname of a tennis ball - fuzzy referring to the yellow fuzz on a tennis ball")
                }, {
                    id: "bowling",
                    coinCost: 10,
                    ballGraphics: ref_i_g_skin_bowling_png,
                    ballShine: ref_i_g_skin_bowling_shine_png,
                    name: Host.Localize.Translate("Strike", {}, "Nickname of a bowling ball - strike refers to a strike in bowling")
                }, {
                    id: "mellon",
                    coinCost: 20,
                    ballGraphics: ref_i_g_skin_mellon_png,
                    ballShine: ref_i_g_skin_mellon_shine_png,
                    name: Host.Localize.Translate("Juicy", {}, "Nickname of a basketball that looks like a watermelon")
                }, {
                    id: "beach",
                    coinCost: 20,
                    ballGraphics: ref_i_g_skin_beach_png,
                    ballShine: ref_i_g_skin_beach_shine_png,
                    name: Host.Localize.Translate("Sunny", {}, "Nickname of a basketball that looks like a beach ball")
                }, {
                    id: "foodball",
                    coinCost: 50,
                    ballGraphics: ref_i_g_skin_foodball_png,
                    ballShine: ref_i_g_skin_foodball_shine_png,
                    name: Host.Localize.Translate("Footie", {}, "Nickname of a basketball that looks like a soccer ball (known as football in most of the world)")
                }, {
                    id: "8ball",
                    coinCost: 50,
                    ballGraphics: ref_i_g_skin_8ball_png,
                    ballShine: ref_i_g_skin_8ball_shine_png,
                    name: Host.Localize.Translate("Eight", {}, "Nickname of a basketball that looks like an 8 ball from pool")
                }, {
                    id: "basketball",
                    coinCost: 100,
                    ballGraphics: ref_i_g_skin_basketball_png,
                    ballShine: ref_i_g_skin_basketball_shine_png,
                    name: Host.Localize.Translate("Modern", {}, "Nickname of a basketball that looks like an updated version of the classic")
                }, {
                    id: "eye",
                    coinCost: 300,
                    ballGraphics: ref_i_g_skin_eye_png,
                    ballShine: ref_i_g_skin_eye_shine_png,
                    name: Host.Localize.Translate("Blinky", {}, "Nickname of a basketball that looks like an eye")
                }, {
                    id: "face",
                    coinCost: 500,
                    ballGraphics: ref_i_g_skin_face_png,
                    ballShine: ref_i_g_skin_face_shine_png,
                    name: Host.Localize.Translate("Noggin", {}, "Nickname of a basketball that looks like a smiling white head")
                }];
                if (_abGoldenBall) { // In new gameplay we earn more coins, so things are more expensive
                    for (var i = 0; i < ballSkins.length; ++i) {
                        ballSkins[i].coinCost2 = ballSkins[i].coinCost * 10;
                    }
                } // Safely merge savestates
                function mergeStates(oldState, newState) {
                    var os = JSON.parse(oldState);
                    var ns = JSON.parse(newState);
                    var newState = {};
                    for (var x in os) {
                        newState[x] = os[x];
                    }
                    for (var x in ns) {
                        newState[x] = ns[x];
                    }
                    return JSON.stringify(newState);
                } // True if a specific ball skin has been unlocked
                function hasBallOffset(offset) { //Version for video recording
                    //return true
                    var ballskin = ballSkins[offset];
                    if (ballskin.coinCost == 0) return true;
                    var state = JSON.parse(data.unlocked.get() || "{}");
                    if (state[ballskin.id] == true) return true;
                    return false;
                }
                Modal.ModalOverlayContent.expand(function() {
                    Modal.ModalOverlayContent.call(this);
                    this.addHeadline(Host.Localize.Translate("Loading", {}, "Text showing while loading an reward advertisement the user has to wait for"));
                    this.blurClose = false;
                    this.innerHeight = 200;
                });
                Modal.ModalOverlayContent.expand(function() {
                    Modal.ModalOverlayContent.call(this);
                    this.addHeadline(Host.Localize.Translate("No Ads Ready", {}, "Headline for no reward advertisement available"));
                    this.addLead(Host.Localize.Translate("Please try again later", {}, "Headline for no reward advertisement available"));
                    this.blurClose = false;
                    this.innerHeight = 230;
                }); //	Modal.show(new FailedToLoadModal())
                //	Modal.show(new ShowLoadingModal())
                var TryAgainModal = Modal.ModalOverlayContent.expand(function() {
                    Modal.ModalOverlayContent.call(this);
                    this.addHeadline([Host.Localize.Translate("Try again", {}, "Shown when a user fails to get 10 points in a game"), Host.Localize.Translate("Once more", {}, "Shown when a user fails to get 10 points in a game"), Host.Localize.Translate("Again", {}, "Shown when a user fails to get 10 points in a game"), Host.Localize.Translate("One more time", {}, "Shown when a user failes to get 10 points in a game")][Math.random() * 4 | 0]);
                    this.blurClose = true;
                    this.innerHeight = 200;
                });
                /**
                 * @class Ball
                 * The main basketball
                 */
                var Ball = Container.expand(function() {
                    var self = Container.call(this);
                    var sprite = new Sprite(fetch_i_g_ball_svg());
                    sprite.anchor.set(.5, .5);
                    self.addChild(sprite);
                    var shine = new Sprite(fetch_i_g_ballshine_svg());
                    shine.anchor.set(.5, .5);
                    self.addChild(shine);
                    var _powerUp = null;
                    var shockwave = new Sprite(fetch_i_g_s_shockwave_svg());
                    shockwave.anchor.set(0.5, 0.5);
                    shockwave.visible = false;
                    self.addChild(shockwave);
                    self.setPowerUp = function(powerUp) {
                        if (powerUp) {
                            _powerUp = powerUp;
                            self.setSkin(powerUp.ballSkin, true);
                            self.pulse();
                        } else {
                            _powerUp = null;
                            self.setSkin(currentSkin, true);
                        }
                    };
                    self.getPowerUp = function() {
                        return _powerUp;
                    };
                    /**
                     * Pulse the ball - call the callback at the biggest point
                     */
                    self.pulse = function(callback) {
                        new Tween(self.scale, {
                            x: 0.95,
                            y: 0.95
                        }, 0.05).call(function() {
                            shockwave.alpha = 0.7;
                            shockwave.scale.set(1);
                            shockwave.visible = true;
                            new Tween(shockwave.scale, {
                                x: 2.5,
                                y: 2.5
                            }, 1, Tween.easeout).call(function() {
                                shockwave.visible = false;
                            });
                            new Tween(shockwave, {
                                alpha: 0
                            }, 1);
                            new Tween(self.scale, {
                                x: 1.1,
                                y: 1.1
                            }, 0.1, Tween.easeinout).call(function() {
                                callback && callback();
                                new Tween(self.scale, {
                                    x: 1,
                                    y: 1
                                }, 0.3, Tween.easeinout);
                            });
                        });
                    };
                    var currentSkin = ballSkins[0];
                    self.setSkin = function(skin, force) {
                        if (currentSkin != skin || force) {
                            if (!force) {
                                currentSkin = skin;
                                if (_powerUp) {
                                    _powerUp.button && _powerUp.button.cancel();
                                    _powerUp = null;
                                }
                            } //unsloppify: block-level definition hoisted to true scope.
                            //unsloppify: this is potentially dangerous if function is called before!
                            //unsloppify: do verify this manually!
                            var update = function update() {
                                self.removeChild(sprite);
                                self.removeChild(shine);
                                var scale = 1; // self.parent.scale.x
                                var p = self;
                                while (p) {
                                    scale *= p.scale.x;
                                    p = p.parent;
                                    if (p == XS.stageContainer) break;
                                }
                                sprite = new Sprite(fetch(skin.ballGraphics), scale);
                                sprite.anchor.set(.5, .5);
                                shine = new Sprite(fetch(skin.ballShine), scale);
                                shine.anchor.set(.5, .5);
                                self.addChild(sprite);
                                self.addChild(shine);
                            };
                            var images = [skin.ballGraphics, skin.ballShine, update];
                            preload.apply(window, images);
                        }
                    };
                    self.setRotation = function(rotation) {
                        sprite.rotation = rotation;
                    };
                    self.getRotation = function() {
                        return sprite.rotation;
                    };
                    self.speedX = 0;
                    self.speedY = 0;
                    self.speedZ = 0;
                    self.z = 0;
                });
                var bitmapFontOffsets = {
                    "0": 0,
                    "1": 1,
                    "2": 2,
                    "3": 3,
                    "4": 4,
                    "5": 5,
                    "6": 6,
                    "7": 7,
                    "8": 8,
                    "9": 9,
                    "x": 10,
                    "+": 11,
                    ":": 12
                };
                var HoopBackground = Container.expand(function() {
                    var self = Container.call(this);
                    if (!XS.is.slow) {
                        var hoopshadow = new Sprite(fetch_i_g_hoopshadow_svg());
                        self.addChild(hoopshadow);
                        hoopshadow.x = -765;
                        hoopshadow.y = -540;
                    }
                    var plate = new Sprite(fetch_i_g_hoop_svg());
                    self.addChild(plate);
                    plate.anchor.set(.5, .5);
                    var score = new Text2("0", {
                        size: 400,
                        font: "'GillSans-Bold',Impact,'Arial Black',Tahoma",
                        fill: "#ffffff"
                    });
                    score.anchor.set(.5, 0);
                    score.y = -510;
                    self.addChild(score);
                    var multiplier = new Text2("", {
                        size: 270,
                        font: "'GillSans-Bold',Impact,'Arial Black',Tahoma",
                        fill: "#f7e16a"
                    });
                    multiplier.anchor.set(.5, 0);
                    multiplier.y = -30;
                    self.addChild(multiplier);
                    if (!XS.is.slow) {
                        var overlay = new Sprite(fetch_i_g_hoopoverlay_svg());
                        self.addChild(overlay);
                        overlay.anchor.set(.5, .5);
                    }

                    function moveComplicationTo(complication, y) {
                        complication.pictogram.y = y;
                        complication.label.y = y + 48;
                        return complication;
                    }

                    function toggleComplication(complication, visible) {
                        if (visible) {
                            self.addChild(complication.pictogram);
                            self.addChild(complication.label);
                        } else {
                            complication.pictogram.parent && complication.pictogram.parent.removeChild(complication.pictogram);
                            complication.label.parent && complication.label.parent.removeChild(complication.label);
                        }
                    }

                    function addScoreboardComplication(image, y) {
                        var pictogram = new Sprite(image);
                        pictogram.x = -700 + 15;
                        var label = new BitmapFont({
                            width: 48,
                            height: 94,
                            image: fetch_i_g_bitmapfont_svg(),
                            offsets: bitmapFontOffsets,
                            textAlign: 'left',
                            verticalAlign: 'center',
                            tint: 0xffffff,
                            scale: .8,
                            spaceWidthMultiplier: .4
                        });
                        label.x = pictogram.x + 115;
                        self.addChild(pictogram);
                        self.addChild(label);
                        return moveComplicationTo({
                            pictogram: pictogram,
                            label: label
                        }, y);
                    }
                    var hoopCountComplication = addScoreboardComplication(fetch_i_g_hooppictogram_svg(), 369);
                    var actionsLeftComplication = addScoreboardComplication(fetch_i_g_ballpictogram_svg(), 140);
                    var highscoreComplication = addScoreboardComplication(fetch_i_g_crownpictogram_svg(), 250);
                    var timeLeftComplication = addScoreboardComplication(fetch_i_g_clockpictogram_svg(), 360); //		timeLeftComplication.label.setText("00:00:00")
                    //		actionsLeftComplication.label.setText("119")
                    var currentMultiplier;
                    self.setMultiplier = function(value) {
                        if (currentMultiplier == value) return;
                        currentMultiplier = value;
                        if (value <= 1) {
                            multiplier.setText("");
                        } else {
                            multiplier.setText("x" + value);
                        }
                    };
                    self.setScore = function(newscore) {
                        score.visible = newscore != 0;
                        score.setText(newscore);
                        score.setText(newscore);
                    };
                    self.setScore(0);
                    var currentMode;
                    self.setHighscore = function(score, skipAnimation) {
                        if (currentMode != "singleplayer") return;
                        highscoreComplication.label.setText(numberWithCommas(score));
                    };
                    window._setHighscore = self.setHighscore.bind(self);
                    self.setHoopCount = function(balls) {
                        hoopCountComplication.label.setText(numberWithCommas(balls));
                    };
                    self.setActionsLeft = function(actions) {
                        actionsLeftComplication.label.setText(numberWithCommas(actions));
                    };
                    self.setScoreTarget = function(score) {
                        if (currentMode != "tournament") return;
                        highscoreComplication.label.setText(numberWithCommas(score));
                    };
                    self.setTimeLeft = function(timeleft) {
                        if (currentMode != "tournament") return;
                        timeLeftComplication.label.setText(numberWithCommas(timeleft));
                    };
                    self.setMode = function(mode) {
                        currentMode = mode;
                        if (mode == "tournament") {
                            toggleComplication(timeLeftComplication, true);
                            toggleComplication(actionsLeftComplication, true);
                            toggleComplication(hoopCountComplication, false);
                            moveComplicationTo(highscoreComplication, 250);
                        } else {
                            toggleComplication(timeLeftComplication, false);
                            toggleComplication(actionsLeftComplication, false);
                            toggleComplication(hoopCountComplication, true);
                            moveComplicationTo(highscoreComplication, 269);
                        }
                    };
                    self.setMode("singleplayer");
                });
                var Line = Sprite.expand(function(image) {
                    var self = this;
                    Sprite.call(self, image);
                    self.anchor.set(0, .5);
                });
                var lineCacheAssets = {};
                Line.prototype.getTexture = function(image, ratio) {
                    var path = image.path + ":" + ratio;
                    if (lineCacheAssets[path]) return lineCacheAssets[path];
                    var scaled_width = Math.ceil(image.width * ratio);
                    var scaled_height = Math.ceil(image.height * ratio);
                    var scaled = document.createElement("canvas");
                    var ctx = scaled.getContext('2d');
                    scaled.width = scaled_width;
                    scaled.height = scaled_height;
                    ctx.drawImage(image, 0, 0, scaled_width, scaled_height);
                    lineCacheAssets[path] = Texture.fromCanvas(scaled);
                    return lineCacheAssets[path];
                };
                var Hoop = Container.expand(function() {
                    var self = Container.call(this);
                    var net = new IKSet(self); // TODO-BRIAN
                    var _width = 2 * 270; //_width *= 1.2
                    var layer1 = [net.getNode(-_width / 2, 0), net.getNode(-_width / 4, 0), //net.getNode(0,0),
                        net.getNode(_width / 4, 0), net.getNode(_width / 2, 0)
                    ];
                    for (var a = 0; a < layer1.length; a++) {
                        layer1[a].fixed = true;
                    }
                    var layer2 = [net.getNode(-270, 100), net.getNode(-145, 100), //net.getNode(0,100),
                        net.getNode(145, 100), net.getNode(270, 100)
                    ];
                    for (var a = 0; a < layer1.length; a++) {
                        net.getLine(layer1[a], layer2[a], 50, a == 0 || a == layer1.length - 1 ? 15 : 8);
                    }
                    var layer3 = [net.getNode(-270, 150), net.getNode(-145, 150), net.getNode(0, 150), net.getNode(145, 150), net.getNode(270, 150)];
                    net.getLine(layer2[0], layer3[0], 50, 15);
                    net.getLine(layer2[3], layer3[4], 50, 15);
                    net.getLine(layer2[0], layer3[1], 40, 8);
                    net.getLine(layer2[1], layer3[1], 60, 8);
                    net.getLine(layer2[1], layer3[2], 110, 8);
                    net.getLine(layer2[2], layer3[2], 110, 8);
                    net.getLine(layer2[2], layer3[3], 60, 8);
                    net.getLine(layer2[3], layer3[3], 40, 8);
                    net.getLine(layer3[0], layer3[1], 40, 8);
                    net.getLine(layer3[3], layer3[4], 40, 8);
                    var layer4 = [net.getNode(-270, 200), net.getNode(-145, 200), net.getNode(145, 200), net.getNode(270, 200)];
                    net.getLine(layer3[0], layer4[0], 60, 15);
                    net.getLine(layer3[4], layer4[3], 60, 15);
                    net.getLine(layer3[1], layer4[1], 80, 8);
                    net.getLine(layer3[2], layer4[1], 100, 8);
                    net.getLine(layer3[2], layer4[2], 100, 8);
                    net.getLine(layer3[3], layer4[2], 80, 8);
                    net.getLine(layer4[0], layer4[1], 100, 8);
                    net.getLine(layer4[2], layer4[3], 100, 8);
                    var layer5 = [net.getNode(-270, 250), net.getNode(-145, 250), net.getNode(0, 250), net.getNode(145, 250), net.getNode(270, 250)];
                    net.getLine(layer4[0], layer5[0], 100, 15);
                    net.getLine(layer4[3], layer5[4], 100, 15);
                    net.getLine(layer4[0], layer5[1], 70, 8);
                    net.getLine(layer4[1], layer5[2], 100, 8);
                    net.getLine(layer4[2], layer5[2], 100, 8);
                    net.getLine(layer4[3], layer5[3], 70, 8);
                    net.getLine(layer5[0], layer5[1], 100, 8);
                    net.getLine(layer5[3], layer5[4], 100, 8);
                    net.getLine(layer5[1], layer5[2], 100, 8);
                    net.getLine(layer5[2], layer5[3], 100, 8);
                    var layer6 = [net.getNode(0, 300)];
                    net.getLine(layer5[1], layer6[0], 90, 8);
                    net.getLine(layer5[3], layer6[0], 90, 8);
                    var rim = new Sprite(fetch_i_g_rim_svg());
                    self.addChild(rim);
                    rim.anchor.set(.5, .5);
                    var pushMultiplier = .5;
                    self.push = function(x, y) {
                        for (var a = 0; a < layer2.length; a++) {
                            layer2[a].x += x * pushMultiplier;
                            layer2[a].y += y * pushMultiplier;
                        }
                        for (var a = 0; a < layer3.length; a++) {
                            layer3[a].x += x * pushMultiplier;
                            layer3[a].y += y * pushMultiplier;
                        }
                        for (var a = 0; a < layer4.length; a++) {
                            layer4[a].x += x * pushMultiplier;
                            layer4[a].y += y * pushMultiplier;
                        }
                        for (var a = 0; a < layer5.length; a++) {
                            layer5[a].x += x * pushMultiplier;
                            layer5[a].y += y * pushMultiplier;
                        }
                        for (var a = 0; a < layer6.length; a++) {
                            layer6[a].x += x * pushMultiplier;
                            layer6[a].y += y * pushMultiplier;
                        }
                    };
                    var interactionNodes = [layer2[0], layer2[layer2.length - 1], layer3[0], layer3[layer3.length - 1], layer4[0], layer4[layer4.length - 1], layer5[0], layer5[layer5.length - 1]];
                    var right = {
                        x: 264
                    };
                    var left = {
                        x: -264
                    };
                    var rimScale = 1;
                    Object.defineProperty(self, 'rimScale', {
                        get: function get() {
                            return rimScale;
                        },
                        set: function set(s) {
                            rimScale = s;
                            rim.scale.set(s, 1);
                            right.x = Math.round(s * 264);
                            left.x = -Math.round(s * 264);
                            layer1[0].x = -Math.round(_width / 2 * s);
                            layer1[1].x = -Math.round(_width / 4 * s);
                            layer1[2].x = Math.round(_width / 4 * s);
                            layer1[3].x = Math.round(_width / 2 * s);
                        }
                    });
                    self.setRimScale = function(scale, animate) {
                        if (animate) {
                            Tween.clear(rim);
                            var targetScale = scale < rimScale ? 0.9 * scale : 1.8 * scale;
                            new Tween(self, {
                                rimScale: targetScale
                            }, 0.1, Tween.easeout).call(function() {
                                new Tween(self, {
                                    rimScale: scale
                                }, 0.5, Tween.easeinout);
                            });
                        } else {
                            self.rimScale = scale;
                        }
                    };
                    var soundInteractCounter = 0;
                    self.reset = function() {
                        soundInteractCounter = 0;
                    };
                    var bouncyness = .65; //isBGroupe ? .55 : .75
                    //bouncyness = 0.3 // Lead physics
                    //bouncyness = 0.85 // Ping pong ball physics
                    var ballIntersectionSize = (563 * (250 / (250 + 130)) + 41) / 2;
                    self.interact = function(ball) { //Ball size: 469*0.7126567844925885
                        //Rim size: 27
                        var touched = false;
                        var rx = self.x + right.x - ball.x;
                        var ry = self.y - ball.y;
                        var rdist = Math.sqrt(rx * rx + ry * ry);
                        if (rdist < ballIntersectionSize) {
                            var angle = Math.atan2(ry, rx);
                            var speed = Math.sqrt(ball.speedX * ball.speedX + ball.speedY * ball.speedY) * bouncyness;
                            ball.x = self.x + right.x - Math.cos(angle) * ballIntersectionSize;
                            ball.y = self.y - Math.sin(angle) * ballIntersectionSize;
                            ball.speedX = -Math.cos(angle) * speed + ball.speedX / 8;
                            ball.speedY = -Math.sin(angle) * speed + ball.speedY / 8;
                            ball.speedRotation = ball.speedX / 200;
                            touched = true;
                            var sound = sounds.hits[soundInteractCounter++];
                            if (sound) sound.play(0);
                        }
                        var lx = self.x + left.x - ball.x;
                        var ly = self.y - ball.y;
                        var ldist = Math.sqrt(lx * lx + ly * ly);
                        if (ldist < ballIntersectionSize) {
                            var angle = Math.atan2(ly, lx);
                            var speed = Math.sqrt(ball.speedX * ball.speedX + ball.speedY * ball.speedY) * bouncyness;
                            ball.x = self.x + left.x - Math.cos(angle) * ballIntersectionSize;
                            ball.y = self.y - Math.sin(angle) * ballIntersectionSize;
                            ball.speedX = -Math.cos(angle) * speed + ball.speedX / 5;
                            ball.speedY = -Math.sin(angle) * speed + ball.speedY / 5;
                            ball.speedRotation = ball.speedX / 200;
                            touched = true;
                            var sound = sounds.hits[soundInteractCounter++];
                            if (sound) sound.play(0);
                        }
                        for (var a = 0; a < interactionNodes.length; a++) {
                            var node = interactionNodes[a];
                            var ox = node.x + self.x - ball.x;
                            var oy = node.y + self.y - ball.y;
                            var dist = Math.sqrt(ox * ox + oy * oy);
                            if (dist < ballIntersectionSize) {
                                var angle = Math.atan2(oy, ox);
                                var speed = Math.sqrt(ball.speedX * ball.speedX + ball.speedY * ball.speedY) * .85;
                                ball.speedX += -(Math.cos(angle) * speed + ball.speedX / 5) / 3;
                                ball.speedY += -(Math.sin(angle) * speed + ball.speedY / 5) / 5;
                                node.speedX += (Math.cos(angle) * speed + ball.speedX / 5) / 3;
                                node.speedY += (Math.sin(angle) * speed + ball.speedY / 5) / 3;
                                ball.speedRotation = ball.speedX / 200;
                            }
                        }
                        return touched;
                    };
                    self.isGoal = function(ball) {
                        var rx = self.x - ball.x;
                        var ry = self.y + 300 - ball.y;
                        var rdist = Math.sqrt(rx * rx + ry * ry);
                        if (rdist < ballIntersectionSize) {
                            return true;
                        }
                        return false;
                    };
                    self.tick = function() {
                        net.tick();
                    };
                });
                var IKNode = Container.expand(function() {
                    var self = Container.call(this);
                    /*	var graphcis = new Sprite(xfetch('i/g/visiblerim.svg'))
                                		graphcis.anchor.set(.5,.5)
                                		self.addChild(graphcis)*/
                    self.speedX = 0;
                    self.speedY = 0;
                    self.fixed = false;
                    self.tick = function() {
                        if (!self.fixed) {
                            self.x += self.speedX *= .93;
                            self.y += self.speedY *= .93;
                            self.speedY += 1;
                        }
                    };
                });
                var IKLine = Line.expand(function(a, b, length, thickness) {
                    var self = this;
                    var canvas = document.createElement('canvas');
                    canvas.width = canvas.height = 20;
                    var ctx = canvas.getContext('2d');
                    ctx.fillStyle = "#ffffff";
                    ctx.fillRect(0, 0, 20, 20);
                    Line.call(this, canvas);
                    self.a = a;
                    self.b = b;
                    self.tick = function() {
                        var ox = a.x - b.x;
                        var oy = a.y - b.y;
                        var distance = Math.sqrt(ox * ox + oy * oy);
                        var angle = Math.atan2(oy, ox);
                        if (distance > length) {
                            var adder = (distance - length) / 8;
                            a.speedX -= Math.cos(angle) * adder;
                            a.speedY -= Math.sin(angle) * adder;
                            b.speedX += Math.cos(angle) * adder;
                            b.speedY += Math.sin(angle) * adder;
                        }
                        if (LEGACY_COORD_SYSTEM) {
                            self.x = b.x - Math.cos(angle) * 10 * self.ratio;
                            self.y = b.y - Math.sin(angle) * 10 * self.ratio;
                            self.rotation = angle;
                            self.width = (distance + 20) * self.ratio;
                            self.height = thickness * 1.5 * self.ratio;
                        } else {
                            self.x = b.x - Math.cos(angle) * 10;
                            self.y = b.y - Math.sin(angle) * 10;
                            self.rotation = angle;
                            self.width = distance + 20;
                            self.height = thickness * 1.5;
                        }
                    };
                });

                function IKSet(container) {
                    var self = this;
                    var lines = [];
                    var nodes = [];
                    self.getNode = function(x, y) {
                        var node = new IKNode();
                        node.x = x;
                        node.y = y;
                        nodes.push(node); //container.addChild(node)
                        return node;
                    };
                    self.getLine = function(a, b, length, thickness) {
                        var line = new IKLine(a, b, length, thickness);
                        lines.push(line);
                        container.addChild(line);
                        return line;
                    };
                    self.tick = function() {
                        for (var a = 0; a < nodes.length; a++) {
                            nodes[a].tick();
                        }
                        for (var a = 0; a < lines.length; a++) {
                            lines[a].tick();
                        }
                    };
                }
                /**
                 * @class PowerUpButton 
                 * Triggers powerup from ingame interface
                 * Is a giant mess :)
                 */
                var PowerUpButton = Container.expand(function(powerUp, options) {
                    var self = Container.call(this);
                    var pulseAnimation = undefined; // stored to deal with concurrent calls
                    self.options = GUI.util.applyDefaults(options, {
                        imageScale: 0.2
                    });
                    self.sprite = null;
                    var _powerUp = powerUp;
                    var _enabled = true;
                    var _powerActive = false;
                    var _defaultAlpha = 1;
                    var _disabledAlpha = 0.5;
                    XS.data.on('dataloaded', function() {
                        self.syncWithData();
                    });
                    self.powerUp = _powerUp;
                    self.background = new Graphics();
                    self.addChild(this.background);
                    self.background.alpha = 0.3;
                    var numLabel = new Text2("10", {
                        size: 32,
                        weight: 600,
                        font: "Arial,Tahoma",
                        fill: "#fff",
                        dropShadow: false
                    });
                    numLabel.anchor.set(0.5, 0.5);
                    var adIcon = new Sprite(fetch_i_g_button_ad_svg());
                    self.addChild(numLabel); // for debugging
                    self.name = function() {
                        return _powerUp.id;
                    };
                    /**
                     * Add more of the powerups
                     */
                    self.addItems = function(num, select) {
                        XS.data.powerUps[_powerUp.id] += num;
                        XS.data.setDirty('powerUps');
                        XS.data.save();
                        self.syncWithData();
                        if (select && self.selector) {
                            self.selector.select(self);
                        } // Show tutorial if it's first time
                        CoachBubble.showTip(_powerUp, 300);
                    };
                    self.setSelectionMode = function(selectMode, callback) {};

                    function refreshAdIcon() {
                        if (showRewardAdButton()) {
                            adIcon.visible = true;
                        } else {
                            adIcon.visible = false;
                        }
                    } // This timeout is here to make sure we try to refresh the icon after a rewarded ad is preloaded
                    setTimeout(refreshAdIcon, 3000);

                    function showRewardAdButton() { // TODO: Throttling of showing this icon, etc
                        // If we have no power ups, and it's not an active power up, and we've seen the tutorial ...
                        return self.count() == 0 && !_powerActive && XS.data.powerUpTips[_powerUp.id] && XS.ads.enabled('reward') && XS.ads.ready('reward');
                    }
                    self.updateLabel = function(amount) {
                        numLabel.setText("" + amount);
                    };
                    self.syncWithData = function() {
                        self.updateLabel(XS.data.powerUps[_powerUp.id]);
                        refreshAdIcon();
                        self.sprite.alpha = self.count() == 0 || !_enabled ? _disabledAlpha : _defaultAlpha; //if(!self.shouldShow() && !_powerUp.duration)
                        //	self.remove()
                    };
                    self.count = function() {
                        return XS.data.powerUps[_powerUp.id];
                    };
                    self.shouldShow = function() {
                        return XS.data.powerUpTips[_powerUp.id] || self.count() > 0;
                    }; //self.ignoreNextUp = false
                    // Image
                    self.sprite = new Sprite(powerUp.image, self.options.imageScale);
                    self.sprite.scale.set(self.options.imageScale);
                    self.sprite.anchor.set(0.5, 0.5);
                    self.sprite.x = self.sprite.width / 2;
                    self.sprite.y = self.sprite.height / 2; // Label
                    numLabel.x = self.sprite.x = self.sprite.x;
                    numLabel.y = self.sprite.y + self.sprite.height / 2 + 18; // Background behind label
                    self.background.y = numLabel.y - 4;
                    self.background.x = numLabel.x;
                    self.background.beginFill(0x61392e);
                    self.background.drawCircle(0, 0, numLabel.width * 0.9);
                    self.addChild(self.sprite); // Ad Icon
                    adIcon.x = self.sprite.x; //+ 2
                    adIcon.y = self.sprite.y - 26; //numLabel.y - 22
                    adIcon.anchor.set(0.5, 0, 5);
                    adIcon.scale.set(1);
                    self.addChild(adIcon);
                    var watchAdDialog;
                    self.trigger = function() {
                        console.log("Trigger powerup: ", powerUp.id, {
                            enabled: _enabled,
                            active: _powerActive
                        });
                        if (_enabled) {
                            if (XS.data.powerUps[_powerUp.id] > 0) { // If it has duration in time or shots, then make sure it gets registered
                                if (basketball.addActivePowerUp(_powerUp)) {
                                    sounds.onPowerUp(_powerUp.id);
                                    XS.data.powerUps[_powerUp.id] -= 1;
                                    XS.data.setDirty('powerUps');
                                    self.syncWithData();
                                } else {
                                    self.cancel();
                                }
                            } else {
                                if (basketball.hasActivePowerUp(_powerUp)) {
                                    self.cancel();
                                } else {
                                    if (adIcon.visible) {
                                        if (!watchAdDialog) watchAdDialog = new WatchAdDialog(powerUp);
                                        watchAdDialog.open();
                                    } else {
                                        new Pulse(numLabel);
                                    }
                                }
                            }
                        } else { // Cancel active power if it isn't started
                            if (_powerActive) {
                                if (!basketball.isPowerUpStarted(_powerUp)) {
                                    self.cancel();
                                }
                            }
                        }
                    };
                    /**
                     * Pulses the icon briefly
                     */
                    self.pulse = function(callback) {
                        self.cancelPulse();
                        pulseAnimation = new Pulse(self.sprite, {}, callback);
                    };
                    self.cancelPulse = function() {
                        if (pulseAnimation) {
                            pulseAnimation.cancel();
                            pulseAnimation = undefined;
                        }
                    };
                    var _durationBar;
                    if (_powerUp.duration) {
                        var w = 80;
                        var h = 15;
                        var frame = 4;
                        self.duration = new Container();
                        var durationBG = new Graphics();
                        durationBG.beginFill(0x368197, 1);
                        durationBG.drawRect(-frame, -frame, w + 2 * frame, h + 2 * frame);
                        durationBG.alpha = 0.3;
                        self.duration.addChild(durationBG);
                        _durationBar = new Graphics();
                        _durationBar.beginFill(_powerUp.barColor || 0x00ff00);
                        _durationBar.drawRect(0, 0, w, h);
                        self.duration.addChild(_durationBar);
                        self.duration.x = 24;
                        self.duration.y = -25;
                        self.addChild(self.duration);
                        self.duration.visible = false;
                    }
                    self.setEnabled = function(state) {
                        _enabled = state; //console.log("Set enabled:", state, _powerUp)
                        //if( state && self.count() == 0 ) {
                        //	// Hide the powerup
                        //	self.remove()
                        //} else {
                        self.sprite.alpha = _enabled && self.count() > 0 ? _defaultAlpha : _disabledAlpha; //}
                    };
                    self.enabled = function() {
                        return _enabled;
                    };
                    self.remove = function() {
                        console.trace();
                        new Tween(self, {
                            alpha: 0
                        }, 0.25).call(function() {
                            self.visible = false;
                            self.selector.onRemove(self);
                        });
                    };
                    /**
                     * Indicate the power is currently active in the game
                     * Disables the button and shows the duration bar
                     */
                    self.setPowerActive = function(state) {
                        _powerActive = state;
                        if (state) { // Show the duration progress bar, reset it to full width
                            if (self.duration) {
                                self.duration.visible = true;
                                _durationBar.scale.x = 1;
                            }
                            self.setEnabled(false);
                        } else { // Hide the duration progress bar
                            if (self.duration) {
                                self.duration.visible = false;
                            }
                            self.setEnabled(true);
                        } //console.log("SET POWER ACTIVE", _powerUp.id, state, self.count())
                        //if(state == false && self.count() == 0 )
                        //	debugger
                        self.syncWithData();
                    };
                    self.cancel = function() {
                        basketball.removeActivePowerUp(powerUp);
                        self.setPowerActive(false);
                        self.addItems(1, true);
                    };
                    self.updateTime = function(secsLeft) {
                        _durationBar.scale.x = Math.min(1, secsLeft / _powerUp.duration);
                    };
                    self.syncWithData();
                });
                /**
                 * @class PowerUpSelector
                 * Folds out a list of PowerUpButtons and lets you chose one, and collapse the list
                 * Is a giant mess :)
                 */
                var PowerUpSelector = Container.expand(function(options) {
                    Container.call(this);
                    var self = this;
                    self.options = GUI.util.applyDefaults(options, {
                        expandDirection: 1
                    });
                    if (self.options.selectorSet) {
                        self.options.selectorSet.push(self);
                    }
                    self.powerUps = [];
                    self.popped = false;
                    var _selectedIdx = XS.data[self.options.selectedProperty] || 0;
                    var _powerUpSpacing = 20;
                    var _open = false;
                    var _selectedPowerUpOffset = 0; //-this.powerUps[0].width
                    var _animating = false;
                    if (XS.is.slow);
                    self.isAnimating = function() {
                        return _animating;
                    };
                    self.isOpen = function() {
                        return _open;
                    };
                    self.add = function(powerUp) {
                        powerUp.selector = self;
                        self.powerUps.push(powerUp);
                        self.addChild(powerUp);
                    };
                    var leftArrow = new Graphics();
                    leftArrow.beginFill(0xffffff);
                    leftArrow.drawCircle(0, 0, 8); //leftArrow.moveTo(0,-15)
                    //leftArrow.lineTo(0,15)
                    //leftArrow.lineTo(-20,0)
                    leftArrow.endFill(); //leftArrow.x = -124-4
                    leftArrow.x = -124 - 10;
                    var rightArrow = new Graphics();
                    rightArrow.beginFill(0xffffff);
                    rightArrow.drawCircle(0, 0, 8); //rightArrow.moveTo(0,-15)
                    //rightArrow.lineTo(20,0)
                    //rightArrow.lineTo(0,15)
                    rightArrow.endFill(); //rightArrow.x = 5+3
                    rightArrow.x = 5 + 3 + 4; //leftArrow.y = rightArrow.y = 55
                    leftArrow.y = rightArrow.y = 58;
                    leftArrow.alpha = rightArrow.alpha = 0.6;
                    var radius = 70; //var holdIndicator = new Container()
                    var fill = new Graphics();
                    fill.beginFill(0xffffff);
                    fill.alpha = 0.7;
                    fill.drawCircle(0, 0, radius);
                    var circle = new Graphics();
                    circle.lineStyle(8, 0xffffff, fill.alpha);
                    circle.drawCircle(0, 0, radius); //holdIndicator.visible = false
                    var _isDown = false;
                    self.on('down', function(e) { //if(_open) {
                        //	self.close()
                        //	return
                        //}
                        _isDown = true;
                        if (basketball.isBallMoving()) return;
                        e.event.global.clone(); // && e.event && e.event.getLocalPosition(self)
                        return;
                    });
                    self.on('up', function(e) {
                        _isDown = false;
                        if (basketball.isBallMoving()) return;
                        if (!_open) { // Open
                            self.open();
                        } else { // Select
                            var under = powerUpUnderCursor(e);
                            if (under != _highlight) {
                                if (XS.is.facebookInstant) {
                                    if (!__powerUpSelectorSwitched) {
                                        __powerUpSelectorSwitched = true;
                                        XS.track.customEvent('powerup_selector_switched', 1, {
                                            selector: self.options.selectedProperty,
                                            from: under,
                                            to: _highlight
                                        });
                                    }
                                }
                            } //unsloppify: is this variable declared anywhere?
                            _highlight = under;
                            if (_highlight >= 0) {
                                self.select(this.powerUps[_highlight]);
                                this.powerUps[_highlight].trigger();
                                self.highlight(-1);
                            } else {
                                self.close();
                            }
                        } //if(!holdIndicator.visible && !_open) {
                        //	this.powerUps[_selectedIdx].trigger()
                        //	self.highlight(-1)
                        //	cancel()
                        //	return
                        //}
                        //cancel()
                        //if(_highlight >= 0) {
                        //	self.select(this.powerUps[_highlight])
                        //	this.powerUps[_highlight].trigger()
                        //	self.highlight(-1)
                        //} else {
                        //	self.close()	 		
                        //}
                    });

                    function powerUpUnderCursor(e) {
                        var pos = e.event.global;
                        for (var i = 0; i < self.powerUps.length; ++i) {
                            var pu = self.powerUps[i];
                            if (!pu.visible) { //console.log("skipping: ", self.name())
                                continue;
                            }
                            if (pu.getBounds().contains(pos.x, pos.y)) {
                                return i;
                            }
                        }
                        return -1;
                    }
                    self.on('move', function(e) {
                        if (_hidden || _animating) return;
                        if (basketball.isBallMoving()) return; // If we're closed and we're not dragging while pressing
                        if (!_open && !_isDown) {
                            return;
                        }
                        self.getBounds();
                        e.event.global; //if(_downPos && pos.x - _downPos.x > (self.options.expandDirection*40)) {
                        //	cancel()
                        //	self.open()
                        //	//var under = powerUpUnderCursor(e)
                        //	//self.highlight(under)
                        //}
                        // Outside entire selector
                        //if(selectorBounds.contains(pos.x, pos.y)) {
                        //	if(!_open) {
                        //		self.open()
                        //	}
                        //} else { 
                        //	if(_open) {
                        //		self.close()
                        //	}
                        //	return
                        //}
                        //var under = powerUpUnderCursor(e)
                        //self.highlight(under)
                        var under = powerUpUnderCursor(e);
                        if (under != _highlight) {
                            if (XS.is.facebookInstant) {
                                if (!__powerUpSelectorSwitched) {
                                    __powerUpSelectorSwitched = true;
                                    XS.track.customEvent('powerup_selector_switched', 1, {
                                        selector: self.options.selectedProperty,
                                        from: under,
                                        to: _highlight
                                    });
                                }
                            }
                        }
                        self.highlight(under);
                    }); //var highlightMarker = new Graphics()
                    self.highlight = function(idx) { //unsloppify: is this variable declared anywhere?
                        _highlight = idx; //if( idx >= 0 ) {
                        //	//highlightMarker.x = self.powerUps[idx].x + self.powerUps[idx].sprite.width/2
                        //	//highlightMarker.visible = true
                        //	var pu = self.powerUps[idx].powerUp
                        //	//nameLabel.setText( pu.name )
                        //	//descLabel.setText( pu.descLong || pu.desc )
                        //	if( self.options.expandDirection > 0 ) {
                        //		//textContainer.x = edgeMargin
                        //		//nameLabel.x = Math.max( edgeMargin + nameLabel.width/2, highlightMarker.x )
                        //		//descLabel.x = Math.max( edgeMargin + descLabel.width/2, highlightMarker.x )
                        //		//activateLabel.x = Math.max( edgeMargin + activateLabel.width/2, highlightMarker.x )
                        //	} else {
                        //		//textContainer.x = -textContainer.width - edgeMargin
                        //		//nameLabel.x = Math.min( -edgeMargin - nameLabel.width/2, highlightMarker.x )
                        //		//descLabel.x = Math.min( -edgeMargin - descLabel.width/2, highlightMarker.x )
                        //		//activateLabel.x = Math.min( -edgeMargin - activateLabel.width/2, highlightMarker.x )
                        //	}
                        //	//textContainer.visible = true 
                        //	//highlightBG.visible = true
                        //} else {
                        //	highlightMarker.visible = false
                        //	//textContainer.visible = false 
                        //	//highlightBG.visible = false
                        //}
                    }; //	if(!downPos)
                    //		return
                    //	var event = e.event
                    //	var pos = event.getLocalPosition(self);
                    //	
                    //	if( Math.abs(downPos.y - pos.y) > 5 || Math.abs(downPos.x - pos.x) > 5){
                    //		cancel()
                    //	}
                    //})
                    //self.on('up', cancel )
                    var _hidden = false;
                    self.hide = function(state, immediate, callback) {
                        if (state == _hidden) {
                            callback && callback(state);
                            return;
                        }
                        _hidden = state;
                        if (immediate) {
                            self.visible = !state;
                            callback && callback(state);
                        } else { // Animate out
                            if (state) {
                                new Tween(self, {
                                    alpha: 0
                                }, 0.25).call(function() {
                                    self.visible = false;
                                    self.alpha = 1;
                                }); //new Tween( self, { x: self.options.showPosition.x, y: self.options.hidePosition.y }, 0.5 ).call(function() {
                                //	callback && callback(state)
                                //})
                            } else { // Animate out
                                self.alpha = 0;
                                self.visible = true;
                                new Tween(self, {
                                    alpha: 1
                                }, 0.25); //new Tween( self, { x: self.options.hidePosition.x, y: self.options.hidePosition.y }, 0.5 ).call(function() {
                                //	callback && callback(state)
                                //})
                            }
                        }
                    };
                    self.countActive = function() {
                        var n = 0;
                        for (var i = 0; i < self.powerUps.length; ++i) {
                            if (self.powerUps[i].shouldShow()) n++;
                        }
                        return n;
                    };
                    /**
                     * Opens the selector and calls the callback when done opening 
                     */
                    self.open = function(callback, showPowerUp) {
                        function done() {
                            self.getBounds();
                            _animating = false;
                            callback && callback();
                            callback = undefined;
                            self.emit("selectorAnimEnded");
                        } //if( _open || (!showPowerUp && self.countActive() <= 1) ) {
                        if (_open) { //console.error("Should not be called then it's already open!")
                            done();
                            return;
                        }
                        _open = true;
                        _animating = true;
                        var set = self.options.selectorSet;
                        if (set) {
                            for (var i = 0; i < set.length; ++i) {
                                if (set[i] != self) {
                                    set[i].close(); // Hide the other selectors
                                    if (self.countActive() > 3) set[i].hide(true);
                                }
                            }
                        }
                        if (!showPowerUp) {
                            XS.stage.once('up', function() {
                                if (_open) {
                                    self.close();
                                }
                            });
                        }
                        leftArrow.visible = rightArrow.visible = false;
                        var offset = _selectedPowerUpOffset;
                        offset += self.options.expandDirection * (this.powerUps[0].width + _powerUpSpacing); //var offset = 0
                        var numVisible = 0;
                        for (var i = 0; i < this.powerUps.length; i++) {
                            var powerUp = this.powerUps[i];
                            powerUp.visible = true;
                            powerUp.alpha = 1;
                            if (i === _selectedIdx) continue;
                            if (powerUp.shouldShow() || powerUp == showPowerUp) { //console.warn("Show powerUp: ", powerUp.count(), showPowerUp && showPowerUp.name(), powerUp && powerUp.name() )
                                powerUp.visible = true;
                            } else { //console.warn("Show powerUp NO", powerUp.name() )
                                powerUp.visible = false;
                                continue;
                            }
                            powerUp.x = _selectedPowerUpOffset;
                            powerUp.y = 0;
                            powerUp.alpha = 0; //powerUp.ignoreNextUp = true
                            // Animate the button into position
                            Tween.clear(powerUp);
                            new Tween(powerUp, {
                                alpha: 1,
                                x: offset
                            }, 0.3);
                            offset += self.options.expandDirection * (powerUp.width + _powerUpSpacing); //offset -= (powerUp.height + _powerUpSpacing)
                            numVisible++;
                        }
                        if (numVisible > 0) {
                            new Tween({}, {}, 0.3).call(done);
                        } else {
                            done();
                        } // When we release the press after opening, attach a global "up" handler, so we can close if people click outside the selector
                        // Disabled because it doesn't work when it's placed earlier than the up handler for clicking on one of the powerups
                        //self.once('up',function(){
                        //	XS.stageContainer.once('stageup', function() {
                        //		self.close()
                        //	}, { freezeGroup: ENG_FRZ_GRP })
                        //})
                    };
                    self.updateArrows = function() {
                        rightArrow.visible = false; // ( _selectedIdx > 0 )
                        leftArrow.visible = false; // (_selectedIdx < this.powerUps.length-1 )
                    };
                    self.show = function(powerUp, callback) {
                        self.zOrderFront(XS.gui); // TODO: fixes during AD
                        if (self.getPowerUpIndex(powerUp) == _selectedIdx) {
                            callback && callback();
                        } else {
                            self.open(callback, powerUp);
                        }
                    };
                    self.zOrderOrigin = function() {
                        if (self.originalParent && self.parent !== self.originalParent) {
                            self.position = self.originalPosition.clone();
                            self.originalParent.addChild(self);
                        }
                    };
                    self.zOrderFront = function(frontCont) {
                        self.originalParent = self.originalParent || self.parent;
                        if (self.parent !== frontCont) {
                            self.originalPosition = self.originalPosition || self.position.clone();
                            var posGlobal = frontCont.toLocal(self.originalParent.toGlobal(self.position));
                            self.originalParent.removeChild(self);
                            self.x = posGlobal.x;
                            self.y = posGlobal.y;
                            frontCont.addChild(self);
                        }
                    };
                    self.close = function() {
                        if (!_open) {
                            self.zOrderOrigin();
                            return;
                        }
                        _animating = true;
                        var isHiding = false;
                        var set = self.options.selectorSet;
                        if (set) {
                            for (var i = 0; i < set.length; ++i) {
                                if (set[i] != self) { // Hide the other selectors
                                    set[i].hide(false);
                                    isHiding = true;
                                }
                            }
                        }

                        function onClosed() {
                            self.zOrderOrigin();
                            self.emit("selectorAnimEnded");
                        }
                        isHiding ? new Tween({}, {}, 0.3).call(onClosed) : onClosed();
                        self.updateArrows();
                        for (var i = 0; i < this.powerUps.length; ++i) {
                            var powerUp = this.powerUps[i];
                            var alpha = i == _selectedIdx ? 1 : 0;
                            Tween.clear(powerUp);
                            new Tween(powerUp, {
                                alpha: alpha,
                                x: _selectedPowerUpOffset
                            }, 0.3).call(function(p, active) {
                                p.visible = active;
                                p.setSelectionMode(false);
                                _animating = false;
                            }, [powerUp, i == _selectedIdx]);
                        }
                        _open = false;
                    };
                    self.getPowerUpIndex = function(powerUp) {
                        for (var i = 0; i < this.powerUps.length; ++i) {
                            if (this.powerUps[i] == powerUp) {
                                return i;
                            }
                        }
                        return -1;
                    };
                    self.select = function(powerUp) {
                        console.log("Selected power:", _selectedIdx, XS.data[self.options.selectedProperty], powerUp.name && powerUp.name());
                        XS.data[self.options.selectedProperty] = _selectedIdx = self.getPowerUpIndex(powerUp);
                        if (_open) {
                            self.close();
                        } else {
                            powerUp.visible = true;
                            powerUp.x = _selectedPowerUpOffset;
                            powerUp.alpha = 1;
                        }
                    };
                    /**
                     * When a button removes itself, animate a new one in it's place and select it
                     */
                    self.onRemove = function(powerUp) {
                        var p = self.findActivePowerUp(true);
                        if (p) {
                            self.select(p);
                            p.alpha = 0;
                            new Tween(p, {
                                alpha: 1
                            }, 0.25);
                        }
                    };
                    self.findActivePowerUp = function(includeEmpty) {
                        var candidate = false;
                        for (var i = 0; i < this.powerUps.length; ++i) {
                            var powerUp = this.powerUps[i];
                            if (powerUp.count() > 0) {
                                return powerUp;
                            }
                            if (includeEmpty && powerUp.shouldShow()) {
                                candidate = powerUp;
                            }
                        }
                        return candidate;
                    };
                    self.layout = function() {
                        if (this.powerUps.length == 0) {
                            return 0;
                        }
                        _selectedPowerUpOffset = self.options.expandDirection == 1 ? 0 : -this.powerUps[0].width;
                        var maxWidth = 0;
                        var offset = _selectedPowerUpOffset; //-this.powerUps[0].width
                        var numActive = 0;
                        for (var i = 0; i < this.powerUps.length; ++i) {
                            var powerUp = this.powerUps[i];
                            powerUp.x = offset;
                            powerUp.visible = false;
                            maxWidth += powerUp.width + _powerUpSpacing; // Hide empty powerup buttons
                            if (powerUp.shouldShow()) {
                                numActive++;
                            }
                        }
                        self.addChild(leftArrow);
                        self.addChild(rightArrow); //self.addChild(holdIndicator)
                        self.updateArrows();
                        var selected = XS.data[self.options.selectedProperty];
                        console.warn("Selector has powerups: " + numActive + " of " + self.powerUps.length);
                        if (numActive > 0) {
                            if (!self.powerUps[selected].shouldShow()) {
                                if (numActive > 0) {
                                    var p = self.findActivePowerUp(true);
                                    if (p) {
                                        self.select(p);
                                    }
                                }
                            } else {
                                self.select(self.powerUps[selected]);
                            }
                        }
                        self.highlight(-1);
                        return maxWidth;
                    };
                    XS.data.on('dataloaded', function(payload) {
                        self.layout();
                    });
                });
                var ballSelector, drinkSelector;
                var selectors = [];
                if (_abGoldenBall) {
                    ballSelector = new PowerUpSelector({
                        expandDirection: -1,
                        selectedProperty: 'selectedBall',
                        selectorSet: selectors
                    });
                    var balls = ['ballGold', 'ballSilver', 'ballBronze'];
                    for (var i = 0; i < balls.length; ++i) {
                        var ball = balls[i];
                        powerUps[ball].button = new PowerUpButton(powerUps[ball], null, {
                            imageScale: 0.15
                        });
                        ballSelector.add(powerUps[ball].button);
                    }
                    XS.gui.bottomRight.addChild(ballSelector);
                    drinkSelector = new PowerUpSelector({
                        expandDirection: 1,
                        selectedProperty: 'selectedDrink',
                        selectorSet: selectors
                    });
                    var drinks = ['drinkAim', 'drinkCoin', 'drinkPoints', 'drinkRim'];
                    for (var i = 0; i < drinks.length; ++i) {
                        var drink = drinks[i];
                        powerUps[drink].button = new PowerUpButton(powerUps[drink], null, {
                            imageScale: 0.15
                        });
                        drinkSelector.add(powerUps[drink].button);
                    }
                    XS.gui.bottomLeft.addChild(drinkSelector);
                    var ballWidth = ballSelector.layout();
                    var drinkWidth = drinkSelector.layout(); // Make sure the open selector is never bigger than 80% of the screen
                    var widest = Math.max(drinkWidth, ballWidth);
                    var scale = Math.min(1, XS.gui.width * 0.8 / widest);
                    drinkSelector.scale.set(scale);
                    ballSelector.scale.set(scale); //console.log("Dimensions: ", ballSelector.dimensions, drinkSelector.dimensions)
                    //console.log("Dimensions2: ", ballSelector.powerUps[0].dimensions, drinkSelector.powerUps[0].dimensions)
                    //ballSelector.powerUps[0].height
                    // Position selectors on screen
                    var yOffset = 240;
                    ballSelector.x = 0;
                    ballSelector.y = -ballSelector.powerUps[0].height - yOffset;
                    drinkSelector.x = 0;
                    drinkSelector.y = -drinkSelector.powerUps[0].height - yOffset;
                }
                var CoinRow = Container.expand(function() {
                    var self = Container.call(this);
                    var coins = [];
                    for (var a = 0; a < 5; a++) {
                        var coin = new Sprite(fetch_i_g_coinflat_svg());
                        var shadow = new Sprite(fetch_i_g_coinflatshadow_svg()); //coin.x = a*100-125*.8
                        shadow.y = coin.y = -a * 20 - 30;
                        coin.visible = data.spawnCoin.get() > a;
                        self.addChild(shadow);
                        self.addChild(coin);
                        coins.push(coin);
                    }
                    self.coinWidth = coin.width;
                    var label = new Text2("22:22", {
                        size: 95,
                        font: "'GillSans-Bold',Impact,'Arial Black',Tahoma",
                        fill: "#ffffff",
                        dropShadow: true
                    });
                    label.anchor.set(1, 1);
                    label.y = 20;
                    var nextCoinLabel = new Text2(Host.Localize.Translate("Next coin in"), {
                        size: 50,
                        fill: "#ffffff",
                        dropShadow: true
                    });
                    nextCoinLabel.anchor.set(1, 1);
                    nextCoinLabel.y = -label.height + 30;
                    nextCoinLabel.x = 0;
                    self.addChild(label);
                    self.addChild(nextCoinLabel);
                    var timeBetweenCoins = 5 * 1000 * 60;
                    var timeOnFirstCoin = 1 * 1000 * 60;
                    self.spawnCoin = function() {
                        if (data.spawnCoin.get() > 0) {
                            self.visible = true;
                            if (data.spawnTime.get() == 0 || data.spawnCoin.get() == 1) {
                                data.spawnTime.set(new Date().getTime());
                            }
                            data.spawnCoin.set(data.spawnCoin.get() - 1);
                            coins[data.spawnCoin.get()].visible = false;
                            realignLabel();
                            return data.spawnCoin.get();
                        }
                        return false;
                    };
                    self.despawnCoin = function(auto) {
                        if (data.spawnCoin.get() < coins.length) {
                            coins[data.spawnCoin.get()].visible = true;
                            data.spawnCoin.set(data.spawnCoin.get() + 1);
                            if (data.spawnCoin.get() == 5) {
                                data.spawnTime.set(0);
                            } else if (auto) {
                                data.spawnTime.set(data.spawnTime.get() + timeBetweenCoins);
                            }
                            realignLabel();
                        }
                    };

                    function twoLetter(num) {
                        if (num < 10) return "0" + num;
                        return num;
                    }

                    function updateTime() {
                        var offset = new Date().getTime() - data.spawnTime.get();
                        var targetTime = data.spawnCoin.get() == 0 ? timeOnFirstCoin : timeBetweenCoins;
                        if (offset < 0) {
                            data.spawnTime.set(new Date().getTime());
                        }
                        if (offset >= targetTime) {
                            self.despawnCoin(true);
                        }
                        offset = new Date().getTime() - data.spawnTime.get();
                        var timeleft = (targetTime - offset) / 1000 >> 0;
                        var mins = timeleft / 60 >> 0;
                        var secsleft = Math.ceil(timeleft - mins * 60);
                        if (timeleft > 60) {
                            label.setText(twoLetter(mins) + ":" + twoLetter(secsleft));
                        } else {
                            label.setText(twoLetter(Math.floor((targetTime - offset) / 1000)));
                        }
                    }

                    function realignLabel() {
                        updateTime();
                        nextCoinLabel.visible = label.visible = data.spawnCoin.get() != 5;
                    }
                    realignLabel();
                    XS.setInterval(function() {
                        if (data.spawnTime.get() != 0) {
                            updateTime();
                        }
                    }, 250);
                });
                var coinRow;
                if (!_abGoldenBall) {
                    coinRow = new CoinRow();
                }
                var Basketball = Container.expand(function() {
                    var self = Container.call(this);
                    XS.on('resize', function(ratio) {
                        if (LEGACY_COORD_SYSTEM) {
                            self.x = (width / stage.ratio * XS.devicePixelRatio - targetHeight) / 2;
                            self.y = height / stage.ratio * XS.devicePixelRatio - targetWidth;
                        } else {
                            self.y = stage.height - XS.size.target.height; // bottom
                            self.x = (stage.width - XS.size.target.width) / 2; // center
                        }
                    });
                    var floorOverlay = new Sprite(fetch_i_g_floor_svg());
                    floorOverlay.anchor.set(.5, 0);
                    self.addChild(floorOverlay);
                    floorOverlay.x = targetHeight / 2;
                    floorOverlay.y = 2102;
                    var tasksLabel = new Text2("", {
                        size: 100,
                        font: "'GillSans-Bold',Impact,'Arial Black',Tahoma",
                        fill: "#61392e",
                        align: "center"
                    });
                    tasksLabel.anchor.set(.5, .5);
                    self.addChild(tasksLabel);
                    tasksLabel.y = 1700 - 50;
                    tasksLabel.x = targetHeight / 2; //window.tasksLabel = tasksLabel;
                    var hoopBackground = new HoopBackground();
                    self.addChild(hoopBackground);
                    var hoop = new Hoop();
                    self.addChild(hoop);
                    self.hoop = hoop;
                    var roundStats = {};
                    window.roundStats = roundStats;
                    var totalGamesPlayedInSession = 0;
                    var bestScoreInSession = 0;

                    function resetRoundStats() {
                        roundStats.hasHitHoop = false;
                        roundStats.initialAllNet = 0;
                        roundStats.totalAllNet = 0;
                        roundStats.streakAllNetCurrent = 0;
                        roundStats.streakAllNet = 0;
                        roundStats.totalHoopsShot = 0;
                    }
                    resetRoundStats();
                    hoopBackground.x = targetHeight / 2;
                    hoopBackground.y = 600;
                    hoop.x = targetHeight / 2;
                    hoop.y = hoopBackground.y + 280;
                    var shadow = new Sprite(fetch_i_g_shadow_svg());
                    shadow.anchor.set(.5, .5);
                    self.addChild(shadow);
                    self.coin = new Sheet(fetch_i_g_coinsheet_svg(), 250, 250);
                    self.children.length;
                    self.coin.x = Math.random() * 2048;
                    self.coin.y = Math.random() * 200;
                    var animatingCoin = false;
                    var coinIsSpawned = false;
                    var coinIsReady = false;
                    var cof = 0;
                    XS.on('tick', function() {
                        if (animatingCoin && ++cof % 4 == 0) {
                            self.coin.frame++;
                        }
                    });
                    self.setPowerUp = function(powerUp) {
                        var current = ball.getPowerUp();
                        if (!current) {
                            ball.setPowerUp(powerUp);
                            return true;
                        } else { // Deselect current powerup
                            if (current === powerUp) {
                                ball.setPowerUp(null);
                                if (powerUp.button) {
                                    powerUp.button.addItems(1, true); //self.removeActivePowerUp(current)
                                    powerUp.button.pulse();
                                }
                                return false; // Give back current powerup and then select
                            } else {
                                if (current.button) {
                                    current.button.addItems(1, true);
                                    current.button.pulse();
                                }
                                self.removeActivePowerUp(current);
                                ball.setPowerUp(powerUp);
                                return true;
                            }
                        }
                    };
                    var inAwardCoin = false;

                    function awardCoinIfAppropriate() { //console.log("COIN", { coinIsReady: coinIsReady, inAwardCoin: inAwardCoin, coinIsSpawned: coinIsSpawned })
                        if (!coinIsReady) return;
                        if (inAwardCoin || !coinIsSpawned) return;
                        coinIsSpawned = false;
                        inAwardCoin = true;
                        sounds.coinpickup.play(); //Normalize coordinates
                        var nr = .5 * XS.devicePixelRatio;
                        var nx = (self.coin.x + self.x + hoopBackground.x) * self.ratio / nr; //(self.coin.x)/self.ratio*nr 
                        var ny = (self.coin.y + self.y + hoopBackground.y) * self.ratio / nr; //(self.coin.y)/self.ratio*nr 
                        //if(!LEGACY_COORD_SYSTEM) {
                        //	nx = (self.coin.x+self.x+hoopBackground.x)/nr//(self.coin.x)/self.ratio*nr 
                        //	ny = (self.coin.y+self.y+hoopBackground.y)/nr//(self.coin.y)/self.ratio*nr 
                        //}
                        animatingCoin = false;
                        if (_abGoldenBall) {
                            self.coin.visible = false;
                            self.coin.frame = 0;
                            var duration = 0.7;
                            new FlyTo(self.coin, cornerCoin, {
                                duration: duration
                            }); // Fly as many coins as we have
                            var coins = Math.round(self.coinMultiplier);
                            if (coins > 1) {
                                for (var i = 1; i < coins; ++i) {
                                    XS.setTimeout(function() {
                                        new FlyTo(self.coin, cornerCoin, {
                                            duration: duration
                                        });
                                    }, i * 100);
                                }
                            }
                            inAwardCoin = false;
                            coinIsReady = false;
                            goalsModel.addCoins(coins);
                            updateCoinValue(XS.data.coins + coins, duration * 1000);
                        } else {
                            self.coin.frame = 0;
                            if (LEGACY_COORD_SYSTEM) {
                                hoopBackground.removeChild(self.coin);
                                XS.stageContainer.addChild(self.coin);
                                self.coin.ratio = stage.ratio;
                                self.coin.x = nx;
                                self.coin.y = ny;
                                self.coin.ratio = nr; //Normalize scale!
                                self.coin.scale.set(self.ratio / nr, self.ratio / nr);
                            } else { //self.coin.scale.set(self.ratio)
                                var bounds = self.coin.getBounds();
                                var size = bounds.getSize();
                                var pos = bounds.getPosition();
                                console.log("POS before", pos, size, self.coin.parent);
                                pos = XS.gui.toLocal(pos);
                                size = XS.gui.toLocalSize(size);
                                console.log("POS after", pos, size, XS.gui.scale); //self.coin.scale.set(0.5)
                                XS.gui.addChild(self.coin); //pos = XS.stageContainer.toLocal({ x: sourceBounds.x, y: sourceBounds.y })
                                self.coin.x = pos.x; // + self.coin.width/2
                                self.coin.y = pos.y; // + self.coin.height/2
                                self.coin.width = size.x;
                                self.coin.height = size.y;
                            }
                            new Tween(self.coin.scale, {
                                x: .17 * 4,
                                y: .17 * 4
                            }, .5, Tween.easeout).call(function() {
                                new Tween(self.coin.scale, {
                                    x: .17 * 2,
                                    y: .17 * 2
                                }, .5, Tween.easein);
                            });
                            var coins;
                            if (_abGoldenBall) {
                                coins = XS.data.coins;
                            } else {
                                coins = data.coins.get();
                            }
                            updateCoinValue(coins + 1, 1000);
                            var targetPos = {
                                x: cornerCoin.x * .17 * 2,
                                y: cornerCoin.y * .17 * 2
                            };
                            if (!LEGACY_COORD_SYSTEM) {
                                targetPos = self.coin.parent.toLocal(cornerCoin.getBounds());
                                targetPos = {
                                    x: targetPos.x,
                                    y: targetPos.y
                                }; // if it's not a simple hash, the tween system chokes
                                // + 50 because magic 
                            }
                            new Tween(self.coin, targetPos).call(function() {
                                inAwardCoin = false;
                                if (LEGACY_COORD_SYSTEM) {
                                    XS.stageContainer.removeChild(self.coin);
                                } else {
                                    XS.gui.removeChild(self.coin);
                                }
                                coinIsReady = false;
                            });
                        }
                    }
                    var ball = new Ball();
                    self.addChild(ball);
                    self.spawnCoin = function() {
                        if (!coinIsSpawned) {
                            var offset;
                            if (_abGoldenBall) {
                                offset = 0;
                            } else {
                                offset = coinRow.spawnCoin();
                            }
                            if (offset !== false) {
                                sounds.ding.play();
                                coinIsSpawned = true;
                                animatingCoin = false;
                                self.coin.frame = 0;
                                if (LEGACY_COORD_SYSTEM) {
                                    self.coin.x = width / stage.ratio * XS.devicePixelRatio - basketball.x - hoopBackground.x - 250;
                                    self.coin.y = height / stage.ratio * XS.devicePixelRatio - basketball.y - hoopBackground.y - 250;
                                } else {
                                    var pos = hoopBackground.toLocal(new Point(stage.width - 250, stage.height - 250), stage);
                                    self.coin.x = pos.x;
                                    self.coin.y = pos.y;
                                } //self.coin.x = 1024 + Math.random()*1400-700-125
                                //self.coin.y = Math.random()*200
                                self.coin.scale.set(.8, .8);
                                if (_abGoldenBall) { // Spawn in place
                                    self.coin.anchor.set(0.5, 0.5);
                                    self.coin.scale.set(0.2);
                                    self.coin.visible = true;
                                    self.coin.alpha = 0;
                                    self.coin.x = 0;
                                    self.coin.y = 680;
                                    new Tween(self.coin.scale, {
                                        x: 0.8,
                                        y: 0.8
                                    }, .5, Tween.easein);
                                    new Tween(self.coin, {
                                        alpha: 1
                                    }, .5, Tween.easein);
                                    animatingCoin = true;
                                    coinIsReady = true;
                                    hoopBackground.addChild(self.coin);
                                } else { // Spawn from corner
                                    new Tween(self.coin.scale, {
                                        x: 1.5,
                                        y: 1.5
                                    }, .5, Tween.easeout).call(function() {
                                        new Tween(self.coin.scale, {
                                            x: 1,
                                            y: 1
                                        }, .5, Tween.easein);
                                    });
                                    new Tween(self.coin, {
                                        /*		  				x:1024 + Math.random()*1400-700-125,
                                                    		  					y:Math.random()*200*/
                                        x: -125,
                                        y: 550
                                    }).call(function() {
                                        animatingCoin = true;
                                        coinIsReady = true; //self.addChildAt(self.coin,coinZIndex)
                                    }); //	  		animatingCoin = true
                                    hoopBackground.addChild(self.coin);
                                }
                            }
                        }
                    };
                    self.despawnCoin = function() {
                        if (coinIsSpawned && !inAwardCoin) {
                            coinIsReady = false;
                            coinIsSpawned = false;
                            hoopBackground.removeChild(self.coin);
                            if (!_abGoldenBall) {
                                coinRow.despawnCoin();
                            } else {
                                Tween.clear(self.coin);
                                Tween.clear(self.coin.scale);
                            }
                        }
                    };

                    function getBallSkinOffset(id) {
                        for (var a = 0; a < ballSkins.length; a++) {
                            if (id == ballSkins[a].id) return a;
                        }
                        return 0;
                    }
                    ball.setSkin(ballSkins[getBallSkinOffset(data.ballSkinId.get())]);
                    var fov = 250;
                    var hoopIsBehind = true;
                    var ballIsFading = false;
                    var hasScored = false;
                    var hasShownGameOver = false;
                    var touchedEdges = false;
                    var totalPoints = 0;
                    self.getTotalPoints = function() {
                        return totalPoints;
                    };
                    self.getTotalHoops = function() {
                        return roundStats.totalHoopsShot;
                    };
                    self.getBestScoreInSession = function() {
                        return bestScoreInSession;
                    };
                    self.getTotalGamesPlayed = function() {
                        return totalGamesPlayedInSession;
                    };
                    var scoreLabel = new Text2("+1", {
                        size: 150,
                        font: "'GillSans-Bold',Impact,'Arial Black',Tahoma",
                        fill: "#ffffff"
                    });
                    scoreLabel.alpha = 0;
                    scoreLabel.anchor.set(.5, .5);
                    self.addChild(scoreLabel);

                    function addPoints(value, powerUpBonus, bonusName) {
                        Tween.clear(scoreLabel);
                        var bonusText = "";
                        if (_abGoldenBall && powerUpBonus) {
                            bonusText = " " + bonusName;
                        }
                        scoreLabel.setText("+" + value + bonusText);
                        scoreLabel.alpha = 1;
                        scoreLabel.x = hoop.x;
                        scoreLabel.y = hoop.y + 450;
                        new Tween(scoreLabel, {
                            y: scoreLabel.y - 200,
                            alpha: 0
                        }, 1).wait(.5);
                        totalPoints += value;
                        hoopBackground.setScore(totalPoints);
                        XS.score && XS.score.submitScore(totalPoints);
                        if (totalPoints > data.highscore.get()) {
                            if (_abGoldenBall) {
                                XS.data.highscore = totalPoints;
                            } else {
                                data.highscore.set(totalPoints);
                            }
                            hoopBackground.setHighscore(totalPoints);
                            refreshData(true);
                        }
                    }
                    var multiplierBonus = 0;
                    var isGameOver = true;
                    var hoopCoordinate = {
                        x: hoopBackground.x,
                        y: hoopBackground.y
                    }; // <xdebug>
                    this.fakeHoop = function() {
                        var swishes = NaN;
                        roundStats.totalHoopsShot++; // Swish/no-swish
                        if (touchedEdges) {
                            roundStats.hasHitHoop = true;
                            roundStats.streakAllNetCurrent = 0;
                            multiplierBonus = 0;
                        } else {
                            swishes = 1;
                            roundStats.totalAllNet++;
                            roundStats.streakAllNetCurrent++;
                            if (roundStats.streakAllNetCurrent > roundStats.streakAllNet) {
                                roundStats.streakAllNet = roundStats.streakAllNetCurrent;
                            }
                            multiplierBonus = Math.min(multiplierBonus + 1, 3);
                        }
                        if (!roundStats.hasHitHoop) {
                            roundStats.initialAllNet++;
                        } // Spawn coin when we get the multiplier - should probably be decoupled
                        if (multiplierBonus == 3) {
                            basketball.spawnCoin && basketball.spawnCoin();
                        }
                        awardCoinIfAppropriate(); // Save all-time ball data to data storage
                        var newBallcount = (parseInt(data.ballcount.get()) || 0) + 1;
                        data.ballcount.set(newBallcount); // Show ball count on backboard
                        hoopBackground.setHoopCount(newBallcount); // Sync data to backends
                        refreshData(); // Scoring
                        var powerUpBonus = 0;
                        var powerUpBonusName = null;
                        var pointsWon = touchedEdges ? 2 : 3;
                        if (multiplierBonus > 0) {
                            pointsWon *= multiplierBonus;
                        } // Powerup Multipliers
                        if (_abGoldenBall) { // TODO: Add shoe multiplier
                            if (self.scoreMultiplier > 1) {
                                var basePoints = pointsWon;
                                pointsWon = Math.round(pointsWon * self.scoreMultiplier);
                                powerUpBonus = pointsWon - basePoints;
                                powerUpBonusName = Host.Localize.Translate("Power Up Bonus", {}, "Name of a score bonus you receive when using power-ups, used after number like: +100 power up bonus");
                            }
                        }
                        addPoints(pointsWon, powerUpBonus, powerUpBonusName);
                        if (_abGoldenBall) {
                            goalsModel.handleThrow({
                                points: pointsWon,
                                swishes: swishes,
                                activePowerUpKeys: _activePowerUps
                            });
                        } // Update multiplier on backboard
                        hoopBackground.setMultiplier(multiplierBonus); // Check if tasks (if any) are completed
                        testGoalState(true);
                    }; //</xdebug>
                    // The main Basketball tick
                    function tick() {
                        if (hoopCoordinate.x != hoopBackground.x || hoopCoordinate.y != hoopBackground.y) {
                            var ox = hoopCoordinate.x - hoopBackground.x;
                            var oy = hoopCoordinate.y - hoopBackground.y;
                            hoop.push(ox, oy);
                            hoopCoordinate = {
                                x: hoopBackground.x,
                                y: hoopBackground.y
                            };
                        }
                        if (inAnimation) {
                            ball.setRotation(ball.getRotation() + ball.speedRotation);
                            ball.x += ball.speedX;
                            ball.y += ball.speedY;
                            ball.speedY += 4; // If the ball is falling ...
                            if (ball.speedY > 0) {
                                if (hoopIsBehind) {
                                    hoopIsBehind = false;
                                    self.addChild(hoop);
                                }
                                if (hoop.interact(ball)) {
                                    touchedEdges = true;
                                } // Do this once when we score
                                if (!hasScored && hoop.isGoal(ball)) {
                                    hasScored = true;
                                    var swishes = NaN;
                                    roundStats.totalHoopsShot++; // Swish/no-swish
                                    if (touchedEdges) {
                                        roundStats.hasHitHoop = true;
                                        roundStats.streakAllNetCurrent = 0;
                                        sounds.net.play(0);
                                        multiplierBonus = 0;
                                    } else {
                                        swishes = 1;
                                        roundStats.totalAllNet++;
                                        roundStats.streakAllNetCurrent++;
                                        if (roundStats.streakAllNetCurrent > roundStats.streakAllNet) {
                                            roundStats.streakAllNet = roundStats.streakAllNetCurrent;
                                        }
                                        sounds.netDirect.play(0);
                                        multiplierBonus = Math.min(multiplierBonus + 1, 3);
                                    }
                                    if (!roundStats.hasHitHoop) {
                                        roundStats.initialAllNet++;
                                    } // Spawn coin when we get the multiplier - should probably be decoupled
                                    if (multiplierBonus == 3) {
                                        basketball.spawnCoin && basketball.spawnCoin();
                                    }
                                    awardCoinIfAppropriate(); // Save all-time ball data to data storage
                                    var newBallcount = (parseInt(data.ballcount.get()) || 0) + 1;
                                    if (_abGoldenBall) {
                                        XS.data.ballcount = newBallcount;
                                    } else {
                                        data.ballcount.set(newBallcount);
                                    } // Show ball count on backboard
                                    hoopBackground.setHoopCount(newBallcount); // Sync data to backends
                                    refreshData(); // Scoring
                                    var powerUpBonus = 0;
                                    var powerUpBonusName = null;
                                    var pointsWon = touchedEdges ? 2 : 3;
                                    if (multiplierBonus > 0) {
                                        pointsWon *= multiplierBonus;
                                    } // Powerup Multipliers
                                    if (_abGoldenBall) { // TODO: Add shoe multiplier
                                        if (self.scoreMultiplier > 1) {
                                            var basePoints = pointsWon;
                                            pointsWon = Math.round(pointsWon * self.scoreMultiplier);
                                            powerUpBonus = pointsWon - basePoints;
                                            powerUpBonusName = Host.Localize.Translate("Power Up Bonus", {}, "Name of a score bonus you receive when using power-ups, used after number like: +100 power up bonus");
                                        }
                                    }
                                    addPoints(pointsWon, powerUpBonus, powerUpBonusName);
                                    if (_abGoldenBall) {
                                        goalsModel.handleThrow({
                                            points: pointsWon,
                                            swishes: swishes,
                                            activePowerUpKeys: _activePowerUps
                                        });
                                    } // Handle clap sounds
                                    var clapScore = totalPoints * multiplierBonus;
                                    if (clapScore > 65 * 3) {
                                        sounds.clap[4].play(0);
                                    } else if (clapScore > 50 * 3) {
                                        sounds.clap[3].play(0);
                                    } else if (clapScore > 45 * 3) {
                                        sounds.clap[2].play(0);
                                    } else if (clapScore > 30 * 3) {
                                        sounds.clap[1].play(0);
                                    } else if (clapScore > 18 * 3) {
                                        sounds.clap[0].play(0);
                                    } // Update multiplier on backboard
                                    hoopBackground.setMultiplier(multiplierBonus); // Check if tasks (if any) are completed
                                    testGoalState(true);
                                }
                            } // Move ball "inwards"
                            if (ball.z < 130) {
                                ball.z += 3;
                                ball.z = Math.min(ball.z, 130);
                            } // Trigger when game is over
                            if (ball.y > 1250 && !hasScored && ball.speedY > 0 && !hasShownGameOver && totalPoints != 0) {
                                hasShownGameOver = true; // Play aww sound
                                if (totalPoints >= 45) {
                                    sounds.awww[1].play(0);
                                } else {
                                    sounds.awww[0].play(0);
                                }
                            } // Fade ball when it's below threshold on screen
                            if (ball.y > 1350 && ball.speedY > 0 && !ballIsFading) {
                                ballIsFading = true;
                                new Tween(ball, {
                                    alpha: 0
                                }, .2).call(function() {
                                    XS.setTimeout(function(scored) {
                                        return function() {
                                            resetBall();
                                            basketball.onShot(scored);
                                        };
                                    }(hasScored), 100);
                                });
                            } // Fake Z depth scaling
                            var scale = fov / (fov + ball.z);
                            ball.scale.set(scale, scale);
                        }
                    }
                    self.onGameOver = function(callback) {
                        self.showShopGameOver(callback);
                    };
                    self.showShop = function(callback, isGameOver) {
                        self.showShopGameOver(callback, !isGameOver);
                    }; // Ball selector  shop - shows "game over" and side menu variation
                    self.showShopGameOver = function(callback, isshop) {
                        XS.track.customEvent('shop_show', 1);
                        var currentBallViewOffset = getBallSkinOffset(data.ballSkinId.get());
                        var modal = new Modal.GameEndModal({
                            headline: isshop ? Host.Localize.Translate("Ball Shop", {}, "In-game ball shop modal headline") : Host.Localize.Translate("Game Over", {}, "In-game game over modal headline"),
                            lead: Host.Localize.Translate("Select Your Ball", {}, "Headline for Basketball FRVR ball shop"),
                            mainActionCallback: function mainActionCallback() {
                                if (hasBallOffset(currentBallViewOffset)) {
                                    data.ballSkinId.set(ballSkins[currentBallViewOffset].id);
                                    ball.setSkin(ballSkins[currentBallViewOffset]);
                                    callback();
                                }
                            },
                            mainActionText: Host.Localize.Translate("Play"),
                            mainActionColor: 0xfb6d26,
                            contentTop: 540,
                            disableMetaButton: false
                        });
                        var prevButton = new Sprite(fetch_i_g_shopbtn_svg());
                        prevButton.anchor.set(.5, .5);
                        modal.addChild(prevButton);
                        prevButton.x = 100;
                        prevButton.y = 160 + 200;
                        prevButton.on('down', function() {
                            renderBall(currentBallViewOffset - 1);
                        });
                        var nextButton = new Sprite(fetch_i_g_shopbtn_svg());
                        nextButton.anchor.set(.5, .5);
                        nextButton.scale.set(-1, 1);
                        modal.addChild(nextButton);
                        nextButton.x = 100 + 600;
                        nextButton.y = 160 + 200;
                        nextButton.on('down', function() {
                            renderBall(currentBallViewOffset + 1);
                        });
                        var btnWidth = 310;
                        var btnHeight = 100;
                        var coinButton = new Container();
                        coinButton.x = 400;
                        coinButton.y = 160 + 400 - 60 + 10 + 50;
                        var balloutline = new Sprite(fetch_i_g_ballloader_svg(), 0.4, true);
                        balloutline.anchor.set(.5, .5); //balloutline.scale.set(.4,.4)
                        balloutline.x = 400;
                        balloutline.y = 360;
                        balloutline.alpha = .5;
                        modal.addChild(balloutline);
                        var coinButtonBG = new Graphics();
                        coinButtonBG.beginFill(0x368197, 1);
                        coinButtonBG.drawRoundedRect(0, 0, btnWidth, btnHeight, 20);
                        if (LEGACY_COORD_SYSTEM) {
                            coinButtonBG.x = 0; //-btnWidth//*XS.devicePixelRatio
                            coinButtonBG.y = 0; // -25*XS.devicePixelRatio
                        } else {
                            coinButtonBG.x = -btnWidth / 2; //*XS.devicePixelRatio
                            coinButtonBG.y = -btnHeight / 2; // -25*XS.devicePixelRatio
                        }
                        coinButton.addChild(coinButtonBG);
                        var coin = new Sheet(fetch_i_g_coinsheet_svg(), 250, 250);
                        coin.scale.set(.48, .48);
                        coin.x = 8 - btnWidth / 2 - 15;
                        coin.y = 8 - 50 - 15 + 1; //coin.scale.set(.48,.48)
                        //if(!LEGACY_COORD_SYSTEM) {
                        //	coin.resolution = coin.scale.x
                        //	coin.applyResolution()
                        //}
                        coinButton.addChild(coin);
                        var coinLabel = new Text2("1000", {
                            weight: 400,
                            fill: "#FFFFFF",
                            size: 70,
                            maxWidth: 210,
                            dropShadow: true
                        });
                        coinLabel.anchor.set(.5, .5);
                        coinButton.addChild(coinLabel);
                        coinLabel.x = 35;
                        coinLabel.y = 1;
                        modal.addChild(coinButton);
                        modal.setRatio = function(ratio) {
                            if (!LEGACY_COORD_SYSTEM) return;
                            coinButtonBG.width = ratio * btnWidth;
                            coinButtonBG.x = -coinButtonBG.width / 2;
                            coinButtonBG.y = -50 * ratio;
                            coinButtonBG.height = ratio * 100;
                        };
                        coinButtonBG.on('down', function() {
                            var skin = ballSkins[currentBallViewOffset];
                            var cost;
                            var coinsWeHave;
                            if (_abGoldenBall) {
                                cost = skin.coinCost2;
                                coinsWeHave = XS.data.coins;
                            } else {
                                cost = skin.coinCost;
                                coinsWeHave = data.coins.get();
                            }
                            if (cost <= coinsWeHave) {
                                var state = JSON.parse(data.unlocked.get() || "{}");
                                state[skin.id] = true;
                                if (_abGoldenBall) {
                                    XS.data.unlocked = JSON.stringify(state);
                                } else {
                                    data.unlocked.set(JSON.stringify(state));
                                }
                                coinsWeHave -= cost;
                                updateCoinValue(coinsWeHave);
                                if (_abGoldenBall) {
                                    XS.data.save();
                                } else {
                                    refreshData();
                                }
                                loadAndRenderBall(currentBallViewOffset);
                            }
                        });
                        var skinBall, skinShine;

                        function loadAndRenderBall(offset) {
                            var skin = ballSkins[offset];
                            var coinsWeHave;
                            var cost;
                            if (_abGoldenBall) {
                                coinsWeHave = XS.data.coins;
                                cost = skin.coinCost2;
                            } else {
                                coinsWeHave = data.coins.get();
                                cost = skin.coinCost;
                            }
                            if (skinBall) {
                                skinBall.parent.removeChild(skinBall);
                                skinBall = undefined;
                            }
                            if (skinShine) {
                                skinShine.parent.removeChild(skinShine);
                                skinShine = undefined;
                            }
                            coinLabel.setText(cost);
                            var hasBall = hasBallOffset(offset);
                            coinButton.visible = !hasBall;
                            coinLabel.alpha = coin.alpha = coinsWeHave >= cost ? 1 : .5;
                            if (hasBall) {
                                modal.mainAction.setColor(0xfb6d26);
                            } else {
                                modal.mainAction.setColor(0xDDDDDD);
                            }

                            function render() {
                                if (offset == currentBallViewOffset) {
                                    skinBall = new Sprite(fetch(skin.ballGraphics), 0.5, true);
                                    skinBall.anchor.set(.5, .5); //skinBall.scale.set(.5,.5)
                                    skinShine = new Sprite(fetch(skin.ballShine), 0.5, true);
                                    skinShine.anchor.set(.5, .5); //skinShine.scale.set(.5,.5)
                                    skinShine.x = skinBall.x = 400;
                                    skinShine.y = skinBall.y = 360;
                                    modal.addChild(skinBall);
                                    modal.addChild(skinShine);
                                }
                            }
                            var images = [skin.ballGraphics, skin.ballShine, render];
                            preload.apply(window, images);
                        }

                        function renderBall(offset) {
                            currentBallViewOffset = Math.max(0, offset, Math.min(offset, ballSkins.length - 1));
                            loadAndRenderBall(currentBallViewOffset);
                            prevButton.visible = currentBallViewOffset != 0;
                            nextButton.visible = currentBallViewOffset != ballSkins.length - 1;
                        }
                        renderBall(currentBallViewOffset);
                        Modal.show(modal);
                        /*
                                    			window.continueButton = new GUI.Button('Testing Button', { image: fetch('i/g/ball_golden.svg'), imageScale: 0.1 } )
                                    			window.continueButton.x = 30
                                    			window.continueButton.y = -30
                                    			modal.addChild( window.continueButton )
                                    			window.continueButton.on('down',function(e) { 
                                    				console.log("Test button 1", e )
                                    			})

                                    			window.continueButton2 = new GUI.Button('Testing Sized Button', { width: 450, height: 120, image: fetch('i/g/ball_golden.svg'), imageScale: 0.1, imagePosition: 'right' } )
                                    			window.continueButton2.x = 30
                                    			window.continueButton2.y = -180
                                    			modal.addChild( window.continueButton2 )
                                    			window.continueButton2.on('down',function(e) { 
                                    				console.log("Test button 2", e )
                                    			})

                                    			window.continueButton2b = new GUI.Button('Short', { width: 450, height: 120, image: fetch('i/g/ball_golden.svg'), imageScale: 0.1, imagePosition: 'right' } )
                                    			window.continueButton2b.x = -430
                                    			window.continueButton2b.y = -180
                                    			modal.addChild( window.continueButton2b )
                                    			window.continueButton2.on('down',function(e) { 
                                    				console.log("Test button 2b", e )
                                    			})

                                    			window.continueButton3 = new GUI.Button( fetch('i/g/ball_golden.svg'), { width: 200, height: 200 } )
                                    			window.continueButton3.x = 500
                                    			window.continueButton3.y = -180
                                    			modal.addChild( window.continueButton3 )
                                    			window.continueButton3.on('down',function(e) { 
                                    				console.log("Test button 3", e )
                                    			})

                                    			window.continueButton4 = new GUI.Button( "The Golden", { width: 200, height: 300, image: fetch('i/g/ball_golden.svg'), imagePosition: 'top' } )
                                    			window.continueButton4.x = 900
                                    			window.continueButton4.y = -180
                                    			modal.addChild( window.continueButton4 )
                                    			window.continueButton4.on('down',function(e) { 
                                    				console.log("Test button 4", e )
                                    			})

                                    			window.continueButton5 = new GUI.Button( "Silver", { width: 300, height: 400, image: fetch('i/g/ball_silver.svg'), imagePosition: 'bottom' } )
                                    			window.continueButton5.x = 900
                                    			window.continueButton5.y = 280
                                    			modal.addChild( window.continueButton5 )
                                    			window.continueButton5.on('down',function(e) { 
                                    				console.log("Test button 5", e )
                                    			})
                                    			*/
                    }; // -------------------------------------
                    //           Tournament Stuff
                    // -------------------------------------
                    function refreshTournamentStatus() {
                        updateGoals();
                    }

                    function showFacebookGameOver() {
                        if (_abGoldenBall) {
                            goalsModel.cancelPopup();
                        }
                        Modal.hide();
                        handleGameOverInternals();
                        hoopBackground.setMode("singleplayer");
                        XS.state && XS.state.endGame(); //Trigger XS.Social.Leaderboards.UI.LeaderBoardScreen().show() or XS.Social.Leaderboards.UI.GameOverScreen().show()
                    }
                    XS.on('std:new_game', function() {
                        refreshTournamentStatus();
                        newGame(isPlayingInTournament);
                    });
                    self.showFacebookGameOver = showFacebookGameOver; // Reset game state and update states
                    function handleGameOverInternals() {
                        isFirstGameOver = true;
                        clearGoals();
                        totalGamesPlayedInSession++;
                        isGameOver = true;
                        hoopBackground.setMultiplier(0);
                        refreshData();
                        self.despawnCoin();
                        if (!_abGoldenBall) {
                            coinRow.visible = true;
                        }
                        resetVisuals();
                    }

                    function handleGameOver() {
                        var gameOverCallback = function gameOverCallback() {
                            XS.score && XS.score.submitFinalScore(totalPoints); // trigger viral leaderboard on facebook instant
                            // Gate to single player right now
                            if (XS.is.facebookInstant) {
                                showFacebookGameOver();
                            } else { //unsloppify: block-level definition hoisted to true scope.
                                //unsloppify: this is potentially dangerous if function is called before!
                                //unsloppify: do verify this manually!
                                var _gameover = function _gameover() {
                                    self.onGameOver(function() {
                                        Modal.hide(function() {
                                            if (!usedRetry) XS.ads.show('interstitial');
                                            newGame();
                                        });
                                    });
                                };
                                if (XS.score.showShareTournament) {
                                    XS.score.showShareTournament(totalPoints, function name(params) {
                                        _gameover();
                                    });
                                } else {
                                    _gameover();
                                }
                            }
                        };
                        handleGameOverInternals();
                        XS.data.tutorialGames++; // if(_abGoldenBall && !_abGoalsFeature) {
                        // 	// Award a prize, then reset the game
                        // 	var prize = shouldAwardPrize()
                        // 	if(prize) {
                        //
                        // 		var dialogInfo = { score: totalPoints }
                        //
                        // 		// Force price
                        // 		if(prize !== true) {
                        // 			dialogInfo.prize = prize
                        // 		}
                        //
                        // 		var prizeDialog = new PrizeDialog(dialogInfo)
                        // 		prizeDialog.open(function() {
                        // 			// Gate to single player right now
                        // 			if(XS.is.facebookInstant) {
                        // 				showFacebookGameOver()
                        // 			} else {
                        // 				newGame()
                        // 			}
                        // 		})
                        // 		return
                        // 	}
                        //
                        // }
                        var showGoalsPopup = false;
                        if (_abGoldenBall) {
                            showGoalsPopup = function() {
                                if (XS.is.facebookInstant) {
                                    if (window.Social.Instant.isMultiuserContext() && !!XS.Social.Leaderboards._getCurrentOpponent()) {
                                        return false;
                                    }
                                }
                                return true; // return goalsModel.canShowPopup();
                            }();
                            if (showGoalsPopup) {
                                goalsModel.gameOver();
                                XS.once("render", function() {
                                    goalsModel.triggerPopup(gameOverCallback);
                                });
                            }
                        }
                        if (XS.is.facebookInstant && window.FBInstant) {
                            if (!isPlayingInTournament) {
                                sendFBBotPostback();
                                testGoalState();
                            }
                        } else {
                            if (XS.is.samsungBixby || XS.is.rcs) {
                                testGoalState();
                            }
                        }
                        if (!showGoalsPopup) {
                            gameOverCallback();
                        }
                    }
                    var usedRetry = false;
                    var isShopVisible = true;

                    function newGame(isTournament) {
                        if (_abGoldenBall) { // if (firstThrow || basketball.getTotalPoints() > 0) {
                            // 	if (!isTournament) {
                            //         goalsModel.triggerPopup()
                            //     }
                            // }
                            goalsModel.resetRoundStats();
                        }
                        __coinsThisGame = 0; // reset coin analytics for each round
                        if (_abGoldenBall) { // More fun if disabled?
                            //basketball.resetPowerUps()
                            if (XS.is.facebookInstant) { //var multiPlayer = window.Social.Instant.isMultiuserContext()
                                var multiPlayer = isTournament; // Disable powerups in multiplayer
                                ballSelector.hide(multiPlayer, true);
                                drinkSelector.hide(multiPlayer, true); // Don't carry over powerups to multiplayer
                                if (multiPlayer) {
                                    basketball.resetPowerUps();
                                }
                            }
                        }
                        usedRetry = false;
                        if (!isTournament) {
                            isPlayingInTournament = false;
                            updateGoals();
                            hoopBackground.setMode("singleplayer");
                            hoopBackground.setHighscore(data.highscore.get());
                            __gameMode = "practice";
                        } else {
                            __gameMode = "tournament";
                        }
                        console.log("New Game:", {
                            isTournament: isTournament,
                            __gameMode: __gameMode
                        });
                        if (!isShopVisible) {
                            isShopVisible = true;
                            if (!_abGoldenBall) {
                                Tween.clear(shopArrow);
                                new Tween(shopArrow, {
                                    alpha: 1
                                }, .25);
                            }
                        }
                        resetRoundStats();
                        isGameOver = false;
                        totalPoints = 0;
                        hoopBackground.setScore(totalPoints);
                        multiplierBonus = 0;
                        hoopBackground.setMultiplier(0);
                        randomizeHoopPosition();
                        trackPlay();
                        testGoalState();
                        resetVisuals();
                        self.despawnCoin();
                    }
                    self.newGame = newGame;

                    function resetVisuals() {
                        hoop.reset();
                        ball.x = targetHeight / 2;
                        ball.y = 2200;
                        shadow.x = targetHeight / 2;
                        shadow.y = ball.y + 270;
                        hoopIsBehind = true;
                        ballIsFading = false;
                        inAnimation = false;
                        inDrag = false;
                        ball.scale.set(1, 1);
                        ball.z = 0;
                        ball.speedRotation = 0;
                        touchedEdges = false; //ball.setRotation(0)
                        self.addChild(ball);
                    } // 	if(XS.is.facebookInstant) {
                    // 	// Tournament "You are winnin" dialogue
                    // 	function showYouAreWinningModal(score, balls){
                    // 		var isRandomEnabled = FBInstant.getSupportedAPIs().indexOf('matchPlayerAsync') != -1 && true
                    // 		var isShareEnabled = FBInstant.getSupportedAPIs().indexOf('shareAsync') != -1 && true
                    // 		var pushHeight = (isRandomEnabled?165:0) + (isShareEnabled?165:0)
                    // 		var modal = new Modal.GameEndModal({
                    // 			headline:Host.Localize.Translate("You are in the lead!",{},"Game over modal headline"),
                    // 			lead:Host.Localize.Translate("With {score} Points in {balls} Throws",{score:score, balls:balls},"Congratulary dialouge text telling the user they are now in the lead."), //Host.Localize.Translate("You can't play while winning.", {}, "Shows score on end screen")
                    // 			mainActionCallback:function(){
                    // 				Modal.hide(function(){
                    // 					handleGameOver()
                    // 				})
                    // 			},
                    // 			disableMetaButton:true,
                    // 			mainActionText:Host.Localize.Translate("Back"),
                    // 			mainActionColor:0xfb6d26,
                    // 			contentTop:230 + pushHeight - 55+30
                    // 		})
                    // 		var tt = modal.addTextBlock("(You can't play while you're in the lead.)", 35)
                    // 		tt.y = 230-20
                    // 		var push = 0
                    // 		if(isShareEnabled){
                    // 			var b1 = modal.addMiddleButton(
                    // 				Host.Localize.Translate("Share {gamename}", {gamename:Config.shortTitle}), 
                    // 				Host.Localize.Translate("Post {gamename} to your feed", {gamename:Config.shortTitle}), 
                    // 				function(){
                    // 					window.Social.Instant.shareGame(function(success){
                    // 					})
                    // 				}
                    // 			, 0x2d4879)
                    // 			b1.y = 230+30
                    // 			push+=165
                    // 		}
                    // 		if(isRandomEnabled){
                    // 			var b2 = modal.addMiddleButton(
                    // 				Host.Localize.Translate("Find players"), 
                    // 				Host.Localize.Translate("Play with random group"), 
                    // 				function(){
                    // 					Modal.hide(function(){
                    // 						window.Social.Instant.matchPlayerAsync(function(success){
                    // 							if(success){
                    // 								Modal.hide();
                    // 							}else showYouAreWinningModal(score, balls);
                    // 						})
                    // 					})
                    // 				}
                    // 			, 0x00b208)
                    // 			b2.y = 230 + push+30
                    // 		}
                    // 		modal.blurCallback = undefined
                    // 		Modal.show(modal)
                    // 	}
                    // 	// function submitTournamentResults(score, throws, callback){
                    // 	// 	var toSubmit = {
                    // 	// 		score:score,
                    // 	// 		actions:throws,
                    // 	// 		player:{
                    // 	// 			name:FBInstant.player.getName(),
                    // 	// 			id:FBInstant.player.getID(),
                    // 	// 			photo:FBInstant.player.getPhoto()
                    // 	// 		}
                    // 	// 	}
                    // 	// 	window.Social.Instant.postTournamentStatus(toSubmit, function(status, data){
                    // 	// 		if(status == 'success') {
                    // 	// 			callback&&callback(true)
                    // 	// 		}else{
                    // 	// 			callback&&callback(false)
                    // 	// 		}
                    // 	// 	})
                    // 	// }
                    // 	// XS.on('FBInstantPostTournament', function(data){
                    // 	// 	var scores = data.scores
                    // 	// 	if(scores.length>0){
                    // 	// 		var toplistData = [];
                    // 	// 		for(var a=0;a<scores.length;a++){
                    // 	// 			var entry = scores[a]
                    // 	// 			var text = Host.Localize.Translate(Config.facebookInstantTournamentScoreTemplate ,{score:entry.score,actions:entry.actions})
                    // 	// 			toplistData.push([entry.id,entry.name,entry.photo,text.toString()])
                    // 	// 		}
                    // 	// 		window.Social.Instant.postHighscoreToChannel(
                    // 	// 			toplistData,
                    // 	// 			Host.Localize.Translate("The previous ð tournament is over and the results are in!",{},"Text shown with image of the end of tournament screen").toString()
                    // 	// 		)
                    // 	// 	}
                    // 	// })
                    // }
                    new(Modal.ModalOverlayContent.expand(function() {
                        Modal.ModalOverlayContent.call(this);
                        this.addHeadline(Host.Localize.Translate("Game Over", {}, "Game over modal headline"));
                        this.addLead(Host.Localize.Translate("You did not beat the best score.", {}, "Game over modal text"));
                        this.innerHeight = 250;
                        this.blurClose = false;
                    }))();
                    new(Modal.ModalOverlayContent.expand(function() {
                        Modal.ModalOverlayContent.call(this);
                        this.addHeadline(Host.Localize.Translate("Well done!", {}, "Modal for when people take the lead headline"));
                        this.addLead(Host.Localize.Translate("You beat the high score\nand took the lead.", {}, "Text in dialouge when you take the lead"));
                        this.innerHeight = 290;
                        this.blurClose = false;
                    }))();
                    /*window.debugAds = function(){
                                			window.Social.Instant.ShowTryAgain({
                                				rewardVideo:rewardVideo,
                                				headline:Host.Localize.Translate("Continue?",{},"Headline in retry overlay").toString(),
                                				subtext:Host.Localize.Translate("Undo throw and keep playing",{},"Headline subtext in retry overlay").toString()
                                			}, function(success){
                                				console.warn("success", success)
                                			})

                                		}*/
                    var firstThrow = true;
                    var isFirstGameOver = true;

                    function resetBall(isFirst) {
                        if (_abGoldenBall) {
                            var current = ball.getPowerUp();
                            if (current) { // TODO: Give back current powerup
                                ball.setPowerUp(null);
                            }
                        }
                        resetVisuals();
                        if (hasScored || isFirst) {
                            randomizeHoopPosition();
                        } else if (!isGameOver) { // Show a quick "Try again" and continue
                            if (totalPoints == 0) {
                                Modal.show(new TryAgainModal(), true, true);
                                XS.setTimeout(function() {
                                    if (!isGameOver) Modal.hide();
                                }, 1000);
                                if (_abGoldenBall) {
                                    goalsModel.update();
                                }
                                newGame(isPlayingInTournament);
                            } else {
                                firstThrow = true;
                                var trackData = getTrackData(true);
                                trackData.usedRetry = usedRetry.toString();
                                trackData.points = totalPoints;
                                trackData.throws = roundStats.totalHoopsShot;
                                XS.track.gameEnd(__levelId, trackData); //00 to fix Game analytics complaining
                                var shouldShowRewardsVideoOverlay = (roundStats.totalHoopsShot >= 7 || totalPoints / roundStats.totalHoopsShot >= 6) && XS.ads.enabled('reward') && XS.ads.ready('reward');
                                if (XS.showTryAgainModal && isFirstGameOver && shouldShowRewardsVideoOverlay) {
                                    isFirstGameOver = false;
                                    var cbTryAgain = function cbTryAgain(result) {
                                        if (result) {
                                            usedRetry = true;
                                            randomizeHoopPosition();
                                        } else {
                                            handleGameOver();
                                        }
                                    };
                                    XS.showTryAgainModal({}, cbTryAgain, totalPoints, data.highscore.get());
                                } else {
                                    handleGameOver();
                                }
                            }
                        }
                        hasScored = false;
                        hasShownGameOver = false;
                    }
                    Sidebar.icon.tint = 0x61392e;
                    var isAnimating = false;
                    self.isBallMoving = function() {
                        return inAnimation;
                    };
                    self.isActive = function() {
                        return inAnimation || inDrag;
                    }; // speedMultiplier < 1 slows down the net (can't be 0)
                    function randomizeHoopPosition(force) {
                        var speedMultiplier = self.speedMultiplier || 1;
                        if (totalPoints < 45) {
                            Tween.clear(hoop, hoopBackground);
                            isAnimating = false;
                            var offsetX = totalPoints >= 15 ? 700 * (Math.random() * 2 - 1) : 0;
                            var offsetY = totalPoints >= 30 ? 400 * (Math.random() * 2 - 1) : 0; // Move backboard quickly to new position
                            new Tween(hoop, {
                                x: targetHeight / 2 + offsetX,
                                y: 600 + offsetY + 280
                            }, .5 / speedMultiplier);
                            new Tween(hoopBackground, {
                                x: targetHeight / 2 + offsetX,
                                y: 600 + offsetY
                            }, .5 / speedMultiplier);
                        } else { // Move quickly to new starting point
                            if (force) {
                                Tween.clear(hoop, hoopBackground);
                            } else {
                                var offsetY = 400 * (Math.random() * 2 - 1);
                                new Tween(hoop, {
                                    y: 600 + offsetY + 280
                                }, .5 / speedMultiplier);
                                new Tween(hoopBackground, {
                                    y: 600 + offsetY
                                }, .5 / speedMultiplier);
                            } // Then animate slowly in a loop
                            if (!isAnimating || force) {
                                isAnimating = true; //unsloppify: block-level definition hoisted to true scope.
                                //unsloppify: this is potentially dangerous if function is called before!
                                //unsloppify: do verify this manually!
                                var restart = function restart() {
                                    var duration = 4 / speedMultiplier;
                                    new Tween(hoop, {
                                        x: targetHeight / 2 + 700
                                    }, duration, Tween.linear);
                                    new Tween(hoopBackground, {
                                        x: targetHeight / 2 + 700
                                    }, duration, Tween.linear).call(function() {
                                        new Tween(hoop, {
                                            x: targetHeight / 2 + -700
                                        }, duration, Tween.linear);
                                        new Tween(hoopBackground, {
                                            x: targetHeight / 2 + -700
                                        }, duration, Tween.linear).call(restart);
                                    });
                                };
                                var duration = 2 / speedMultiplier;
                                new Tween(hoop, {
                                    x: targetHeight / 2 + -700
                                }, duration, Tween.linear);
                                new Tween(hoopBackground, {
                                    x: targetHeight / 2 + -700
                                }, duration, Tween.linear).call(function() {
                                    restart();
                                });
                            }
                        }
                        new Tween(ball, {
                            alpha: 1
                        }, .2);
                        Tween.clear(shadow, shadow.scale);
                        shadow.scale.set(1, 1);
                        shadow.alpha = 1;
                    }
                    resetBall(true);
                    hoopBackground.setHighscore(data.highscore.get() || 0, true);
                    hoopBackground.setHoopCount(data.ballcount.get() || 0);
                    refreshData();
                    var inAnimation = false;
                    var inDrag = false;
                    var dragPosition = undefined;
                    var dragStart = new Date().getTime();
                    var baseBallPosition;
                    var dropTimer = 0;
                    ball.on('down', function(data) {
                        if (inAnimation || inDrag || isGameOver) return;
                        if (isShopVisible) {
                            isShopVisible = false;
                            if (shopArrow) {
                                Tween.clear(shopArrow);
                                new Tween(shopArrow, {
                                    alpha: 0
                                }, .25);
                            }
                        }
                        Tween.clear(ball, ball.scale, shadow, shadow.scale);
                        ball.alpha = 1;
                        hideTutorial();
                        if (_abGoldenBall) {
                            goalsModel.cancelPopup();
                        }
                        inDrag = true;
                        dragPosition = data.event.getLocalPosition(self);
                        baseBallPosition = {
                            x: ball.x,
                            y: ball.y
                        };
                        dragStart = new Date().getTime();
                        XS.clearTimeout(dropTimer);
                        dropTimer = XS.setTimeout(function() {
                            if (!inAnimation) {
                                inDrag = false;
                                dropBall();
                            }
                        }, 500);
                    });

                    function executeMove(data, upEvent) {
                        if (inDrag && !inAnimation && !isGameOver) {
                            var endPosition = data.event.getLocalPosition(self);
                            var ox = endPosition.x - dragPosition.x;
                            var oy = endPosition.y - dragPosition.y;
                            var oxg = ox;
                            var oyg = oy;
                            if (LEGACY_COORD_SYSTEM) {
                                oxg = ox / ball.ratio;
                                oyg = oy / ball.ratio;
                            }
                            ball.x = baseBallPosition.x + oxg / (1 + Math.abs(oxg || 1) * .002);
                            ball.y = Math.min(baseBallPosition.y + oyg / (1 + Math.abs(oyg || 1) * .002), 2200);
                            shadow.x = ball.x;
                            var shadowSize = Math.max(1 - Math.max(2200 - ball.y, 0) / 200, 0);
                            shadow.alpha = shadowSize;
                            shadow.scale.set(1 + (1 - shadowSize) / 10, 1 + (1 - shadowSize) / 10);
                            var dist = Math.sqrt(ox * ox + oy * oy);
                            var forced = dist > 400;
                            var bigDist = dist / self.ratio > 300 || dist > 300 || upEvent && dist / self.ratio > 50;
                            if (LEGACY_COORD_SYSTEM) {
                                forced = dist / self.ratio > 400 || dist > 400;
                                bigDist = dist > 300 || dist > 300 || upEvent && dist > 50;
                            }
                            if (bigDist) { //unsloppify: is this variable declared anywhere?
                                var ox = endPosition.x - dragPosition.x;
                                var oy = endPosition.y - dragPosition.y; //unsloppify: is this variable declared anywhere?
                                angle = Math.atan2(oy, ox);
                                var speed = 130;
                                var newXSpeed = Math.cos(angle) * speed / 5;
                                var newYSpeed = Math.sin(angle) * speed;
                                var diffTime = new Date().getTime() - dragStart;
                                if (diffTime > 300 || forced || upEvent) {
                                    if (newYSpeed < 0) {
                                        XS.clearTimeout(dropTimer);
                                        newYSpeed = Math.min(newYSpeed, -125);
                                        ball.speedX = newXSpeed;
                                        ball.speedY = newYSpeed;
                                        ball.speedRotation = ball.speedX / 200;
                                        sounds.throws[Math.random() * 2 | 0].play(0);
                                        if (firstThrow == true) {
                                            firstThrow = false;
                                            var trackData = getTrackData();
                                            if (XS.is.facebookInstant);
                                            XS.track.gamePlayStart(__levelId, trackData);
                                        }
                                        inAnimation = true;
                                        self.startPowerUps();
                                        new Tween(shadow, {
                                            alpha: 0
                                        }, .1);
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                    stage.on('move', function(data) {
                        executeMove(data); //inAnimation = false;
                    });
                    stage.on('up', function(data) {
                        if (!executeMove(data, true) && !inAnimation && !isGameOver) {
                            dropBall();
                            inDrag = false;
                        }
                    });

                    function dropBall() {
                        new Tween(ball, {
                            x: targetHeight / 2,
                            y: 2200
                        }, .2, Tween.easeout);
                        new Tween(shadow, {
                            alpha: 1,
                            x: targetHeight / 2
                        }, .2, Tween.easeout);
                        new Tween(shadow.scale, {
                            x: 1,
                            y: 1
                        }, .2, Tween.easeout);
                    }
                    XS.on('tick', function() {
                        tick();
                        hoop.tick();
                    });
                    var finger = new Sprite(fetch_i_g_finger_svg());
                    finger.x = targetHeight / 2;
                    finger.y = 2200;
                    finger.anchor.set(.15, .24);

                    function showTutorial() {
                        if (!data.hideTutorial.get()) {
                            if (!_abGoldenBall) {
                                coinRow.visible = false;
                            }
                            self.addChild(finger);
                            new Tween(finger.scale, {
                                x: .9,
                                y: .9
                            }, .1).call(function() {
                                new Tween(finger, {
                                    y: 1300,
                                    alpha: 0
                                }, .4).call(function() {
                                    finger.y = 2200;
                                    finger.scale.set(1, 1);
                                    new Tween(finger, {
                                        alpha: 1
                                    }, .5).call(showTutorial).wait(.2);
                                }).wait(.2);
                            });
                        }
                    }
                    showTutorial();

                    function hideTutorial() {
                        if (!data.hideTutorial.get()) {
                            data.hideTutorial.set(true); //unsloppify: is this variable declared anywhere?
                            showTutorial = false;
                            new Tween(finger, {
                                alpha: 0
                            }, .5).call(function() {
                                finger.parent && finger.parent.removeChild(finger);
                            });
                        }
                    }
                    var FBInstantData;
                    var currentTasks = [];
                    var blockRCSProgression = false;
                    XS.on('RCS', function() {
                        if (XS.is.rcs) { //unsloppify: block-level definition hoisted to true scope.
                            //unsloppify: this is potentially dangerous if function is called before!
                            //unsloppify: do verify this manually!
                            var getAndSetTasks = function getAndSetTasks() {
                                rcs.getTasks('Basketball', function(res) {
                                    currentTasks = res;
                                    updateGoals();
                                });
                            };
                            rcs.init('Basketball', getAndSetTasks);
                        }
                    });

                    function sendFBBotPostback(partialData) {
                        if (isPlayingInTournament) return;
                        if (XS.is.rcs && window.rcs) {
                            rcs.updateStory('Basketball', {
                                task: true
                            });
                            return blockRCSProgression = true;
                        } //New format
                        var dataToPost = {
                            bestScoreInSession: bestScoreInSession,
                            ballcount: data.ballcount.get(),
                            score: totalPoints,
                            initialAllNet: roundStats.initialAllNet,
                            totalAllNet: roundStats.totalAllNet,
                            streakAllNet: roundStats.streakAllNet,
                            totalHoopsShot: roundStats.totalHoopsShot
                        };
                        window.Social.Instant.submitData(dataToPost, partialData, true);
                    }
                    var successText = [Host.Localize.Translate("Success!"), Host.Localize.Translate("Amazing!"), Host.Localize.Translate("Impressive!"), Host.Localize.Translate("Tadaa!"), Host.Localize.Translate("All done!"), Host.Localize.Translate("Perfect!")][Math.random() * 6 >> 0]; // Updates chatbot tasks on the screen (if any)
                    function updateGoals() {
                        if (!Config.facebookInstantGameID || !currentTasks || !currentTasks.subtasks) return;
                        var out = [];
                        for (var a = 0; a < currentTasks.subtasks.length; a++) {
                            var task = currentTasks.subtasks[a];
                            switch (task.name) {
                                case "gameRounds": {
                                    if (task._completed) {
                                        out.push(successText);
                                    } else {
                                        var gamesLeftToPlay = task.min - (totalGamesPlayedInSession + (task.progress || 0));
                                        if (gamesLeftToPlay == 1) {
                                            out.push(Host.Localize.Translate("Just one more game to go!"));
                                        } else {
                                            out.push(Host.Localize.Translate("Play {games} more games.", {
                                                games: gamesLeftToPlay
                                            }));
                                        }
                                    }
                                    break;
                                }
                                case "streakAllNet": {
                                    if (task._completed) {
                                        out.push(successText);
                                    } else {
                                        var timesLeft = Math.max(task.min - roundStats.streakAllNetCurrent, 0);
                                        if (timesLeft == 1) {
                                            out.push(Host.Localize.Translate("Just net one more time!"));
                                        } else {
                                            out.push(Host.Localize.Translate("Just net {times} times in a row", {
                                                times: timesLeft
                                            }));
                                        }
                                    }
                                    break;
                                }
                                case "totalHoopsShot": {
                                    if (task._completed) {
                                        out.push(successText);
                                    } else {
                                        var timesLeft = Math.max(task.min - roundStats.totalHoopsShot, 0);
                                        if (timesLeft == 1) {
                                            out.push(Host.Localize.Translate("Just one basket to go!"));
                                        } else {
                                            out.push(Host.Localize.Translate("Shoot {times} baskets in a row", {
                                                times: timesLeft
                                            }));
                                        }
                                    } //unsloppify: is this variable declared anywhere?
                                    break;
                                }
                                case "playedFriends": {
                                    out.push(Host.Localize.Translate("Play with a friend.\nYou can invite them in Messenger!"));
                                    break;
                                }
                                case "score": {
                                    if (task._completed) {
                                        out.push(successText);
                                    } else {
                                        if (task.min !== undefined && task.max !== undefined) {
                                            out.push(Host.Localize.Translate("Score between\n{min} and {max}  points", {
                                                min: task.min,
                                                max: task.max
                                            }));
                                        } else {
                                            out.push(Host.Localize.Translate("Score {points} points", {
                                                points: task.min
                                            }));
                                        }
                                    }
                                    break;
                                }
                                default: {
                                    out.push("Unhandled task:\n\t" + JSON.stringify(task));
                                }
                            } //out.push(JSON.stringify(data.subtasks[a]))
                        }
                        tasksLabel.setText(out.join("\n"));
                    }

                    function clearGoals() {
                        tasksLabel.setText("");
                    }

                    function renderTimeLeft() {
                        if (isPlayingInTournament && !isInOutOfTime && !window.Social.Instant.overlayVisible()) {
                            hoopBackground.setTimeLeft(window.Social.Instant.getTournamentTimeLeftText(":", ":"));
                        }
                    }
                    var TimesUpModal = Modal.ModalOverlayContent.expand(function() {
                        Modal.ModalOverlayContent.call(this);
                        this.addHeadline(Host.Localize.Translate("Out of time!", {}, "Headline for dialouge saying tournament is over"));
                        var lead = this.addLead(Host.Localize.Translate("You did not win the tournament in time", {}, "Text for dialouge saying tournament is over"));
                        lead.y += 10;
                        this.blurClose = false;
                        this.innerHeight = 260;
                    });
                    var isInOutOfTime = false;
                    if (XS.is.facebookInstant) {
                        XS.setInterval(renderTimeLeft, 1000);
                        XS.on('outoftime', function() {
                            isInOutOfTime = true;
                            handleGameOverInternals();
                            Modal.show(new TimesUpModal());
                            XS.once('outoftime_ready', function() {
                                XS.setTimeout(function() {
                                    Modal.hide(function() {
                                        handleGameOver();
                                        isInOutOfTime = false;
                                    });
                                }, 3000);
                            });
                        });
                    } // Check if tasks (if any) are completed
                    function testGoalState(partial) {
                        if (!Config.facebookInstantGameID || !currentTasks || !currentTasks.subtasks || isPlayingInTournament) return;
                        var dirty = false;
                        for (var a = 0; a < currentTasks.subtasks.length; a++) {
                            var task = currentTasks.subtasks[a];
                            if (!task._completed) {
                                switch (task.name) {
                                    case "gameRounds": {
                                        var gamesLeftToPlay = task.min - (totalGamesPlayedInSession + (task.progress || 0));
                                        if (gamesLeftToPlay <= 0) {
                                            task._completed = true;
                                        }
                                        dirty = true;
                                        break;
                                    }
                                    case "streakAllNet": {
                                        if (roundStats.streakAllNetCurrent >= task.min) {
                                            task._completed = true;
                                            sendFBBotPostback(true);
                                        }
                                        dirty = true;
                                        break;
                                    }
                                    case "totalHoopsShot": {
                                        if (roundStats.totalHoopsShot >= task.min) {
                                            task._completed = true;
                                            sendFBBotPostback(true);
                                        }
                                        dirty = true;
                                        break;
                                    }
                                    case "score": {
                                        console.log(totalPoints, task.min, totalPoints, task.max, !partial, XS.is.rcs && window.rcs);
                                        if (task.min !== undefined && task.max !== undefined) {
                                            if (totalPoints >= task.min && totalPoints <= task.max && !partial) {
                                                task._completed = true;
                                                dirty = true;
                                                if (XS.is.rcs && window.rcs) {
                                                    rcs.updateStory('Basketball', {
                                                        task: true
                                                    });
                                                    blockRCSProgression = true;
                                                }
                                            }
                                        } else if (totalPoints >= task.min) {
                                            task._completed = true;
                                            dirty = true;
                                            sendFBBotPostback(true);
                                        }
                                        break;
                                    }
                                }
                            }
                        }
                        if (dirty && !isPlayingInTournament) {
                            updateGoals();
                        }
                    }
                    if (XS.is.facebookInstant) {
                        if (!_abGoldenBall) {
                            self.on('gotData', function(response) {
                                FBInstantData = response;
                                var highscore = Math.max(data.highscore.get() || 0, parseInt(response.highscore) || 0);
                                data.highscore.set(highscore);
                                var ballcount = Math.max(data.ballcount.get() || 0, parseInt(response.ballcount) || 0);
                                data.ballcount.set(ballcount);
                                var state = mergeStates(response.unlocked || "{}", data.unlocked.get() || "{}");
                                data.unlocked.set(state);
                                var coins = Math.max(parseInt(response.coins) || 0, data.coins.get() || 0);
                                data.coins.set(coins);
                                hoopBackground.setHoopCount(ballcount);
                                hoopBackground.setHighscore(highscore);
                                updateCoinValue(data.coins.get());
                                refreshData();
                            });
                        } else {
                            XS.data.on('dataloaded', function() {
                                hoopBackground.setHighscore(XS.data.highscore);
                                hoopBackground.setHoopCount(XS.data.ballcount);
                                updateCoinValue(XS.data.coins);
                            });
                        }
                        Host.on('FBInstantStart', function() {
                            if (XS.Social && XS.Social.Leaderboards) {
                                console.warn('#basketball.game.showOpponents');
                                XS.gui.topRight.addChild(new XS.Social.Leaderboards.UI.Opponents());
                            }
                            if (Config.facebookInstantGameID) {
                                Host.Tools.LoadJSON(botServerPath + '/tasks/' + FBInstant.player.getID(), function(data) {
                                    if (data) {
                                        currentTasks = data;
                                        if (!isPlayingInTournament) updateGoals();
                                    }
                                }, function() {});
                            } //if(!XS.backgroundMusic.playing) {
                            XS.backgroundMusic.play(0, true); //}
                            if (!_abGoldenBall) {
                                FBInstant.player.getDataAsync(["ballcount", "highscore", "unlocked", "coins"]).then(function(response) {
                                    self.emit('gotData', response);
                                }).catch(window.Social.getPromiseCatchHandler("FBInstant.player.getDataAsync"));
                            }
                            newGame(false);
                            var isFirstContextChange = true;
                            XS.on('FBContextChange', function() {
                                if (isFirstContextChange) {
                                    return isFirstContextChange = false;
                                }
                                refreshTournamentStatus(); //newGame(true)
                            });
                        });
                    } else { // Not Facebook Instant
                        isGameOver = false; //var muted = data.muteMusic.get()
                        //XS.Music.setMuted(muted)
                        //if (!muted) {
                        //	XS.backgroundMusic.play(0,true)
                        //}
                        //else {
                        //	XS.backgroundMusic.stop(0)
                        //}
                        if (!_abGoldenBall) {
                            XS.on('login', function() {
                                console.log("XS backend connected!");
                                var highscore = Math.max(parseInt(XC.user.get('highscore')) || 0, data.highscore.get() || 0);
                                data.highscore.set(highscore);
                                var ballcount = Math.max(parseInt(XC.user.get('ballcount')) || 0, data.ballcount.get() || 0);
                                data.ballcount.set(ballcount);
                                var state = mergeStates(XC.user.get('unlocked') || "{}", data.unlocked.get() || "{}");
                                data.unlocked.set(state);
                                var coins = Math.max(parseInt(XC.user.get('coins')) || 0, data.coins.get() || 0);
                                data.coins.set(coins);
                                hoopBackground.setHighscore(data.highscore.get() || 0, true);
                                hoopBackground.setHoopCount(data.ballcount.get() || 0);
                                updateCoinValue(data.coins.get());
                                refreshData();
                            });
                        } else {
                            XS.data.on('dataloaded', function() {
                                hoopBackground.setHighscore(XS.data.highscore);
                                hoopBackground.setHoopCount(XS.data.ballcount);
                                updateCoinValue(XS.data.coins);
                            });
                        }
                    } // iOS Game Center 
                    var gamecenterinited = false;
                    XS.on('gamecenterauthenticated', function() {
                        gamecenterinited = true;
                        refreshData();
                    }); // Sync data to backends (XC, Facebook etc)
                    var refreshTimer = 0;
                    var submithighscore = false;

                    function refreshData(ishighscore) { // check if tasks are done
                        if (XS.is.rcs && window.rcs) {
                            if (!blockRCSProgression) {
                                rcs.updateStory('Basketball');
                                blockRCSProgression = true;
                            }
                        }
                        submithighscore = submithighscore || ishighscore; //Never save faster than every 5 secs
                        if (refreshTimer !== 0) return;
                        refreshTimer = XS.setTimeout(function() {
                            if (_abGoldenBall) {
                                XS.data.save();
                            } else {
                                var isDirty = false;
                                if (FBInstantData) { //Store to cloud
                                    if ((parseInt(FBInstantData.highscore) || 0) < data.highscore.get()) {
                                        FBInstantData.highscore = data.highscore.get();
                                        isDirty = true;
                                    }
                                    if ((parseInt(FBInstantData.ballcount) || 0) < data.ballcount.get()) {
                                        FBInstantData.ballcount = data.ballcount.get();
                                        isDirty = true;
                                    }
                                    if ((parseInt(FBInstantData.coins) || 0) != data.coins.get()) {
                                        FBInstantData.coins = data.coins.get();
                                        isDirty = true;
                                    }
                                    if (FBInstantData.unlocked != data.unlocked.get()) {
                                        var newState = data.unlocked.get();
                                        FBInstantData.unlocked = newState;
                                        isDirty = true;
                                    }
                                    console.log("SAVE INSIDE FBInstantData", isDirty);
                                } else if (XC.loggedin) { //Store to cloud
                                    if ((parseInt(XC.user.get('highscore')) || 0) < data.highscore.get()) {
                                        XC.user.set('highscore', data.highscore.get());
                                        isDirty = true;
                                    }
                                    if ((parseInt(XC.user.get('ballcount')) || 0) != data.ballcount.get()) {
                                        XC.user.set('ballcount', data.ballcount.get());
                                        isDirty = true;
                                    }
                                    if ((parseInt(XC.user.get('coins')) || 0) != data.coins.get()) {
                                        XC.user.set('coins', data.coins.get());
                                        isDirty = true;
                                    }
                                    if (XC.user.get('unlocked') != data.unlocked.get()) {
                                        var newState = data.unlocked.get();
                                        XC.user.set('unlocked', newState);
                                        isDirty = true;
                                    }
                                    if (isDirty) {
                                        console.log("XC is dirty saving");
                                        XC.save();
                                    }
                                }
                            }
                            if (gamecenterinited) { //Host.Log("Submitting game center scores! " + submithighscore)
                                //We only submit new highscores if we actually got them on platform
                                if (submithighscore) {
                                    submithighscore = false;
                                    Host.GameCenter.ReportScore("grp.basketballfrvrhighscore", data.highscore.get(), function(event, message) { //	Host.Log("Game Center Event (highscore) > " + event + " message " + message)
                                    });
                                }
                                Host.GameCenter.ReportScore("grp.basketballfrvrtotalgoals", data.ballcount.get(), function(event, message) { //	Host.Log("Game Center Event (ballcount) > " + event + " message " + message)
                                });
                            }
                            refreshTimer = 0;
                        }, 5000);
                    } // Power Ups 
                    //unsloppify: is this variable declared anywhere?
                    _activePowerUps = {};
                    self.speedMultiplier = 1;
                    self.scoreMultiplier = 1;
                    self.coinMultiplier = 1; // Remove timed powerups when they time out
                    var updateInterval = 1000 / 30;
                    XS.setInterval(function() {
                        if (isGameOver) return;
                        var remove = [];
                        for ( //unsloppify: is this variable declared anywhere?
                            n in _activePowerUps) {
                            var p = _activePowerUps[n];
                            if (!p.started) {
                                continue;
                            }
                            if (p.duration) {
                                p.duration -= updateInterval / 1000; // TODO: Update the progress visuals on the powerup
                                if (p.duration <= 0) {
                                    console.log("Times up!", p.powerUp);
                                    sounds.offPowerUp(p.powerUp.id);
                                    remove.push(p.powerUp);
                                } else {
                                    p.powerUp.button.updateTime(p.duration);
                                }
                            }
                        } // Remove powerups
                        for (var i = 0; i < remove.length; ++i) {
                            self.removeActivePowerUp(remove[i]);
                        }
                    }, updateInterval);
                    self.startPowerUps = function() {
                        for ( //unsloppify: is this variable declared anywhere?
                            n in _activePowerUps) {
                            _activePowerUps[n].started = true;
                            if (_abGoldenBall) {
                                goalsModel.usePowerUp(_activePowerUps[n].powerUp.id);
                            }
                        }
                    };
                    self.isPowerUpStarted = function(powerUp) {
                        return _activePowerUps[powerUp.id] && _activePowerUps[powerUp.id].started;
                    };
                    self.addActivePowerUp = function(powerUp) {
                        if (_activePowerUps[powerUp.id]) {
                            return false;
                        }
                        if (XS.is.facebookInstant) {
                            XS.track.customEvent('powerup_used', 1, {
                                powerup: powerUp.id,
                                left: XS.data.powerUps[powerUp.id]
                            });
                        } //tasksLabel.setText( powerUp.name )	
                        if (powerUp.ballSkin) {
                            self.setPowerUp(powerUp);
                        }
                        if (powerUp.duration || powerUp.shots) {
                            console.warn("Added powerUp: ", {
                                shots: powerUp.shots,
                                duration: powerUp.duration
                            });
                            _activePowerUps[powerUp.id] = {
                                powerUp: powerUp,
                                duration: powerUp.duration,
                                shots: powerUp.shots,
                                started: false
                            };
                        }
                        var oldSpeed = self.speedMultiplier;
                        self.speedMultiplier *= powerUp.speedMultiplier || 1;
                        self.scoreMultiplier *= powerUp.scoreMultiplier || 1;
                        self.coinMultiplier *= powerUp.coinMultiplier || 1;
                        console.log("Add PowerUp: ", powerUp.id, {
                            speed: self.speedMultiplier,
                            score: self.scoreMultiplier,
                            coin: self.coinMultiplier
                        }); // Update animation speed on net
                        if (self.speedMultiplier != oldSpeed) {
                            randomizeHoopPosition(true);
                        }
                        powerUp.activate && powerUp.activate();
                        powerUp.button && powerUp.button.setPowerActive(true);
                        return true;
                    };
                    self.removeActivePowerUp = function(powerUp) {
                        if (!_activePowerUps[powerUp.id]) {
                            console.error("Trying to remove inactive powerup!", powerUp);
                            return false;
                        }
                        console.warn("Removing PowerUp: ", powerUp.id);
                        var oldSpeed = self.speedMultiplier;
                        self.speedMultiplier /= powerUp.speedMultiplier || 1;
                        self.scoreMultiplier /= powerUp.scoreMultiplier || 1;
                        self.coinMultiplier /= powerUp.coinMultiplier || 1;
                        powerUp.deactivate && powerUp.deactivate();
                        powerUp.button && powerUp.button.setPowerActive(false);
                        console.log("Remove PowerUp: ", powerUp.id, {
                            speed: self.speedMultiplier,
                            score: self.scoreMultiplier,
                            coin: self.coinMultiplier
                        });
                        if (ball.getPowerUp() === powerUp) ball.setPowerUp(null); // Update animation speed on net
                        if (self.speedMultiplier != oldSpeed) {
                            randomizeHoopPosition(true);
                        }
                        delete _activePowerUps[powerUp.id];
                        return true;
                    };
                    self.hasActivePowerUp = function(powerUp) {
                        return !!_activePowerUps[powerUp.id];
                    }; // Resets all effects of powerups
                    self.resetPowerUps = function() {
                        console.warn("Resetting powerups", _activePowerUps);
                        for ( //unsloppify: is this variable declared anywhere?
                            n in _activePowerUps) {
                            self.removeActivePowerUp(_activePowerUps[n].powerUp);
                        } //unsloppify: is this variable declared anywhere?
                        _activePowerUps = {};
                    }; // Every time a shot has been made, deal with powerups
                    self.onShot = function(scored) {
                        if (_abGoldenBall) {
                            XS.data.save();
                            if (scored) {
                                self.spawnCoin();
                            }
                            var remove = [];
                            for ( //unsloppify: is this variable declared anywhere?
                                n in _activePowerUps) {
                                var p = _activePowerUps[n]; // If this a shot countdown powerup, decrement
                                if (p.shots) {
                                    p.shots -= 1;
                                    if (p.shots === 0) {
                                        remove.push(p.powerUp);
                                    }
                                }
                            } // Remove powerups
                            for (var i = 0; i < remove.length; ++i) {
                                self.removeActivePowerUp(remove[i]);
                            }
                        }
                    };
                });
                var basketball = new Basketball();
                stage.addChild(basketball);
                /*
                            XS.setTimeout(function() {
                            	return;
                            	window.testy = new ContainerFixedSize( 400, 300 )

                            	var _a = new Sprite(fetch('i/g/ball_golden.svg',true))
                            	var _b = new Sprite(fetch('i/g/ball_silver.svg',true))
                            		_a.x = 100
                            		_a.y = 50

                            		_b.x = -50
                            		_b.y = 150

                            		window.testy.addChild(_a)
                            		window.testy.addChild(_b)
                            		window.testy.x = 1000
                            		window.testy.y = 1000
                            	XS.stageContainer.addChild(window.testy)
                            }, 1000)
                            */
                var coinButtonBG = new Graphics();
                coinButtonBG.alpha = .3;
                coinButtonBG.on('up', function() {
                    basketball.showShop(function() {
                        Modal.hide();
                    });
                });
                var cornerCoin = new Sheet(fetch_i_g_coinsheet_svg(), 250, 250);
                var backgroundWidth = 0;

                function drawBackground(wd) {
                    backgroundWidth = wd;
                    coinButtonBG.clear();
                    coinButtonBG.beginFill(0x61392e);
                    if (LEGACY_COORD_SYSTEM) {
                        coinButtonBG.drawRoundedRect(0, 0, backgroundWidth * XS.devicePixelRatio, 40 * XS.devicePixelRatio, 10 * XS.devicePixelRatio);
                        coinButtonBG.x = (width - backgroundWidth - 10) * XS.devicePixelRatio;
                    } else {
                        coinButtonBG.drawRoundedRect(0, 0, backgroundWidth, cornerCoin.height - 16, 10);
                        coinButtonBG.x = -backgroundWidth; // - XS.gui.marginRight;
                        coinButtonBG.y = -coinButtonBG.height; // - XS.gui.marginBottom;
                    }
                }
                if (LEGACY_COORD_SYSTEM) {
                    drawBackground(100);
                    coinButtonBG.y = 10 * XS.devicePixelRatio;
                    XS.stageContainer.addChild(coinButtonBG);
                } else {
                    drawBackground(150);
                    XS.gui.bottomRight.addChild(coinButtonBG);
                }
                if (LEGACY_COORD_SYSTEM); // FIXME-BRIAN
                //
                //var _portrait = new Sprite(fxetch("i/g/2048x2732.png"))
                //var _landscape = new Sprite(fxetch("i/g/2732x2048.png"))
                //_portrait.alpha = 0.5
                //_landscape.alpha = 0.5
                //stage.addChild(_portrait)
                //stage.addChild(_landscape)
                //XS.on('resize',function() {
                //	if(stage.orientation == 'landscape') {
                //		_portrait.visible = false
                //		_landscape.visible = true
                //	} else {
                //		_portrait.visible = true
                //		_landscape.visible = false
                //		_portrait.x = (XS.size.stage.width-XS.size.target.width)/2
                //	}
                //})
                if (LEGACY_COORD_SYSTEM) {
                    cornerCoin.x = 12;
                    cornerCoin.y = 48;
                    cornerCoin.ratio = .17 * XS.devicePixelRatio;
                    XS.stageContainer.addChild(cornerCoin);
                } else {
                    cornerCoin.scale.set(0.4);
                    cornerCoin.resolution = cornerCoin.scale.x;
                    cornerCoin.y = -cornerCoin.height + 8;
                    XS.gui.bottomRight.addChild(cornerCoin);
                }
                var coinLabel = new Text2("", {
                    size: 60,
                    font: "'GillSans-Bold',Impact,'Arial Black',Tahoma",
                    fill: "#ffffff",
                    weight: 400
                });
                coinLabel.anchor.set(1, .5);
                if (LEGACY_COORD_SYSTEM) {
                    coinLabel.ratio = .5 * XS.devicePixelRatio;
                    coinLabel.x = 500;
                    coinLabel.y = 60;
                    XS.stageContainer.addChild(coinLabel);
                } else { //coinLabel.scale.set(1.25)
                    coinLabel.y = -(cornerCoin.height / 2) + 5;
                    XS.gui.bottomRight.addChild(coinLabel);
                } // Stack of coins in lower right side
                if (!_abGoldenBall) {
                    if (LEGACY_COORD_SYSTEM) {
                        coinRow.ratio = .25 * XS.devicePixelRatio;
                        coinRow.x = 100;
                        coinRow.y = 100;
                        XS.stageContainer.addChild(coinRow);
                    } else {
                        coinRow.scale.set(0.5);
                        coinRow.resolution = coinRow.scale.x;
                        coinRow.x = -coinRow.coinWidth * coinRow.scale.x;
                        coinRow.y = 0;
                        XS.gui.bottomRight.addChild(coinRow);
                    }
                }
                var shopArrow;
                if (!_abGoldenBall) {
                    shopArrow = new Sprite(fetch_i_g_shoparrow_svg());
                    shopArrow.anchor.set(1, 0);
                    shopArrow.y = 110;
                    if (LEGACY_COORD_SYSTEM) {
                        shopArrow.ratio = .5 * XS.devicePixelRatio;
                        XS.stageContainer.addChild(shopArrow);
                    } else {
                        shopArrow.y = 115;
                        shopArrow.x = -80; //shopArrow.scale.set(0.5)
                        //shopArrow.resolution = 0.5
                        //shopArrow.applyResolution()
                        XS.gui.topRight.addChild(shopArrow);
                    }
                }
                XS.on('resize', function() {
                    if (LEGACY_COORD_SYSTEM) {
                        cornerCoin.x = width * (100 / 17) - 55 * (100 / 17);
                        coinLabel.x = width * 2 - 100;
                        coinButtonBG.x = (width - backgroundWidth - 10) * XS.devicePixelRatio;
                        if (!_abGoldenBall) {
                            coinRow.x = (width - 50) * XS.devicePixelRatio;
                            coinRow.y = (height - 8) * XS.devicePixelRatio;
                        }
                        shopArrow.x = coinLabel.x + 40;
                    }
                }); // Hide ui elements when the sidebar is open
                XS.on('togglesidebar', function(data) {
                    cornerCoin.visible = coinLabel.visible = coinButtonBG.visible = !data.visible;
                    if (!_abGoldenBall) {
                        coinRow.visible = shopArrow.visible = !data.visible;
                    } else {
                        drinkSelector.visible = ballSelector.visible = !data.visible;
                    }
                });
                var updateCoinTextTimer = 0;

                function updateCoinValue(coins, delay) { // Keep track of coins earned for analytics 
                    var currentCoins;
                    if (_abGoldenBall) {
                        currentCoins = XS.data.coins;
                    } else {
                        currentCoins = data.coins.get() || 0;
                    }
                    var diff = coins - currentCoins;
                    if (diff > 0) {
                        __coinsThisGame += diff;
                    }
                    XS.clearTimeout(updateCoinTextTimer);
                    if (delay) {
                        updateCoinTextTimer = XS.setTimeout(function() {
                            coinLabel.setText(coins);
                            if (LEGACY_COORD_SYSTEM) {
                                drawBackground(coinLabel.width / XS.devicePixelRatio + 50);
                            } else {
                                drawBackground(coinLabel.width + cornerCoin.width + 20);
                            }
                        }, delay);
                    } else {
                        coinLabel.setText(coins);
                        if (LEGACY_COORD_SYSTEM) {
                            drawBackground(coinLabel.width / XS.devicePixelRatio + 50);
                        } else {
                            drawBackground(coinLabel.width + cornerCoin.width + 20);
                        }
                    }
                    if (_abGoldenBall) {
                        XS.data.coins = coins;
                    } else {
                        data.coins.set(coins);
                    } // align (magical)
                    coinLabel.x = cornerCoin.x = -cornerCoin.width;
                }
                if (_abGoldenBall) {
                    updateCoinValue(XS.data.coins);
                } else {
                    updateCoinValue(data.coins.get() || 0);
                } // <Sidebar>
                Sidebar.addShopItem(function() {
                    Sidebar.hide();
                    basketball.showShop(function() {
                        Modal.hide();
                    });
                }, Host.Localize.Translate("Change Ball", {}, "Menu item spawning ball shop in Basketball FRVR"));
                Sidebar.addRestartItem(function() {
                    Sidebar.hide();
                    XS.track.gameEnd(__levelId, getTrackData(true));
                    if (XS.score) {
                        XS.score.submitFinalScore();
                        XS.state && XS.state.endGame();
                    } else {
                        basketball.newGame();
                    }
                }, Host.Localize.Translate("Restart", {}, "Level in this context is a level in a game"));
                Sidebar.addStandards();
                XS.on('spawndebugmenu', function() {
                    Sidebar.addMenuItemAt(2, new Sprite(fetch_i_g_s_icon_shop_svg()), "Give Award", function() {
                        Sidebar.hide();
                        awardPrize();
                    });
                    Sidebar.addMenuItemAt(3, new Sprite(fetch_i_g_s_icon_shop_svg()), "Add points", function() {
                        basketball.fakeHoop();
                    });
                }, {
                    freezeGroup: ENG_FRZ_GRP
                }); // </Sidebar>
                trackPlay();
                /**
                 * @class Pulse
                 * Pulse an object using scaling
                 */
                var Pulse = function Pulse(object, options, callback) {
                    var self = this;
                    this.defaultScale = object.scale.x;
                    this.target = object;
                    this.onEndedCallback = function() {
                        callback && callback();
                    };
                    var scale = this.defaultScale;
                    this.tweenOut = new Tween(object.scale, {
                        x: scale * 1.2,
                        y: scale * 1.2
                    }, 0.1, Tween.easeout).call(function() {
                        this.tweenIn = new Tween(object.scale, {
                            x: scale,
                            y: scale
                        }, 0.2, Tween.easeinout).call(self.onEndedCallback);
                    });
                };
                Pulse.prototype.cancel = function() {
                    this.tweenOut && this.tweenOut.clear();
                    this.tweenIn && this.tweenIn.clear();
                    this.target.scale.set(this.defaultScale);
                    this.onEndedCallback();
                };
                /**
                 * @class FlyTo
                 * Fly sprite from soure to dest, matching size/position
                 */
                var FlyTo = Container.expand(function(sourceSprite, targetSprite, options, callback) {
                    Container.call(this);
                    this.tweens = [];
                    this.onEndedCallback = callback;
                    var self = this;
                    self.options = GUI.util.applyDefaults(options, {
                        duration: 0.5,
                        preOffset: {
                            x: 0,
                            y: -400
                        },
                        preDuration: 0,
                        parent: XS.gui
                    });
                    var sourceBounds = sourceSprite.getBounds();
                    var targetBounds = targetSprite.getBounds();
                    var targetPos = targetBounds.getPosition();
                    var targetSize = targetBounds.getSize();
                    var sourcePos = sourceBounds.getPosition();
                    var sourceSize = sourceBounds.getSize();
                    if (self.options.parent.parent) {
                        sourcePos = self.options.parent.toLocal(sourcePos);
                        targetPos = self.options.parent.toLocal(targetPos);
                        sourceSize = self.options.parent.toLocalSize(sourceSize);
                        targetSize = self.options.parent.toLocalSize(targetSize);
                    } // Create a particle that matches the destination
                    var particle = new Sprite(targetSprite.image);
                    particle.texture.setFrame(targetSprite.texture.frame); // FIXME: merge diff, runtime error
                    self.addChild(particle); // Set to source size and position
                    particle.x = sourcePos.x;
                    particle.y = sourcePos.y;
                    particle.width = sourceSize.x >> 0;
                    particle.height = sourceSize.y >> 0; // Add to the scene
                    self.options.parent.addChild(self);

                    function innerFlyTo() { // Fly to the destination
                        self.tweens.push(new Tween(particle, {
                            width: targetSize.x,
                            height: targetSize.y
                        }, self.options.duration, Tween.easein));
                        self.tweens.push(new Tween(particle, {
                            y: targetPos.y
                        }, self.options.duration, Tween.easeinout));
                        self.tweens.push(new Tween(particle, {
                            x: targetPos.x
                        }, self.options.duration, Tween.easein).call(self.onEnded.bind(self)));
                    } // Anticipation (optional added drama)
                    if (self.options.preDuration) {
                        self.tweens.push(new Tween(particle, {
                            x: sourcePos.x + self.options.preOffset.x,
                            y: sourcePos.y + self.options.preOffset.y
                        }, self.options.preDuration, Tween.easeinout).call(innerFlyTo));
                    } else {
                        innerFlyTo();
                    }
                });
                FlyTo.prototype.onEnded = function(params) {
                    this.onEndedCallback && this.onEndedCallback(params);
                    this.options.parent.removeChild(this);
                };
                FlyTo.prototype.cancel = function() {
                    while (this.tweens.length) {
                        var t = this.tweens.pop();
                        if (t) {
                            Tween.clear(t);
                        }
                    }
                    this.onEnded({
                        cancelled: true
                    });
                };
                /**
                 * @class CoachBubble
                 * Tip bubble with coach sliding onto screen, animating out
                 */
                var CoachBubble = Container.expand(function(text, options) {
                    Container.call(this);
                    var self = this;
                    var couchContainer = function(stage) {
                        var c = stage.couchContainer;
                        if (!c) {
                            c = stage.couchContainer = new Container();
                            stage.addChild(c);
                        }
                        return c;
                    }(XS.stageContainer);
                    self.options = GUI.util.applyDefaults(options, {
                        closeTimeout: 10000,
                        autoClose: true,
                        darkenOpacity: 0.5
                    });
                    var darken = self.darken = new Graphics();
                    darken.beginFill(0x000000, self.options.darkenOpacity);
                    darken.drawRect(-50, -50, 100, 100);
                    darken.alpha = 0;
                    XS.gui.center.addChild(darken);
                    var coach = new Sprite(fetch_i_g_coach_malone_svg());
                    var bubble = new GUI.SpeechBubble(text, {
                        fontSize: 50
                    });
                    bubble.x = 0;
                    bubble.y = 0;
                    self.addChild(bubble);
                    coach.scale.set(0.75);
                    coach.resolution = coach.scale.x;
                    coach.anchor.set(0.5, 1);
                    coach.x = bubble.width + coach.width / 2 - 100;
                    coach.y = bubble.height - 100 + coach.height;
                    self.addChild(coach);
                    bubble.alpha = text.alpha = 0;
                    couchContainer.addChild(self);

                    function resizeHandler() {
                        var size = darken.parent.toLocalSize(XS.gui.dimensions);
                        darken.width = size.x;
                        darken.height = size.y;
                        self.scale.set(1);
                        var scale = Math.min(XS.gui.width / self.width, XS.gui.height / self.height, 1);
                        self.scale.set(scale);
                        self.applyResolutionRecursive();
                        var rightGlobal = XS.gui.right.toGlobal(new Point(0, 0));
                        couchContainer.x = rightGlobal.x;
                        couchContainer.y = rightGlobal.y;
                        couchContainer.scale.x = XS.gui.right.worldTransform.a;
                        couchContainer.scale.y = XS.gui.right.worldTransform.d;
                    }
                    self.close = function() { // Animate out
                        new Tween(darken, {
                            alpha: 0
                        }, 0.2).call(function() {
                            darken.parent && darken.parent.removeChild(darken);
                        });
                        new Tween(bubble, {
                            alpha: 0
                        }, 0.2).call(function() {
                            self.parent && self.parent.removeChild(self);
                            self.options.onclose && self.options.onclose();
                        });
                        new Tween(text, {
                            alpha: 0
                        }, 0.2);
                        new Tween(self, {
                            x: 10
                        }, 0.3, Tween.easeout);
                        XS.off('resize', resizeHandler);
                    }; // Bind "click to close", but not until coach has been on screen for a bit (to avoid accidental closes)
                    XS.setTimeout(function() {
                        XS.stageContainer.once('down', function() {
                            self.close();
                        });
                    }, 350);
                    XS.on('resize', resizeHandler);
                    resizeHandler();
                    self.x = 10;
                    self.y = -self.height / 2; //-50*self.scale.y
                    //console.warn("SCALE COACH: " + self.scale.x)
                    // Animate coach in, with overshot and snap back
                    coach.rotation = 0.4;
                    var targetX = -self.width + coach.width / 2 - 50 / self.scale.x; //*self.scale.x 
                    new Tween(self, {
                        x: targetX
                    }, 0.3, Tween.easeinout).call(function() {
                        new Tween(coach, {
                            rotation: -0.2
                        }, 0.1, Tween.easeout).call(function() {
                            new Tween(coach, {
                                rotation: 0
                            }, 0.1).call(function() {
                                new Tween(darken, {
                                    alpha: 1
                                }, 0.2);
                                new Tween(bubble, {
                                    alpha: 1
                                }, 0.2);
                                new Tween(text, {
                                    alpha: 1
                                }, 0.2);
                                if (self.options.autoClose) {
                                    XS.setTimeout(function() {
                                        self.close();
                                    }, self.options.closeTimeout);
                                }
                            });
                        });
                    }); // this.resizeHandler = function () {
                    // 	self.position = couchContainer.toLocal(new Point(0, 0), XS.gui.right)
                    // }.bind(this)
                    // XS.on('resize', this.resizeHandler)
                    // this.resizeHandler()
                });
                CoachBubble.showTip = function(prizeInfo, delay) {
                    if (XS.data.powerUpTips[prizeInfo.id]) {
                        return false; // already shown
                    }
                    var showBubble = function showBubble() {
                        new CoachBubble(prizeInfo.tutorialTip);
                        XS.data.powerUpTips[prizeInfo.id] = true;
                        XS.data.setDirty('powerUpTips');
                    };
                    if (isNaN(delay)) {
                        showBubble();
                    } else {
                        XS.setTimeout(showBubble, delay);
                    }
                    return true; // true means Coach shown
                }; // CoachBubble.prototype.removeStageReference = function () {
                // 	Container.prototype.removeStageReference.call(this);
                // 	XS.off('resize', this.resizeHandler)
                // }
                function getPowerUps() {
                    return powerUps;
                }
                var prizes;
                if (_abGoldenBall) {
                    prizes = [ //{ 
                        //	key: 'doover',
                        //	name: Host.Localize.Translate("Do-Over Token",{},"An item that allows the player to retry their throw, after they missed"),
                        //	desc: Host.Localize.Translate("Retry your shot", {}, "Explanation for the do-over token"),
                        //	image: 'i/g/continue_token.png',
                        //	prob: 1
                        //},
                        {
                            id: 'ballGold',
                            image: ref_i_g_ball_golden_svg,
                            flyTarget: powerUps.ballGold.button.sprite,
                            button: powerUps.ballGold.button,
                            callback: function callback(num) {
                                powerUps.ballGold.button.pulse(function() {
                                    powerUps.ballGold.button.addItems(num || 1, true);
                                });
                            },
                            prob: 3
                        }, {
                            id: 'ballSilver',
                            image: ref_i_g_ball_silver_svg,
                            flyTarget: powerUps.ballSilver.button.sprite,
                            button: powerUps.ballSilver.button,
                            callback: function callback(num) {
                                powerUps.ballSilver.button.pulse(function() {
                                    powerUps.ballSilver.button.addItems(num || 1, true);
                                });
                            },
                            prob: 6
                        }, {
                            id: 'ballBronze',
                            image: ref_i_g_ball_bronze_svg,
                            callback: function callback(num) {
                                powerUps.ballBronze.button.pulse(function() {
                                    powerUps.ballBronze.button.addItems(num || 1, true);
                                });
                            },
                            flyTarget: powerUps.ballBronze.button.sprite,
                            button: powerUps.ballBronze.button,
                            prob: 9
                        }, //{ 
                        //	id: 'drinkTime',
                        //	image: 'i/g/drink_time.svg',
                        //	imageScale: 0.65,
                        //	callback: function() { drinkPowerUps.time.pulse( function() { drinkPowerUps.time.addItems(1) } ) },
                        //	flyTarget: drinkPowerUps.time.sprite,
                        //	button: drinkPowerUps.time,
                        //	prob: 4,
                        //},
                        {
                            id: 'drinkAim',
                            image: ref_i_g_drink_aim_svg,
                            imageScale: 0.65,
                            callback: function callback(num) {
                                powerUps.drinkAim.button.pulse(function() {
                                    powerUps.drinkAim.button.addItems(num || 1, true);
                                });
                            },
                            flyTarget: powerUps.drinkAim.button.sprite,
                            button: powerUps.drinkAim.button,
                            prob: 4
                        }, {
                            id: 'drinkCoin',
                            image: ref_i_g_drink_coin_svg,
                            imageScale: 0.65,
                            callback: function callback(num) {
                                powerUps.drinkCoin.button.pulse(function() {
                                    powerUps.drinkCoin.button.addItems(num || 1, true);
                                });
                            },
                            flyTarget: powerUps.drinkCoin.button.sprite,
                            button: powerUps.drinkCoin.button,
                            prob: 4
                        }, {
                            id: 'drinkPoints',
                            image: ref_i_g_drink_points_svg,
                            imageScale: 0.65,
                            callback: function callback(num) {
                                powerUps.drinkPoints.button.pulse(function() {
                                    powerUps.drinkPoints.button.addItems(num || 1, true);
                                });
                            },
                            flyTarget: powerUps.drinkPoints.button.sprite,
                            button: powerUps.drinkPoints.button,
                            prob: 4
                        }, {
                            id: 'drinkRim',
                            image: ref_i_g_drink_rim_svg,
                            imageScale: 0.65,
                            callback: function callback(num) {
                                powerUps.drinkRim.button.pulse(function() {
                                    powerUps.drinkRim.button.addItems(num || 1, true);
                                });
                            },
                            flyTarget: powerUps.drinkRim.button.sprite,
                            button: powerUps.drinkRim.button,
                            prob: 4
                        } //{ 
                        //	id: 'drinkSpeed',
                        //	image: 'i/g/drink_speed.svg',
                        //	imageScale: 0.65,
                        //	callback: function() { powerUps.drinkSpeed.button.pulse( function() { powerUps.drinkSpeed.button.addItems(1, true) } ) },
                        //	flyTarget: powerUps.drinkSpeed.button.sprite,
                        //	button: powerUps.drinkSpeed.button,
                        //	prob: 4,
                        //},
                        //var drinks = [ 'time', 'aim', 'coin', 'points', 'rim', 'speed' ]
                        //{ 
                        //	id: 'coins10',
                        //	name: Host.Localize.Translate("Silver Ball",{},"Special basketball that gives a medium score bonus when used"),
                        //	desc: Host.Localize.Translate("2x score for one shot", {}, "Explanation for silver ball"),
                        //	image: 'i/g/coin.svg', // missing single coin
                        //	flyTarget: powerButtonSilverBall.sprite,
                        //	prob: 10
                        //},
                        //{ 
                        //	name: Host.Localize.Translate("Bronze Ball",{},"Special basketball that gives a small score bonus when used"),
                        //	desc: Host.Localize.Translate("+50% score for one shot", {}, "Explanation for bronze ball"),
                        //	image: 'i/g/ball_bronze.svg',
                        //	prob: 9,
                        //},
                    ];
                    (function() { // TODO: add initialization directly in di.config
                        DI.bind(DIKeys.powerUpPrizes).toConstantValue(prizes);
                        for (var i = 0; i < prizes.length; ++i) {
                            DI.bind(DIKeys.powerUpPrize + prizes[i].id).toConstantValue(prizes[i]);
                        }
                    })();
                }

                function getPrizeInfo(name) {
                    if (name) {
                        for (var i = 0; i < prizes.length; ++i) {
                            if (prizes[i].id == name) return prizes[i];
                        }
                        return null;
                    } else {
                        return prizes;
                    }
                }
                var removeAdsPrice;
                XS.on('iapReady', function() {
                    var product = XS.iap.getProductById('removeads');
                    if (product) {
                        removeAdsPrice = product.price;
                    }
                });
                var ToastModal = Modal.ModalOverlayContent.expand(function(msg) {
                    Modal.ModalOverlayContent.call(this);
                    this.addHeadline(msg);
                    this.blurClose = true;
                    this.innerHeight = 200;
                });

                function showToastMessage(msg) {
                    Modal.show(new ToastModal(msg), true, true);
                    XS.setTimeout(Modal.hide, 1000);
                }
                var RemoveAdsDialog = GUI.Dialog.expand(function() {
                    XS.track.customEvent('removeads_dialog_show', 1);
                    var options = {
                        darkenColor: 0x00b9c1,
                        darkenOpacity: 1,
                        offsetY: 50
                    };
                    GUI.Dialog.call(this, 1000, 1000, options);
                    var self = this;
                    var paddingY = 25 * 2;
                    var decorationContainer = new Container();
                    self.addChild(decorationContainer);
                    var continueButtonOptions = {
                        height: 210,
                        backgroundColor: 0x31AE30,
                        color: '#ffffff',
                        shadow: true,
                        shadowColor: 0x288125,
                        shadowHeight: 15,
                        fontSize: 110,
                        weight: 500,
                        radius: 210 / 2
                    };
                    var continueButton = self.addButton(removeAdsPrice || "BUY", continueButtonOptions);
                    continueButton.y = self.height - continueButton.height - paddingY - 40 - 15;
                    continueButton.width = 800;
                    continueButton.x = self.width / 2 - continueButton.width / 2;
                    continueButton.on('click', function() {
                        XS.track.customEvent('removeads_dialog_click_buy', 1);
                        XS.removeAds.promptPurchase(function(err, success) {
                            if (success) {
                                self.close();
                                showToastMessage('Ads Removed');
                            } else {
                                showToastMessage('Payment Failed');
                            }
                        });
                    });
                    self.addChild(continueButton); // if price loads after show, set the continueButton text again
                    XS.on('iapReady', function() {
                        if (!self.isOpen() || !continueButton) return;
                        var product = XS.iap.getProductById('removeads');
                        if (product) {
                            continueButton.setText(product.price);
                        }
                    });
                    var cancelButtonOptions = {
                        height: 110,
                        backgroundColor: 0x2daaaa,
                        color: '#A6CCD5',
                        shadow: true,
                        shadowColor: 0x308986,
                        shadowHeight: 15,
                        fontSize: 70,
                        weight: 500,
                        radius: 30
                    };
                    var cancelButton = self.addButton("Close", cancelButtonOptions);
                    cancelButton.y = self.height + cancelButton.height + paddingY; //+100
                    cancelButton.width = 250;
                    cancelButton.x = self.width / 2 - cancelButton.width / 2;
                    cancelButton.on('click', function() {
                        XS.track.customEvent('removeads_dialog_click_close', 1);
                        self.close();
                    });
                    self.addChild(cancelButton);
                    var removeTextOptions = {
                        weight: 700,
                        size: 180,
                        fill: "#008296",
                        maxWidth: self.width - 2 * self.options.hPadding
                    };
                    var removeTextShadowOptions = {
                        weight: 700,
                        size: 180,
                        fill: "#ffffff",
                        maxWidth: self.width - 2 * self.options.hPadding
                    };
                    var removeText = new Text2("REMOVE", removeTextOptions);
                    var removeTextShadow = new Text2("REMOVE", removeTextShadowOptions);
                    self.addChild(removeTextShadow);
                    self.addChild(removeText);
                    removeText.x = self.width / 2 - removeText.width / 2;
                    removeText.y = paddingY + 50;
                    removeTextShadow.x = removeText.x;
                    removeTextShadow.y = removeText.y + 10;
                    var noAds = new Sprite(fetch_i_g_IAP_Remove_ADS_adsicon_svg());
                    noAds.anchor.set(.5, .5);
                    noAds.x = self.width / 2;
                    noAds.y = 475;
                    self.addChild(noAds);
                    var assets = {
                        radialLight: ref_i_g_IAP_Remove_ADS_radialight_bg_svg,
                        flamingBall: ref_i_g_IAP_Remove_ADS_ballonfire_svg,
                        star: ref_i_g_IAP_Remove_ADS_star_svg,
                        gift: ref_i_g_IAP_Remove_ADS_gift_svg,
                        drinks: ref_i_g_IAP_Remove_ADS_drinks_svg,
                        ballDude: ref_i_g_IAP_Remove_ADS_greenbutton_dude_svg
                    };
                    XS.assets.loadAsync([assets.radialLight, assets.flamingBall, assets.star, assets.gift, assets.drinks, assets.ballDude], function() {
                        var radialLight = new Sprite(fetch(assets.radialLight)); // self.addChildAt(radialLight, 0)
                        decorationContainer.addChild(radialLight);
                        radialLight.anchor.set(.5, .5);
                        radialLight.x = noAds.x;
                        radialLight.y = noAds.y; // var lightScale = Math.max(XS.gui.width/radialLight.width, XS.gui.height/radialLight.height)
                        // radialLight.scale.set(lightScale)
                        var radialLightBg = new Sprite(fetch(assets.radialLight));
                        self.addChildAt(radialLightBg, 0); // decorationContainer.addChild(radialLightBg)
                        radialLightBg.anchor.set(.5, .5);
                        radialLightBg.x = noAds.x;
                        radialLightBg.y = noAds.y;
                        var lightScale = Math.max(XS.gui.width / radialLightBg.width, XS.gui.height / radialLightBg.height);
                        radialLightBg.scale.set(lightScale * 2);
                        radialLightBg.rotation = Math.PI / 13;
                        radialLightBg.alpha = .2;
                        var flamingBall = new Sprite(fetch(assets.flamingBall));
                        decorationContainer.addChild(flamingBall);
                        flamingBall.anchor.set(.5, .5);
                        flamingBall.x = self.width / 2 + 280;
                        flamingBall.y = -190;
                        var star = new Sprite(fetch(assets.star));
                        decorationContainer.addChild(star);
                        star.anchor.set(.5, .5);
                        star.x = 180;
                        star.y = 20;
                        var star2 = new Sprite(fetch(assets.star));
                        decorationContainer.addChild(star2);
                        star2.anchor.set(.5, .5);
                        star2.x = star.x - 60;
                        star2.y = star.y - 221;
                        star2.rotation = -Math.PI / 4;
                        star2.scale.set(.9);
                        var star3 = new Sprite(fetch(assets.star));
                        decorationContainer.addChild(star3);
                        star3.anchor.set(.5, .5);
                        star3.x = star.x + 65;
                        star3.y = star.y - 375;
                        star3.rotation = -Math.PI / 5;
                        star3.scale.set(.8);
                        var gift = new Sprite(fetch(assets.gift));
                        self.addChild(gift);
                        gift.x = 10;
                        gift.y = self.height + 400;
                        gift.alpha = .6;
                        var drinks = new Sprite(fetch(assets.drinks));
                        decorationContainer.addChild(drinks);
                        drinks.x = self.width - 50;
                        drinks.y = self.height + 380;
                        drinks.alpha = .6;
                        var ballDude = new Sprite(fetch(assets.ballDude));
                        continueButton.addChild(ballDude);
                        ballDude.x = 0;
                        ballDude.y = 0;
                    });
                    self.on('open', Sidebar.hideIcon);
                    self.on('close', Sidebar.showIcon);
                }); // XS.setTimeout(function() {
                // 	new RemoveAdsDialog().open()
                // }, 350)
                XS.on('showRemoveAdsDialog', function() {
                    new RemoveAdsDialog().open();
                });
                RemoveAdsDialog.prototype.setSize = function(w, h) {
                    this.background.clear();
                    var borderWidth = 25;
                    var borderRadius = 90;
                    var shadowHeight = 25;
                    var outerBorderWidth = w;
                    var innerBorderWidth = w - borderWidth * 2;
                    var innerWidth = w - borderWidth * 4; //bottom shadow
                    this.background.beginFill(0xBF5E33);
                    this.background.drawRoundedRect(0, 0 + shadowHeight, outerBorderWidth, outerBorderWidth, borderRadius); //outer border
                    this.background.beginFill(0xFE7D43);
                    this.background.drawRoundedRect(0, 0, outerBorderWidth, outerBorderWidth, borderRadius); //inner border
                    this.background.beginFill(0x358296);
                    this.background.drawRoundedRect(borderWidth, borderWidth, innerBorderWidth, innerBorderWidth, borderRadius * (innerBorderWidth / outerBorderWidth)); //inner background
                    this.background.beginFill(0xC0E4E4);
                    this.background.drawRoundedRect(borderWidth * 2, borderWidth * 2, innerWidth, innerWidth, borderRadius * (innerWidth / outerBorderWidth));
                    this.onResize();
                };
                Sidebar.addQaDebugItem('Show Remove Ads', function() {
                    Sidebar.hide(function() {
                        new RemoveAdsDialog().open();
                    });
                });
                /**
                 * Base dialog for basketball
                 */
                var BasketballDialog = GUI.Dialog.expand(function(width, height, options) {
                    GUI.Dialog.call(this, width, height, options);
                    var self = this;
                    var _options = GUI.util.applyDefaults(options, {
                        continueButtonText: Host.Localize.Translate("Continue"),
                        continueButtonHeight: 120
                    });
                    var buttonOptions = {
                        height: _options.continueButtonHeight,
                        backgroundColor: 0x00a6fb,
                        color: '#ffffff',
                        shadow: true,
                        shadowColor: 0x0079b8,
                        fontSize: 60,
                        weight: 400
                    };
                    if (_options.continueButtonImage) {
                        buttonOptions.image = _options.continueButtonImage;
                    }
                    if (_options.continueButtonImagePosition) {
                        buttonOptions.imagePosition = _options.continueButtonImagePosition;
                    }
                    var continueButton = self.addButton(_options.continueButtonText, buttonOptions);
                    continueButton.y = self.height - continueButton.height - this.options.vPadding;
                    continueButton.x = 20;
                    continueButton.width = self.width - 40;
                    if (!_options.customClose) {
                        continueButton.on('click', function() {
                            self.close();
                        });
                    }
                    this.styles = {};
                    this.styles.headline = {
                        weight: 200,
                        size: 90,
                        fill: "#2c2c2c",
                        maxWidth: self.width - 2 * self.options.hPadding
                    };
                    this.styles.subheadline = {
                        size: 45,
                        fill: "#2c2c2c",
                        maxWidth: self.width - 2 * self.options.hPadding
                    };
                    self.addChild(continueButton);
                    self.continueButton = continueButton;
                    self.topOffset = this.options.vPadding + 10;
                    var vSpacing = 20;
                    /**
                     * Add a headline at topOffset
                     */
                    self.addHeadline = function(text, options) {
                        var style = GUI.util.applyDefaults(options, this.styles.headline);
                        var headline = new Text2(text, style);
                        self.addChild(headline);
                        headline.x = (self.width / self.scale.x - headline.width) / 2;
                        headline.y = self.topOffset;
                        self.topOffset += headline.height + 15;
                        return headline;
                    };
                    /**
                     * Add a section headline at topOffset
                     */
                    self.addSubheadline = function(text, options) {
                        var style = GUI.util.applyDefaults(options, this.styles.subheadline);
                        var headline = new Text2(text, style);
                        self.addChild(headline);
                        headline.x = (self.width / self.scale.x - headline.width) / 2;
                        headline.y = self.topOffset;
                        self.topOffset += headline.height + 30;
                        return headline;
                    };
                    self.addRow = function(child) {
                        self.addChild(child);
                        child.y = self.topOffset;
                        child.x = (self.width / self.scale.x - child.width) / 2;
                        self.topOffset += child.height + vSpacing;
                    }; //self._addChildAt = self.addChildAt
                    //self.addChildAt = function( child, pos ) {
                    //	child.y = self.topOffset
                    //	self._addChildAt( child, pos )
                    //}
                });
                /*
                            var WatchAdDialog = BasketballDialog.expand(function(powerUp, options) { 

                            	var self = this
                            	self.options = GUI.util.applyDefaults( options, { 
                            		continueButtonText: Host.Localize.Translate("Watch Ad"),
                            		continueButtonImage: fetch('/i/g/button_ad_bw.svg'),
                            	})

                            	BasketballDialog.call(this, 1000, 820, self.options )

                            	self.addHeadline(Host.Localize.Translate("+1 {powerup}", {powerup: powerUp.name}), { weight: 800 })
                            	self.addSubheadline(Host.Localize.Translate("Watch an ad to get a power up?", { powerup: powerUp.name }))

                            	self.inset = new Graphics()
                            	self.inset.beginFill( 0xeeeeee )
                            	self.inset.drawRoundedRect( self.options.hPadding, self.topOffset, self.width-2*self.options.hPadding, 400, 10 )
                            	self.addChild(self.inset)
                            	self.topOffset += 25

                            	var reward = new Sprite(powerUp.image) 
                            	//var targetScale = 0.5 * (prizeInfo.imageScale || 1.0 )
                            	reward.scale.set( 0.35 )
                            	reward.resolution = reward.scale.x
                            	reward.applyResolution()
                            	self.addRow(reward)
                            	reward.anchor.set(0.5,0)
                            	reward.x = (self.innerWidth)/2

                            	self.continueButton.on('click', function() {
                            		XS.ads.show('', function(result) { 
                            			console.log("Reward ad for powerup result: ", result)
                            			if( result == 'success ') {
                            				XS.setTimeout(function() { 
                            					var prize = getPrizeInfo( powerUp.id )
                            					if( prize ) {
                            						prize.callback()
                            					}
                            				}, 300 )
                            			}
                            		},{format: 'reward'})
                            	})

                            	self.resizeHandler()
                            })
                            */
                /**
                 * @class EndOfLevelDialog
                 * Dialog shown at end of level, shows progress towards goals
                 */
                BasketballDialog.expand(function(info) {
                    BasketballDialog.call(this, 1000, 1000);
                    var self = this;
                    self.addHeadline(Host.Localize.Translate("Final Score"), {
                        weight: 800
                    });
                    self.addSubheadline(Host.Localize.Translate("You scored {points} points", {
                        points: info.score
                    })); //var prize = new Sprite(fxetch('i/g/care_package_0.svg'))
                    var prize;
                    self.addRow(prize);
                    prize.x = (self.width - prize.width) / 2;
                    self.resizeHandler();
                });
                /**
                 * @class PrizeDialog
                 * Rolls random prizes and awards them to the player with animation and fanfare
                 */
                var PrizeDialog = BasketballDialog.expand(function(info, options) {
                    var defaults = GUI.util.applyDefaults(options, {
                        headline: Host.Localize.Translate("Final Score"),
                        subheadline: Host.Localize.Translate("You scored {points} points", {
                            points: info.score
                        }),
                        continueButtonText: Host.Localize.Translate("Claim Prize"),
                        insetHeadline: Host.Localize.Translate("You won a prize!"),
                        customClose: true,
                        insetHeight: 570,
                        manualCloseCallback: true,
                        showStar: true
                    });
                    BasketballDialog.call(this, 900, defaults.insetHeight + 430, defaults);
                    var self = this;
                    self.addHeadline(self.options.headline, {
                        weight: 800
                    });
                    self.addSubheadline(self.options.subheadline, {
                        size: 60
                    });
                    self.closeCallback = null;
                    self.inset = new Graphics();
                    self.inset.beginFill(0xeeeeee);
                    self.inset.drawRoundedRect(self.options.hPadding, self.topOffset, self.width - 2 * self.options.hPadding, self.options.insetHeight, 10);
                    self.addChild(self.inset);
                    self.topOffset += 25;
                    if (self.options.showStar) {
                        self.star = new Sprite(fetch_i_g_star_svg());
                        self.star.anchor.set(0.5, 0.5);
                        self.star.x = self.innerWidth / 2;
                        var _starScale = 0.8;
                        self.star.visible = false;
                        self.star.scale.set(_starScale);
                        self.addChild(self.star);
                    }
                    var prizes = getPrizeInfo();
                    var powerUps = getPowerUps();

                    function rotateStar() {
                        self.star.rotation += 2 * Math.PI * (1 / 60) * 0.1;
                    }
                    var prizeInfo;
                    var forcedPrize = info.prize;
                    if (forcedPrize) { // Force a prize
                        for (var i = 0; i < prizes.length; ++i) {
                            if (prizes[i].id == forcedPrize) {
                                prizeInfo = prizes[i];
                                break;
                            }
                        }
                    } else { // Randomize a prize
                        var totalProb = 0;
                        for (var i = 0; i < prizes.length; ++i) {
                            totalProb += prizes[i].prob;
                        }
                        var prizeRoll = Math.floor(Math.random() * totalProb);
                        var prizeIdx = 0; // Weighted random pick
                        for (var i = 0; i < prizes.length; ++i) {
                            prizeIdx += prizes[i].prob;
                            if (prizeIdx > prizeRoll) {
                                prizeInfo = prizes[i];
                                break;
                            }
                        }
                    }
                    if (!prizeInfo) { // Fallback in case no prize was selected above (code might be buggy)
                        prizeInfo = prizes[Math.random() * prizes.length >> 0];
                    } //console.log("Prize selected:", prizeInfo)
                    self.prizeInfo = prizeInfo;
                    if (XS.is.facebookInstant) {
                        XS.track.customEvent('powerup_granted', 1, {
                            powerup: prizeInfo.id
                        });
                    }
                    var prize;
                    XS.assets.loadAsync([prizeInfo.image], function() {
                        prize = new Sprite(fetch(prizeInfo.image));
                        var targetScale = 0.5 * (prizeInfo.imageScale || 1.0);
                        prize.scale.set(targetScale);
                        prize.resolution = targetScale;
                        prize.applyResolution();
                        self.addRow(prize);
                        prize.anchor.set(0.5, 0.5);
                        prize.x = self.width / self.scale.x / 2;
                        var prizeY = prize.y + prize.height / 2 + 10;
                        prize.y = prizeY;
                        if (self.options.showStar) {
                            self.star.y = prizeY;
                            self.star.alpha = 0;
                            self.star.visible = true;
                            self.star.scale.set(0.1);
                        }

                        function animatePrize() {
                            prize.scale.set(0.1);
                            prize.alpha = 0; // Animate the prize into view
                            XS.setTimeout(function() {
                                new Tween(prize.scale, {
                                    x: targetScale,
                                    y: targetScale
                                }, 0.5, Tween.easeinout);
                                new Tween(prize, {
                                    alpha: 1
                                }, 0.3);
                                if (self.options.showStar) {
                                    new Tween(self.star.scale, {
                                        x: _starScale * 1.25,
                                        y: _starScale * 1.25
                                    }, 0.15, Tween.easeinout).call(function() {
                                        new Tween(self.star.scale, {
                                            x: _starScale,
                                            y: _starScale
                                        }, 0.15, Tween.easeinout);
                                    });
                                    new Tween(self.star, {
                                        alpha: 1
                                    }, 0.2);
                                }
                            }, 300);
                        } // Animate the prize into place when dialog opens
                        if (self.isOpen()) {
                            animatePrize();
                        } else {
                            self.on('open', function() {
                                animatePrize();
                            });
                        }
                        if (self.options.insetHeadline) {
                            self.addHeadline(self.options.insetHeadline, {
                                weight: 800
                            });
                        }
                        var powerUpText = powerUps[prizeInfo.id].name + " - " + powerUps[prizeInfo.id].desc;
                        self.addSubheadline(self.options.insetSubheadline || powerUpText);
                    });
                    self.awardPrize = function(num) {
                        num = num || 1;
                        if (self.prizeInfo && self.prizeInfo.flyTarget) {
                            self.prizeInfo.button.selector.show(self.prizeInfo.button, function() {
                                self.close();
                                new FlyTo(prize, self.prizeInfo.flyTarget, {
                                    duration: 0.3,
                                    preDuration: 0.65,
                                    preOffset: {
                                        x: 0,
                                        y: -400
                                    }
                                }, function() {
                                    self.prizeInfo.callback && self.prizeInfo.callback(num);
                                    XS.setTimeout(function() {
                                        self.prizeInfo.button.selector.close();
                                        self.onCloseCallback && self.onCloseCallback();
                                    }, 500);
                                });
                            });
                        } else {
                            self.close();
                            self.onCloseCallback && self.onCloseCallback();
                            self.prizeInfo.callback && self.prizeInfo.callback(num);
                        }
                    }; // Make sure to negate the close disable if we reuse the dialog
                    self.on('open', function() {
                        self.continueButton.enable();
                        if (self.options.showStar) {
                            XS.on('tick', rotateStar);
                        }
                    });
                    self.on('close', function() {
                        if (self.options.showStar) {
                            XS.off('tick', rotateStar);
                        }
                    }); // Custom close method
                    self.continueButton.on('click', function() {
                        self.continueButton.disable();
                        if (self.options.onClickContinue) {
                            self.options.onClickContinue();
                        } else {
                            self.awardPrize();
                        }
                    });
                    self.resizeHandler();
                });
                /**
                 * @class WatchAdDialog
                 * Offer to watch an ad in return for a power up
                 */
                var WatchAdDialog = PrizeDialog.expand(function(powerUp, options) {
                    var self = this;
                    var num = powerUp.awardPerAd || 1;
                    var defaults = {
                        headline: Host.Localize.Translate("+{num} {powerup}", {
                            powerup: num > 1 ? powerUp.namePlural || powerUp.name : powerUp.name,
                            num: num
                        }),
                        subheadline: num == 1 ? Host.Localize.Translate("Watch an ad to get a power up?") : Host.Localize.Translate("Watch an ad to get {count} power ups?", {
                            count: num
                        }), //insetHeadline: Host.Localize.Translate( "Get Free {powerup}", { powerup: powerUp.name }, "Headline on screen where you can get a free power up, where {name} is for example Focus Boost, Bronze Ball, Rim Boost")
                        insetHeadline: null,
                        continueButtonText: Host.Localize.Translate("Watch Ad"),
                        continueButtonImage: embed__i_g_button_ad_bw_svg(),
                        insetHeight: 430,
                        showCloseX: true,
                        showStar: false
                    };
                    new Sprite(fetch_i_g_close_x_svg()); // TODO: Unhack this so it works
                    // Override the "continue" click
                    defaults.onClickContinue = function() {
                        if (XS.is.facebookInstant) {
                            XS.track.customEvent("powerup_reward_ad_requested", 1, {
                                powerup: powerUp.id
                            });
                        }
                        XS.ads.show('reward', function(res) {
                            console.warn('reward ad res', res);
                            if (res) {
                                if (XS.is.facebookInstant) {
                                    XS.track.customEvent("powerup_reward_ad_success", 1, {
                                        powerup: powerUp.id
                                    });
                                }
                                self.awardPrize(num);
                            } else {
                                if (XS.is.facebookInstant) {
                                    XS.track.customEvent("powerup_reward_failure", 1, {
                                        powerup: powerUp.id
                                    });
                                }
                                self.close();
                            }
                        }); // 	XS.ads.show('', function(result) { 
                        // 		console.log("Reward ad for powerup result: ", result)
                        // 		if( result == 'success') {
                        // 			console.log("AWARD PRIZE")
                        // 			self.awardPrize()
                        // 		} else {
                        // 			console.log("NO ADS READY")
                        // 			self.close()
                        // 			ShowNoAdsReady()
                        // 		}
                        // 	},{format: 'reward'})
                    };
                    PrizeDialog.call(this, {
                        prize: powerUp.id
                    }, GUI.util.applyDefaults(options, defaults));
                });

                function awardPrize() {
                    if (_abGoldenBall) {
                        var prizeDialog = new PrizeDialog({
                            score: 1014
                        });
                        prizeDialog.open();
                    }
                }
                if (_abGoldenBall) {
                    var GoalRevealAnimation = function() {
                        function GoalRevealAnimation(goalBar) {
                            this.isFinished = false;
                            this.animations = [];
                            this.view = goalBar;
                            this.model = goalBar.model;
                            this.prizeIcon = undefined;
                            this.powerUpsCount = 0; // powerups count
                            this.prizeInfo = DI.get(DIKeys.powerUpPrize + this.model.prize.id);
                            this.animId = this.model.prize.id + "(" + this.model.prize.count + ")"; // for debug purposes
                        }
                        GoalRevealAnimation.prototype.createPrizeIcon = function() {
                            var self = this;
                            var asset = this.prizeInfo.image;
                            var icon = new Sprite(fetch(asset));
                            var maxSide = Math.max(icon.width, icon.height);
                            var scale = self.view.background.height / maxSide;
                            icon.scale.set(scale);
                            var bounds = icon.getLocalBounds();
                            bounds.width *= icon.scale.x;
                            bounds.height *= icon.scale.y;
                            icon.x = -bounds.width * 0.5;
                            icon.y = -bounds.height * 0.5;
                            self.view.prizeCont.addChild(icon);
                            icon.visible = false;
                            self.prizeIcon = icon;
                        };
                        GoalRevealAnimation.prototype.flyOutPrize = function() {
                            if (this.isFinished) { // log.trace("#goals", "#animation", this.animId, "FlyTo skip!!!!")
                                return;
                            }
                            var self = this;
                            var prizeCont = this.view.prizeCont;
                            var prizeIcon = this.prizeIcon;
                            var min = Math.PI / 3;
                            var max = Math.PI - min * 2;
                            var a = -1 * (min + Math.random() * max);
                            var r = Math.max(prizeIcon.width, prizeIcon.height);
                            var preOffset = {
                                x: r * Math.cos(a),
                                y: r * Math.sin(a)
                            };
                            return new Promise(function(resolve) {
                                self.animations.push(new FlyTo(prizeIcon, self.prizeInfo.flyTarget, {
                                    duration: 0.3,
                                    preDuration: 0.3,
                                    spins: 1,
                                    preOffset: preOffset
                                }, function(params) {
                                    if (params && params.cancelled) { // do nothing if it was cancelled
                                        return;
                                    }
                                    self.powerUpsCount++;
                                    self.prizeInfo.button.updateLabel(self.powerUpsCount);
                                    resolve();
                                }));
                                prizeCont.removeChild(prizeIcon);
                            });
                        };
                        GoalRevealAnimation.prototype.flyOutAllPrizes = function() {
                            var self = this;
                            var pulseSelectorButton = function pulseSelectorButton() {
                                return new Promise(function(resolve) {
                                    self.isFinished ? resolve() : self.prizeInfo.button.pulse(resolve);
                                });
                            };
                            var flyOut = this.flyOutPrize.bind(this);
                            var ITEM_DELAY = 0.15;
                            var FLIGHT_DURATION = 0.3 + 0.3; // duration + preDuration
                            var restItemsCount = this.model.prize.count - 1;
                            for (var i = 0; i < self.model.prize.count; i++) {
                                wait(i * ITEM_DELAY)().then(flyOut);
                            }
                            var flyingTime = restItemsCount * ITEM_DELAY + FLIGHT_DURATION;
                            return wait(FLIGHT_DURATION)().then(pulseSelectorButton).then(function() { // Show tutorial if it's first time
                                CoachBubble.showTip(powerUps[self.prizeInfo.id], 100);
                            }).then(wait(flyingTime));
                        };
                        GoalRevealAnimation.prototype.showSelector = function() {
                            if (this.isFinished) return Promise.resolve();
                            var self = this;
                            return new Promise(function(resolve) {
                                var selector = self.prizeInfo.button.selector;
                                if (selector.isOpen() || selector.isAnimating()) {
                                    resolve();
                                } else {
                                    selector.show(self.prizeInfo.button, resolve);
                                }
                            });
                        };
                        GoalRevealAnimation.prototype.cancel = function() {
                            while (this.animations.length) {
                                var t = this.animations.pop();
                                if (t) {
                                    t.cancel();
                                }
                            }
                        };
                        GoalRevealAnimation.prototype.finish = function(forced) {
                            if (this.isFinished) {
                                return Promise.resolve();
                            } else {
                                this.isFinished = true;
                                this.cancel();
                                var self = this;
                                var item = this.prizeInfo.button;
                                var selector = this.prizeInfo.button.selector;
                                item.syncWithData();
                                return new Promise(function(resolve) {
                                    function done() {
                                        item.cancelPulse();
                                        selector.close();
                                        self.view.emit("onFinished");
                                        resolve();
                                    }
                                    if (selector.isAnimating()) {
                                        selector.once("selectorAnimEnded", done);
                                        return;
                                    }
                                    if (forced && !selector.isOpen()) {
                                        selector.layout();
                                        selector.show(item, done);
                                        return;
                                    }
                                    done();
                                });
                            }
                        };
                        GoalRevealAnimation.prototype.createTweenPromise = function(target, props, time, easing) {
                            var self = this;
                            return function() {
                                var tween;
                                var _reject;
                                var _resolve;
                                var aPromise = new Promise(function(resolve, reject) {
                                    _reject = reject;
                                    _resolve = resolve;
                                    tween = new Tween(target, props, time, easing).call(function() {
                                        var idx = self.animations.indexOf(aPromise);
                                        if (idx !== -1) {
                                            self.animations.splice(idx, 1);
                                        }
                                        _resolve();
                                    });
                                });
                                aPromise.cancel = function() {
                                    if (tween) {
                                        Tween.clear(tween);
                                    }
                                    _reject({
                                        cancelled: true
                                    });
                                };
                                self.animations.push(aPromise);
                                return aPromise;
                            };
                        };
                        GoalRevealAnimation.prototype.run = function() { // log.trace("#goals", "#animation", this.animId, "STARTED")
                            var self = this;
                            var view = this.view;
                            var downTime = 0.4;
                            var upTime = 0.05;
                            view.headlineText = "";
                            view.progress.caption = "";
                            var createIcon = this.createPrizeIcon.bind(this);
                            var scaleUp = this.createTweenPromise(view.prizeCont.scale, {
                                x: 1.3,
                                y: 1.3
                            }, upTime, Tween.easeout);
                            var rotateContNormal = this.createTweenPromise(view.prizeCont, {
                                rotation: 0
                            }, upTime);
                            this.powerUpsCount = self.prizeInfo.button.count() - this.model.prize.count;
                            this.view.stopAnimations();
                            Promise.all([tweenPromise(view.prizeCont.scale, {
                                x: 0.5,
                                y: 0.5
                            }, downTime, Tween.easein)(), tweenPromise(view.collectButton, {
                                alpha: 0
                            }, downTime, Tween.easeinout)()]).then(function() {
                                sounds.prize_won.play();
                            }).then(Promise.all([tweenPromise(view.star, {
                                alpha: 0
                            }, 0.4)(), tweenPromise(view.star.scale, {
                                x: 1.1,
                                y: 1.1
                            }, 0.4, Tween.easeout)()])).then(this.createTweenPromise(view.prizeCont, {
                                rotation: Math.PI / 3 * (Math.random() - 0.5)
                            }, 0.08, Tween.easeout)).then(createIcon).then(function() {
                                self.view.icon.visible = false;
                                self.prizeIcon.visible = true;
                                self.view.prizeCont.alpha = 1;
                                self.view.progress.foreground.visible = false;
                                self.view.progress.background.visible = false;
                                self.view.progress.label.updateStyle({
                                    fill: "#316e7d"
                                });
                            }).then(function() {
                                return Promise.all([rotateContNormal(), scaleUp()]);
                            }).then(function() {
                                view.winView.description.alpha = 0;
                                view.winView.visible = true;
                            }).then(this.createTweenPromise(view.prizeCont.scale, {
                                x: 1,
                                y: 1
                            }, 0.3, Tween.easein)).then(wait(0.4)).then(this.createTweenPromise(view.winView.description, {
                                alpha: 1
                            }, downTime, Tween.easeout)).then(wait(0.5)).then(this.showSelector.bind(this)).then(this.flyOutAllPrizes.bind(this)).then(this.createTweenPromise(view, {
                                alpha: 0
                            }, 0.3)).catch(function(a) {}).then(this.finish.bind(this));
                        };
                        return GoalRevealAnimation;
                    }();
                    var EmptyBoxAnimation = function() {
                        function EmptyBoxAnimation(goalBar) {
                            this.view = goalBar;
                        }
                        EmptyBoxAnimation.prototype.finish = function() {
                            this.view.emit("onRemoved");
                        };
                        EmptyBoxAnimation.prototype.run = function() {
                            var self = this;
                            var scaleDown = this.createTweenPromise(this.view.prizeCont.scale, {
                                x: 0.5,
                                y: 0.5
                            }, 0.3, Tween.easeout);
                            var scaleZero = this.createTweenPromise(this.view.prizeCont.scale, {
                                x: 0,
                                y: 0
                            }, 0.3, Tween.easein);
                            scaleDown().then(function() {
                                self.view.progress.foreground.visible = false;
                                self.view.progress.background.visible = false;
                                self.view.progress.label.updateStyle({
                                    fill: "#316e7d"
                                });
                                self.view.progress.caption = Host.Localize.Translate("Empty box");
                            }).then(scaleZero).then(wait(1)).catch(function(a) {}).then(this.finish.bind(this));
                        };
                        return EmptyBoxAnimation;
                    }(); //unsloppify: block-level definition hoisted to true scope.
                    //unsloppify: this is potentially dangerous if function is called before!
                    //unsloppify: do verify this manually!
                    var tweenPromise = function tweenPromise(target, props, time, easing) {
                        return function() {
                            if (time <= 0) { // FIXME: this check should be in the Tween class itself
                                return Promise.resolve();
                            }
                            return new Promise(function(resolve) {
                                new Tween(target, props, time, easing).call(resolve);
                            });
                        };
                    }; //unsloppify: block-level definition hoisted to true scope.
                    //unsloppify: this is potentially dangerous if function is called before!
                    //unsloppify: do verify this manually!
                    var tweenValue = function tweenValue(target, props, time, easing, onUpdate, onComplete, scope) {
                        var tween = new Tween(target, props, time, easing);
                        if (onUpdate) {
                            var _tweenTick = tween.tick;
                            tween.tick = function() {
                                onUpdate.call(scope);
                                return _tweenTick.call(tween);
                            };
                        }
                        tween.call(function() {
                            if (onComplete) {
                                onComplete.call(scope);
                            }
                        });
                        return tween;
                    }; //unsloppify: block-level definition hoisted to true scope.
                    //unsloppify: this is potentially dangerous if function is called before!
                    //unsloppify: do verify this manually!
                    var wait = function wait(time) {
                        return tweenPromise({}, {}, time);
                    };
                    GUI.GoalBarBase = Container.expand(function(width, height, options) { // TODO: remove hardcoded values
                        Container.call(this);
                        this.prizeCont = new Container();
                        this.lockIcon = null;
                        this.lockIconCont = new Container();
                        this._starAnimationHandler = this.rotateStar.bind(this); // todo: use DI rotation sprite
                        this.options = GUI.util.applyDefaults(options, {
                            width: width,
                            height: height,
                            backgroundColor: options.backgroundColor || 0xc9e7e6,
                            locked: false,
                            icon: null,
                            iconScale: 1
                        }); // LOCK
                        this.lockIcon = function() {
                            var sprite = new Sprite(fetch_i_g_padlock_svg());
                            sprite.scale.set(0.8);
                            sprite.x = -sprite.width * 0.5;
                            sprite.y = -sprite.height * 0.5;
                            return sprite;
                        }(); // star
                        this.star = function() {
                            var sprite = new Sprite(fetch_i_g_star_svg());
                            sprite.anchor.set(0.5);
                            sprite.scale.set(0.5);
                            sprite.visible = false;
                            return sprite;
                        }();
                        this.lockIconCont.addChild(this.lockIcon);
                        this.prizeCont.addChild(this.star);
                        this.prizeCont.addChild(this.lockIconCont);

                        function drawBgRect(w, h, radius, color) {
                            return new Graphics().beginFill(color).drawRoundedRect(0, 0, w, h, radius).endFill();
                        } // BACKGROUND
                        this.background = drawBgRect(width, height, 20, this.options.backgroundColor);
                        this.backgroundMask = drawBgRect(width, height, 20, 0);
                        this.star.mask = this.backgroundMask;
                        if (this.options.icon) {
                            this.icon = this.options.icon;
                            this.icon.anchor.set(0.5);
                            this.prizeCont.addChildAt(this.icon, 1);
                        }
                        var halfWidth = this.options.width * 0.5;
                        var halfHeight = this.options.height * 0.5;
                        this.centerPoint = new Point(halfWidth, halfHeight);
                        this.contentCenterPoint = new Point((this.options.width - this.options.height) * 0.5, halfHeight);
                        this.iconCenterPoint = new Point(this.options.width - halfHeight, halfHeight);
                        this.prizeCont.x = this.iconCenterPoint.x;
                        this.prizeCont.y = this.iconCenterPoint.y;
                        this.addChild(this.background);
                        this.addChild(this.backgroundMask);
                        this.addChild(this.prizeCont);
                        this.updateIcon();
                        this.updateLock();
                    });
                    Object.defineProperty(GUI.GoalBarBase.prototype, 'iconScale', {
                        get: function get() {
                            return this.options.iconScale;
                        },
                        set: function set(value) {
                            this.options.iconScale = value;
                            this.updateIcon();
                        }
                    });
                    Object.defineProperty(GUI.GoalBarBase.prototype, 'locked', {
                        get: function get() {
                            return this.options.locked;
                        },
                        set: function set(value) {
                            this.options.locked = value;
                            this.updateLock();
                        }
                    });
                    GUI.GoalBarBase.prototype.startAnimations = function() {
                        this.star.visible = true;
                        XS.on("tick", this._starAnimationHandler);
                        var scaling = this.icon.scale;
                        var maxScale = 1.1 * scaling.x;
                        var minScale = 0.85 * scaling.x;
                        var t = 0.5;

                        function scaleDown() {
                            new Tween(scaling, {
                                x: maxScale
                            }, t, Tween.easein);
                            new Tween(scaling, {
                                y: minScale
                            }, t, Tween.easein).call(scaleUp);
                        }

                        function scaleUp() {
                            new Tween(scaling, {
                                x: minScale
                            }, t, Tween.easeout);
                            new Tween(scaling, {
                                y: maxScale
                            }, t, Tween.easeout).call(scaleDown);
                        }
                        scaleDown();
                    };
                    GUI.GoalBarBase.prototype.stopAnimations = function() {
                        XS.off("tick", this._starAnimationHandler);
                        Tween.clear(this.prizeCont.scale);
                    };
                    GUI.GoalBarBase.prototype.rotateStar = function() {
                        this.star.rotation += 2 * Math.PI * (1 / 60) * 0.1;
                    };
                    GUI.GoalBarBase.prototype.removeStageReference = function() {
                        this.stopAnimations();
                        Container.prototype.removeStageReference.call(this);
                    };
                    GUI.GoalBarBase.prototype.updateLock = function() {
                        this.lockIcon.visible = this.options.locked;
                        if (this.icon) { // this.icon.alpha = this.options.locked ? 0.4 : 1
                            this.iconScale = this.options.locked ? 1 : 1.1; // optional, can be removed
                        }
                    };
                    GUI.GoalBarBase.prototype.updateIcon = function() {
                        if (this.icon) {
                            var iconMaxSide = Math.max(this.icon.width / this.icon.scale.x, this.icon.height / this.icon.scale.y);
                            var scale = this.background.height / iconMaxSide * this.options.iconScale;
                            this.icon.scale.set(scale);
                        }
                    };
                    GUI.GoalBarBase.prototype.onIconClick = function() {
                        this.emit(this.locked ? "lock_click" : "icon_click");
                    };
                    GUI.GoalBar = GUI.GoalBarBase.expand(function(width, height, options) {
                        GUI.GoalBarBase.call(this, width, height, options);
                        this.options = GUI.util.applyDefaults(options, {
                            width: width,
                            height: height,
                            headlineText: options.headlineText || "Achievement placeholder",
                            hintText: undefined,
                            progress: {
                                width: width - height - 90,
                                height: height * 0.3,
                                radius: 22,
                                padding: 4,
                                fontSize: 32,
                                weight: 600,
                                backgroundColor: 0x316e7d
                            }
                        });
                        this.options.headline = GUI.util.applyDefaults(this.options.headline, {
                            fontSize: 33,
                            labelColor: "#316e7d",
                            weight: 500
                        });
                        this.headlineLabel = new Text2(this.headlineText, {
                            size: this.options.headline.fontSize,
                            fill: this.options.headline.labelColor,
                            weight: this.options.headline.weight
                        });
                        this.hintLabel = new Text2(this.hintText, {
                            size: this.options.headline.fontSize * 0.66,
                            fill: this.options.headline.labelColor,
                            weight: this.options.headline.weight
                        });
                        this.hintLabel.alpha = 0.8;
                        this.progress = new GUI.ProgressBar(this.options.progress.width, this.options.progress.height, this.options.progress);
                        this.addChild(this.progress);
                        this.progress.x = this.contentCenterPoint.x - this.options.progress.width * 0.5;
                        this.progress.y = this.contentCenterPoint.y;
                        this.addChild(this.headlineLabel);
                        this.addChild(this.hintLabel);
                        this.collectButton = new GUI.Button("", {
                            width: width,
                            height: height,
                            backgroundColor: 0x79df60,
                            shadowColor: 0x74ac59,
                            shadow: true
                        });
                        this.collectButton.alpha = 0;
                        this.clock = new GUI.CountDownClock(0, {
                            size: 26,
                            weight: 600
                        });
                        this.addChild(this.clock);
                        this.addChildAt(this.collectButton, 1); // add just above background
                        this.alignLabels();
                    });
                    GUI.GoalBar.prototype.alignLabels = function() {
                        var hasHint = typeof this.hintText !== "undefined" && this.hintText.toString() !== "";
                        this.headlineLabel.x = this.contentCenterPoint.x - this.headlineLabel.width * 0.5;
                        this.headlineLabel.y = (this.contentCenterPoint.y - this.headlineLabel.height) * 0.6 - (hasHint ? this.hintLabel.height * 0.5 : 0);
                        this.hintLabel.x = this.contentCenterPoint.x - this.hintLabel.width * 0.5;
                        this.hintLabel.y = this.headlineLabel.y + this.headlineLabel.height;
                    };
                    Object.defineProperty(GUI.GoalBar.prototype, 'headlineText', {
                        get: function get() {
                            return this.options.headlineText;
                        },
                        set: function set(value) {
                            this.headlineLabel.updateStyle({
                                size: this.options.headline.fontSize * Math.min(1, 30 / value.toString().length)
                            });
                            this.options.headlineText = value;
                            GUI.util.updateTextWithHandler(this.headlineLabel, value, this.alignLabels, this);
                        }
                    });
                    Object.defineProperty(GUI.GoalBar.prototype, 'hintText', {
                        get: function get() {
                            return this.options.hintText;
                        },
                        set: function set(value) { // this.hintText.updateStyle({size: this.options.headline.fontSize * Math.min(1, 30 / value.toString().length)});
                            this.options.hintText = value;
                            GUI.util.updateTextWithHandler(this.hintLabel, value, this.alignLabels, this);
                        }
                    }); // It always counting, while visible
                    // Starts and stops automatically on setStageReference / removeStageReference respectively
                    GUI.ETALabel = Container.expand(function(timestampFuture, options) {
                        Container.call(this);
                        this.timestampFuture = timestampFuture;
                        this.label = new Text2("", options);
                        this.intervalId = null;
                        this.addChild(this.label);
                        this.updateTime();
                    });
                    GUI.ETALabel.prototype.start = function() {
                        if (!this.intervalId && !!this.timestampFuture) {
                            var self = this;
                            this.intervalId = XS.setInterval(function() {
                                self.updateTime();
                            }, 1000);
                            this.emit(GUI.ETALabel.STARTED);
                            this.updateTime();
                        }
                    };
                    GUI.ETALabel.prototype.stop = function() {
                        if (this.intervalId) {
                            XS.clearInterval(this.intervalId);
                            delete this.intervalId;
                        }
                    };
                    GUI.ETALabel.prototype.updateTime = function() {
                        var etaMS = this.timestampFuture - Date.now();
                        var labelString = this.getETAFormatted(etaMS);
                        this.label.setText(labelString);
                        GUI.util.updateTextWithHandler(this.label, labelString, this.alignLabel, this);
                        if (etaMS < 0) {
                            this.emit(GUI.ETALabel.FINISHED);
                            this.stop();
                        }
                    }; // onAdded
                    GUI.ETALabel.prototype.setStageReference = function(stage) {
                        Container.prototype.setStageReference.call(this, stage);
                        this.start();
                    }; // onRemoved
                    GUI.ETALabel.prototype.removeStageReference = function() {
                        Container.prototype.removeStageReference.call(this); // clear timeouts when object removed from stage.
                        this.stop();
                    };
                    GUI.ETALabel.prototype.alignLabel = function(milliseconds) { // implemented in descendants
                    };
                    /**
                     *
                     * @param milliseconds
                     * @returns {string} 1w 2d 3h 20:13 | 3h 20 | 20:13 | 00:13
                     */
                    GUI.ETALabel.prototype.getETAFormatted = function(milliseconds) {
                        if (milliseconds < 0) milliseconds = 0;
                        var s = milliseconds / 1000;
                        var m = s / 60;
                        var h = m / 60;
                        var d = h / 24;
                        var w = d / 7;
                        var seconds = Math.floor(s) % 60;
                        var minutes = Math.floor(m) % 60;
                        var hours = Math.floor(h) % 24;
                        var days = Math.floor(d) % 7;
                        var weeks = Math.floor(w);
                        var bigParts = [];
                        if (weeks) bigParts.push(weeks + (weeks > 1 ? " weeks" : " week"));
                        if (days) bigParts.push(days + (days > 1 ? " days" : "day"));
                        var time = [];
                        if (bigParts.length < 1) {
                            if (hours >= 1) {
                                bigParts.push(hours + "h");
                                if (h < 3 && minutes !== 0) {
                                    bigParts.push(minutes + "m");
                                }
                            }
                        }
                        if (!bigParts.length) {
                            if (minutes < 3) {
                                time.push(minutes < 10 ? "0" + minutes : minutes);
                                time.push(seconds < 10 ? "0" + seconds : seconds);
                            } else {
                                time.push(minutes + " mins");
                            }
                        }
                        var result = "";
                        if (bigParts.length) {
                            result += bigParts.join(" ") + " ";
                        }
                        if (time.length) {
                            result += time.join(":");
                        }
                        return result;
                    };
                    /**
                     * label.eta = Date.now() + 15000 â will count 15 seconds
                     *
                     *  var midnight = new Date();
                     * midnight.setDate(today.getDate() + 1)
                     * midnight.setHours(0, 0, 0)
                     *
                     * label.eta = midnight - will count to the next midnight
                     */
                    Object.defineProperty(GUI.ETALabel.prototype, 'eta', {
                        get: function get() {
                            return this.timestampFuture;
                        },
                        set: function set(value) {
                            if (value instanceof Date) {
                                value = value.getTime();
                            }
                            this.timestampFuture = value;
                            this.start(); // this.updateTime()
                        }
                    });
                    GUI.ETALabel.STARTED = "started";
                    GUI.ETALabel.FINISHED = "finished";
                    /**
                     * The Clock
                     * @type {*|{}}
                     */
                    GUI.CountDownClock = GUI.ETALabel.expand(function(timestampFuture, options) {
                        options.fill = options.fill || "#ffffff";
                        options.weight = options.weight || "200";
                        GUI.ETALabel.call(this, timestampFuture, options);
                        this.clockIcon = new Sprite(fetch_i_g_clock_svg());
                        this.clockIcon.scale.set(0.5);
                        this.clockIcon.x = -this.clockIcon.width * 0.5;
                        this.clockIcon.y = -this.clockIcon.height * 0.5;
                        this.label.y = -this.label.height * 0.5;
                        this.addChild(this.clockIcon);
                        this.background = new Graphics();
                        this.alignLabel();
                        this.addChildAt(this.background, 0);
                        this.visible = !!timestampFuture;
                    });
                    GUI.CountDownClock.prototype.start = function() {
                        GUI.ETALabel.prototype.start.call(this);
                        if (!!this.intervalId) { // timer had started
                            this.visible = true;
                        }
                    };
                    GUI.CountDownClock.prototype.stop = function() {
                        GUI.ETALabel.prototype.stop.call(this);
                        this.visible = false;
                    };
                    GUI.CountDownClock.prototype.alignLabel = function() {
                        var bgWidth = 5 + Math.max(50, this.label.width); // TODO: remove the magic number
                        this.background.clear();
                        this.background.beginFill(0x316e7d);
                        this.label.x = 5 + (this.clockIcon.width + bgWidth - this.label.width) * 0.5;
                        this.background.drawRoundedRect(0, 0, this.label.x + bgWidth, this.label.height);
                        this.background.endFill();
                        this.background.y = -this.background.height * 0.6; // FIXME: label height less than expected
                    };
                    var GoalsModel = function() {
                        var stats;
                        var goalsConfig;
                        var initialized;
                        var onReadyCallBack;
                        var dailyGoalIssued = false;

                        function goalsMerge(a, b) {
                            var result = {};

                            function uniq(arr) {
                                if (typeof arr !== "object") return [];
                                var u = {};
                                arr.forEach(function(i) {
                                    if (!u[i]) u[i] = 1;
                                });
                                return Object.keys(u);
                            }
                            result.list = function() {
                                var kA = Object.keys(a.list);
                                var kB = Object.keys(b.list);
                                var result = {};
                                var i, k;
                                for (i = 0; i < kA.length; i++) {
                                    k = kA[i];
                                    result[k] = a.list[k];
                                }
                                for (i = 0; i < kB.length; i++) {
                                    k = kB[i];
                                    var g1 = result[k];
                                    var g2 = b.list[k];
                                    if (!g1 || !g2) {
                                        result[k] = g2 || g1;
                                        if (!result[k]) delete result[k];
                                        continue;
                                    }
                                    if (g1.collected || g2.collected) {
                                        if (g1.collected && !g2.collected) result[k] = g2;
                                        if (!g1.collected && g2.collected) result[k] = g1;
                                        continue;
                                    }
                                    if (g1.type === g2.type && g1.want === g2.want && g1.want2 === g2.want2) {
                                        g1.have = Math.max(g1.have || 0, g2.have || 0);
                                        result[k] = g1;
                                    } else { // different type but same id
                                        result[k] = g1;
                                        var newId = k + "_" + g2.id || "mf";
                                        g2.id = newId;
                                        result[newId] = g2;
                                    }
                                }
                                return result;
                            }();
                            var converted = []; // convert old format to new format
                            Object.keys(result.list).forEach(function(id) {
                                if (result.list[id].collected) {
                                    converted.push(id);
                                }
                            });
                            var ids = converted.concat(a.list_collected || []).concat(b.list_collected || []);
                            ids = uniq(ids);
                            ids.forEach(function(id) {
                                delete result.list[id];
                            });
                            result.list_collected = ids;
                            result.maxRows = XS.data.merge.higherIsBetter(a.maxRows, b.maxRows);
                            result.lastUpdate = XS.data.merge.higherIsBetter(a.lastUpdate, b.lastUpdate);
                            return result;
                        }
                        XS.on("gameLoaded", function() {
                            function onDataSync() {
                                if (!initialized) {
                                    DI.get(DIKeys.goalsModel).syncWithRemote(XS.data.goals);
                                    initialized = true;
                                    onReadyCallBack && onReadyCallBack();
                                }
                            } // handle data loaded callback (with/out remote)
                            (function(finalCallback) {
                                var dlTimeout = XS.setTimeout(complete, 10000);
                                var dlCalls = 0;

                                function onDataLoaded() {
                                    dlCalls++;
                                    if (dlCalls > 1 && dlTimeout) {
                                        return complete();
                                    }
                                    if (!XS.is.facebookInstant) { // it's web
                                        if (!XC.loggedin) { // not loggedin, so no remote data expected
                                            return complete();
                                        }
                                    }
                                }

                                function complete() {
                                    XS.clearTimeout(dlTimeout);
                                    dlTimeout = NaN;
                                    XS.data.off("dataloaded", onDataLoaded);
                                    finalCallback();
                                }
                                XS.data.on("dataloaded", onDataLoaded);
                                XS.data.addObjectWithLocalKey("goals", "goals.v1", {
                                    default: {
                                        maxRows: 1,
                                        lastUpdate: Goal.helper.getMidnight(),
                                        list: {}
                                    },
                                    merge: goalsMerge,
                                    remote: true
                                }, onDataLoaded);
                            })(onDataSync);
                        });
                        GoalsModel.ON_GOAL_CREATED = "on_goal_created";
                        GoalsModel.ALL_BALLS = ["ballBronze", "ballSilver", "ballGold"];
                        GoalsModel.ALL_BOTTLES = ["drinkRim", "drinkAim", "drinkCoin", "drinkPoints"];
                        GoalsModel.randomFrom = function(arr) {
                            return arr[Math.floor(arr.length * Math.random())];
                        };

                        function GoalsModel() {
                            stats = DI.get(DIKeys.goalsStats);
                            goalsConfig = DI.get(DIKeys.goalsConfig);
                            this.goals = [];
                            var allPowerUps = GoalsModel.ALL_BALLS.concat(GoalsModel.ALL_BOTTLES);
                            for (var i = 0; i < allPowerUps.length; i++) {
                                var key = allPowerUps[i];
                                stats.powerupSwishes[key] = 0;
                                stats.powerupGot[key] = 0;
                                stats.powerupUse[key] = 0;
                            }
                        }
                        GoalsModel.prototype.syncWithRemote = function(remoteData) {
                            XS.data.goals.maxRows = Math.min(XS.data.goals.maxRows || 1, goalsConfig.MAX_ROWS);
                            var i;
                            this.goals = [];
                            var list = remoteData.list;
                            if (list) { // keep the order consistency between browsers
                                var keys = Object.keys(list).sort(function(a, b) {
                                    return a.localeCompare(b);
                                });
                                for (i = 0; i < keys.length; i++) {
                                    var k = keys[i];
                                    var data = list[k];
                                    if (data.collected) continue; // Try to instantiate from data
                                    // Check if goal type exists
                                    var instance = Goal.helper.create(data.type);
                                    if (!instance) {
                                        delete XS.data.goals.list[k];
                                        continue;
                                    }
                                    instance.id = k; // Load from XS.data.goals (and check if it exist)
                                    var loaded = instance.load() && XS.data.goals.list[k];
                                    if (!loaded) {
                                        delete XS.data.goals.list[k];
                                        continue;
                                    }
                                    this.goals.push(instance);
                                }
                            } // generate missing
                            rows_loop: for (var row = 0; row < XS.data.goals.maxRows; row++) {
                                for (i = 0; i < this.goals.length; i++) {
                                    if (this.goals[i] && this.goals[i].row === row) {
                                        continue rows_loop;
                                    }
                                }
                                this.goals.push(this.getNextGoal(row));
                            }
                        };

                        function isGoalActive(id) {
                            if (XS.data.goals.list_collected && XS.data.goals.list_collected.indexOf(id) !== -1) return true;
                            var gls = DI.get(DIKeys.goalsModel).goals.slice(0);
                            while (gls.length) {
                                var g = gls.pop();
                                if (g && g.id === id) return true;
                            }
                            return false;
                        }

                        function getGoal(sequence, randomly) {
                            var i = 0;
                            var goal, tmpl;
                            if (randomly) {
                                sequence = sequence.slice(0);
                                while (sequence.length) {
                                    i = Math.floor(sequence.length * Math.random());
                                    tmpl = sequence.splice(i, 1)[0];
                                    if (isGoalActive(tmpl.id)) {
                                        continue;
                                    }
                                    goal = Goal.helper.createFromTemplate(tmpl);
                                    if (goal) return goal;
                                }
                            } else {
                                while (i < sequence.length) {
                                    tmpl = sequence[i++];
                                    if (isGoalActive(tmpl.id)) {
                                        continue;
                                    }
                                    goal = Goal.helper.createFromTemplate(tmpl);
                                    if (goal) return goal;
                                }
                            }
                        }
                        GoalsModel.prototype.getNextGoal = function(row) {
                            if (this.goals.length > XS.data.goals.maxRows) {
                                var i = XS.data.goals.maxRows;
                                while (i < this.goals.length) {
                                    var g = this.goals[i];
                                    if (g && g.row === row) {
                                        var inst = this.goals.splice(i, 1)[0];
                                        if (inst.collected || inst.isExpired()) continue;
                                        return inst;
                                    }
                                    i++;
                                }
                            }
                            var goal = getGoal(goalsConfig.FTUE[row], false) || getGoal(goalsConfig.GRIND[row], false);
                            if (goal) {
                                goal.storeAfterCollected = true;
                            } else {
                                if (row === 0 && !dailyGoalIssued) {
                                    goal = getGoal(goalsConfig.DAILY, true);
                                    dailyGoalIssued = true;
                                } else {
                                    var tmpl = goalsConfig.generate();
                                    if (!tmpl) {
                                        log.warn("Failed to create randomized goal");
                                    } else {
                                        goal = Goal.helper.createFromTemplate(tmpl);
                                    }
                                }
                            }
                            if (goal && isNaN(goal.row)) goal.row = row;
                            return goal;
                        };
                        GoalsModel.prototype.onReady = function(callback) {
                            if (initialized) {
                                callback();
                                return;
                            }
                            onReadyCallBack = callback;
                        };
                        GoalsModel.prototype.triggerPopup = function(callback) {
                            if (initialized) {
                                if (DI.isBound(DIKeys.goalsPopup)) {
                                    return DI.get(DIKeys.goalsPopup);
                                }
                                this.update();
                                if (this.canShowPopup()) {
                                    var dialog = new GoalsDialog();
                                    dialog.open(callback);
                                    DI.bind(DIKeys.goalsPopup).toConstantValue(dialog);
                                    return dialog;
                                }
                            }
                            callback && callback();
                        };
                        GoalsModel.prototype.cancelPopup = function() {
                            if (DI.isBound(DIKeys.goalsPopup)) {
                                DI.get(DIKeys.goalsPopup).close();
                            }
                        };
                        GoalsModel.prototype.renew = function(goal) {
                            if (!goal) return;
                            var row = goal.row;
                            var idx = this.goals.indexOf(goal);
                            if (idx !== -1 && idx !== row) this.goals.splice(idx, 1);
                            var newGoal = goal.levelUp() || this.getNextGoal(row);
                            this.goals[row] = newGoal; // replace goal
                            this.emit(GoalsModel.ON_GOAL_CREATED, newGoal);
                        };
                        GoalsModel.prototype.collectGoal = function(goal, force) {
                            if ((goal.progress >= 1 || force) && !goal.collected) {
                                goal.collect();
                                var config = DI.get(DIKeys.goalsConfig);
                                if (goal.data.expand) {
                                    if (XS.data.goals.maxRows < config.MAX_ROWS) {
                                        var newGoal = this.getNextGoal(XS.data.goals.maxRows);
                                        this.goals.push(newGoal);
                                        this.emit(GoalsModel.ON_GOAL_CREATED, newGoal);
                                        XS.data.goals.maxRows++;
                                    }
                                }
                                XS.data.setDirty("goals");
                                this.renew(goal);
                                return true;
                            }
                        };
                        /**
                         * Update all stats and goals
                         */
                        GoalsModel.prototype.update = function() {
                            var activeGoals = this.getActiveGoals();
                            for (var i = 0; i < activeGoals.length; i++) {
                                var goal = activeGoals[i];
                                goal.update();
                                goal.save();
                                if (goal.isExpired()) {
                                    this.renew(goal);
                                }
                            }
                            XS.data.setDirty("goals"); // XS.data.save()
                        };
                        GoalsModel.prototype.gameOver = function() {
                            stats.gamesplayed++;
                            this.resetSwishes();
                        };
                        GoalsModel.prototype.addCoins = function(p) {
                            stats.coins += p;
                        };
                        GoalsModel.prototype.resetSwishes = function() {
                            stats.swishesInaRowMax = Math.max(stats.swishesInaRowMax, stats.swishesInaRow);
                            stats.swishesInaRow = 0;
                        };
                        GoalsModel.prototype.handleThrow = function(thr) {
                            stats.throws++;
                            if (isNaN(thr.swishes)) {
                                this.resetSwishes();
                            } else {
                                stats.swishes += thr.swishes;
                                for (var powerUp in thr.activePowerUpKeys) {
                                    stats.powerupSwishes[powerUp] += thr.swishes;
                                }
                                stats.swishesInaRow += thr.swishes;
                            }
                            stats.points += thr.points;
                        };
                        GoalsModel.prototype.gotPowerUp = function(powerUp) {
                            stats.powerupGot[powerUp]++;
                        };
                        GoalsModel.prototype.usePowerUp = function(powerUp) {
                            stats.powerups++;
                            stats.powerupUse[powerUp]++;
                        };
                        GoalsModel.prototype.resetRoundStats = function() {
                            stats.points = 0;
                            stats.coins = 0;
                            stats.powerups = 0;
                            stats.throws = 0;
                            stats.swishes = 0;
                            stats.swishesInaRow = 0;
                            stats.swishesInaRowMax = 0;
                            var allPowerUps = GoalsModel.ALL_BALLS.concat(GoalsModel.ALL_BOTTLES);
                            for (var i = 0; i < allPowerUps.length; i++) {
                                var key = allPowerUps[i];
                                stats.powerupSwishes[key] = 0;
                                stats.powerupGot[key] = 0;
                                stats.powerupUse[key] = 0;
                            }
                        };
                        GoalsModel.prototype.getById = function(id) {
                            for (var i = 0; i < this.goals.length; i++) {
                                if (this.goals[i] && this.goals[i].id === id) {
                                    return this.goals[i];
                                }
                            }
                        };
                        GoalsModel.prototype.reset = function() {
                            this.goals = [];
                            this.resetRoundStats();
                        };
                        GoalsModel.prototype.canShowPopup = function() {
                            return initialized && this.getActiveGoals().length;
                        };
                        GoalsModel.prototype.save = function() {
                            for (var i = 0; i < this.goals.length; i++) {
                                if (this.goals[i]) {
                                    this.goals[i].save();
                                }
                            }
                            XS.data.setDirty("goals");
                            XS.data.save();
                        };
                        GoalsModel.prototype.getActiveGoals = function() {
                            var results = [];
                            for (var row = 0; row < XS.data.goals.maxRows; row++) {
                                for (var i = 0; i < this.goals.length; i++) {
                                    if (this.goals[i] && this.goals[i].row === row) {
                                        results.push(this.goals[i]);
                                        break;
                                    }
                                }
                            }
                            return results;
                        };
                        return GoalsModel;
                    }();
                    var Goal = function() {
                        Goal.ON_COLLECTED = "on_collected";
                        Goal.ON_UPDATED = "on_updated";
                        Goal.MAX_PRIZE_COUNT = 3;

                        function Goal() {
                            this.collected = false;
                            this.progress = 0;
                            this.data = {};
                        }
                        Goal.prototype.save = function() {
                            var dataObj;
                            if (this.collected) {
                                if (this.storeAfterCollected) {
                                    var arr = XS.data.goals.list_collected = XS.data.goals.list_collected || [];
                                    arr.indexOf(this.id) === -1 && arr.push(this.id);
                                }
                            } else {
                                if (!this.isExpired()) {
                                    dataObj = this.serialize();
                                }
                            }
                            if (dataObj) {
                                XS.data.goals.list[this.id] = dataObj;
                            } else {
                                delete XS.data.goals.list[this.id];
                            }
                        };
                        Goal.prototype.load = function() {
                            if (!XS.data || !XS.data.goals || !XS.data.goals.list) return;
                            var source = XS.data.goals.list[this.id];
                            for (var prop in source) {
                                this.data[prop] = source[prop];
                            }
                            this.data.have = isNaN(this.data.have) ? 0 : this.data.have;
                            if (this.collected || this.isExpired() || !this.isValid()) {
                                return false;
                            }
                            this.generatePrize();
                            this.onLoad();
                            return true;
                        };
                        Goal.prototype.serialize = function() {
                            return {
                                type: this.data.type,
                                have: this.data.have,
                                expand: this.data.expand,
                                want: this.data.want,
                                want2: this.data.want2,
                                expires: this.data.expires,
                                prize: this.data.prize,
                                row: this.row
                            };
                        };
                        Goal.prototype.isExpired = function() {
                            var expireDate = this.getExpireDate();
                            if (expireDate) {
                                return Date.now() - expireDate.getTime() > 0;
                            }
                            return false;
                        }; // If goal has been part of a new feature, it might not be valid anymore
                        Goal.prototype.isValid = function() {
                            if (this.prize && this.prize.id) {
                                if (!DI.isBound(DIKeys.powerUpPrize + this.prize.id)) {
                                    return false;
                                }
                            }
                            return true;
                        };
                        Goal.prototype.getExpireDate = function() {
                            if (this.data.expires) {
                                return new Date(this.data.expires);
                            }
                            return null;
                        };
                        Goal.prototype.setExpireAfter = function(expiresAfter) {
                            if (isNaN(expiresAfter) || expiresAfter === null) {
                                delete this.data.expires;
                            } else {
                                var now = new Date();
                                now.setMinutes(now.getMinutes() + expiresAfter);
                                this.data.expires = now.getTime();
                            }
                        };
                        Goal.prototype.collect = function() {
                            if (!this.collected) {
                                if (this.prize) {
                                    var goalsModel = DI.get(DIKeys.goalsModel); // Make sure prize exists (in case of reverting to old version)
                                    if (!powerUps[this.prize.id]) {
                                        this.generateNewPrize();
                                    }
                                    XS.data.powerUps[this.prize.id] += this.prize.count;
                                    XS.data.setDirty("powerUps");
                                    goalsModel.gotPowerUp(this.prize.id);
                                }
                                this.collected = true;
                                this.save();
                            }
                            this.emit(Goal.ON_COLLECTED);
                        };
                        Goal.prototype.getProgressCaption = function(progress) {
                            var have = this.data.have;
                            if (!isNaN(progress)) {
                                have = Math.round(this.data.want * progress);
                            }
                            return have + " / " + this.data.want;
                        };
                        Goal.prototype.getTitle = function() {
                            return this.title || Host.Localize.Translate(this.data.title, this.data) || "No title";
                        };
                        Goal.prototype.levelUp = function() { // TODO: implement
                            return null;
                        };
                        Goal.prototype.update = function() {
                            this.prevProgress = this.progress;
                            this.onUpdate();
                            this.progress = Math.max(0, Math.min(1, this.data.have / this.data.want));
                            this.emit(Goal.ON_UPDATED);
                        }; // called before event dispatch
                        Goal.prototype.onUpdate = function() {}; // called after loaded from storage
                        Goal.prototype.onLoad = function() {}; // generates a new prize
                        Goal.prototype.generateNewPrize = function() {
                            this.data.prize = null;
                            this.generatePrize();
                        }; // randomly generated prize by default
                        Goal.prototype.generatePrize = function() {
                            this.data.prize = this.data.prize || {};
                            if (!this.data.prize.id) { // this.data.prize.id = GoalsModel.randomFrom(Object.keys(powerUps))
                                // DIKeys.powerUpPrizes
                                var prizes = DI.get(DIKeys.powerUpPrizes); // Randomize a prize
                                var totalProb = 0;
                                for (var i = 0; i < prizes.length; ++i) {
                                    totalProb += prizes[i].prob;
                                }
                                var prizeRoll = Math.floor(Math.random() * totalProb);
                                var prizeIdx = 0; // Weighted random pick
                                for (var i = 0; i < prizes.length; ++i) {
                                    prizeIdx += prizes[i].prob;
                                    if (prizeIdx > prizeRoll) {
                                        this.data.prize.id = prizes[i].id;
                                        break;
                                    }
                                }
                            }
                            if (isNaN(this.data.prize.count)) {
                                this.data.prize.count = Math.ceil(Math.random() * Goal.MAX_PRIZE_COUNT);
                            }
                        };
                        Object.defineProperty(Goal.prototype, "row", {
                            get: function get() {
                                return this.data.row;
                            },
                            set: function set(value) {
                                this.data.row = value;
                            }
                        });
                        Object.defineProperty(Goal.prototype, "prize", {
                            get: function get() {
                                return this.data.prize;
                            }
                        });
                        Goal.Types = {};
                        return Goal;
                    }();
                    Goal.helper = {
                        getRandomId: function getRandomId(len) {
                            var l = len || 8;
                            var chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split("");
                            var id = [];
                            while (l) {
                                l--;
                                var c = chars[Math.floor(Math.random() * chars.length)];
                                id.push(c);
                            }
                            return id.join("");
                        },
                        create: function create(type) {
                            var Class = Goal.Types[type];
                            if (Class) {
                                return new Class();
                            } else {
                                log.warn("No goal with type", type);
                            }
                        },
                        createFromTemplate: function createFromTemplate(template) {
                            var g = Goal.helper.create(template.type);
                            if (g) {
                                g.id = template.id || Goal.helper.getRandomId();
                                g.template = template;
                                for (var prop in template) {
                                    g.data[prop] = template[prop];
                                }
                                g.generatePrize();
                                g.setExpireAfter(template.expiresAfter);
                                if (g.load()) {
                                    return g;
                                }
                            }
                        },
                        getMidnight: function getMidnight() {
                            var today = new Date();
                            today.setHours(0);
                            today.setMinutes(0);
                            today.setSeconds(0);
                            today.setMilliseconds(0);
                            return today.getTime();
                        }
                    };
                    var GoalsDialog = function() {
                        var goalsModel;

                        function getBoxWeight(prize) {
                            if (prize && !isNaN(prize.count)) {
                                return prize.count / (Goal.MAX_PRIZE_COUNT * 2);
                            }
                            return 1; // default value
                        }
                        var BasketballGoalBar = GUI.GoalBar.expand(function(width, theGoal) {
                            this.model = theGoal;
                            this._modelUpdated = this.onModelUpdated.bind(this);
                            this._modelCollected = this.onModelCollected.bind(this);
                            this._countDownEnd = this.onCountDownEnd.bind(this);
                            this._claimHandler = this.onClaim.bind(this);
                            var icons = [fetch_i_g_care_package_0_svg(), fetch_i_g_care_package_1_svg(), fetch_i_g_care_package_2_svg()];
                            var maxIdx = icons.length - 1;
                            var iconIndex = Math.min(maxIdx, Math.floor(getBoxWeight(this.model.prize) * maxIdx));
                            GUI.GoalBar.call(this, width, BasketballGoalBar.HEIGHT, {
                                icon: new Sprite(icons[iconIndex]),
                                locked: true
                            });
                            this.progress.value = 0;
                            this.model.on(Goal.ON_UPDATED, this._modelUpdated);
                            this.model.on(Goal.ON_COLLECTED, this._modelCollected);
                            this.clock.on(GUI.ETALabel.FINISHED, this._countDownEnd);
                            this.collectButton.on('click', this._claimHandler);
                            this.winView = new Container();
                            this.winView.label = new Text2("", {
                                size: 54,
                                fill: this.options.headline.labelColor,
                                weight: this.options.progress.weight
                            });
                            this.winView.description = new Text2("", {
                                size: this.options.headline.fontSize,
                                fill: this.options.headline.labelColor,
                                weight: this.options.headline.weight
                            });
                            this.winView.addChild(this.winView.label);
                            this.winView.addChild(this.winView.description);
                            this.addChild(this.winView);
                            this.winView.visible = false;
                        });
                        BasketballGoalBar.HEIGHT = 180;
                        BasketballGoalBar.prototype.drawWinView = function() {
                            var powerUps = DI.get(DIKeys.powerUps);
                            var powerupDef = powerUps[this.model.prize.id];
                            var title = Host.Localize.Translate(powerupDef.name);
                            if (this.model.prize.count > 1) {
                                title = this.model.prize.count + " " + Host.Localize.Translate(powerupDef.namePlural);
                            }
                            var titleLabel = this.winView.label;
                            var descriptionLabel = this.winView.description;
                            GUI.util.updateTextWithHandler(titleLabel, title, function() {
                                titleLabel.x = this.contentCenterPoint.x - titleLabel.width * 0.5;
                                titleLabel.y = this.contentCenterPoint.y - titleLabel.height + 15;
                            }, this);
                            GUI.util.updateTextWithHandler(descriptionLabel, powerupDef.desc, function() {
                                descriptionLabel.x = this.contentCenterPoint.x - descriptionLabel.width * 0.5;
                                descriptionLabel.y = this.contentCenterPoint.y - descriptionLabel.height * 0.5 + 40;
                            }, this);
                        };
                        BasketballGoalBar.prototype.appear = function(time) {
                            this.visible = true;
                            this.alpha = 0;
                            tweenPromise(this, {
                                alpha: 1
                            }, time, Tween.easein)();
                        };
                        BasketballGoalBar.prototype.onClaim = function(p) {
                            sounds.prize_claim.play();
                            var gotPrize = function() {
                                var forcedCollect = false;
                                return goalsModel.collectGoal(this.model, forcedCollect);
                            }.call(this);
                            if (!gotPrize) { // lock shaking animation
                                var rotate = tweenPromise(this.lockIconCont, {
                                    rotation: -Math.PI / 4
                                }, 0.15, Tween.easeout);
                                var rotateBack = tweenPromise(this.lockIconCont, {
                                    rotation: 0
                                }, 0.15, Tween.easeout);
                                rotate().then(rotateBack);
                            }
                        };
                        BasketballGoalBar.prototype.onAnimationEnded = function() {
                            var isReady = this.model.progress >= 1;
                            this.progress.caption = this.model.getProgressCaption();
                            this.locked = !isReady;
                            this.collectButton.alpha = isReady ? 1 : 0;
                            if (isReady) {
                                this.progress.caption = Host.Localize.Translate("Complete!");
                                this.progress.foreground.visible = false;
                                this.progress.background.visible = false;
                                this.progress.label.updateStyle({
                                    fill: "#ffffff"
                                });
                                this.headlineLabel.updateStyle({
                                    fill: "#ffffff"
                                });
                                this.hintText = "";
                                this.startAnimations();
                            }
                        };
                        BasketballGoalBar.prototype.onModelCollected = function() {
                            if (this.animation) {
                                this.animation.finish(true);
                                delete this.animation;
                            } else {
                                if (this.model.prize) {
                                    this.drawWinView();
                                    this.animation = new GoalRevealAnimation(this);
                                } else {
                                    this.animation = new EmptyBoxAnimation(this);
                                }
                                this.animation.run();
                            }
                        };
                        BasketballGoalBar.prototype.onCountDownEnd = function() {
                            var goalsModel = DI.get(DIKeys.goalsModel);
                            goalsModel.renew(this.model);
                            this.emit("onFinished");
                        }; // onRemoved
                        BasketballGoalBar.prototype.removeStageReference = function() {
                            this.buttonMode = false; // crash in engine otherwise
                            GUI.GoalBar.prototype.removeStageReference.call(this);
                            if (this.animation) {
                                this.animation.finish(true);
                                delete this.animation;
                            }
                            this.model.off(Goal.ON_UPDATED, this._modelUpdated);
                            this.model.off(Goal.ON_COLLECTED, this._modelCollected);
                            this.clock.off(GUI.ETALabel.FINISHED, this._countDownEnd);
                            Tween.clear(this.progress);
                            this.collectButton.off('click', this._claimHandler); // TODO: tap event?
                        };
                        BasketballGoalBar.prototype.onModelUpdated = function() {
                            var isReady = this.model.progress >= 1;
                            this.progress.caption = this.model.getProgressCaption(this.model.prevProgress);
                            this.progress.value = isNaN(this.model.prevProgress) ? this.model.progress : this.model.prevProgress;
                            this.headlineText = this.model.getTitle();
                            this.hintText = this.model.hintText;
                            this.clock.eta = isReady ? null : this.model.getExpireDate();
                        };
                        BasketballGoalBar.prototype.animateChange = function() {
                            var self = this;
                            var animTime = this.model.progress - this.progress.value > 0 ? 0.8 : NaN;
                            if (isNaN(animTime)) {
                                this.progress.value = this.model.progress;
                                self.onAnimationEnded();
                            } else {
                                tweenValue(this.progress, {
                                    value: this.model.progress
                                }, animTime, Tween.easeout, function() {
                                    self.progress.caption = self.model.getProgressCaption(self.progress.value);
                                }, function() {
                                    self.onAnimationEnded();
                                });
                            }
                        };
                        var GoalsDialog = BasketballDialog.expand(function() {
                            goalsModel = goalsModel || DI.get(DIKeys.goalsModel);
                            preload(ref_i_g_care_package_0_svg, ref_i_g_care_package_1_svg, ref_i_g_care_package_2_svg);
                            var vPadding = 25;
                            var pWidth = 800;
                            var pHeight = 385 + XS.data.goals.maxRows * (BasketballGoalBar.HEIGHT + vPadding);
                            BasketballDialog.call(this, pWidth, pHeight, {
                                vPadding: vPadding
                            });
                            this.itemsContainer = new Container();
                            var index = this.getChildIndex(this.continueButton);
                            this.addChildAt(this.itemsContainer, index);
                            var self = this;
                            this.activeTweens = [];
                            var stats = DI.get(DIKeys.goalsStats);
                            if (stats.points > 1) {
                                this.addHeadline(Host.Localize.Translate("You scored {points} points", stats));
                            } else {
                                this.addHeadline(Host.Localize.Translate("Welcome"));
                            }
                            this.addSubheadline(Host.Localize.Translate("Complete goals to unlock prizes"));
                            this.bars = [];
                            this.newBars = []; // goals created, but not displayed yet
                            var goals = goalsModel.getActiveGoals();
                            for (var i = 0; i < goals.length; i++) {
                                var goal = this.createItem(goals[i]);
                                this.bars.push(goal);
                                var delay = goal.model.progress - goal.progress.value > 0 ? i * 200 : 0;
                                XS.setTimeout(goal.animateChange.bind(goal), delay);
                            }
                            this.arrange(0);
                            this._newGoalHandler = this.onNewGoalCreated.bind(this);
                            goalsModel.on(GoalsModel.ON_GOAL_CREATED, this._newGoalHandler);
                            self.resizeHandler();
                        });
                        GoalsDialog.prototype.createItem = function(model) {
                            var goalBarWidth = this.innerWidth - this.options.hPadding * 2;
                            var item = new BasketballGoalBar(goalBarWidth, model);
                            item.x = this.options.hPadding;
                            item.y = this.topOffset + (BasketballGoalBar.HEIGHT + this.options.vPadding) * XS.data.goals.maxRows;
                            item.onModelUpdated();
                            var self = this;
                            item.once("onFinished", function() {
                                var index = self.bars.indexOf(item);
                                if (index !== -1) {
                                    self.bars.splice(index, 1);
                                    item.stage && item.parent.removeChild(item);
                                }
                                var newGoal;
                                while (newGoal = self.newBars.pop()) {
                                    self.bars.push(newGoal);
                                    newGoal.appear(0.5);
                                    newGoal.animateChange();
                                }
                                self.arrange();
                                if (!self.bars.length) {
                                    self.close();
                                }
                            });
                            this.itemsContainer.addChild(item);
                            return item;
                        };
                        GoalsDialog.prototype.arrange = function(time) {
                            time = isNaN(time) ? 0.5 : time;
                            while (this.activeTweens.length) {
                                var tween = this.activeTweens.pop();
                                tween.clear();
                            }
                            var barsSorted = this.bars.sort(function(a, b) {
                                if (!a || !a.model || !b || !b.model) return 0;
                                return a.model.row - b.model.row;
                            });
                            var itemHeight = BasketballGoalBar.HEIGHT + this.options.vPadding;
                            for (var i = 0; i < barsSorted.length; i++) {
                                this.activeTweens.push(new Tween(barsSorted[i], {
                                    y: this.topOffset + itemHeight * i
                                }, time));
                            }
                        };
                        GoalsDialog.prototype.onNewGoalCreated = function(goal) {
                            var newItem = this.createItem(goal);
                            newItem.visible = false;
                            newItem.y = this.topOffset + (BasketballGoalBar.HEIGHT + this.options.vPadding) * newItem.model.row;
                            this.newBars.push(newItem);
                            this.resizeContainer();
                        };
                        GoalsDialog.prototype.close = function() {
                            DI.unbind(DIKeys.goalsPopup);
                            BasketballDialog.prototype.close.call(this);
                            goalsModel.off(GoalsModel.ON_GOAL_CREATED, this._newGoalHandler);
                            goalsModel.save();
                            goalsModel.resetRoundStats();
                        };
                        GoalsDialog.prototype.resizeContainer = function() {
                            var self = this;
                            var vPadding = 25;
                            var pHeight = 385 + Math.min(3, XS.data.goals.maxRows) * (BasketballGoalBar.HEIGHT + vPadding);
                            self.children[0].height = pHeight;
                            self.children[2].position.y = pHeight - 145;
                            self.options.height = pHeight;
                            self.height = pHeight * self.scale.y;
                            self.resizeHandler();
                        };
                        return GoalsDialog;
                    }();
                    (function() {
                        DI.bind(DIKeys.goalsStats).toConstantValue({
                            points: 0,
                            coins: 0,
                            powerups: 0,
                            throws: 0,
                            swishes: 0,
                            swishesInaRow: 0,
                            swishesInaRowMax: 0,
                            powerupSwishes: {}, // [id: string]: number
                            powerupUse: {}, // [id: string]: number
                            powerupGot: {}, // [id: string]: number
                            gamesplayed: 0
                        });
                        DI.bind(DIKeys.goalsModel).to(GoalsModel).asSingleton();
                        DI.bind(DIKeys.goalsConfig).toConstantValue(function() {
                            var config = {
                                MAX_ROWS: 3,
                                FTUE: [
                                    [{
                                        type: "Points",
                                        want: 10,
                                        prize: {
                                            id: "ballBronze",
                                            count: 1
                                        },
                                        expand: true
                                    }, {
                                        type: "Coins",
                                        want: 3,
                                        prize: {
                                            id: "ballSilver",
                                            count: 1
                                        }
                                    }, {
                                        type: "Swishes",
                                        want: 1,
                                        prize: {
                                            id: "ballGold",
                                            count: 1
                                        }
                                    }],
                                    [{
                                        type: "Powerup",
                                        want: 1,
                                        want2: "ballBronze",
                                        prize: {
                                            id: "drinkPoints",
                                            count: 3
                                        }
                                    }, {
                                        type: "RoundPoints",
                                        want: 1,
                                        want2: 10,
                                        prize: {
                                            id: "drinkRim",
                                            count: 1
                                        },
                                        expand: true
                                    }],
                                    [{
                                        type: "Powerup",
                                        want: 1,
                                        want2: "drinkPoints",
                                        prize: {
                                            id: "drinkRim",
                                            count: 3
                                        }
                                    }]
                                ],
                                GRIND: [
                                    [{
                                        type: "Points",
                                        want: 50
                                    }, {
                                        type: "Coins",
                                        want: 5
                                    }, {
                                        type: "Swishes",
                                        want: 10
                                    }, {
                                        type: "Points",
                                        want: 100
                                    }, {
                                        type: "Coins",
                                        want: 10
                                    }, {
                                        type: "Swishes",
                                        want: 20
                                    }, {
                                        type: "Points",
                                        want: 150
                                    }, {
                                        type: "Coins",
                                        want: 20
                                    }, {
                                        type: "Swishes",
                                        want: 50
                                    }, {
                                        type: "Points",
                                        want: 250
                                    }, {
                                        type: "Coins",
                                        want: 50
                                    }, {
                                        type: "Swishes",
                                        want: 100
                                    }, {
                                        type: "Points",
                                        want: 500
                                    }, {
                                        type: "Coins",
                                        want: 100
                                    }, {
                                        type: "Swishes",
                                        want: 150
                                    }, {
                                        type: "Points",
                                        want: 1000
                                    }, {
                                        type: "Coins",
                                        want: 250
                                    }, {
                                        type: "Swishes",
                                        want: 200
                                    }, {
                                        type: "Points",
                                        want: 1500
                                    }, {
                                        type: "Coins",
                                        want: 250
                                    }],
                                    [{
                                        type: "RoundPoints",
                                        want: 1,
                                        want2: 20
                                    }, {
                                        type: "RoundCoins",
                                        want: 1,
                                        want2: 5
                                    }, {
                                        type: "RoundPoints",
                                        want: 3,
                                        want2: 20
                                    }, {
                                        type: "RoundCoins",
                                        want: 3,
                                        want2: 5
                                    }, {
                                        type: "RoundSwishes",
                                        want: 3,
                                        want2: 5
                                    }, {
                                        type: "RoundPoints",
                                        want: 5,
                                        want2: 20
                                    }, {
                                        type: "RoundCoins",
                                        want: 5,
                                        want2: 5
                                    }, {
                                        type: "RoundPoints",
                                        want: 1,
                                        want2: 50
                                    }, {
                                        type: "RoundCoins",
                                        want: 5,
                                        want2: 10
                                    }, {
                                        type: "RoundPoints",
                                        want: 3,
                                        want2: 50
                                    }, {
                                        type: "RoundCoins",
                                        want: 3,
                                        want2: 20
                                    }, {
                                        type: "RoundCoins",
                                        want: 5,
                                        want2: 10
                                    }, {
                                        type: "RoundPoints",
                                        want: 5,
                                        want2: 50
                                    }, {
                                        type: "RoundCoins",
                                        want: 10,
                                        want2: 10
                                    }],
                                    [{
                                            type: "SwishesInRow",
                                            want: 3
                                        }, {
                                            type: "SwishWithPowerUp",
                                            want: 1,
                                            want2: "ballBronze"
                                        }, {
                                            type: "RoundSwishes",
                                            want: 1,
                                            want2: 3
                                        }, {
                                            type: "SwishWithPowerUp",
                                            want: 1,
                                            want2: "ballGold"
                                        }, {
                                            type: "SwishWithPowerUp",
                                            want: 1,
                                            want2: "ballSilver"
                                        }, {
                                            type: "SwishesInRow",
                                            want: 3
                                        }, {
                                            type: "RoundSwishes",
                                            want: 5,
                                            want2: 5
                                        }, {
                                            type: "SwishWithPowerUp",
                                            want: 3,
                                            want2: "ballBronze"
                                        }, {
                                            type: "SwishesInRow",
                                            want: 5
                                        }, {
                                            type: "RoundSwishes",
                                            want: 3,
                                            want2: 10
                                        }, {
                                            type: "SwishWithPowerUp",
                                            want: 3,
                                            want2: "ballSilver"
                                        }, {
                                            type: "SwishesInRow",
                                            want: 7,
                                            expiresAfter: 240
                                        }, {
                                            type: "RoundSwishes",
                                            want: 1,
                                            want2: 5
                                        }, {
                                            type: "SwishWithPowerUp",
                                            want: 3,
                                            want2: "ballGold"
                                        }, {
                                            type: "RoundSwishes",
                                            want: 5,
                                            want2: 10
                                        }, {
                                            type: "SwishesInRow",
                                            want: 10,
                                            expiresAfter: 240
                                        } // {type: "DaysPlayed", want: 3, prize: {count: 10}, expiresAfter: 60 * 24 * 3 + 60 * 4},
                                    ]
                                ],
                                DAILY: [{
                                    type: "RoundSwishes",
                                    want: 5,
                                    want2: 5,
                                    expiresAfter: 60 * 24
                                }, {
                                    type: "RoundCoins",
                                    want: 3,
                                    want2: 50,
                                    expiresAfter: 60 * 24
                                }, {
                                    type: "RoundPoints",
                                    want: 5,
                                    want2: 100,
                                    expiresAfter: 60 * 24
                                }, {
                                    type: "RoundPoints",
                                    want: 3,
                                    want2: 200,
                                    expiresAfter: 60 * 24
                                }],
                                generate: function generate() {
                                    var rand = GoalsModel.randomFrom; // just for short
                                    var tmpl = {};
                                    var rnd = Math.random();
                                    if (rnd > 0.2) {
                                        switch (rand([0, 1, 2])) {
                                            case 0:
                                                tmpl.type = rand(["Points", "Coins", "Swishes"]);
                                                tmpl.want = function() {
                                                    switch (tmpl.type) {
                                                        case "Points":
                                                            return rand([5, 10, 20, 50, 500, 1000, 1500]);
                                                        case "Coins":
                                                            return rand([50, 100, 150, 250, 100, 250]);
                                                        case "Swishes":
                                                            return rand([10, 20, 50, 100, 150, 200]);
                                                    }
                                                }();
                                                break;
                                            case 1:
                                                tmpl.type = rand(["RoundPoints", "RoundCoins", "RoundSwishes"]);
                                                tmpl.want = rand([1, 3, 5, 10]);
                                                tmpl.want2 = function() {
                                                    switch (tmpl.type) {
                                                        case "RoundPoints":
                                                            return rand([10, 20, 50]);
                                                        case "RoundCoins":
                                                            return rand([5, 10]);
                                                        case "RoundSwishes":
                                                            return rand([3, 5, 10]);
                                                    }
                                                }();
                                                break;
                                            case 2:
                                                tmpl.type = "SwishesInRow";
                                                tmpl.want = rand([3, 5, 10]);
                                                if (tmpl.want > 7) {
                                                    tmpl.expiresAfter = 2 * 60;
                                                }
                                                break;
                                            default:
                                                return;
                                        }
                                    } else {
                                        tmpl.type = rand(["PowerupBalancer", "GoldenBallBalancer", "SwishWithPowerUp"]);
                                        tmpl.want = rand([1, 3, 5, 10]);
                                    }
                                    return tmpl;
                                }
                            };
                            var c = [config.FTUE, config.GRIND];
                            for (var i = 0; i < c.length; i++) {
                                for (var j = 0; j < c[i].length; j++) {
                                    for (var k = 0; k < c[i][j].length; k++) {
                                        var g = c[i][j][k];
                                        g.id = "g" + i + "_" + j + "_" + k;
                                    }
                                }
                            }
                            return config;
                        }());
                    })();
                    (function() {
                        var stats = DI.get(DIKeys.goalsStats);
                        var powerUps = DI.get(DIKeys.powerUps); // used to retrieve localizations
                        Goal.Types.Coins = Goal.expand(function() {
                            Goal.call(this);
                            this.title = Host.Localize.Translate("Earn coins");
                            this.onUpdate = function() {
                                this.data.have += stats.coins;
                            };
                        });
                        Goal.Types.RoundCoins = Goal.expand(function() {
                            Goal.call(this);
                            this.onUpdate = function() {
                                if (this.data.want2) {
                                    if (stats.coins >= this.data.want2) {
                                        this.data.have++;
                                    }
                                } else {
                                    this.data.have = Math.max(this.data.have, stats.coins);
                                }
                            };
                            this.getTitle = function() {
                                if (this.data.want2) {
                                    return Host.Localize.Translate("Earn {want2} coins in a round", this.data);
                                }
                                return Host.Localize.Translate("Earn coins in one round");
                            };
                        });
                        Goal.Types.DaysPlayed = Goal.expand(function() {
                            Goal.call(this);
                            var DAY_IN_MS = 1000 * 60 * 60 * 24;
                            this.onUpdate = function() {
                                if (this.data.have >= this.data.want) { // temporary solution TODO: fix on the goal.js level
                                    return;
                                }
                                var now = Goal.helper.getMidnight();
                                var days = (now - XS.data.goals.lastUpdate) / DAY_IN_MS;
                                XS.data.goals.lastUpdate = now;
                                if (days !== 0) {
                                    if (days >= 2 || days < 1) {
                                        this.data.have = 1;
                                    } else {
                                        this.data.have++;
                                    }
                                }
                            };
                            this.getExpireDate = function() {
                                if (isNaN(this.data.created)) {
                                    this.data.created = Date.now();
                                }
                                if (this.data.expires) {
                                    return new Date(this.data.created + this.data.expires - this.data.created);
                                }
                                return null;
                            };
                            this.getTitle = function() {
                                return Host.Localize.Translate("Play {want} days in a row", this.data);
                            };
                        });
                        Goal.Types.DaysPlayed.prototype.isExpired = function() {
                            var isExpired = Goal.prototype.isExpired.call(this);
                            if (!isExpired) {
                                var expDate = this.getExpireDate();
                                if (expDate) {
                                    var now = new Date(Goal.helper.getMidnight());
                                    now.setDate(now.getDate() + (this.data.want - this.data.have));
                                    isExpired = expDate.getTime() - now.getTime() < 0; // mark it as expired if we don't have enough time to finish
                                } else { // FIXME: temporary solution
                                    log.warn("DaysPlayed without expire date marked as Expired");
                                    return true;
                                }
                            }
                            return isExpired;
                        };
                        Goal.Types.DaysPlayed.prototype.serialize = function() {
                            var superData = Goal.prototype.serialize.call(this);
                            superData.created = this.data.created || Date.now();
                            return superData;
                        };
                        Goal.Types.Points = Goal.expand(function() {
                            Goal.call(this);
                            this.title = Host.Localize.Translate("Score points");
                            this.onUpdate = function() {
                                this.data.have += stats.points;
                            };
                        });
                        Goal.Types.RoundPoints = Goal.expand(function() {
                            Goal.call(this);
                            this.onUpdate = function() {
                                if (this.data.want2) {
                                    if (stats.points >= this.data.want2) {
                                        this.data.have++;
                                    }
                                } else {
                                    this.data.have = Math.max(stats.points, this.data.have);
                                }
                            };
                            this.getTitle = function() {
                                if (this.data.want2) {
                                    return Host.Localize.Translate("Score {want2} points in round", this.data);
                                }
                                return Host.Localize.Translate("Score points in round");
                            };
                        });
                        Goal.Types.Powerup = Goal.expand(function() {
                            Goal.call(this);
                            this.onUpdate = function() {
                                var id = this.data.want2 || "any";
                                switch (id) {
                                    case "anyBall":
                                        for (var i = 0; i < GoalsModel.ALL_BALLS.length; i++) {
                                            this.data.have += stats.powerupUse[GoalsModel.ALL_BALLS[i]];
                                        }
                                        break;
                                    case "anyBottle":
                                        for (var i = 0; i < GoalsModel.ALL_BOTTLES.length; i++) {
                                            this.data.have += stats.powerupUse[GoalsModel.ALL_BOTTLES[i]];
                                        }
                                        break;
                                    case "any":
                                        this.data.have += stats.powerups;
                                        break;
                                    default:
                                        var wantTypeStat = stats.powerupUse[this.data.want2];
                                        if (wantTypeStat) {
                                            this.data.have += wantTypeStat;
                                        }
                                        break;
                                }
                            };
                            this.getTitle = function() {
                                var id = this.data.want2 || "any";
                                switch (id) {
                                    case "anyBall":
                                        return Host.Localize.Translate("Use any bonus ball", this.data);
                                    case "anyBottle":
                                        return Host.Localize.Translate("Use any powerup", this.data);
                                    case "any":
                                        return Host.Localize.Translate("Use any ball or powerup", this.data);
                                    default:
                                        var name = id;
                                        var powerUpInfo = powerUps[id];
                                        if (powerUpInfo) {
                                            name = powerUpInfo.name;
                                        }
                                        return Host.Localize.Translate("Use " + name, this.data);
                                }
                            };
                        });
                        Goal.Types.PowerupBalancer = Goal.Types.Powerup.expand(function() {
                            Goal.Types.Powerup.call(this);
                            this.onLoad = function() {
                                var obj = getMinMaxPowerUps(Object.keys(XS.data.powerUps), GoalsModel.ALL_BOTTLES);
                                if (obj) {
                                    if (isNaN(this.data.want)) {
                                        this.data.want = Math.max(1, Math.min(XS.data.powerUps[obj.minId], 1 + Math.floor(Math.random() * 5)));
                                    }
                                    this.data.want2 = obj.maxId;
                                    this.data.prize.id = obj.minId;
                                } else {
                                    this.data.want2 = "anyBottle";
                                    this.data.prize.id = GoalsModel.randomFrom(GoalsModel.ALL_BOTTLES);
                                }
                            };
                        });
                        Goal.Types.GoldenBallBalancer = Goal.Types.Powerup.expand(function() {
                            Goal.Types.Powerup.call(this);
                            this.onLoad = function() {
                                var obj = getMinMaxPowerUps(Object.keys(XS.data.powerUps), GoalsModel.ALL_BALLS);
                                if (obj) {
                                    if (isNaN(this.data.want)) {
                                        this.data.want = Math.max(1, Math.min(XS.data.powerUps[obj.minId], 1 + Math.floor(Math.random() * 3)));
                                    }
                                    this.data.want2 = obj.maxId;
                                    this.data.prize.id = obj.minId;
                                } else {
                                    this.data.want2 = "anyBall";
                                    this.data.prize.id = GoalsModel.randomFrom(GoalsModel.ALL_BALLS);
                                }
                            };
                        });

                        function getMinMaxPowerUps(keys, filtered) {
                            var min = Number.MAX_SAFE_INTEGER;
                            var max = 0;
                            var obj = {
                                minId: "",
                                maxId: ""
                            };
                            for (var i = 0; i < keys.length; i++) {
                                var pk = keys[i];
                                if (filtered && filtered.indexOf(pk) === -1) {
                                    continue;
                                }
                                var powerUpCount = XS.data.powerUps[pk];
                                if (max < powerUpCount) {
                                    max = powerUpCount;
                                    obj.maxId = pk;
                                }
                                if (min > powerUpCount) {
                                    min = powerUpCount;
                                    obj.minId = pk;
                                }
                            }
                            if (obj.maxId === obj.minId) {
                                return undefined;
                            }
                            return obj;
                        }
                        Goal.Types.Swishes = Goal.expand(function() {
                            Goal.call(this);
                            this.onLoad = function() {
                                var isPlural = this.data.want > 1;
                                this.title = Host.Localize.Translate(isPlural ? "Get swishes" : "Get swish");
                                this.hintText = Host.Localize.Translate("Score without hitting the rim");
                            };
                            this.onUpdate = function() {
                                this.data.have += stats.swishes;
                            };
                        });
                        Goal.Types.RoundSwishes = Goal.Types.Swishes.expand(function() {
                            Goal.Types.Swishes.call(this);
                            this.onLoad = function() {
                                this.title = this.data.want2 ? Host.Localize.Translate("Get {want2} swishes in a round", this.data) : Host.Localize.Translate("Get swishes in round");
                                this.hintText = Host.Localize.Translate("Score without hitting the rim");
                            };
                            this.onUpdate = function() {
                                if (this.data.want2) {
                                    if (stats.swishes >= this.data.want2) {
                                        this.data.have++;
                                    }
                                } else {
                                    this.data.have = Math.max(this.data.have, stats.swishes);
                                }
                            };
                        });
                        Goal.Types.SwishWithPowerUp = Goal.expand(function() {
                            Goal.call(this);
                            this.onLoad = function() {
                                if (!this.data.want2) {
                                    this.data.want2 = GoalsModel.randomFrom(GoalsModel.ALL_BALLS);
                                }
                                var powerUpInfo = powerUps[this.data.want2];
                                if (powerUpInfo) {
                                    this.hintText = Host.Localize.Translate("Score without hitting the rim using " + powerUpInfo.name);
                                }
                            };
                            this.onUpdate = function() {
                                this.data.have += stats.powerupSwishes[this.data.want2];
                            };
                            this.getTitle = function() {
                                var isPlural = this.data.want > 1;
                                switch (this.data.want2) {
                                    case "ballGold":
                                        return Host.Localize.Translate(isPlural ? "Get Gold swishes" : "Get Gold swish");
                                    case "ballSilver":
                                        return Host.Localize.Translate(isPlural ? "Get Silver swishes" : "Get Silver swish");
                                    case "ballBronze":
                                        return Host.Localize.Translate(isPlural ? "Get Bronze swishes" : "Get Bronze swish");
                                    default: // TODO: write individual descriptions
                                        return Host.Localize.Translate(isPlural ? "Get Power Up swishes" : "Get Power Up swish");
                                }
                            };
                        });
                        Goal.Types.SwishesInRow = Goal.expand(function() {
                            Goal.Types.Swishes.call(this);
                            this.onUpdate = function() {
                                this.data.have = Math.max(this.data.have, stats.swishesInaRowMax);
                            };
                            this.getTitle = function() {
                                return Host.Localize.Translate("Get swishes in a row");
                            };
                        });
                        Goal.Types.Throws = Goal.expand(function() {
                            Goal.call(this);
                            this.title = Host.Localize.Translate("Do throws");
                            this.onUpdate = function() {
                                this.data.have += stats.throws;
                            };
                        });
                        Goal.Types.ThrowsInRound = Goal.expand(function() {
                            Goal.Types.Points.call(this);
                            this.title = Host.Localize.Translate("Do throws in round");
                            this.onUpdate = function() {
                                this.data.have = Math.max(this.data.have, stats.throws);
                            };
                        });
                        Goal.Types.BeatFriend = Goal.expand(function() {
                            Goal.call(this);
                            var beatenPlayerId;

                            function onContextChange() {
                                beatenPlayerId = undefined;
                            }
                            this.title = Host.Localize.Translate("Beat friend score");
                            this.load = function() {
                                if (XS.is.facebookInstant) {
                                    if (window.Social.Instant.getBestWeekPlayer) {
                                        XS.on('FBContextChange', onContextChange);
                                        this.once(Goal.ON_COLLECTED, function() {
                                            XS.off('FBContextChange', onContextChange);
                                        });
                                        return Goal.prototype.load.call(this);
                                    }
                                }
                                return false;
                            };
                            this.onUpdate = function() {
                                var bestPlayer = window.Social.Instant.getBestWeekPlayer();
                                if (bestPlayer && bestPlayer.id !== beatenPlayerId) {
                                    if (stats.points > bestPlayer.value) {
                                        this.data.have++;
                                        beatenPlayerId = bestPlayer.id;
                                    }
                                }
                            };
                        });
                    })();
                    var goalsModel = DI.get(DIKeys.goalsModel);
                }
                Sidebar.popIcon();
            };

            /**
               @return {Array<string>} languages to experiment loading
            */
            function guessLanguages() { // JT@2021-12-23: I didn't really write this code.
                tag = function() {
                    var nav = window.navigator; // support for HTML 5.1 "navigator.languages"
                    if (Array.isArray(nav.languages)) {
                        for (i = 0; i < nav.languages.length; i++) {
                            language = nav.languages[i];
                            if (language && language.length) return language;
                        }
                    }
                    var props = ['language', 'browserLanguage', 'systemLanguage', 'userLanguage']; // support for other well known properties in browsers
                    for (i = 0; i < props.length; i++) {
                        language = nav[props[i]];
                        if (language && language.length) return language;
                    }
                    return "en";
                }();
                var re = /^(?:(en-GB-oed|i-ami|i-bnn|i-default|i-enochian|i-hak|i-klingon|i-lux|i-mingo|i-navajo|i-pwn|i-tao|i-tay|i-tsu|sgn-BE-FR|sgn-BE-NL|sgn-CH-DE)|(art-lojban|cel-gaulish|no-bok|no-nyn|zh-guoyu|zh-hakka|zh-min|zh-min-nan|zh-xiang))$|^((?:[a-z]{2,3}(?:(?:-[a-z]{3}){1,3})?)|[a-z]{4}|[a-z]{5,8})(?:-([a-z]{4}))?(?:-([a-z]{2}|\d{3}))?((?:-(?:[\da-z]{5,8}|\d[\da-z]{3}))*)?((?:-[\da-wy-z](?:-[\da-z]{2,8})+)*)?(-x(?:-[\da-z]{1,8})+)?$|^(x(?:-[\da-z]{1,8})+)$/i;
                var res = re.exec(tag);
                if (!res) return [];
                res.shift(); // langtag language
                var language = null;
                var t;
                if (res[2]) {
                    t = res[2].split('-');
                    language = t.shift();
                }
                var script = res[3];
                var region = res[4]; // This priority list was extracted from the defunct
                // inlined-bits/alc.js
                return [script && language + "-" + script, region && language + "-" + region, language, language === 'zh' && region && function() {
                    switch (region.toLowerCase()) {
                        case "tw":
                        case "hk":
                        case "mo":
                            return 'zh-Hant';
                        default:
                            return 'zh-Hans';
                    }
                }()].filter(Boolean);
            }
            /** Maybe add a language-loading Promise to
                            Host.bootstrapper.loadPromises. Does not return anything useful. */
            function scheduleALC() {
                var htmlLangTag = document.documentElement.getAttribute('data-frvr-alc');
                var langs = [window.__FRVR.cohort().preferredLanguage];
                if (htmlLangTag === 'alc') {
                    langs = [].concat(langs, guessLanguages());
                }
                langs = langs.filter(Boolean);
                if (langs.length) {
                    Host.bootstrapper.loadPromises.push(new Promise( /*#__PURE__*/ function() {
                        var _ref = _asyncToGenerator( /*#__PURE__*/ regeneratorRuntime.mark(function _callee(res, rej) {
                            var _iterator, _step, l, probe;
                            return regeneratorRuntime.wrap(function _callee$(_context) {
                                while (1) {
                                    switch (_context.prev = _context.next) {
                                        case 0:
                                            console.log("scheduleALC will try these in order", langs);
                                            _iterator = _createForOfIteratorHelperLoose(langs);
                                        case 2:
                                            if ((_step = _iterator()).done) {
                                                _context.next = 11;
                                                break;
                                            }
                                            l = _step.value;
                                            console.log("scheduleALC trying to load", l);
                                            _context.next = 7;
                                            return Host.Localize.Load(l);
                                        case 7:
                                            probe = _context.sent;
                                            if (probe) res();
                                        case 9:
                                            _context.next = 2;
                                            break;
                                        case 11:
                                        case "end":
                                            return _context.stop();
                                    }
                                }
                            }, _callee);
                        }));
                        return function(_x, _x2) {
                            return _ref.apply(this, arguments);
                        };
                    }()));
                } else console.log("schedulerALC won't load any languages");
            } // Local Variables:
            // indent-tabs-mode: nil
            // End:

            (function(scope) {
                function startLoad(skipScan) {
                    preload.skipScan = skipScan; //Preload language files
                    preload.apply(window, //Load all the modules first
                        XS.modulesToPreload.concat([function() {
                                XS.emit('modulesLoaded');
                            }, function() {
                                XS.loadAndOverlapGameConfig();
                            }, Host.bootstrapper.loadPromises, function() {
                                XS.initRenderer();
                                XS.loadConfig(Config.id);
                                XS.audio._init();
                                XS.data._init();
                            }, //Init game
                            game, //Post game load resize event
                            function() {
                                XS.initComplete = true; // JT@2021-10-24: original comment by Sven Neumann circa Jun 2019
                                //
                                //     "this emits the resize event that actually sizes up
                                //      the game"
                                //
                                // But the game is already "sized up" at this point. Meaning
                                // unclear.
                                //
                                // JC@2022-09-26
                                // This is needed for the atlas canvas to be resized, which it shouldn't be.
                                // And
                                // For the event 'resize' to be emited and picked up by the game, that can be bad design on the game source but we have to support it now.
                                XS.emit('force-resize', {
                                    forced: true,
                                    load: true
                                });
                                XS.emit('gameLoaded');
                                window.Social && window.Social();
                            }, //Clean up
                            function() { //iOS delay to ensure context size is known before we show the ad.
                                //DO NOT USE XS.setTimeout as this should not be breakable!
                                setTimeout(function() {
                                    Host.ShowGame && Host.ShowGame();
                                    htmlclean();
                                }, XS.is.iOS ? 300 : 1);
                            }
                        ]))(function(total, left) {
                        htmlprogress(total, total - left);
                    }); // This runs first, and sets up the basic width/height stuff
                    XS.emit('force-resize', {
                        forced: true
                    });
                }

                function reallyStart(skipLegacyScan) {
                    XS.emit('startLoading'); //DO NOT USE XS.setTimeout as this should not be breakable!
                    setTimeout(function() {
                        startLoad(skipLegacyScan);
                    }, 1);
                }

                function setup(immediate) {
                    if (immediate) {
                        console.log("FRVRPreloader::setup(): Starting FSX-style build immediately");
                        Host.bootstrapper.start = function() {
                            console.error('FRVRPreloader::reallyStart() already called!');
                        };
                        scheduleALC();
                        reallyStart(true);
                    } else {
                        console.log("FRVRPreloader::setup(): Setting up FSX-style Host.bootstrapper.start");
                        Host.bootstrapper.start = function() {
                            scheduleALC();
                            reallyStart(true);
                        };
                    }
                }
                if (Host.IOS && Host.IOS.GetUserID) {
                    Host.IOS.GetUserID(function(userID) {
                        Host.IOS.userId = userID;
                        Host.userId = userID;
                        if (Host.IOS && Host.IOS.GetIDFA) {
                            Host.IOS.GetIDFA(function(idfa) {
                                Host.idfa = idfa;
                                setup(true);
                            });
                        } else {
                            setup(true);
                        }
                    });
                } else if (Host.Android && Host.Android.GetUserID) { //TODO need to be implemented on the Android side
                    Host.Android.GetUserID(function(userID) {
                        Host.Android.userId = userID;
                        Host.userId = userID;
                        setup(true);
                    });
                } else {
                    setup();
                }
            })();

            Config.template = "youtube";
            Config.build = "240219630";
            Config.version = "2.11.8";
            Config.buildSystem = 'fsx build';
            if (!/[?&]noboot/.test(location.search)) {
                Host.bootstrapper.start();
            } else console.log('"noboot" query param detected.  Use Host.bootstrapper.start() to boot');

        }
    };
});
